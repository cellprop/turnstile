
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021a8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080022b4  080022b4  000032b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002320  08002320  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  08002320  08002320  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002320  08002320  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002320  08002320  00003320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002324  08002324  00003324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002328  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  08002384  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08002384  00004264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000691a  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015b3  00000000  00000000  0000a99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  0000bf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004c1  00000000  00000000  0000c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164ae  00000000  00000000  0000ca69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000081c9  00000000  00000000  00022f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080489  00000000  00000000  0002b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cc0  00000000  00000000  000ab5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ad26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800229c 	.word	0x0800229c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800229c 	.word	0x0800229c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b2d      	ldr	r3, [pc, #180]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2c      	ldr	r2, [pc, #176]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2a      	ldr	r3, [pc, #168]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b27      	ldr	r3, [pc, #156]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a26      	ldr	r2, [pc, #152]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b24      	ldr	r3, [pc, #144]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b21      	ldr	r3, [pc, #132]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a20      	ldr	r2, [pc, #128]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1e      	ldr	r3, [pc, #120]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b18      	ldr	r3, [pc, #96]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2120      	movs	r1, #32
 80001c4:	4815      	ldr	r0, [pc, #84]	@ (800021c <MX_GPIO_Init+0xd0>)
 80001c6:	f000 fd4b 	bl	8000c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d0:	4b13      	ldr	r3, [pc, #76]	@ (8000220 <MX_GPIO_Init+0xd4>)
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	4811      	ldr	r0, [pc, #68]	@ (8000224 <MX_GPIO_Init+0xd8>)
 80001e0:	f000 fbba 	bl	8000958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80001e4:	2320      	movs	r3, #32
 80001e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4808      	ldr	r0, [pc, #32]	@ (800021c <MX_GPIO_Init+0xd0>)
 80001fc:	f000 fbac 	bl	8000958 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	2100      	movs	r1, #0
 8000204:	2028      	movs	r0, #40	@ 0x28
 8000206:	f000 fb70 	bl	80008ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800020a:	2028      	movs	r0, #40	@ 0x28
 800020c:	f000 fb89 	bl	8000922 <HAL_NVIC_EnableIRQ>

}
 8000210:	bf00      	nop
 8000212:	3720      	adds	r7, #32
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40010800 	.word	0x40010800
 8000220:	10110000 	.word	0x10110000
 8000224:	40011000 	.word	0x40011000

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022c:	f000 fa00 	bl	8000630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000230:	f000 f820 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000234:	f7ff ff8a 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000238:	f000 f906 	bl	8000448 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800023c:	f000 f92e 	bl	800049c <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      sprintf(myvalue,"%s","star");
 8000240:	4a08      	ldr	r2, [pc, #32]	@ (8000264 <main+0x3c>)
 8000242:	4909      	ldr	r1, [pc, #36]	@ (8000268 <main+0x40>)
 8000244:	4809      	ldr	r0, [pc, #36]	@ (800026c <main+0x44>)
 8000246:	f001 fb79 	bl	800193c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)myvalue, 10, 1000);
 800024a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800024e:	220a      	movs	r2, #10
 8000250:	4906      	ldr	r1, [pc, #24]	@ (800026c <main+0x44>)
 8000252:	4807      	ldr	r0, [pc, #28]	@ (8000270 <main+0x48>)
 8000254:	f001 f99e 	bl	8001594 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000258:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800025c:	f000 fa4a 	bl	80006f4 <HAL_Delay>
  {
 8000260:	bf00      	nop
 8000262:	e7ed      	b.n	8000240 <main+0x18>
 8000264:	080022b4 	.word	0x080022b4
 8000268:	080022bc 	.word	0x080022bc
 800026c:	20000078 	.word	0x20000078
 8000270:	20000088 	.word	0x20000088

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b090      	sub	sp, #64	@ 0x40
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	2228      	movs	r2, #40	@ 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f001 fb7a 	bl	800197c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000296:	2302      	movs	r3, #2
 8000298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029e:	2310      	movs	r3, #16
 80002a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	2302      	movs	r3, #2
 80002a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002a6:	2300      	movs	r3, #0
 80002a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002aa:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80002ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0318 	add.w	r3, r7, #24
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fd0d 	bl	8000cd4 <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002c0:	f000 f819 	bl	80002f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2302      	movs	r3, #2
 80002ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2102      	movs	r1, #2
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 ff7a 	bl	80011d8 <HAL_RCC_ClockConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ea:	f000 f804 	bl	80002f6 <Error_Handler>
  }
}
 80002ee:	bf00      	nop
 80002f0:	3740      	adds	r7, #64	@ 0x40
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002fa:	b672      	cpsid	i
}
 80002fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002fe:	bf00      	nop
 8000300:	e7fd      	b.n	80002fe <Error_Handler+0x8>
	...

08000304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800030a:	4b15      	ldr	r3, [pc, #84]	@ (8000360 <HAL_MspInit+0x5c>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	4a14      	ldr	r2, [pc, #80]	@ (8000360 <HAL_MspInit+0x5c>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6193      	str	r3, [r2, #24]
 8000316:	4b12      	ldr	r3, [pc, #72]	@ (8000360 <HAL_MspInit+0x5c>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	60bb      	str	r3, [r7, #8]
 8000320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000322:	4b0f      	ldr	r3, [pc, #60]	@ (8000360 <HAL_MspInit+0x5c>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	4a0e      	ldr	r2, [pc, #56]	@ (8000360 <HAL_MspInit+0x5c>)
 8000328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800032c:	61d3      	str	r3, [r2, #28]
 800032e:	4b0c      	ldr	r3, [pc, #48]	@ (8000360 <HAL_MspInit+0x5c>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800033a:	4b0a      	ldr	r3, [pc, #40]	@ (8000364 <HAL_MspInit+0x60>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	4a04      	ldr	r2, [pc, #16]	@ (8000364 <HAL_MspInit+0x60>)
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000356:	bf00      	nop
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000
 8000364:	40010000 	.word	0x40010000

08000368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <NMI_Handler+0x4>

08000370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <HardFault_Handler+0x4>

08000378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <MemManage_Handler+0x4>

08000380 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <BusFault_Handler+0x4>

08000388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800038c:	bf00      	nop
 800038e:	e7fd      	b.n	800038c <UsageFault_Handler+0x4>

08000390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b8:	f000 f980 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}

080003c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80003c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80003c8:	f000 fc62 	bl	8000c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003d8:	4a14      	ldr	r2, [pc, #80]	@ (800042c <_sbrk+0x5c>)
 80003da:	4b15      	ldr	r3, [pc, #84]	@ (8000430 <_sbrk+0x60>)
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <_sbrk+0x64>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d102      	bne.n	80003f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003ec:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <_sbrk+0x64>)
 80003ee:	4a12      	ldr	r2, [pc, #72]	@ (8000438 <_sbrk+0x68>)
 80003f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003f2:	4b10      	ldr	r3, [pc, #64]	@ (8000434 <_sbrk+0x64>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4413      	add	r3, r2
 80003fa:	693a      	ldr	r2, [r7, #16]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d207      	bcs.n	8000410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000400:	f001 fac4 	bl	800198c <__errno>
 8000404:	4603      	mov	r3, r0
 8000406:	220c      	movs	r2, #12
 8000408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800040a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800040e:	e009      	b.n	8000424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000410:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <_sbrk+0x64>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000416:	4b07      	ldr	r3, [pc, #28]	@ (8000434 <_sbrk+0x64>)
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	4a05      	ldr	r2, [pc, #20]	@ (8000434 <_sbrk+0x64>)
 8000420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000422:	68fb      	ldr	r3, [r7, #12]
}
 8000424:	4618      	mov	r0, r3
 8000426:	3718      	adds	r7, #24
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20005000 	.word	0x20005000
 8000430:	00000400 	.word	0x00000400
 8000434:	20000084 	.word	0x20000084
 8000438:	20000268 	.word	0x20000268

0800043c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr

08000448 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800044c:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 800044e:	4a12      	ldr	r2, [pc, #72]	@ (8000498 <MX_USART2_UART_Init+0x50>)
 8000450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000452:	4b10      	ldr	r3, [pc, #64]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 8000454:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800045a:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000460:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 8000462:	2200      	movs	r2, #0
 8000464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000466:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800046c:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 800046e:	220c      	movs	r2, #12
 8000470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000472:	4b08      	ldr	r3, [pc, #32]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 8000474:	2200      	movs	r2, #0
 8000476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000478:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 800047a:	2200      	movs	r2, #0
 800047c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800047e:	4805      	ldr	r0, [pc, #20]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 8000480:	f001 f838 	bl	80014f4 <HAL_UART_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800048a:	f7ff ff34 	bl	80002f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000088 	.word	0x20000088
 8000498:	40004400 	.word	0x40004400

0800049c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004a0:	4b11      	ldr	r3, [pc, #68]	@ (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004a2:	4a12      	ldr	r2, [pc, #72]	@ (80004ec <MX_USART3_UART_Init+0x50>)
 80004a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80004a6:	4b10      	ldr	r3, [pc, #64]	@ (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80004ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	@ (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	@ (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004c0:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004c2:	220c      	movs	r2, #12
 80004c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c6:	4b08      	ldr	r3, [pc, #32]	@ (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004d2:	4805      	ldr	r0, [pc, #20]	@ (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004d4:	f001 f80e 	bl	80014f4 <HAL_UART_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004de:	f7ff ff0a 	bl	80002f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	200000d0 	.word	0x200000d0
 80004ec:	40004800 	.word	0x40004800

080004f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	@ 0x28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f8:	f107 0318 	add.w	r3, r7, #24
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a31      	ldr	r2, [pc, #196]	@ (80005d0 <HAL_UART_MspInit+0xe0>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d124      	bne.n	800055a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000510:	4b30      	ldr	r3, [pc, #192]	@ (80005d4 <HAL_UART_MspInit+0xe4>)
 8000512:	69db      	ldr	r3, [r3, #28]
 8000514:	4a2f      	ldr	r2, [pc, #188]	@ (80005d4 <HAL_UART_MspInit+0xe4>)
 8000516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800051a:	61d3      	str	r3, [r2, #28]
 800051c:	4b2d      	ldr	r3, [pc, #180]	@ (80005d4 <HAL_UART_MspInit+0xe4>)
 800051e:	69db      	ldr	r3, [r3, #28]
 8000520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b2a      	ldr	r3, [pc, #168]	@ (80005d4 <HAL_UART_MspInit+0xe4>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a29      	ldr	r2, [pc, #164]	@ (80005d4 <HAL_UART_MspInit+0xe4>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b27      	ldr	r3, [pc, #156]	@ (80005d4 <HAL_UART_MspInit+0xe4>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0304 	and.w	r3, r3, #4
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000540:	230c      	movs	r3, #12
 8000542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000544:	2302      	movs	r3, #2
 8000546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2302      	movs	r3, #2
 800054a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 0318 	add.w	r3, r7, #24
 8000550:	4619      	mov	r1, r3
 8000552:	4821      	ldr	r0, [pc, #132]	@ (80005d8 <HAL_UART_MspInit+0xe8>)
 8000554:	f000 fa00 	bl	8000958 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000558:	e036      	b.n	80005c8 <HAL_UART_MspInit+0xd8>
  else if(uartHandle->Instance==USART3)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a1f      	ldr	r2, [pc, #124]	@ (80005dc <HAL_UART_MspInit+0xec>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d131      	bne.n	80005c8 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000564:	4b1b      	ldr	r3, [pc, #108]	@ (80005d4 <HAL_UART_MspInit+0xe4>)
 8000566:	69db      	ldr	r3, [r3, #28]
 8000568:	4a1a      	ldr	r2, [pc, #104]	@ (80005d4 <HAL_UART_MspInit+0xe4>)
 800056a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800056e:	61d3      	str	r3, [r2, #28]
 8000570:	4b18      	ldr	r3, [pc, #96]	@ (80005d4 <HAL_UART_MspInit+0xe4>)
 8000572:	69db      	ldr	r3, [r3, #28]
 8000574:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057c:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <HAL_UART_MspInit+0xe4>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a14      	ldr	r2, [pc, #80]	@ (80005d4 <HAL_UART_MspInit+0xe4>)
 8000582:	f043 0308 	orr.w	r3, r3, #8
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <HAL_UART_MspInit+0xe4>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0308 	and.w	r3, r3, #8
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000594:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059a:	2302      	movs	r3, #2
 800059c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059e:	2303      	movs	r3, #3
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a2:	f107 0318 	add.w	r3, r7, #24
 80005a6:	4619      	mov	r1, r3
 80005a8:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <HAL_UART_MspInit+0xf0>)
 80005aa:	f000 f9d5 	bl	8000958 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 0318 	add.w	r3, r7, #24
 80005c0:	4619      	mov	r1, r3
 80005c2:	4807      	ldr	r0, [pc, #28]	@ (80005e0 <HAL_UART_MspInit+0xf0>)
 80005c4:	f000 f9c8 	bl	8000958 <HAL_GPIO_Init>
}
 80005c8:	bf00      	nop
 80005ca:	3728      	adds	r7, #40	@ 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40004400 	.word	0x40004400
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010800 	.word	0x40010800
 80005dc:	40004800 	.word	0x40004800
 80005e0:	40010c00 	.word	0x40010c00

080005e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e4:	f7ff ff2a 	bl	800043c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480b      	ldr	r0, [pc, #44]	@ (8000618 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ea:	490c      	ldr	r1, [pc, #48]	@ (800061c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a09      	ldr	r2, [pc, #36]	@ (8000624 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000600:	4c09      	ldr	r4, [pc, #36]	@ (8000628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800060e:	f001 f9c3 	bl	8001998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000612:	f7ff fe09 	bl	8000228 <main>
  bx lr
 8000616:	4770      	bx	lr
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000620:	08002328 	.word	0x08002328
  ldr r2, =_sbss
 8000624:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000628:	20000264 	.word	0x20000264

0800062c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC1_2_IRQHandler>
	...

08000630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <HAL_Init+0x28>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a07      	ldr	r2, [pc, #28]	@ (8000658 <HAL_Init+0x28>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000640:	2003      	movs	r0, #3
 8000642:	f000 f947 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000646:	2000      	movs	r0, #0
 8000648:	f000 f808 	bl	800065c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800064c:	f7ff fe5a 	bl	8000304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40022000 	.word	0x40022000

0800065c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <HAL_InitTick+0x54>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <HAL_InitTick+0x58>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000672:	fbb3 f3f1 	udiv	r3, r3, r1
 8000676:	fbb2 f3f3 	udiv	r3, r2, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f95f 	bl	800093e <HAL_SYSTICK_Config>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e00e      	b.n	80006a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d80a      	bhi.n	80006a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000698:	f000 f927 	bl	80008ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800069c:	4a06      	ldr	r2, [pc, #24]	@ (80006b8 <HAL_InitTick+0x5c>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006a2:	2300      	movs	r3, #0
 80006a4:	e000      	b.n	80006a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000000 	.word	0x20000000
 80006b4:	20000008 	.word	0x20000008
 80006b8:	20000004 	.word	0x20000004

080006bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <HAL_IncTick+0x1c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <HAL_IncTick+0x20>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	4a03      	ldr	r2, [pc, #12]	@ (80006dc <HAL_IncTick+0x20>)
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	20000008 	.word	0x20000008
 80006dc:	20000118 	.word	0x20000118

080006e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return uwTick;
 80006e4:	4b02      	ldr	r3, [pc, #8]	@ (80006f0 <HAL_GetTick+0x10>)
 80006e6:	681b      	ldr	r3, [r3, #0]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	20000118 	.word	0x20000118

080006f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006fc:	f7ff fff0 	bl	80006e0 <HAL_GetTick>
 8000700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800070c:	d005      	beq.n	800071a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <HAL_Delay+0x44>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071a:	bf00      	nop
 800071c:	f7ff ffe0 	bl	80006e0 <HAL_GetTick>
 8000720:	4602      	mov	r2, r0
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8f7      	bhi.n	800071c <HAL_Delay+0x28>
  {
  }
}
 800072c:	bf00      	nop
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000008 	.word	0x20000008

0800073c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000758:	4013      	ands	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800076c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076e:	4a04      	ldr	r2, [pc, #16]	@ (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	60d3      	str	r3, [r2, #12]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000788:	4b04      	ldr	r3, [pc, #16]	@ (800079c <__NVIC_GetPriorityGrouping+0x18>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	f003 0307 	and.w	r3, r3, #7
}
 8000792:	4618      	mov	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	db0b      	blt.n	80007ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	f003 021f 	and.w	r2, r3, #31
 80007b8:	4906      	ldr	r1, [pc, #24]	@ (80007d4 <__NVIC_EnableIRQ+0x34>)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	095b      	lsrs	r3, r3, #5
 80007c0:	2001      	movs	r0, #1
 80007c2:	fa00 f202 	lsl.w	r2, r0, r2
 80007c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db0a      	blt.n	8000802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	490c      	ldr	r1, [pc, #48]	@ (8000824 <__NVIC_SetPriority+0x4c>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	440b      	add	r3, r1
 80007fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000800:	e00a      	b.n	8000818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4908      	ldr	r1, [pc, #32]	@ (8000828 <__NVIC_SetPriority+0x50>)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	3b04      	subs	r3, #4
 8000810:	0112      	lsls	r2, r2, #4
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	440b      	add	r3, r1
 8000816:	761a      	strb	r2, [r3, #24]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	@ 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf28      	it	cs
 800084a:	2304      	movcs	r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3304      	adds	r3, #4
 8000852:	2b06      	cmp	r3, #6
 8000854:	d902      	bls.n	800085c <NVIC_EncodePriority+0x30>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3b03      	subs	r3, #3
 800085a:	e000      	b.n	800085e <NVIC_EncodePriority+0x32>
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43da      	mvns	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	401a      	ands	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000874:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	43d9      	mvns	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	4313      	orrs	r3, r2
         );
}
 8000886:	4618      	mov	r0, r3
 8000888:	3724      	adds	r7, #36	@ 0x24
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008a0:	d301      	bcc.n	80008a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00f      	b.n	80008c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <SysTick_Config+0x40>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ae:	210f      	movs	r1, #15
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008b4:	f7ff ff90 	bl	80007d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	4b05      	ldr	r3, [pc, #20]	@ (80008d0 <SysTick_Config+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008be:	4b04      	ldr	r3, [pc, #16]	@ (80008d0 <SysTick_Config+0x40>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff2d 	bl	800073c <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff42 	bl	8000784 <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ff90 	bl	800082c <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff5f 	bl	80007d8 <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff35 	bl	80007a0 <__NVIC_EnableIRQ>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffa2 	bl	8000890 <SysTick_Config>
 800094c:	4603      	mov	r3, r0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000958:	b480      	push	{r7}
 800095a:	b08b      	sub	sp, #44	@ 0x2c
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096a:	e169      	b.n	8000c40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800096c:	2201      	movs	r2, #1
 800096e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	4013      	ands	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	429a      	cmp	r2, r3
 8000986:	f040 8158 	bne.w	8000c3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	4a9a      	ldr	r2, [pc, #616]	@ (8000bf8 <HAL_GPIO_Init+0x2a0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d05e      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 8000994:	4a98      	ldr	r2, [pc, #608]	@ (8000bf8 <HAL_GPIO_Init+0x2a0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d875      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 800099a:	4a98      	ldr	r2, [pc, #608]	@ (8000bfc <HAL_GPIO_Init+0x2a4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d058      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009a0:	4a96      	ldr	r2, [pc, #600]	@ (8000bfc <HAL_GPIO_Init+0x2a4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d86f      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009a6:	4a96      	ldr	r2, [pc, #600]	@ (8000c00 <HAL_GPIO_Init+0x2a8>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d052      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009ac:	4a94      	ldr	r2, [pc, #592]	@ (8000c00 <HAL_GPIO_Init+0x2a8>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d869      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009b2:	4a94      	ldr	r2, [pc, #592]	@ (8000c04 <HAL_GPIO_Init+0x2ac>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d04c      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009b8:	4a92      	ldr	r2, [pc, #584]	@ (8000c04 <HAL_GPIO_Init+0x2ac>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d863      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009be:	4a92      	ldr	r2, [pc, #584]	@ (8000c08 <HAL_GPIO_Init+0x2b0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d046      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009c4:	4a90      	ldr	r2, [pc, #576]	@ (8000c08 <HAL_GPIO_Init+0x2b0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d85d      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d82a      	bhi.n	8000a24 <HAL_GPIO_Init+0xcc>
 80009ce:	2b12      	cmp	r3, #18
 80009d0:	d859      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009d2:	a201      	add	r2, pc, #4	@ (adr r2, 80009d8 <HAL_GPIO_Init+0x80>)
 80009d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d8:	08000a53 	.word	0x08000a53
 80009dc:	08000a2d 	.word	0x08000a2d
 80009e0:	08000a3f 	.word	0x08000a3f
 80009e4:	08000a81 	.word	0x08000a81
 80009e8:	08000a87 	.word	0x08000a87
 80009ec:	08000a87 	.word	0x08000a87
 80009f0:	08000a87 	.word	0x08000a87
 80009f4:	08000a87 	.word	0x08000a87
 80009f8:	08000a87 	.word	0x08000a87
 80009fc:	08000a87 	.word	0x08000a87
 8000a00:	08000a87 	.word	0x08000a87
 8000a04:	08000a87 	.word	0x08000a87
 8000a08:	08000a87 	.word	0x08000a87
 8000a0c:	08000a87 	.word	0x08000a87
 8000a10:	08000a87 	.word	0x08000a87
 8000a14:	08000a87 	.word	0x08000a87
 8000a18:	08000a87 	.word	0x08000a87
 8000a1c:	08000a35 	.word	0x08000a35
 8000a20:	08000a49 	.word	0x08000a49
 8000a24:	4a79      	ldr	r2, [pc, #484]	@ (8000c0c <HAL_GPIO_Init+0x2b4>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d013      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a2a:	e02c      	b.n	8000a86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	623b      	str	r3, [r7, #32]
          break;
 8000a32:	e029      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	623b      	str	r3, [r7, #32]
          break;
 8000a3c:	e024      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	3308      	adds	r3, #8
 8000a44:	623b      	str	r3, [r7, #32]
          break;
 8000a46:	e01f      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	330c      	adds	r3, #12
 8000a4e:	623b      	str	r3, [r7, #32]
          break;
 8000a50:	e01a      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d102      	bne.n	8000a60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	623b      	str	r3, [r7, #32]
          break;
 8000a5e:	e013      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d105      	bne.n	8000a74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	69fa      	ldr	r2, [r7, #28]
 8000a70:	611a      	str	r2, [r3, #16]
          break;
 8000a72:	e009      	b.n	8000a88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a74:	2308      	movs	r3, #8
 8000a76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	69fa      	ldr	r2, [r7, #28]
 8000a7c:	615a      	str	r2, [r3, #20]
          break;
 8000a7e:	e003      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
          break;
 8000a84:	e000      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          break;
 8000a86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	2bff      	cmp	r3, #255	@ 0xff
 8000a8c:	d801      	bhi.n	8000a92 <HAL_GPIO_Init+0x13a>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	e001      	b.n	8000a96 <HAL_GPIO_Init+0x13e>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3304      	adds	r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	2bff      	cmp	r3, #255	@ 0xff
 8000a9c:	d802      	bhi.n	8000aa4 <HAL_GPIO_Init+0x14c>
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	e002      	b.n	8000aaa <HAL_GPIO_Init+0x152>
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	3b08      	subs	r3, #8
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	401a      	ands	r2, r3
 8000abc:	6a39      	ldr	r1, [r7, #32]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 80b1 	beq.w	8000c3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad8:	4b4d      	ldr	r3, [pc, #308]	@ (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a4c      	ldr	r2, [pc, #304]	@ (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000af0:	4a48      	ldr	r2, [pc, #288]	@ (8000c14 <HAL_GPIO_Init+0x2bc>)
 8000af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3302      	adds	r3, #2
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	220f      	movs	r2, #15
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a40      	ldr	r2, [pc, #256]	@ (8000c18 <HAL_GPIO_Init+0x2c0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d013      	beq.n	8000b44 <HAL_GPIO_Init+0x1ec>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8000c1c <HAL_GPIO_Init+0x2c4>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d00d      	beq.n	8000b40 <HAL_GPIO_Init+0x1e8>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a3e      	ldr	r2, [pc, #248]	@ (8000c20 <HAL_GPIO_Init+0x2c8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d007      	beq.n	8000b3c <HAL_GPIO_Init+0x1e4>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c24 <HAL_GPIO_Init+0x2cc>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d101      	bne.n	8000b38 <HAL_GPIO_Init+0x1e0>
 8000b34:	2303      	movs	r3, #3
 8000b36:	e006      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b38:	2304      	movs	r3, #4
 8000b3a:	e004      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	e002      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b44:	2300      	movs	r3, #0
 8000b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b48:	f002 0203 	and.w	r2, r2, #3
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	4093      	lsls	r3, r2
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b56:	492f      	ldr	r1, [pc, #188]	@ (8000c14 <HAL_GPIO_Init+0x2bc>)
 8000b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b70:	4b2d      	ldr	r3, [pc, #180]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	492c      	ldr	r1, [pc, #176]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	608b      	str	r3, [r1, #8]
 8000b7c:	e006      	b.n	8000b8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4928      	ldr	r1, [pc, #160]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b98:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	4922      	ldr	r1, [pc, #136]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	60cb      	str	r3, [r1, #12]
 8000ba4:	e006      	b.n	8000bb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ba6:	4b20      	ldr	r3, [pc, #128]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	491e      	ldr	r1, [pc, #120]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d006      	beq.n	8000bce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bc0:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	4918      	ldr	r1, [pc, #96]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	604b      	str	r3, [r1, #4]
 8000bcc:	e006      	b.n	8000bdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	4914      	ldr	r1, [pc, #80]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d021      	beq.n	8000c2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	490e      	ldr	r1, [pc, #56]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	600b      	str	r3, [r1, #0]
 8000bf4:	e021      	b.n	8000c3a <HAL_GPIO_Init+0x2e2>
 8000bf6:	bf00      	nop
 8000bf8:	10320000 	.word	0x10320000
 8000bfc:	10310000 	.word	0x10310000
 8000c00:	10220000 	.word	0x10220000
 8000c04:	10210000 	.word	0x10210000
 8000c08:	10120000 	.word	0x10120000
 8000c0c:	10110000 	.word	0x10110000
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010000 	.word	0x40010000
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	40011000 	.word	0x40011000
 8000c24:	40011400 	.word	0x40011400
 8000c28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <HAL_GPIO_Init+0x304>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	4909      	ldr	r1, [pc, #36]	@ (8000c5c <HAL_GPIO_Init+0x304>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f47f ae8e 	bne.w	800096c <HAL_GPIO_Init+0x14>
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	372c      	adds	r7, #44	@ 0x2c
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40010400 	.word	0x40010400

08000c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c70:	787b      	ldrb	r3, [r7, #1]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c7c:	e003      	b.n	8000c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	041a      	lsls	r2, r3, #16
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	611a      	str	r2, [r3, #16]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c9c:	695a      	ldr	r2, [r3, #20]
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d006      	beq.n	8000cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f806 	bl	8000cc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e272      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 8087 	beq.w	8000e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf4:	4b92      	ldr	r3, [pc, #584]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 030c 	and.w	r3, r3, #12
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d00c      	beq.n	8000d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d00:	4b8f      	ldr	r3, [pc, #572]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	d112      	bne.n	8000d32 <HAL_RCC_OscConfig+0x5e>
 8000d0c:	4b8c      	ldr	r3, [pc, #560]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d18:	d10b      	bne.n	8000d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1a:	4b89      	ldr	r3, [pc, #548]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d06c      	beq.n	8000e00 <HAL_RCC_OscConfig+0x12c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d168      	bne.n	8000e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e24c      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d3a:	d106      	bne.n	8000d4a <HAL_RCC_OscConfig+0x76>
 8000d3c:	4b80      	ldr	r3, [pc, #512]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a7f      	ldr	r2, [pc, #508]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	e02e      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10c      	bne.n	8000d6c <HAL_RCC_OscConfig+0x98>
 8000d52:	4b7b      	ldr	r3, [pc, #492]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a7a      	ldr	r2, [pc, #488]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	4b78      	ldr	r3, [pc, #480]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a77      	ldr	r2, [pc, #476]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e01d      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d74:	d10c      	bne.n	8000d90 <HAL_RCC_OscConfig+0xbc>
 8000d76:	4b72      	ldr	r3, [pc, #456]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a71      	ldr	r2, [pc, #452]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	4b6f      	ldr	r3, [pc, #444]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a6e      	ldr	r2, [pc, #440]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e00b      	b.n	8000da8 <HAL_RCC_OscConfig+0xd4>
 8000d90:	4b6b      	ldr	r3, [pc, #428]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a6a      	ldr	r2, [pc, #424]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b68      	ldr	r3, [pc, #416]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a67      	ldr	r2, [pc, #412]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d013      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fc96 	bl	80006e0 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db8:	f7ff fc92 	bl	80006e0 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b64      	cmp	r3, #100	@ 0x64
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e200      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dca:	4b5d      	ldr	r3, [pc, #372]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0xe4>
 8000dd6:	e014      	b.n	8000e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fc82 	bl	80006e0 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de0:	f7ff fc7e 	bl	80006e0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b64      	cmp	r3, #100	@ 0x64
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e1ec      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df2:	4b53      	ldr	r3, [pc, #332]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f0      	bne.n	8000de0 <HAL_RCC_OscConfig+0x10c>
 8000dfe:	e000      	b.n	8000e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d063      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00b      	beq.n	8000e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e1a:	4b49      	ldr	r3, [pc, #292]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d11c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x18c>
 8000e26:	4b46      	ldr	r3, [pc, #280]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d116      	bne.n	8000e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e32:	4b43      	ldr	r3, [pc, #268]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d005      	beq.n	8000e4a <HAL_RCC_OscConfig+0x176>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d001      	beq.n	8000e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e1c0      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	4939      	ldr	r1, [pc, #228]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5e:	e03a      	b.n	8000ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d020      	beq.n	8000eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e68:	4b36      	ldr	r3, [pc, #216]	@ (8000f44 <HAL_RCC_OscConfig+0x270>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6e:	f7ff fc37 	bl	80006e0 <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e76:	f7ff fc33 	bl	80006e0 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e1a1      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e88:	4b2d      	ldr	r3, [pc, #180]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f0      	beq.n	8000e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e94:	4b2a      	ldr	r3, [pc, #168]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4927      	ldr	r1, [pc, #156]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	600b      	str	r3, [r1, #0]
 8000ea8:	e015      	b.n	8000ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eaa:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <HAL_RCC_OscConfig+0x270>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fc16 	bl	80006e0 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fc12 	bl	80006e0 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e180      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eca:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f0      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d03a      	beq.n	8000f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d019      	beq.n	8000f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eea:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <HAL_RCC_OscConfig+0x274>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fbf6 	bl	80006e0 <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fbf2 	bl	80006e0 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e160      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0f0      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f000 face 	bl	80014b8 <RCC_Delay>
 8000f1c:	e01c      	b.n	8000f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <HAL_RCC_OscConfig+0x274>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f24:	f7ff fbdc 	bl	80006e0 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2a:	e00f      	b.n	8000f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fbd8 	bl	80006e0 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d908      	bls.n	8000f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e146      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
 8000f44:	42420000 	.word	0x42420000
 8000f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4c:	4b92      	ldr	r3, [pc, #584]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1e9      	bne.n	8000f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80a6 	beq.w	80010b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f6a:	4b8b      	ldr	r3, [pc, #556]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10d      	bne.n	8000f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b88      	ldr	r3, [pc, #544]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a87      	ldr	r2, [pc, #540]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b85      	ldr	r3, [pc, #532]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f92:	4b82      	ldr	r3, [pc, #520]	@ (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d118      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9e:	4b7f      	ldr	r3, [pc, #508]	@ (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a7e      	ldr	r2, [pc, #504]	@ (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fb99 	bl	80006e0 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb2:	f7ff fb95 	bl	80006e0 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b64      	cmp	r3, #100	@ 0x64
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e103      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	4b75      	ldr	r3, [pc, #468]	@ (800119c <HAL_RCC_OscConfig+0x4c8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f0      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d106      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x312>
 8000fd8:	4b6f      	ldr	r3, [pc, #444]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	4a6e      	ldr	r2, [pc, #440]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6213      	str	r3, [r2, #32]
 8000fe4:	e02d      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x334>
 8000fee:	4b6a      	ldr	r3, [pc, #424]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	4a69      	ldr	r2, [pc, #420]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	f023 0301 	bic.w	r3, r3, #1
 8000ff8:	6213      	str	r3, [r2, #32]
 8000ffa:	4b67      	ldr	r3, [pc, #412]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	4a66      	ldr	r2, [pc, #408]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	f023 0304 	bic.w	r3, r3, #4
 8001004:	6213      	str	r3, [r2, #32]
 8001006:	e01c      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b05      	cmp	r3, #5
 800100e:	d10c      	bne.n	800102a <HAL_RCC_OscConfig+0x356>
 8001010:	4b61      	ldr	r3, [pc, #388]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4a60      	ldr	r2, [pc, #384]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6213      	str	r3, [r2, #32]
 800101c:	4b5e      	ldr	r3, [pc, #376]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a5d      	ldr	r2, [pc, #372]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6213      	str	r3, [r2, #32]
 8001028:	e00b      	b.n	8001042 <HAL_RCC_OscConfig+0x36e>
 800102a:	4b5b      	ldr	r3, [pc, #364]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4a5a      	ldr	r2, [pc, #360]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	6213      	str	r3, [r2, #32]
 8001036:	4b58      	ldr	r3, [pc, #352]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4a57      	ldr	r2, [pc, #348]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	f023 0304 	bic.w	r3, r3, #4
 8001040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d015      	beq.n	8001076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104a:	f7ff fb49 	bl	80006e0 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001050:	e00a      	b.n	8001068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001052:	f7ff fb45 	bl	80006e0 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001060:	4293      	cmp	r3, r2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e0b1      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001068:	4b4b      	ldr	r3, [pc, #300]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0ee      	beq.n	8001052 <HAL_RCC_OscConfig+0x37e>
 8001074:	e014      	b.n	80010a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001076:	f7ff fb33 	bl	80006e0 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800107c:	e00a      	b.n	8001094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107e:	f7ff fb2f 	bl	80006e0 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800108c:	4293      	cmp	r3, r2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e09b      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001094:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1ee      	bne.n	800107e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d105      	bne.n	80010b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8087 	beq.w	80011ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d061      	beq.n	800118c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d146      	bne.n	800115e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d0:	4b33      	ldr	r3, [pc, #204]	@ (80011a0 <HAL_RCC_OscConfig+0x4cc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fb03 	bl	80006e0 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010de:	f7ff faff 	bl	80006e0 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e06d      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f0:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f0      	bne.n	80010de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001104:	d108      	bne.n	8001118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001106:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	4921      	ldr	r1, [pc, #132]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001118:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a19      	ldr	r1, [r3, #32]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001128:	430b      	orrs	r3, r1
 800112a:	491b      	ldr	r1, [pc, #108]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <HAL_RCC_OscConfig+0x4cc>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001136:	f7ff fad3 	bl	80006e0 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113e:	f7ff facf 	bl	80006e0 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e03d      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x46a>
 800115c:	e035      	b.n	80011ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <HAL_RCC_OscConfig+0x4cc>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fabc 	bl	80006e0 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116c:	f7ff fab8 	bl	80006e0 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e026      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_RCC_OscConfig+0x4c4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x498>
 800118a:	e01e      	b.n	80011ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d107      	bne.n	80011a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e019      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
 8001198:	40021000 	.word	0x40021000
 800119c:	40007000 	.word	0x40007000
 80011a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_RCC_OscConfig+0x500>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d106      	bne.n	80011c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d001      	beq.n	80011ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000

080011d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0d0      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d910      	bls.n	800121c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fa:	4b67      	ldr	r3, [pc, #412]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 0207 	bic.w	r2, r3, #7
 8001202:	4965      	ldr	r1, [pc, #404]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800120a:	4b63      	ldr	r3, [pc, #396]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d001      	beq.n	800121c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e0b8      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d020      	beq.n	800126a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001234:	4b59      	ldr	r3, [pc, #356]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	4a58      	ldr	r2, [pc, #352]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800123e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800124c:	4b53      	ldr	r3, [pc, #332]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a52      	ldr	r2, [pc, #328]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001256:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001258:	4b50      	ldr	r3, [pc, #320]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	494d      	ldr	r1, [pc, #308]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	4313      	orrs	r3, r2
 8001268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d040      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d107      	bne.n	800128e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	4b47      	ldr	r3, [pc, #284]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d115      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e07f      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d107      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001296:	4b41      	ldr	r3, [pc, #260]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e073      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a6:	4b3d      	ldr	r3, [pc, #244]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e06b      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b6:	4b39      	ldr	r3, [pc, #228]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f023 0203 	bic.w	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4936      	ldr	r1, [pc, #216]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c8:	f7ff fa0a 	bl	80006e0 <HAL_GetTick>
 80012cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ce:	e00a      	b.n	80012e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d0:	f7ff fa06 	bl	80006e0 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012de:	4293      	cmp	r3, r2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e053      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e6:	4b2d      	ldr	r3, [pc, #180]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 020c 	and.w	r2, r3, #12
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d1eb      	bne.n	80012d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012f8:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d210      	bcs.n	8001328 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 0207 	bic.w	r2, r3, #7
 800130e:	4922      	ldr	r1, [pc, #136]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001316:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	d001      	beq.n	8001328 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e032      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d008      	beq.n	8001346 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001334:	4b19      	ldr	r3, [pc, #100]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	4916      	ldr	r1, [pc, #88]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d009      	beq.n	8001366 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001352:	4b12      	ldr	r3, [pc, #72]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	490e      	ldr	r1, [pc, #56]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001366:	f000 f821 	bl	80013ac <HAL_RCC_GetSysClockFreq>
 800136a:	4602      	mov	r2, r0
 800136c:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	490a      	ldr	r1, [pc, #40]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001378:	5ccb      	ldrb	r3, [r1, r3]
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
 800137e:	4a09      	ldr	r2, [pc, #36]	@ (80013a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001382:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f968 	bl	800065c <HAL_InitTick>

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40022000 	.word	0x40022000
 800139c:	40021000 	.word	0x40021000
 80013a0:	080022c0 	.word	0x080022c0
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000004 	.word	0x20000004

080013ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001440 <HAL_RCC_GetSysClockFreq+0x94>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d002      	beq.n	80013dc <HAL_RCC_GetSysClockFreq+0x30>
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d003      	beq.n	80013e2 <HAL_RCC_GetSysClockFreq+0x36>
 80013da:	e027      	b.n	800142c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013dc:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <HAL_RCC_GetSysClockFreq+0x98>)
 80013de:	613b      	str	r3, [r7, #16]
      break;
 80013e0:	e027      	b.n	8001432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	0c9b      	lsrs	r3, r3, #18
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	4a17      	ldr	r2, [pc, #92]	@ (8001448 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d010      	beq.n	800141c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_RCC_GetSysClockFreq+0x94>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	0c5b      	lsrs	r3, r3, #17
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	4a11      	ldr	r2, [pc, #68]	@ (800144c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <HAL_RCC_GetSysClockFreq+0x98>)
 800140e:	fb03 f202 	mul.w	r2, r3, r2
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	fbb2 f3f3 	udiv	r3, r2, r3
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	e004      	b.n	8001426 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a0c      	ldr	r2, [pc, #48]	@ (8001450 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001420:	fb02 f303 	mul.w	r3, r2, r3
 8001424:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	613b      	str	r3, [r7, #16]
      break;
 800142a:	e002      	b.n	8001432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <HAL_RCC_GetSysClockFreq+0x98>)
 800142e:	613b      	str	r3, [r7, #16]
      break;
 8001430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001432:	693b      	ldr	r3, [r7, #16]
}
 8001434:	4618      	mov	r0, r3
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
 8001444:	007a1200 	.word	0x007a1200
 8001448:	080022d8 	.word	0x080022d8
 800144c:	080022e8 	.word	0x080022e8
 8001450:	003d0900 	.word	0x003d0900

08001454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001458:	4b02      	ldr	r3, [pc, #8]	@ (8001464 <HAL_RCC_GetHCLKFreq+0x10>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000000 	.word	0x20000000

08001468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800146c:	f7ff fff2 	bl	8001454 <HAL_RCC_GetHCLKFreq>
 8001470:	4602      	mov	r2, r0
 8001472:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	4903      	ldr	r1, [pc, #12]	@ (800148c <HAL_RCC_GetPCLK1Freq+0x24>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40021000 	.word	0x40021000
 800148c:	080022d0 	.word	0x080022d0

08001490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001494:	f7ff ffde 	bl	8001454 <HAL_RCC_GetHCLKFreq>
 8001498:	4602      	mov	r2, r0
 800149a:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	0adb      	lsrs	r3, r3, #11
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	4903      	ldr	r1, [pc, #12]	@ (80014b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014a6:	5ccb      	ldrb	r3, [r1, r3]
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	080022d0 	.word	0x080022d0

080014b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014c0:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <RCC_Delay+0x34>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <RCC_Delay+0x38>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0a5b      	lsrs	r3, r3, #9
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014d4:	bf00      	nop
  }
  while (Delay --);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	60fa      	str	r2, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f9      	bne.n	80014d4 <RCC_Delay+0x1c>
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	20000000 	.word	0x20000000
 80014f0:	10624dd3 	.word	0x10624dd3

080014f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e042      	b.n	800158c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d106      	bne.n	8001520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7fe ffe8 	bl	80004f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2224      	movs	r2, #36	@ 0x24
 8001524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 f971 	bl	8001820 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800154c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800155c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800156c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2220      	movs	r2, #32
 8001578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2220      	movs	r2, #32
 8001580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	@ 0x28
 8001598:	af02      	add	r7, sp, #8
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	4613      	mov	r3, r2
 80015a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b20      	cmp	r3, #32
 80015b2:	d175      	bne.n	80016a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <HAL_UART_Transmit+0x2c>
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e06e      	b.n	80016a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2221      	movs	r2, #33	@ 0x21
 80015ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80015d2:	f7ff f885 	bl	80006e0 <HAL_GetTick>
 80015d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	88fa      	ldrh	r2, [r7, #6]
 80015dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	88fa      	ldrh	r2, [r7, #6]
 80015e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015ec:	d108      	bne.n	8001600 <HAL_UART_Transmit+0x6c>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d104      	bne.n	8001600 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	e003      	b.n	8001608 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001608:	e02e      	b.n	8001668 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2200      	movs	r2, #0
 8001612:	2180      	movs	r1, #128	@ 0x80
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 f848 	bl	80016aa <UART_WaitOnFlagUntilTimeout>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2220      	movs	r2, #32
 8001624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e03a      	b.n	80016a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10b      	bne.n	800164a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001640:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	3302      	adds	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	e007      	b.n	800165a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	781a      	ldrb	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	3301      	adds	r3, #1
 8001658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800165e:	b29b      	uxth	r3, r3
 8001660:	3b01      	subs	r3, #1
 8001662:	b29a      	uxth	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800166c:	b29b      	uxth	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1cb      	bne.n	800160a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2200      	movs	r2, #0
 800167a:	2140      	movs	r1, #64	@ 0x40
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f814 	bl	80016aa <UART_WaitOnFlagUntilTimeout>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2220      	movs	r2, #32
 800168c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e006      	b.n	80016a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2220      	movs	r2, #32
 8001698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	e000      	b.n	80016a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80016a0:	2302      	movs	r3, #2
  }
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	4613      	mov	r3, r2
 80016b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016ba:	e03b      	b.n	8001734 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016c2:	d037      	beq.n	8001734 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016c4:	f7ff f80c 	bl	80006e0 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	6a3a      	ldr	r2, [r7, #32]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d302      	bcc.n	80016da <UART_WaitOnFlagUntilTimeout+0x30>
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e03a      	b.n	8001754 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d023      	beq.n	8001734 <UART_WaitOnFlagUntilTimeout+0x8a>
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b80      	cmp	r3, #128	@ 0x80
 80016f0:	d020      	beq.n	8001734 <UART_WaitOnFlagUntilTimeout+0x8a>
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b40      	cmp	r3, #64	@ 0x40
 80016f6:	d01d      	beq.n	8001734 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b08      	cmp	r3, #8
 8001704:	d116      	bne.n	8001734 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 f81d 	bl	800175c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2208      	movs	r2, #8
 8001726:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e00f      	b.n	8001754 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	4013      	ands	r3, r2
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	429a      	cmp	r2, r3
 8001742:	bf0c      	ite	eq
 8001744:	2301      	moveq	r3, #1
 8001746:	2300      	movne	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	429a      	cmp	r2, r3
 8001750:	d0b4      	beq.n	80016bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800175c:	b480      	push	{r7}
 800175e:	b095      	sub	sp, #84	@ 0x54
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	330c      	adds	r3, #12
 800176a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800176c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800176e:	e853 3f00 	ldrex	r3, [r3]
 8001772:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001776:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800177a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	330c      	adds	r3, #12
 8001782:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001784:	643a      	str	r2, [r7, #64]	@ 0x40
 8001786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001788:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800178a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800178c:	e841 2300 	strex	r3, r2, [r1]
 8001790:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1e5      	bne.n	8001764 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3314      	adds	r3, #20
 800179e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	e853 3f00 	ldrex	r3, [r3]
 80017a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3314      	adds	r3, #20
 80017b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80017b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017c0:	e841 2300 	strex	r3, r2, [r1]
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1e5      	bne.n	8001798 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d119      	bne.n	8001808 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	330c      	adds	r3, #12
 80017da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	e853 3f00 	ldrex	r3, [r3]
 80017e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	f023 0310 	bic.w	r3, r3, #16
 80017ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	330c      	adds	r3, #12
 80017f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80017f4:	61ba      	str	r2, [r7, #24]
 80017f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017f8:	6979      	ldr	r1, [r7, #20]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	e841 2300 	strex	r3, r2, [r1]
 8001800:	613b      	str	r3, [r7, #16]
   return(result);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1e5      	bne.n	80017d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2220      	movs	r2, #32
 800180c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001816:	bf00      	nop
 8001818:	3754      	adds	r7, #84	@ 0x54
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	4313      	orrs	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800185a:	f023 030c 	bic.w	r3, r3, #12
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	68b9      	ldr	r1, [r7, #8]
 8001864:	430b      	orrs	r3, r1
 8001866:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a2c      	ldr	r2, [pc, #176]	@ (8001934 <UART_SetConfig+0x114>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d103      	bne.n	8001890 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001888:	f7ff fe02 	bl	8001490 <HAL_RCC_GetPCLK2Freq>
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	e002      	b.n	8001896 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001890:	f7ff fdea 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
 8001894:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	009a      	lsls	r2, r3, #2
 80018a0:	441a      	add	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ac:	4a22      	ldr	r2, [pc, #136]	@ (8001938 <UART_SetConfig+0x118>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	0119      	lsls	r1, r3, #4
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	009a      	lsls	r2, r3, #2
 80018c0:	441a      	add	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80018cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <UART_SetConfig+0x118>)
 80018ce:	fba3 0302 	umull	r0, r3, r3, r2
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2064      	movs	r0, #100	@ 0x64
 80018d6:	fb00 f303 	mul.w	r3, r0, r3
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	3332      	adds	r3, #50	@ 0x32
 80018e0:	4a15      	ldr	r2, [pc, #84]	@ (8001938 <UART_SetConfig+0x118>)
 80018e2:	fba2 2303 	umull	r2, r3, r2, r3
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018ec:	4419      	add	r1, r3
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	009a      	lsls	r2, r3, #2
 80018f8:	441a      	add	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fbb2 f2f3 	udiv	r2, r2, r3
 8001904:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <UART_SetConfig+0x118>)
 8001906:	fba3 0302 	umull	r0, r3, r3, r2
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	2064      	movs	r0, #100	@ 0x64
 800190e:	fb00 f303 	mul.w	r3, r0, r3
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	3332      	adds	r3, #50	@ 0x32
 8001918:	4a07      	ldr	r2, [pc, #28]	@ (8001938 <UART_SetConfig+0x118>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	f003 020f 	and.w	r2, r3, #15
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	440a      	add	r2, r1
 800192a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40013800 	.word	0x40013800
 8001938:	51eb851f 	.word	0x51eb851f

0800193c <siprintf>:
 800193c:	b40e      	push	{r1, r2, r3}
 800193e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001942:	b500      	push	{lr}
 8001944:	b09c      	sub	sp, #112	@ 0x70
 8001946:	ab1d      	add	r3, sp, #116	@ 0x74
 8001948:	9002      	str	r0, [sp, #8]
 800194a:	9006      	str	r0, [sp, #24]
 800194c:	9107      	str	r1, [sp, #28]
 800194e:	9104      	str	r1, [sp, #16]
 8001950:	4808      	ldr	r0, [pc, #32]	@ (8001974 <siprintf+0x38>)
 8001952:	4909      	ldr	r1, [pc, #36]	@ (8001978 <siprintf+0x3c>)
 8001954:	f853 2b04 	ldr.w	r2, [r3], #4
 8001958:	9105      	str	r1, [sp, #20]
 800195a:	6800      	ldr	r0, [r0, #0]
 800195c:	a902      	add	r1, sp, #8
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	f000 f89c 	bl	8001a9c <_svfiprintf_r>
 8001964:	2200      	movs	r2, #0
 8001966:	9b02      	ldr	r3, [sp, #8]
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	b01c      	add	sp, #112	@ 0x70
 800196c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001970:	b003      	add	sp, #12
 8001972:	4770      	bx	lr
 8001974:	2000000c 	.word	0x2000000c
 8001978:	ffff0208 	.word	0xffff0208

0800197c <memset>:
 800197c:	4603      	mov	r3, r0
 800197e:	4402      	add	r2, r0
 8001980:	4293      	cmp	r3, r2
 8001982:	d100      	bne.n	8001986 <memset+0xa>
 8001984:	4770      	bx	lr
 8001986:	f803 1b01 	strb.w	r1, [r3], #1
 800198a:	e7f9      	b.n	8001980 <memset+0x4>

0800198c <__errno>:
 800198c:	4b01      	ldr	r3, [pc, #4]	@ (8001994 <__errno+0x8>)
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	2000000c 	.word	0x2000000c

08001998 <__libc_init_array>:
 8001998:	b570      	push	{r4, r5, r6, lr}
 800199a:	2600      	movs	r6, #0
 800199c:	4d0c      	ldr	r5, [pc, #48]	@ (80019d0 <__libc_init_array+0x38>)
 800199e:	4c0d      	ldr	r4, [pc, #52]	@ (80019d4 <__libc_init_array+0x3c>)
 80019a0:	1b64      	subs	r4, r4, r5
 80019a2:	10a4      	asrs	r4, r4, #2
 80019a4:	42a6      	cmp	r6, r4
 80019a6:	d109      	bne.n	80019bc <__libc_init_array+0x24>
 80019a8:	f000 fc78 	bl	800229c <_init>
 80019ac:	2600      	movs	r6, #0
 80019ae:	4d0a      	ldr	r5, [pc, #40]	@ (80019d8 <__libc_init_array+0x40>)
 80019b0:	4c0a      	ldr	r4, [pc, #40]	@ (80019dc <__libc_init_array+0x44>)
 80019b2:	1b64      	subs	r4, r4, r5
 80019b4:	10a4      	asrs	r4, r4, #2
 80019b6:	42a6      	cmp	r6, r4
 80019b8:	d105      	bne.n	80019c6 <__libc_init_array+0x2e>
 80019ba:	bd70      	pop	{r4, r5, r6, pc}
 80019bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80019c0:	4798      	blx	r3
 80019c2:	3601      	adds	r6, #1
 80019c4:	e7ee      	b.n	80019a4 <__libc_init_array+0xc>
 80019c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80019ca:	4798      	blx	r3
 80019cc:	3601      	adds	r6, #1
 80019ce:	e7f2      	b.n	80019b6 <__libc_init_array+0x1e>
 80019d0:	08002320 	.word	0x08002320
 80019d4:	08002320 	.word	0x08002320
 80019d8:	08002320 	.word	0x08002320
 80019dc:	08002324 	.word	0x08002324

080019e0 <__retarget_lock_acquire_recursive>:
 80019e0:	4770      	bx	lr

080019e2 <__retarget_lock_release_recursive>:
 80019e2:	4770      	bx	lr

080019e4 <__ssputs_r>:
 80019e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019e8:	461f      	mov	r7, r3
 80019ea:	688e      	ldr	r6, [r1, #8]
 80019ec:	4682      	mov	sl, r0
 80019ee:	42be      	cmp	r6, r7
 80019f0:	460c      	mov	r4, r1
 80019f2:	4690      	mov	r8, r2
 80019f4:	680b      	ldr	r3, [r1, #0]
 80019f6:	d82d      	bhi.n	8001a54 <__ssputs_r+0x70>
 80019f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80019fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001a00:	d026      	beq.n	8001a50 <__ssputs_r+0x6c>
 8001a02:	6965      	ldr	r5, [r4, #20]
 8001a04:	6909      	ldr	r1, [r1, #16]
 8001a06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a0a:	eba3 0901 	sub.w	r9, r3, r1
 8001a0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001a12:	1c7b      	adds	r3, r7, #1
 8001a14:	444b      	add	r3, r9
 8001a16:	106d      	asrs	r5, r5, #1
 8001a18:	429d      	cmp	r5, r3
 8001a1a:	bf38      	it	cc
 8001a1c:	461d      	movcc	r5, r3
 8001a1e:	0553      	lsls	r3, r2, #21
 8001a20:	d527      	bpl.n	8001a72 <__ssputs_r+0x8e>
 8001a22:	4629      	mov	r1, r5
 8001a24:	f000 f958 	bl	8001cd8 <_malloc_r>
 8001a28:	4606      	mov	r6, r0
 8001a2a:	b360      	cbz	r0, 8001a86 <__ssputs_r+0xa2>
 8001a2c:	464a      	mov	r2, r9
 8001a2e:	6921      	ldr	r1, [r4, #16]
 8001a30:	f000 fbd6 	bl	80021e0 <memcpy>
 8001a34:	89a3      	ldrh	r3, [r4, #12]
 8001a36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a3e:	81a3      	strh	r3, [r4, #12]
 8001a40:	6126      	str	r6, [r4, #16]
 8001a42:	444e      	add	r6, r9
 8001a44:	6026      	str	r6, [r4, #0]
 8001a46:	463e      	mov	r6, r7
 8001a48:	6165      	str	r5, [r4, #20]
 8001a4a:	eba5 0509 	sub.w	r5, r5, r9
 8001a4e:	60a5      	str	r5, [r4, #8]
 8001a50:	42be      	cmp	r6, r7
 8001a52:	d900      	bls.n	8001a56 <__ssputs_r+0x72>
 8001a54:	463e      	mov	r6, r7
 8001a56:	4632      	mov	r2, r6
 8001a58:	4641      	mov	r1, r8
 8001a5a:	6820      	ldr	r0, [r4, #0]
 8001a5c:	f000 fb88 	bl	8002170 <memmove>
 8001a60:	2000      	movs	r0, #0
 8001a62:	68a3      	ldr	r3, [r4, #8]
 8001a64:	1b9b      	subs	r3, r3, r6
 8001a66:	60a3      	str	r3, [r4, #8]
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	4433      	add	r3, r6
 8001a6c:	6023      	str	r3, [r4, #0]
 8001a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a72:	462a      	mov	r2, r5
 8001a74:	f000 fb4e 	bl	8002114 <_realloc_r>
 8001a78:	4606      	mov	r6, r0
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d1e0      	bne.n	8001a40 <__ssputs_r+0x5c>
 8001a7e:	4650      	mov	r0, sl
 8001a80:	6921      	ldr	r1, [r4, #16]
 8001a82:	f000 fbbb 	bl	80021fc <_free_r>
 8001a86:	230c      	movs	r3, #12
 8001a88:	f8ca 3000 	str.w	r3, [sl]
 8001a8c:	89a3      	ldrh	r3, [r4, #12]
 8001a8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a96:	81a3      	strh	r3, [r4, #12]
 8001a98:	e7e9      	b.n	8001a6e <__ssputs_r+0x8a>
	...

08001a9c <_svfiprintf_r>:
 8001a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aa0:	4698      	mov	r8, r3
 8001aa2:	898b      	ldrh	r3, [r1, #12]
 8001aa4:	4607      	mov	r7, r0
 8001aa6:	061b      	lsls	r3, r3, #24
 8001aa8:	460d      	mov	r5, r1
 8001aaa:	4614      	mov	r4, r2
 8001aac:	b09d      	sub	sp, #116	@ 0x74
 8001aae:	d510      	bpl.n	8001ad2 <_svfiprintf_r+0x36>
 8001ab0:	690b      	ldr	r3, [r1, #16]
 8001ab2:	b973      	cbnz	r3, 8001ad2 <_svfiprintf_r+0x36>
 8001ab4:	2140      	movs	r1, #64	@ 0x40
 8001ab6:	f000 f90f 	bl	8001cd8 <_malloc_r>
 8001aba:	6028      	str	r0, [r5, #0]
 8001abc:	6128      	str	r0, [r5, #16]
 8001abe:	b930      	cbnz	r0, 8001ace <_svfiprintf_r+0x32>
 8001ac0:	230c      	movs	r3, #12
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ac8:	b01d      	add	sp, #116	@ 0x74
 8001aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ace:	2340      	movs	r3, #64	@ 0x40
 8001ad0:	616b      	str	r3, [r5, #20]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001adc:	2330      	movs	r3, #48	@ 0x30
 8001ade:	f04f 0901 	mov.w	r9, #1
 8001ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ae6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001c80 <_svfiprintf_r+0x1e4>
 8001aea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001aee:	4623      	mov	r3, r4
 8001af0:	469a      	mov	sl, r3
 8001af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001af6:	b10a      	cbz	r2, 8001afc <_svfiprintf_r+0x60>
 8001af8:	2a25      	cmp	r2, #37	@ 0x25
 8001afa:	d1f9      	bne.n	8001af0 <_svfiprintf_r+0x54>
 8001afc:	ebba 0b04 	subs.w	fp, sl, r4
 8001b00:	d00b      	beq.n	8001b1a <_svfiprintf_r+0x7e>
 8001b02:	465b      	mov	r3, fp
 8001b04:	4622      	mov	r2, r4
 8001b06:	4629      	mov	r1, r5
 8001b08:	4638      	mov	r0, r7
 8001b0a:	f7ff ff6b 	bl	80019e4 <__ssputs_r>
 8001b0e:	3001      	adds	r0, #1
 8001b10:	f000 80a7 	beq.w	8001c62 <_svfiprintf_r+0x1c6>
 8001b14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001b16:	445a      	add	r2, fp
 8001b18:	9209      	str	r2, [sp, #36]	@ 0x24
 8001b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 809f 	beq.w	8001c62 <_svfiprintf_r+0x1c6>
 8001b24:	2300      	movs	r3, #0
 8001b26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b2e:	f10a 0a01 	add.w	sl, sl, #1
 8001b32:	9304      	str	r3, [sp, #16]
 8001b34:	9307      	str	r3, [sp, #28]
 8001b36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001b3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8001b3c:	4654      	mov	r4, sl
 8001b3e:	2205      	movs	r2, #5
 8001b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b44:	484e      	ldr	r0, [pc, #312]	@ (8001c80 <_svfiprintf_r+0x1e4>)
 8001b46:	f000 fb3d 	bl	80021c4 <memchr>
 8001b4a:	9a04      	ldr	r2, [sp, #16]
 8001b4c:	b9d8      	cbnz	r0, 8001b86 <_svfiprintf_r+0xea>
 8001b4e:	06d0      	lsls	r0, r2, #27
 8001b50:	bf44      	itt	mi
 8001b52:	2320      	movmi	r3, #32
 8001b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b58:	0711      	lsls	r1, r2, #28
 8001b5a:	bf44      	itt	mi
 8001b5c:	232b      	movmi	r3, #43	@ 0x2b
 8001b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b62:	f89a 3000 	ldrb.w	r3, [sl]
 8001b66:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b68:	d015      	beq.n	8001b96 <_svfiprintf_r+0xfa>
 8001b6a:	4654      	mov	r4, sl
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f04f 0c0a 	mov.w	ip, #10
 8001b72:	9a07      	ldr	r2, [sp, #28]
 8001b74:	4621      	mov	r1, r4
 8001b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b7a:	3b30      	subs	r3, #48	@ 0x30
 8001b7c:	2b09      	cmp	r3, #9
 8001b7e:	d94b      	bls.n	8001c18 <_svfiprintf_r+0x17c>
 8001b80:	b1b0      	cbz	r0, 8001bb0 <_svfiprintf_r+0x114>
 8001b82:	9207      	str	r2, [sp, #28]
 8001b84:	e014      	b.n	8001bb0 <_svfiprintf_r+0x114>
 8001b86:	eba0 0308 	sub.w	r3, r0, r8
 8001b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	46a2      	mov	sl, r4
 8001b92:	9304      	str	r3, [sp, #16]
 8001b94:	e7d2      	b.n	8001b3c <_svfiprintf_r+0xa0>
 8001b96:	9b03      	ldr	r3, [sp, #12]
 8001b98:	1d19      	adds	r1, r3, #4
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	9103      	str	r1, [sp, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bfbb      	ittet	lt
 8001ba2:	425b      	neglt	r3, r3
 8001ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8001ba8:	9307      	strge	r3, [sp, #28]
 8001baa:	9307      	strlt	r3, [sp, #28]
 8001bac:	bfb8      	it	lt
 8001bae:	9204      	strlt	r2, [sp, #16]
 8001bb0:	7823      	ldrb	r3, [r4, #0]
 8001bb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8001bb4:	d10a      	bne.n	8001bcc <_svfiprintf_r+0x130>
 8001bb6:	7863      	ldrb	r3, [r4, #1]
 8001bb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bba:	d132      	bne.n	8001c22 <_svfiprintf_r+0x186>
 8001bbc:	9b03      	ldr	r3, [sp, #12]
 8001bbe:	3402      	adds	r4, #2
 8001bc0:	1d1a      	adds	r2, r3, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	9203      	str	r2, [sp, #12]
 8001bc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001bca:	9305      	str	r3, [sp, #20]
 8001bcc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001c84 <_svfiprintf_r+0x1e8>
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	4650      	mov	r0, sl
 8001bd4:	7821      	ldrb	r1, [r4, #0]
 8001bd6:	f000 faf5 	bl	80021c4 <memchr>
 8001bda:	b138      	cbz	r0, 8001bec <_svfiprintf_r+0x150>
 8001bdc:	2240      	movs	r2, #64	@ 0x40
 8001bde:	9b04      	ldr	r3, [sp, #16]
 8001be0:	eba0 000a 	sub.w	r0, r0, sl
 8001be4:	4082      	lsls	r2, r0
 8001be6:	4313      	orrs	r3, r2
 8001be8:	3401      	adds	r4, #1
 8001bea:	9304      	str	r3, [sp, #16]
 8001bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bf0:	2206      	movs	r2, #6
 8001bf2:	4825      	ldr	r0, [pc, #148]	@ (8001c88 <_svfiprintf_r+0x1ec>)
 8001bf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001bf8:	f000 fae4 	bl	80021c4 <memchr>
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d036      	beq.n	8001c6e <_svfiprintf_r+0x1d2>
 8001c00:	4b22      	ldr	r3, [pc, #136]	@ (8001c8c <_svfiprintf_r+0x1f0>)
 8001c02:	bb1b      	cbnz	r3, 8001c4c <_svfiprintf_r+0x1b0>
 8001c04:	9b03      	ldr	r3, [sp, #12]
 8001c06:	3307      	adds	r3, #7
 8001c08:	f023 0307 	bic.w	r3, r3, #7
 8001c0c:	3308      	adds	r3, #8
 8001c0e:	9303      	str	r3, [sp, #12]
 8001c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001c12:	4433      	add	r3, r6
 8001c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c16:	e76a      	b.n	8001aee <_svfiprintf_r+0x52>
 8001c18:	460c      	mov	r4, r1
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c20:	e7a8      	b.n	8001b74 <_svfiprintf_r+0xd8>
 8001c22:	2300      	movs	r3, #0
 8001c24:	f04f 0c0a 	mov.w	ip, #10
 8001c28:	4619      	mov	r1, r3
 8001c2a:	3401      	adds	r4, #1
 8001c2c:	9305      	str	r3, [sp, #20]
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c34:	3a30      	subs	r2, #48	@ 0x30
 8001c36:	2a09      	cmp	r2, #9
 8001c38:	d903      	bls.n	8001c42 <_svfiprintf_r+0x1a6>
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0c6      	beq.n	8001bcc <_svfiprintf_r+0x130>
 8001c3e:	9105      	str	r1, [sp, #20]
 8001c40:	e7c4      	b.n	8001bcc <_svfiprintf_r+0x130>
 8001c42:	4604      	mov	r4, r0
 8001c44:	2301      	movs	r3, #1
 8001c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c4a:	e7f0      	b.n	8001c2e <_svfiprintf_r+0x192>
 8001c4c:	ab03      	add	r3, sp, #12
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	462a      	mov	r2, r5
 8001c52:	4638      	mov	r0, r7
 8001c54:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <_svfiprintf_r+0x1f4>)
 8001c56:	a904      	add	r1, sp, #16
 8001c58:	f3af 8000 	nop.w
 8001c5c:	1c42      	adds	r2, r0, #1
 8001c5e:	4606      	mov	r6, r0
 8001c60:	d1d6      	bne.n	8001c10 <_svfiprintf_r+0x174>
 8001c62:	89ab      	ldrh	r3, [r5, #12]
 8001c64:	065b      	lsls	r3, r3, #25
 8001c66:	f53f af2d 	bmi.w	8001ac4 <_svfiprintf_r+0x28>
 8001c6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001c6c:	e72c      	b.n	8001ac8 <_svfiprintf_r+0x2c>
 8001c6e:	ab03      	add	r3, sp, #12
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	462a      	mov	r2, r5
 8001c74:	4638      	mov	r0, r7
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <_svfiprintf_r+0x1f4>)
 8001c78:	a904      	add	r1, sp, #16
 8001c7a:	f000 f91f 	bl	8001ebc <_printf_i>
 8001c7e:	e7ed      	b.n	8001c5c <_svfiprintf_r+0x1c0>
 8001c80:	080022ea 	.word	0x080022ea
 8001c84:	080022f0 	.word	0x080022f0
 8001c88:	080022f4 	.word	0x080022f4
 8001c8c:	00000000 	.word	0x00000000
 8001c90:	080019e5 	.word	0x080019e5

08001c94 <sbrk_aligned>:
 8001c94:	b570      	push	{r4, r5, r6, lr}
 8001c96:	4e0f      	ldr	r6, [pc, #60]	@ (8001cd4 <sbrk_aligned+0x40>)
 8001c98:	460c      	mov	r4, r1
 8001c9a:	6831      	ldr	r1, [r6, #0]
 8001c9c:	4605      	mov	r5, r0
 8001c9e:	b911      	cbnz	r1, 8001ca6 <sbrk_aligned+0x12>
 8001ca0:	f000 fa80 	bl	80021a4 <_sbrk_r>
 8001ca4:	6030      	str	r0, [r6, #0]
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	4628      	mov	r0, r5
 8001caa:	f000 fa7b 	bl	80021a4 <_sbrk_r>
 8001cae:	1c43      	adds	r3, r0, #1
 8001cb0:	d103      	bne.n	8001cba <sbrk_aligned+0x26>
 8001cb2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	bd70      	pop	{r4, r5, r6, pc}
 8001cba:	1cc4      	adds	r4, r0, #3
 8001cbc:	f024 0403 	bic.w	r4, r4, #3
 8001cc0:	42a0      	cmp	r0, r4
 8001cc2:	d0f8      	beq.n	8001cb6 <sbrk_aligned+0x22>
 8001cc4:	1a21      	subs	r1, r4, r0
 8001cc6:	4628      	mov	r0, r5
 8001cc8:	f000 fa6c 	bl	80021a4 <_sbrk_r>
 8001ccc:	3001      	adds	r0, #1
 8001cce:	d1f2      	bne.n	8001cb6 <sbrk_aligned+0x22>
 8001cd0:	e7ef      	b.n	8001cb2 <sbrk_aligned+0x1e>
 8001cd2:	bf00      	nop
 8001cd4:	20000258 	.word	0x20000258

08001cd8 <_malloc_r>:
 8001cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cdc:	1ccd      	adds	r5, r1, #3
 8001cde:	f025 0503 	bic.w	r5, r5, #3
 8001ce2:	3508      	adds	r5, #8
 8001ce4:	2d0c      	cmp	r5, #12
 8001ce6:	bf38      	it	cc
 8001ce8:	250c      	movcc	r5, #12
 8001cea:	2d00      	cmp	r5, #0
 8001cec:	4606      	mov	r6, r0
 8001cee:	db01      	blt.n	8001cf4 <_malloc_r+0x1c>
 8001cf0:	42a9      	cmp	r1, r5
 8001cf2:	d904      	bls.n	8001cfe <_malloc_r+0x26>
 8001cf4:	230c      	movs	r3, #12
 8001cf6:	6033      	str	r3, [r6, #0]
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001dd4 <_malloc_r+0xfc>
 8001d02:	f000 f9fb 	bl	80020fc <__malloc_lock>
 8001d06:	f8d8 3000 	ldr.w	r3, [r8]
 8001d0a:	461c      	mov	r4, r3
 8001d0c:	bb44      	cbnz	r4, 8001d60 <_malloc_r+0x88>
 8001d0e:	4629      	mov	r1, r5
 8001d10:	4630      	mov	r0, r6
 8001d12:	f7ff ffbf 	bl	8001c94 <sbrk_aligned>
 8001d16:	1c43      	adds	r3, r0, #1
 8001d18:	4604      	mov	r4, r0
 8001d1a:	d158      	bne.n	8001dce <_malloc_r+0xf6>
 8001d1c:	f8d8 4000 	ldr.w	r4, [r8]
 8001d20:	4627      	mov	r7, r4
 8001d22:	2f00      	cmp	r7, #0
 8001d24:	d143      	bne.n	8001dae <_malloc_r+0xd6>
 8001d26:	2c00      	cmp	r4, #0
 8001d28:	d04b      	beq.n	8001dc2 <_malloc_r+0xea>
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	4639      	mov	r1, r7
 8001d2e:	4630      	mov	r0, r6
 8001d30:	eb04 0903 	add.w	r9, r4, r3
 8001d34:	f000 fa36 	bl	80021a4 <_sbrk_r>
 8001d38:	4581      	cmp	r9, r0
 8001d3a:	d142      	bne.n	8001dc2 <_malloc_r+0xea>
 8001d3c:	6821      	ldr	r1, [r4, #0]
 8001d3e:	4630      	mov	r0, r6
 8001d40:	1a6d      	subs	r5, r5, r1
 8001d42:	4629      	mov	r1, r5
 8001d44:	f7ff ffa6 	bl	8001c94 <sbrk_aligned>
 8001d48:	3001      	adds	r0, #1
 8001d4a:	d03a      	beq.n	8001dc2 <_malloc_r+0xea>
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	442b      	add	r3, r5
 8001d50:	6023      	str	r3, [r4, #0]
 8001d52:	f8d8 3000 	ldr.w	r3, [r8]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	bb62      	cbnz	r2, 8001db4 <_malloc_r+0xdc>
 8001d5a:	f8c8 7000 	str.w	r7, [r8]
 8001d5e:	e00f      	b.n	8001d80 <_malloc_r+0xa8>
 8001d60:	6822      	ldr	r2, [r4, #0]
 8001d62:	1b52      	subs	r2, r2, r5
 8001d64:	d420      	bmi.n	8001da8 <_malloc_r+0xd0>
 8001d66:	2a0b      	cmp	r2, #11
 8001d68:	d917      	bls.n	8001d9a <_malloc_r+0xc2>
 8001d6a:	1961      	adds	r1, r4, r5
 8001d6c:	42a3      	cmp	r3, r4
 8001d6e:	6025      	str	r5, [r4, #0]
 8001d70:	bf18      	it	ne
 8001d72:	6059      	strne	r1, [r3, #4]
 8001d74:	6863      	ldr	r3, [r4, #4]
 8001d76:	bf08      	it	eq
 8001d78:	f8c8 1000 	streq.w	r1, [r8]
 8001d7c:	5162      	str	r2, [r4, r5]
 8001d7e:	604b      	str	r3, [r1, #4]
 8001d80:	4630      	mov	r0, r6
 8001d82:	f000 f9c1 	bl	8002108 <__malloc_unlock>
 8001d86:	f104 000b 	add.w	r0, r4, #11
 8001d8a:	1d23      	adds	r3, r4, #4
 8001d8c:	f020 0007 	bic.w	r0, r0, #7
 8001d90:	1ac2      	subs	r2, r0, r3
 8001d92:	bf1c      	itt	ne
 8001d94:	1a1b      	subne	r3, r3, r0
 8001d96:	50a3      	strne	r3, [r4, r2]
 8001d98:	e7af      	b.n	8001cfa <_malloc_r+0x22>
 8001d9a:	6862      	ldr	r2, [r4, #4]
 8001d9c:	42a3      	cmp	r3, r4
 8001d9e:	bf0c      	ite	eq
 8001da0:	f8c8 2000 	streq.w	r2, [r8]
 8001da4:	605a      	strne	r2, [r3, #4]
 8001da6:	e7eb      	b.n	8001d80 <_malloc_r+0xa8>
 8001da8:	4623      	mov	r3, r4
 8001daa:	6864      	ldr	r4, [r4, #4]
 8001dac:	e7ae      	b.n	8001d0c <_malloc_r+0x34>
 8001dae:	463c      	mov	r4, r7
 8001db0:	687f      	ldr	r7, [r7, #4]
 8001db2:	e7b6      	b.n	8001d22 <_malloc_r+0x4a>
 8001db4:	461a      	mov	r2, r3
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	42a3      	cmp	r3, r4
 8001dba:	d1fb      	bne.n	8001db4 <_malloc_r+0xdc>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	6053      	str	r3, [r2, #4]
 8001dc0:	e7de      	b.n	8001d80 <_malloc_r+0xa8>
 8001dc2:	230c      	movs	r3, #12
 8001dc4:	4630      	mov	r0, r6
 8001dc6:	6033      	str	r3, [r6, #0]
 8001dc8:	f000 f99e 	bl	8002108 <__malloc_unlock>
 8001dcc:	e794      	b.n	8001cf8 <_malloc_r+0x20>
 8001dce:	6005      	str	r5, [r0, #0]
 8001dd0:	e7d6      	b.n	8001d80 <_malloc_r+0xa8>
 8001dd2:	bf00      	nop
 8001dd4:	2000025c 	.word	0x2000025c

08001dd8 <_printf_common>:
 8001dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ddc:	4616      	mov	r6, r2
 8001dde:	4698      	mov	r8, r3
 8001de0:	688a      	ldr	r2, [r1, #8]
 8001de2:	690b      	ldr	r3, [r1, #16]
 8001de4:	4607      	mov	r7, r0
 8001de6:	4293      	cmp	r3, r2
 8001de8:	bfb8      	it	lt
 8001dea:	4613      	movlt	r3, r2
 8001dec:	6033      	str	r3, [r6, #0]
 8001dee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001df2:	460c      	mov	r4, r1
 8001df4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001df8:	b10a      	cbz	r2, 8001dfe <_printf_common+0x26>
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	6033      	str	r3, [r6, #0]
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	0699      	lsls	r1, r3, #26
 8001e02:	bf42      	ittt	mi
 8001e04:	6833      	ldrmi	r3, [r6, #0]
 8001e06:	3302      	addmi	r3, #2
 8001e08:	6033      	strmi	r3, [r6, #0]
 8001e0a:	6825      	ldr	r5, [r4, #0]
 8001e0c:	f015 0506 	ands.w	r5, r5, #6
 8001e10:	d106      	bne.n	8001e20 <_printf_common+0x48>
 8001e12:	f104 0a19 	add.w	sl, r4, #25
 8001e16:	68e3      	ldr	r3, [r4, #12]
 8001e18:	6832      	ldr	r2, [r6, #0]
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	42ab      	cmp	r3, r5
 8001e1e:	dc2b      	bgt.n	8001e78 <_printf_common+0xa0>
 8001e20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001e24:	6822      	ldr	r2, [r4, #0]
 8001e26:	3b00      	subs	r3, #0
 8001e28:	bf18      	it	ne
 8001e2a:	2301      	movne	r3, #1
 8001e2c:	0692      	lsls	r2, r2, #26
 8001e2e:	d430      	bmi.n	8001e92 <_printf_common+0xba>
 8001e30:	4641      	mov	r1, r8
 8001e32:	4638      	mov	r0, r7
 8001e34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001e38:	47c8      	blx	r9
 8001e3a:	3001      	adds	r0, #1
 8001e3c:	d023      	beq.n	8001e86 <_printf_common+0xae>
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	6922      	ldr	r2, [r4, #16]
 8001e42:	f003 0306 	and.w	r3, r3, #6
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	bf14      	ite	ne
 8001e4a:	2500      	movne	r5, #0
 8001e4c:	6833      	ldreq	r3, [r6, #0]
 8001e4e:	f04f 0600 	mov.w	r6, #0
 8001e52:	bf08      	it	eq
 8001e54:	68e5      	ldreq	r5, [r4, #12]
 8001e56:	f104 041a 	add.w	r4, r4, #26
 8001e5a:	bf08      	it	eq
 8001e5c:	1aed      	subeq	r5, r5, r3
 8001e5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001e62:	bf08      	it	eq
 8001e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	bfc4      	itt	gt
 8001e6c:	1a9b      	subgt	r3, r3, r2
 8001e6e:	18ed      	addgt	r5, r5, r3
 8001e70:	42b5      	cmp	r5, r6
 8001e72:	d11a      	bne.n	8001eaa <_printf_common+0xd2>
 8001e74:	2000      	movs	r0, #0
 8001e76:	e008      	b.n	8001e8a <_printf_common+0xb2>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	4652      	mov	r2, sl
 8001e7c:	4641      	mov	r1, r8
 8001e7e:	4638      	mov	r0, r7
 8001e80:	47c8      	blx	r9
 8001e82:	3001      	adds	r0, #1
 8001e84:	d103      	bne.n	8001e8e <_printf_common+0xb6>
 8001e86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e8e:	3501      	adds	r5, #1
 8001e90:	e7c1      	b.n	8001e16 <_printf_common+0x3e>
 8001e92:	2030      	movs	r0, #48	@ 0x30
 8001e94:	18e1      	adds	r1, r4, r3
 8001e96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001ea0:	4422      	add	r2, r4
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001ea8:	e7c2      	b.n	8001e30 <_printf_common+0x58>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	4622      	mov	r2, r4
 8001eae:	4641      	mov	r1, r8
 8001eb0:	4638      	mov	r0, r7
 8001eb2:	47c8      	blx	r9
 8001eb4:	3001      	adds	r0, #1
 8001eb6:	d0e6      	beq.n	8001e86 <_printf_common+0xae>
 8001eb8:	3601      	adds	r6, #1
 8001eba:	e7d9      	b.n	8001e70 <_printf_common+0x98>

08001ebc <_printf_i>:
 8001ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ec0:	7e0f      	ldrb	r7, [r1, #24]
 8001ec2:	4691      	mov	r9, r2
 8001ec4:	2f78      	cmp	r7, #120	@ 0x78
 8001ec6:	4680      	mov	r8, r0
 8001ec8:	460c      	mov	r4, r1
 8001eca:	469a      	mov	sl, r3
 8001ecc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001ece:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001ed2:	d807      	bhi.n	8001ee4 <_printf_i+0x28>
 8001ed4:	2f62      	cmp	r7, #98	@ 0x62
 8001ed6:	d80a      	bhi.n	8001eee <_printf_i+0x32>
 8001ed8:	2f00      	cmp	r7, #0
 8001eda:	f000 80d3 	beq.w	8002084 <_printf_i+0x1c8>
 8001ede:	2f58      	cmp	r7, #88	@ 0x58
 8001ee0:	f000 80ba 	beq.w	8002058 <_printf_i+0x19c>
 8001ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ee8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001eec:	e03a      	b.n	8001f64 <_printf_i+0xa8>
 8001eee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001ef2:	2b15      	cmp	r3, #21
 8001ef4:	d8f6      	bhi.n	8001ee4 <_printf_i+0x28>
 8001ef6:	a101      	add	r1, pc, #4	@ (adr r1, 8001efc <_printf_i+0x40>)
 8001ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001efc:	08001f55 	.word	0x08001f55
 8001f00:	08001f69 	.word	0x08001f69
 8001f04:	08001ee5 	.word	0x08001ee5
 8001f08:	08001ee5 	.word	0x08001ee5
 8001f0c:	08001ee5 	.word	0x08001ee5
 8001f10:	08001ee5 	.word	0x08001ee5
 8001f14:	08001f69 	.word	0x08001f69
 8001f18:	08001ee5 	.word	0x08001ee5
 8001f1c:	08001ee5 	.word	0x08001ee5
 8001f20:	08001ee5 	.word	0x08001ee5
 8001f24:	08001ee5 	.word	0x08001ee5
 8001f28:	0800206b 	.word	0x0800206b
 8001f2c:	08001f93 	.word	0x08001f93
 8001f30:	08002025 	.word	0x08002025
 8001f34:	08001ee5 	.word	0x08001ee5
 8001f38:	08001ee5 	.word	0x08001ee5
 8001f3c:	0800208d 	.word	0x0800208d
 8001f40:	08001ee5 	.word	0x08001ee5
 8001f44:	08001f93 	.word	0x08001f93
 8001f48:	08001ee5 	.word	0x08001ee5
 8001f4c:	08001ee5 	.word	0x08001ee5
 8001f50:	0800202d 	.word	0x0800202d
 8001f54:	6833      	ldr	r3, [r6, #0]
 8001f56:	1d1a      	adds	r2, r3, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6032      	str	r2, [r6, #0]
 8001f5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f64:	2301      	movs	r3, #1
 8001f66:	e09e      	b.n	80020a6 <_printf_i+0x1ea>
 8001f68:	6833      	ldr	r3, [r6, #0]
 8001f6a:	6820      	ldr	r0, [r4, #0]
 8001f6c:	1d19      	adds	r1, r3, #4
 8001f6e:	6031      	str	r1, [r6, #0]
 8001f70:	0606      	lsls	r6, r0, #24
 8001f72:	d501      	bpl.n	8001f78 <_printf_i+0xbc>
 8001f74:	681d      	ldr	r5, [r3, #0]
 8001f76:	e003      	b.n	8001f80 <_printf_i+0xc4>
 8001f78:	0645      	lsls	r5, r0, #25
 8001f7a:	d5fb      	bpl.n	8001f74 <_printf_i+0xb8>
 8001f7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f80:	2d00      	cmp	r5, #0
 8001f82:	da03      	bge.n	8001f8c <_printf_i+0xd0>
 8001f84:	232d      	movs	r3, #45	@ 0x2d
 8001f86:	426d      	negs	r5, r5
 8001f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f8c:	230a      	movs	r3, #10
 8001f8e:	4859      	ldr	r0, [pc, #356]	@ (80020f4 <_printf_i+0x238>)
 8001f90:	e011      	b.n	8001fb6 <_printf_i+0xfa>
 8001f92:	6821      	ldr	r1, [r4, #0]
 8001f94:	6833      	ldr	r3, [r6, #0]
 8001f96:	0608      	lsls	r0, r1, #24
 8001f98:	f853 5b04 	ldr.w	r5, [r3], #4
 8001f9c:	d402      	bmi.n	8001fa4 <_printf_i+0xe8>
 8001f9e:	0649      	lsls	r1, r1, #25
 8001fa0:	bf48      	it	mi
 8001fa2:	b2ad      	uxthmi	r5, r5
 8001fa4:	2f6f      	cmp	r7, #111	@ 0x6f
 8001fa6:	6033      	str	r3, [r6, #0]
 8001fa8:	bf14      	ite	ne
 8001faa:	230a      	movne	r3, #10
 8001fac:	2308      	moveq	r3, #8
 8001fae:	4851      	ldr	r0, [pc, #324]	@ (80020f4 <_printf_i+0x238>)
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001fb6:	6866      	ldr	r6, [r4, #4]
 8001fb8:	2e00      	cmp	r6, #0
 8001fba:	bfa8      	it	ge
 8001fbc:	6821      	ldrge	r1, [r4, #0]
 8001fbe:	60a6      	str	r6, [r4, #8]
 8001fc0:	bfa4      	itt	ge
 8001fc2:	f021 0104 	bicge.w	r1, r1, #4
 8001fc6:	6021      	strge	r1, [r4, #0]
 8001fc8:	b90d      	cbnz	r5, 8001fce <_printf_i+0x112>
 8001fca:	2e00      	cmp	r6, #0
 8001fcc:	d04b      	beq.n	8002066 <_printf_i+0x1aa>
 8001fce:	4616      	mov	r6, r2
 8001fd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8001fd4:	fb03 5711 	mls	r7, r3, r1, r5
 8001fd8:	5dc7      	ldrb	r7, [r0, r7]
 8001fda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001fde:	462f      	mov	r7, r5
 8001fe0:	42bb      	cmp	r3, r7
 8001fe2:	460d      	mov	r5, r1
 8001fe4:	d9f4      	bls.n	8001fd0 <_printf_i+0x114>
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d10b      	bne.n	8002002 <_printf_i+0x146>
 8001fea:	6823      	ldr	r3, [r4, #0]
 8001fec:	07df      	lsls	r7, r3, #31
 8001fee:	d508      	bpl.n	8002002 <_printf_i+0x146>
 8001ff0:	6923      	ldr	r3, [r4, #16]
 8001ff2:	6861      	ldr	r1, [r4, #4]
 8001ff4:	4299      	cmp	r1, r3
 8001ff6:	bfde      	ittt	le
 8001ff8:	2330      	movle	r3, #48	@ 0x30
 8001ffa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001ffe:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002002:	1b92      	subs	r2, r2, r6
 8002004:	6122      	str	r2, [r4, #16]
 8002006:	464b      	mov	r3, r9
 8002008:	4621      	mov	r1, r4
 800200a:	4640      	mov	r0, r8
 800200c:	f8cd a000 	str.w	sl, [sp]
 8002010:	aa03      	add	r2, sp, #12
 8002012:	f7ff fee1 	bl	8001dd8 <_printf_common>
 8002016:	3001      	adds	r0, #1
 8002018:	d14a      	bne.n	80020b0 <_printf_i+0x1f4>
 800201a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800201e:	b004      	add	sp, #16
 8002020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	f043 0320 	orr.w	r3, r3, #32
 800202a:	6023      	str	r3, [r4, #0]
 800202c:	2778      	movs	r7, #120	@ 0x78
 800202e:	4832      	ldr	r0, [pc, #200]	@ (80020f8 <_printf_i+0x23c>)
 8002030:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	6831      	ldr	r1, [r6, #0]
 8002038:	061f      	lsls	r7, r3, #24
 800203a:	f851 5b04 	ldr.w	r5, [r1], #4
 800203e:	d402      	bmi.n	8002046 <_printf_i+0x18a>
 8002040:	065f      	lsls	r7, r3, #25
 8002042:	bf48      	it	mi
 8002044:	b2ad      	uxthmi	r5, r5
 8002046:	6031      	str	r1, [r6, #0]
 8002048:	07d9      	lsls	r1, r3, #31
 800204a:	bf44      	itt	mi
 800204c:	f043 0320 	orrmi.w	r3, r3, #32
 8002050:	6023      	strmi	r3, [r4, #0]
 8002052:	b11d      	cbz	r5, 800205c <_printf_i+0x1a0>
 8002054:	2310      	movs	r3, #16
 8002056:	e7ab      	b.n	8001fb0 <_printf_i+0xf4>
 8002058:	4826      	ldr	r0, [pc, #152]	@ (80020f4 <_printf_i+0x238>)
 800205a:	e7e9      	b.n	8002030 <_printf_i+0x174>
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	f023 0320 	bic.w	r3, r3, #32
 8002062:	6023      	str	r3, [r4, #0]
 8002064:	e7f6      	b.n	8002054 <_printf_i+0x198>
 8002066:	4616      	mov	r6, r2
 8002068:	e7bd      	b.n	8001fe6 <_printf_i+0x12a>
 800206a:	6833      	ldr	r3, [r6, #0]
 800206c:	6825      	ldr	r5, [r4, #0]
 800206e:	1d18      	adds	r0, r3, #4
 8002070:	6961      	ldr	r1, [r4, #20]
 8002072:	6030      	str	r0, [r6, #0]
 8002074:	062e      	lsls	r6, r5, #24
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	d501      	bpl.n	800207e <_printf_i+0x1c2>
 800207a:	6019      	str	r1, [r3, #0]
 800207c:	e002      	b.n	8002084 <_printf_i+0x1c8>
 800207e:	0668      	lsls	r0, r5, #25
 8002080:	d5fb      	bpl.n	800207a <_printf_i+0x1be>
 8002082:	8019      	strh	r1, [r3, #0]
 8002084:	2300      	movs	r3, #0
 8002086:	4616      	mov	r6, r2
 8002088:	6123      	str	r3, [r4, #16]
 800208a:	e7bc      	b.n	8002006 <_printf_i+0x14a>
 800208c:	6833      	ldr	r3, [r6, #0]
 800208e:	2100      	movs	r1, #0
 8002090:	1d1a      	adds	r2, r3, #4
 8002092:	6032      	str	r2, [r6, #0]
 8002094:	681e      	ldr	r6, [r3, #0]
 8002096:	6862      	ldr	r2, [r4, #4]
 8002098:	4630      	mov	r0, r6
 800209a:	f000 f893 	bl	80021c4 <memchr>
 800209e:	b108      	cbz	r0, 80020a4 <_printf_i+0x1e8>
 80020a0:	1b80      	subs	r0, r0, r6
 80020a2:	6060      	str	r0, [r4, #4]
 80020a4:	6863      	ldr	r3, [r4, #4]
 80020a6:	6123      	str	r3, [r4, #16]
 80020a8:	2300      	movs	r3, #0
 80020aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020ae:	e7aa      	b.n	8002006 <_printf_i+0x14a>
 80020b0:	4632      	mov	r2, r6
 80020b2:	4649      	mov	r1, r9
 80020b4:	4640      	mov	r0, r8
 80020b6:	6923      	ldr	r3, [r4, #16]
 80020b8:	47d0      	blx	sl
 80020ba:	3001      	adds	r0, #1
 80020bc:	d0ad      	beq.n	800201a <_printf_i+0x15e>
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	079b      	lsls	r3, r3, #30
 80020c2:	d413      	bmi.n	80020ec <_printf_i+0x230>
 80020c4:	68e0      	ldr	r0, [r4, #12]
 80020c6:	9b03      	ldr	r3, [sp, #12]
 80020c8:	4298      	cmp	r0, r3
 80020ca:	bfb8      	it	lt
 80020cc:	4618      	movlt	r0, r3
 80020ce:	e7a6      	b.n	800201e <_printf_i+0x162>
 80020d0:	2301      	movs	r3, #1
 80020d2:	4632      	mov	r2, r6
 80020d4:	4649      	mov	r1, r9
 80020d6:	4640      	mov	r0, r8
 80020d8:	47d0      	blx	sl
 80020da:	3001      	adds	r0, #1
 80020dc:	d09d      	beq.n	800201a <_printf_i+0x15e>
 80020de:	3501      	adds	r5, #1
 80020e0:	68e3      	ldr	r3, [r4, #12]
 80020e2:	9903      	ldr	r1, [sp, #12]
 80020e4:	1a5b      	subs	r3, r3, r1
 80020e6:	42ab      	cmp	r3, r5
 80020e8:	dcf2      	bgt.n	80020d0 <_printf_i+0x214>
 80020ea:	e7eb      	b.n	80020c4 <_printf_i+0x208>
 80020ec:	2500      	movs	r5, #0
 80020ee:	f104 0619 	add.w	r6, r4, #25
 80020f2:	e7f5      	b.n	80020e0 <_printf_i+0x224>
 80020f4:	080022fb 	.word	0x080022fb
 80020f8:	0800230c 	.word	0x0800230c

080020fc <__malloc_lock>:
 80020fc:	4801      	ldr	r0, [pc, #4]	@ (8002104 <__malloc_lock+0x8>)
 80020fe:	f7ff bc6f 	b.w	80019e0 <__retarget_lock_acquire_recursive>
 8002102:	bf00      	nop
 8002104:	20000254 	.word	0x20000254

08002108 <__malloc_unlock>:
 8002108:	4801      	ldr	r0, [pc, #4]	@ (8002110 <__malloc_unlock+0x8>)
 800210a:	f7ff bc6a 	b.w	80019e2 <__retarget_lock_release_recursive>
 800210e:	bf00      	nop
 8002110:	20000254 	.word	0x20000254

08002114 <_realloc_r>:
 8002114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002118:	4680      	mov	r8, r0
 800211a:	4615      	mov	r5, r2
 800211c:	460c      	mov	r4, r1
 800211e:	b921      	cbnz	r1, 800212a <_realloc_r+0x16>
 8002120:	4611      	mov	r1, r2
 8002122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002126:	f7ff bdd7 	b.w	8001cd8 <_malloc_r>
 800212a:	b92a      	cbnz	r2, 8002138 <_realloc_r+0x24>
 800212c:	f000 f866 	bl	80021fc <_free_r>
 8002130:	2400      	movs	r4, #0
 8002132:	4620      	mov	r0, r4
 8002134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002138:	f000 f8a8 	bl	800228c <_malloc_usable_size_r>
 800213c:	4285      	cmp	r5, r0
 800213e:	4606      	mov	r6, r0
 8002140:	d802      	bhi.n	8002148 <_realloc_r+0x34>
 8002142:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002146:	d8f4      	bhi.n	8002132 <_realloc_r+0x1e>
 8002148:	4629      	mov	r1, r5
 800214a:	4640      	mov	r0, r8
 800214c:	f7ff fdc4 	bl	8001cd8 <_malloc_r>
 8002150:	4607      	mov	r7, r0
 8002152:	2800      	cmp	r0, #0
 8002154:	d0ec      	beq.n	8002130 <_realloc_r+0x1c>
 8002156:	42b5      	cmp	r5, r6
 8002158:	462a      	mov	r2, r5
 800215a:	4621      	mov	r1, r4
 800215c:	bf28      	it	cs
 800215e:	4632      	movcs	r2, r6
 8002160:	f000 f83e 	bl	80021e0 <memcpy>
 8002164:	4621      	mov	r1, r4
 8002166:	4640      	mov	r0, r8
 8002168:	f000 f848 	bl	80021fc <_free_r>
 800216c:	463c      	mov	r4, r7
 800216e:	e7e0      	b.n	8002132 <_realloc_r+0x1e>

08002170 <memmove>:
 8002170:	4288      	cmp	r0, r1
 8002172:	b510      	push	{r4, lr}
 8002174:	eb01 0402 	add.w	r4, r1, r2
 8002178:	d902      	bls.n	8002180 <memmove+0x10>
 800217a:	4284      	cmp	r4, r0
 800217c:	4623      	mov	r3, r4
 800217e:	d807      	bhi.n	8002190 <memmove+0x20>
 8002180:	1e43      	subs	r3, r0, #1
 8002182:	42a1      	cmp	r1, r4
 8002184:	d008      	beq.n	8002198 <memmove+0x28>
 8002186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800218a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800218e:	e7f8      	b.n	8002182 <memmove+0x12>
 8002190:	4601      	mov	r1, r0
 8002192:	4402      	add	r2, r0
 8002194:	428a      	cmp	r2, r1
 8002196:	d100      	bne.n	800219a <memmove+0x2a>
 8002198:	bd10      	pop	{r4, pc}
 800219a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800219e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80021a2:	e7f7      	b.n	8002194 <memmove+0x24>

080021a4 <_sbrk_r>:
 80021a4:	b538      	push	{r3, r4, r5, lr}
 80021a6:	2300      	movs	r3, #0
 80021a8:	4d05      	ldr	r5, [pc, #20]	@ (80021c0 <_sbrk_r+0x1c>)
 80021aa:	4604      	mov	r4, r0
 80021ac:	4608      	mov	r0, r1
 80021ae:	602b      	str	r3, [r5, #0]
 80021b0:	f7fe f90e 	bl	80003d0 <_sbrk>
 80021b4:	1c43      	adds	r3, r0, #1
 80021b6:	d102      	bne.n	80021be <_sbrk_r+0x1a>
 80021b8:	682b      	ldr	r3, [r5, #0]
 80021ba:	b103      	cbz	r3, 80021be <_sbrk_r+0x1a>
 80021bc:	6023      	str	r3, [r4, #0]
 80021be:	bd38      	pop	{r3, r4, r5, pc}
 80021c0:	20000260 	.word	0x20000260

080021c4 <memchr>:
 80021c4:	4603      	mov	r3, r0
 80021c6:	b510      	push	{r4, lr}
 80021c8:	b2c9      	uxtb	r1, r1
 80021ca:	4402      	add	r2, r0
 80021cc:	4293      	cmp	r3, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	d101      	bne.n	80021d6 <memchr+0x12>
 80021d2:	2000      	movs	r0, #0
 80021d4:	e003      	b.n	80021de <memchr+0x1a>
 80021d6:	7804      	ldrb	r4, [r0, #0]
 80021d8:	3301      	adds	r3, #1
 80021da:	428c      	cmp	r4, r1
 80021dc:	d1f6      	bne.n	80021cc <memchr+0x8>
 80021de:	bd10      	pop	{r4, pc}

080021e0 <memcpy>:
 80021e0:	440a      	add	r2, r1
 80021e2:	4291      	cmp	r1, r2
 80021e4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80021e8:	d100      	bne.n	80021ec <memcpy+0xc>
 80021ea:	4770      	bx	lr
 80021ec:	b510      	push	{r4, lr}
 80021ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021f2:	4291      	cmp	r1, r2
 80021f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021f8:	d1f9      	bne.n	80021ee <memcpy+0xe>
 80021fa:	bd10      	pop	{r4, pc}

080021fc <_free_r>:
 80021fc:	b538      	push	{r3, r4, r5, lr}
 80021fe:	4605      	mov	r5, r0
 8002200:	2900      	cmp	r1, #0
 8002202:	d040      	beq.n	8002286 <_free_r+0x8a>
 8002204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002208:	1f0c      	subs	r4, r1, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	bfb8      	it	lt
 800220e:	18e4      	addlt	r4, r4, r3
 8002210:	f7ff ff74 	bl	80020fc <__malloc_lock>
 8002214:	4a1c      	ldr	r2, [pc, #112]	@ (8002288 <_free_r+0x8c>)
 8002216:	6813      	ldr	r3, [r2, #0]
 8002218:	b933      	cbnz	r3, 8002228 <_free_r+0x2c>
 800221a:	6063      	str	r3, [r4, #4]
 800221c:	6014      	str	r4, [r2, #0]
 800221e:	4628      	mov	r0, r5
 8002220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002224:	f7ff bf70 	b.w	8002108 <__malloc_unlock>
 8002228:	42a3      	cmp	r3, r4
 800222a:	d908      	bls.n	800223e <_free_r+0x42>
 800222c:	6820      	ldr	r0, [r4, #0]
 800222e:	1821      	adds	r1, r4, r0
 8002230:	428b      	cmp	r3, r1
 8002232:	bf01      	itttt	eq
 8002234:	6819      	ldreq	r1, [r3, #0]
 8002236:	685b      	ldreq	r3, [r3, #4]
 8002238:	1809      	addeq	r1, r1, r0
 800223a:	6021      	streq	r1, [r4, #0]
 800223c:	e7ed      	b.n	800221a <_free_r+0x1e>
 800223e:	461a      	mov	r2, r3
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	b10b      	cbz	r3, 8002248 <_free_r+0x4c>
 8002244:	42a3      	cmp	r3, r4
 8002246:	d9fa      	bls.n	800223e <_free_r+0x42>
 8002248:	6811      	ldr	r1, [r2, #0]
 800224a:	1850      	adds	r0, r2, r1
 800224c:	42a0      	cmp	r0, r4
 800224e:	d10b      	bne.n	8002268 <_free_r+0x6c>
 8002250:	6820      	ldr	r0, [r4, #0]
 8002252:	4401      	add	r1, r0
 8002254:	1850      	adds	r0, r2, r1
 8002256:	4283      	cmp	r3, r0
 8002258:	6011      	str	r1, [r2, #0]
 800225a:	d1e0      	bne.n	800221e <_free_r+0x22>
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4408      	add	r0, r1
 8002262:	6010      	str	r0, [r2, #0]
 8002264:	6053      	str	r3, [r2, #4]
 8002266:	e7da      	b.n	800221e <_free_r+0x22>
 8002268:	d902      	bls.n	8002270 <_free_r+0x74>
 800226a:	230c      	movs	r3, #12
 800226c:	602b      	str	r3, [r5, #0]
 800226e:	e7d6      	b.n	800221e <_free_r+0x22>
 8002270:	6820      	ldr	r0, [r4, #0]
 8002272:	1821      	adds	r1, r4, r0
 8002274:	428b      	cmp	r3, r1
 8002276:	bf01      	itttt	eq
 8002278:	6819      	ldreq	r1, [r3, #0]
 800227a:	685b      	ldreq	r3, [r3, #4]
 800227c:	1809      	addeq	r1, r1, r0
 800227e:	6021      	streq	r1, [r4, #0]
 8002280:	6063      	str	r3, [r4, #4]
 8002282:	6054      	str	r4, [r2, #4]
 8002284:	e7cb      	b.n	800221e <_free_r+0x22>
 8002286:	bd38      	pop	{r3, r4, r5, pc}
 8002288:	2000025c 	.word	0x2000025c

0800228c <_malloc_usable_size_r>:
 800228c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002290:	1f18      	subs	r0, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	bfbc      	itt	lt
 8002296:	580b      	ldrlt	r3, [r1, r0]
 8002298:	18c0      	addlt	r0, r0, r3
 800229a:	4770      	bx	lr

0800229c <_init>:
 800229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229e:	bf00      	nop
 80022a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a2:	bc08      	pop	{r3}
 80022a4:	469e      	mov	lr, r3
 80022a6:	4770      	bx	lr

080022a8 <_fini>:
 80022a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022aa:	bf00      	nop
 80022ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ae:	bc08      	pop	{r3}
 80022b0:	469e      	mov	lr, r3
 80022b2:	4770      	bx	lr
