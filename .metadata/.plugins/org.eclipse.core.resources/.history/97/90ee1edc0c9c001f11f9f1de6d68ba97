/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dma.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ws28xx.h"
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum {
    STATE_READY,
    STATE_READING,
    STATE_OPEN,
    STATE_CLOSED,
    STATE_OVERCAPACITY,
    STATE_SLEEP,
    STATE_EMERGENCY
} SystemState;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define LED_ROWS 8
#define LED_COLS 32
#define DELAY_TIME 50
#define BLINK_DELAY 500

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
WS28XX_HandleTypeDef ws;
SystemState currentState = STATE_READY; // Initialize to Ready State
uint8_t rxData[14];        // Single buffer for USART1 and USART2
char processedData[14]; // Buffer to store processed data
char usermsg[14];          // Message to send
uint8_t flag_rev = 0;      // Flag to indicate data reception
uint8_t uart_source = 0;   // Variable to identify UART source (1 for USART1, 2 for USART2)

uint8_t responseData;      // For NOS response
uint8_t intresponseData;
/* Other variables */
volatile int counter = 0;
volatile int rev = 0;
//volatile uint8_t door_movement_complete = 0; // Flag set by encoder function
volatile int target_counter = 588;       // Target encoder count to stop motor

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


//MOTOR CONTROL FUNCTIONS
void Speed_Control(int a)
{
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, a);
}

void Direction(int a)
{
	if(a==1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);

	}
	if(a==0)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
	}
}

void encoder(void)
{
    counter++;
    if(counter == 570)
    {
        Speed_Control(0); // Stop the motor
        counter = 0;      // Reset counter for next operation
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    if(GPIO_Pin == GPIO_PIN_2)
    {
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // Toggle an LED on PB7 for visual feedback
    	encoder();
    }
    if(GPIO_Pin == GPIO_PIN_10)
	{
		Speed_Control(0);
		counter = 0;
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
    if(GPIO_Pin == GPIO_PIN_11)
	{
		Speed_Control(0);
		counter = 0;
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
    if(GPIO_Pin == GPIO_PIN_14)
	{
		Speed_Control(0);
		counter = 0;
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
    if(GPIO_Pin == GPIO_PIN_15)
	{
		Speed_Control(0);
		counter = 0;
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
}

void quarter_cycle_open(int source)
{
    if(source == 1){
        Direction(0);
    }
    else if(source == 2){
        Direction(1);
    }
    Speed_Control(1000); // Start motor
}

void quarter_cycle_closed(int source)
{
    if(source == 1){
        Direction(1);
    }
    else if(source == 2){
        Direction(0);
    }
    Speed_Control(1000); // Start motor
}



//STATE FUNCTIONS

void ready_state(void){
	//Display Code
    // Check if data has been received
    if(flag_rev == 1){
        currentState = STATE_READING; // Transition to Reading State
    }
}

void reading_state(void){
	//Display Code
    if(flag_rev == 1){
        HAL_UART_Transmit_IT(&huart3, (uint8_t *)usermsg, strlen(usermsg));
        flag_rev = 0;
    }
    HAL_Delay(1000); // Delay as needed

    //NOS Potential Responses Setup
    switch(intresponseData){

    case 0:
    	currentState = STATE_READY;
    	break;
    case 1:
    	currentState = STATE_OPEN;
    	break;
    case 2:
    	currentState = STATE_CLOSED;
    	break;
    case 3:
    	currentState = STATE_EMERGENCY;
    	break;
    case 4:
    	currentState = STATE_SLEEP;
    	break;
    case 5:
    	currentState = STATE_OVERCAPACITY;
		break;
    }
}

void open_state(void){
	quarter_cycle_open(uart_source);
	//IR Sensor Code
	HAL_Delay(5000);
	quarter_cycle_closed(uart_source);
	HAL_Delay(1000);
	currentState = STATE_READY;

}

void closed_state(void){
	//Display Code
	HAL_Delay(3000);
	currentState = STATE_READY;

}

void overcapacity_state(void){
	//Display Code
	Speed_Control(0);
}

void sleep_state(void){

}

void emergency_state(void){
	//Display Code
	quarter_cycle_open(1);
	quarter_cycle_open(1);
	currentState = STATE_SLEEP;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
  WS28XX_Init(&ws, &htim3, 72, TIM_CHANNEL_1, 256);


  // Start UART reception for RFID Reader (USART1)
  HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));

  // Start UART reception for Additional UART (USART2)
  HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));

  // Start UART reception for NOS response (USART3)
  HAL_UART_Receive_IT(&huart3, &responseData, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		switch (currentState)
		{
			case STATE_READY:
				ready_state();
				break;
			case STATE_READING:
				reading_state();
				break;
			case STATE_OPEN:
				open_state();
				break;
			case STATE_CLOSED:
				closed_state();
				break;
			// Leave other states empty for now
			case STATE_OVERCAPACITY:
				overcapacity_state();
				break;
			case STATE_SLEEP:
				sleep_state();
				//break;
			case STATE_EMERGENCY:
				emergency_state();
				break;
			default:
				break;
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart->Instance == USART1) { // Data received from USART1
        // Process the received data
        for (int i = 0; i < 12; i++) {
            processedData[i] = rxData[i + 1]; // Skip the start byte
        }

        uart_source = 1;
        processedData[12] = uart_source + '0';
        processedData[13] = '\0'; // Null-terminate the string

        // Use sprintf to format usermsg with identification flag
        sprintf(usermsg, "%s", processedData);

        flag_rev = 1; // Set flag to indicate data has been received

        // Re-enable UART reception for USART1
        HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));
        //HAL_Delay(2000);
    }
    else if (huart->Instance == USART2) { // Data received from USART2
        // Process the received data
        for (int i = 0; i < 12; i++) {
            processedData[i] = rxData[i + 1]; // Skip the start byte
        }
        uart_source = 2;
		processedData[12] = uart_source + '0';
		processedData[13] = '\0'; // Null-terminate the string

        // Use sprintf to format usermsg with identification flag
        sprintf(usermsg, "%s", processedData);

        flag_rev = 1; // Set flag to indicate data has been received

        // Re-enable UART reception for USART2
        HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));
    }
    else if (huart->Instance == USART3) { // NOS Response (USART3)
        //intresponseData = responseData - '0';
        intresponseData = atoi(&responseData);


        // Re-enable UART reception for USART3
        HAL_UART_Receive_IT(&huart3, &responseData, 1);
    }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
