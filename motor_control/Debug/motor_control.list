
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f48  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800410c  0800410c  0000510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004124  08004124  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004124  08004124  00005124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800412c  0800412c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800412c  0800412c  0000512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004130  08004130  00005130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004134  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  2000000c  08004140  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08004140  000065a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001126b  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002803  00000000  00000000  000172a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00019ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c42  00000000  00000000  0001aa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222e7  00000000  00000000  0001b6ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014fbe  00000000  00000000  0003d9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfb1c  00000000  00000000  0005295f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012247b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004284  00000000  00000000  001224c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00126744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080040f4 	.word	0x080040f4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080040f4 	.word	0x080040f4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08c      	sub	sp, #48	@ 0x30
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 031c 	add.w	r3, r7, #28
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	61bb      	str	r3, [r7, #24]
 800050e:	4b4b      	ldr	r3, [pc, #300]	@ (800063c <MX_GPIO_Init+0x148>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a4a      	ldr	r2, [pc, #296]	@ (800063c <MX_GPIO_Init+0x148>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b48      	ldr	r3, [pc, #288]	@ (800063c <MX_GPIO_Init+0x148>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	61bb      	str	r3, [r7, #24]
 8000524:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	4b44      	ldr	r3, [pc, #272]	@ (800063c <MX_GPIO_Init+0x148>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a43      	ldr	r2, [pc, #268]	@ (800063c <MX_GPIO_Init+0x148>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b41      	ldr	r3, [pc, #260]	@ (800063c <MX_GPIO_Init+0x148>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	613b      	str	r3, [r7, #16]
 8000546:	4b3d      	ldr	r3, [pc, #244]	@ (800063c <MX_GPIO_Init+0x148>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a3c      	ldr	r2, [pc, #240]	@ (800063c <MX_GPIO_Init+0x148>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b3a      	ldr	r3, [pc, #232]	@ (800063c <MX_GPIO_Init+0x148>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	4b36      	ldr	r3, [pc, #216]	@ (800063c <MX_GPIO_Init+0x148>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a35      	ldr	r2, [pc, #212]	@ (800063c <MX_GPIO_Init+0x148>)
 8000568:	f043 0308 	orr.w	r3, r3, #8
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b33      	ldr	r3, [pc, #204]	@ (800063c <MX_GPIO_Init+0x148>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0308 	and.w	r3, r3, #8
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	4b2f      	ldr	r3, [pc, #188]	@ (800063c <MX_GPIO_Init+0x148>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	4a2e      	ldr	r2, [pc, #184]	@ (800063c <MX_GPIO_Init+0x148>)
 8000584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000588:	6313      	str	r3, [r2, #48]	@ 0x30
 800058a:	4b2c      	ldr	r3, [pc, #176]	@ (800063c <MX_GPIO_Init+0x148>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b28      	ldr	r3, [pc, #160]	@ (800063c <MX_GPIO_Init+0x148>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a27      	ldr	r2, [pc, #156]	@ (800063c <MX_GPIO_Init+0x148>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b25      	ldr	r3, [pc, #148]	@ (800063c <MX_GPIO_Init+0x148>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f244 0183 	movw	r1, #16515	@ 0x4083
 80005b8:	4821      	ldr	r0, [pc, #132]	@ (8000640 <MX_GPIO_Init+0x14c>)
 80005ba:	f000 ff35 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2140      	movs	r1, #64	@ 0x40
 80005c2:	4820      	ldr	r0, [pc, #128]	@ (8000644 <MX_GPIO_Init+0x150>)
 80005c4:	f000 ff30 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ce:	2300      	movs	r3, #0
 80005d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	481a      	ldr	r0, [pc, #104]	@ (8000648 <MX_GPIO_Init+0x154>)
 80005de:	f000 fd77 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|LD2_Pin;
 80005e2:	f244 0383 	movw	r3, #16515	@ 0x4083
 80005e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4619      	mov	r1, r3
 80005fa:	4811      	ldr	r0, [pc, #68]	@ (8000640 <MX_GPIO_Init+0x14c>)
 80005fc:	f000 fd68 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000600:	2340      	movs	r3, #64	@ 0x40
 8000602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	480b      	ldr	r0, [pc, #44]	@ (8000644 <MX_GPIO_Init+0x150>)
 8000618:	f000 fd5a 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800061c:	2380      	movs	r3, #128	@ 0x80
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	4805      	ldr	r0, [pc, #20]	@ (8000644 <MX_GPIO_Init+0x150>)
 8000630:	f000 fd4e 	bl	80010d0 <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3730      	adds	r7, #48	@ 0x30
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40020400 	.word	0x40020400
 8000644:	40021800 	.word	0x40021800
 8000648:	40020800 	.word	0x40020800

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 fbc2 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f822 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f7ff ff4c 	bl	80004f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800065c:	f000 fa90 	bl	8000b80 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000660:	f000 fb00 	bl	8000c64 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8000664:	f000 f98c 	bl	8000980 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  // Start TIM4 in Encoder Mode
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000668:	213c      	movs	r1, #60	@ 0x3c
 800066a:	480a      	ldr	r0, [pc, #40]	@ (8000694 <main+0x48>)
 800066c:	f002 fb0a 	bl	8002c84 <HAL_TIM_Encoder_Start>

  // Start PWM generation on TIM4 Channel 3 (PB8)
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000670:	2108      	movs	r1, #8
 8000672:	4808      	ldr	r0, [pc, #32]	@ (8000694 <main+0x48>)
 8000674:	f002 f98e 	bl	8002994 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Monitor the button press (PC13)
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)  // Button pressed (active low)
 8000678:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800067c:	4806      	ldr	r0, [pc, #24]	@ (8000698 <main+0x4c>)
 800067e:	f000 febb 	bl	80013f8 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d101      	bne.n	800068c <main+0x40>
	  {
		  // Trigger motor control sequence
		  RunMotorControlSequence();
 8000688:	f000 f874 	bl	8000774 <RunMotorControlSequence>
	  }

	  HAL_Delay(100);  // Small delay to debounce the button
 800068c:	2064      	movs	r0, #100	@ 0x64
 800068e:	f000 fc15 	bl	8000ebc <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)  // Button pressed (active low)
 8000692:	e7f1      	b.n	8000678 <main+0x2c>
 8000694:	20000028 	.word	0x20000028
 8000698:	40020800 	.word	0x40020800

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2234      	movs	r2, #52	@ 0x34
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fcf5 	bl	800409a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b29      	ldr	r3, [pc, #164]	@ (800076c <SystemClock_Config+0xd0>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a28      	ldr	r2, [pc, #160]	@ (800076c <SystemClock_Config+0xd0>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b26      	ldr	r3, [pc, #152]	@ (800076c <SystemClock_Config+0xd0>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	4b23      	ldr	r3, [pc, #140]	@ (8000770 <SystemClock_Config+0xd4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a22      	ldr	r2, [pc, #136]	@ (8000770 <SystemClock_Config+0xd4>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <SystemClock_Config+0xd4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006fc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000700:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800070a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000710:	23a8      	movs	r3, #168	@ 0xa8
 8000712:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000718:	2307      	movs	r3, #7
 800071a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fe47 	bl	80023b8 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000730:	f000 f8b6 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000744:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2105      	movs	r1, #5
 8000752:	4618      	mov	r0, r3
 8000754:	f000 ffbc 	bl	80016d0 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800075e:	f000 f89f 	bl	80008a0 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <RunMotorControlSequence>:

/* USER CODE BEGIN 4 */
void RunMotorControlSequence()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
    int current_position = GetEncoderPosition();
 800077a:	f000 f849 	bl	8000810 <GetEncoderPosition>
 800077e:	6078      	str	r0, [r7, #4]
    int target_position;

    // Step 1: Move quarter cycle clockwise
    target_position = current_position + QUARTER_CYCLE_COUNTS;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000786:	603b      	str	r3, [r7, #0]
    MoveToPosition(target_position);
 8000788:	6838      	ldr	r0, [r7, #0]
 800078a:	f000 f812 	bl	80007b2 <MoveToPosition>

    // Step 2: Move half cycle counterclockwise
    target_position = target_position - HALF_CYCLE_COUNTS;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000794:	603b      	str	r3, [r7, #0]
    MoveToPosition(target_position);
 8000796:	6838      	ldr	r0, [r7, #0]
 8000798:	f000 f80b 	bl	80007b2 <MoveToPosition>

    // Step 3: Move quarter cycle clockwise back to starting point
    target_position = target_position + QUARTER_CYCLE_COUNTS;
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80007a2:	603b      	str	r3, [r7, #0]
    MoveToPosition(target_position);
 80007a4:	6838      	ldr	r0, [r7, #0]
 80007a6:	f000 f804 	bl	80007b2 <MoveToPosition>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <MoveToPosition>:

void MoveToPosition(int target_position)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b084      	sub	sp, #16
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
    int current_position = GetEncoderPosition();
 80007ba:	f000 f829 	bl	8000810 <GetEncoderPosition>
 80007be:	60f8      	str	r0, [r7, #12]

    // Determine the direction based on the target position
    if (current_position < target_position)
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	da07      	bge.n	80007d8 <MoveToPosition+0x26>
    {
        SetMotorDirection(1);  // Move forward (clockwise)
 80007c8:	2001      	movs	r0, #1
 80007ca:	f000 f83f 	bl	800084c <SetMotorDirection>
        SetMotorSpeed(32000);  // Set moderate speed
 80007ce:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 80007d2:	f000 f829 	bl	8000828 <SetMotorSpeed>
 80007d6:	e00f      	b.n	80007f8 <MoveToPosition+0x46>
    }
    else if (current_position > target_position)
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	dd0b      	ble.n	80007f8 <MoveToPosition+0x46>
    {
        SetMotorDirection(-1);  // Move backward (counterclockwise)
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007e4:	f000 f832 	bl	800084c <SetMotorDirection>
        SetMotorSpeed(32000);   // Set moderate speed
 80007e8:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 80007ec:	f000 f81c 	bl	8000828 <SetMotorSpeed>
    }

    // Keep moving until the target position is reached
    while (current_position != target_position)
 80007f0:	e002      	b.n	80007f8 <MoveToPosition+0x46>
    {
        current_position = GetEncoderPosition();
 80007f2:	f000 f80d 	bl	8000810 <GetEncoderPosition>
 80007f6:	60f8      	str	r0, [r7, #12]
    while (current_position != target_position)
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d1f8      	bne.n	80007f2 <MoveToPosition+0x40>
    }

    // Stop the motor once the position is reached
    SetMotorSpeed(0);
 8000800:	2000      	movs	r0, #0
 8000802:	f000 f811 	bl	8000828 <SetMotorSpeed>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <GetEncoderPosition>:

// Function to read encoder position
int GetEncoderPosition()
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
    // Return the current encoder position from TIM4 counter
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000814:	4b03      	ldr	r3, [pc, #12]	@ (8000824 <GetEncoderPosition+0x14>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	20000028 	.word	0x20000028

08000828 <SetMotorSpeed>:

// Function to set motor speed using PWM (TIM4 Channel 3 on PB8)
void SetMotorSpeed(uint16_t speed)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]
    // Adjust PWM duty cycle for TIM4 Channel 3 (PB8)
    // Speed should be between 0 (stopped) and 65535 (full speed)
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, speed);
 8000832:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <SetMotorSpeed+0x20>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	88fa      	ldrh	r2, [r7, #6]
 8000838:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000028 	.word	0x20000028

0800084c <SetMotorDirection>:

// Function to set motor direction using GPIOs PA9 and PA10
void SetMotorDirection(int direction)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
    if (direction == 1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d10c      	bne.n	8000874 <SetMotorDirection+0x28>
    {
        // Move forward (set DIR1 high and DIR2 low)
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // DIR1 high
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000860:	480e      	ldr	r0, [pc, #56]	@ (800089c <SetMotorDirection+0x50>)
 8000862:	f000 fde1 	bl	8001428 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // DIR2 low
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800086c:	480b      	ldr	r0, [pc, #44]	@ (800089c <SetMotorDirection+0x50>)
 800086e:	f000 fddb 	bl	8001428 <HAL_GPIO_WritePin>
    {
        // Move backward (set DIR1 low and DIR2 high)
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // DIR1 low
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);   // DIR2 high
    }
}
 8000872:	e00f      	b.n	8000894 <SetMotorDirection+0x48>
    else if (direction == -1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800087a:	d10b      	bne.n	8000894 <SetMotorDirection+0x48>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // DIR1 low
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000882:	4806      	ldr	r0, [pc, #24]	@ (800089c <SetMotorDirection+0x50>)
 8000884:	f000 fdd0 	bl	8001428 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);   // DIR2 high
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800088e:	4803      	ldr	r0, [pc, #12]	@ (800089c <SetMotorDirection+0x50>)
 8000890:	f000 fdca 	bl	8001428 <HAL_GPIO_WritePin>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40020000 	.word	0x40020000

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <Error_Handler+0x8>

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ba:	4a0f      	ldr	r2, [pc, #60]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008c2:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d6:	4a08      	ldr	r2, [pc, #32]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <NMI_Handler+0x4>

08000904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <MemManage_Handler+0x4>

08000914 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <UsageFault_Handler+0x4>

08000924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000952:	f000 fa93 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <SystemInit+0x20>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000966:	4a05      	ldr	r2, [pc, #20]	@ (800097c <SystemInit+0x20>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b092      	sub	sp, #72	@ 0x48
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098a:	2224      	movs	r2, #36	@ 0x24
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f003 fb83 	bl	800409a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099e:	463b      	mov	r3, r7
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
 80009ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009b0:	4b30      	ldr	r3, [pc, #192]	@ (8000a74 <MX_TIM4_Init+0xf4>)
 80009b2:	4a31      	ldr	r2, [pc, #196]	@ (8000a78 <MX_TIM4_Init+0xf8>)
 80009b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <MX_TIM4_Init+0xf4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000a74 <MX_TIM4_Init+0xf4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <MX_TIM4_Init+0xf4>)
 80009c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000a74 <MX_TIM4_Init+0xf4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <MX_TIM4_Init+0xf4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009d6:	4827      	ldr	r0, [pc, #156]	@ (8000a74 <MX_TIM4_Init+0xf4>)
 80009d8:	f001 ff8c 	bl	80028f4 <HAL_TIM_PWM_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80009e2:	f7ff ff5d 	bl	80008a0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009ee:	2301      	movs	r3, #1
 80009f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009fa:	2300      	movs	r3, #0
 80009fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009fe:	2301      	movs	r3, #1
 8000a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4818      	ldr	r0, [pc, #96]	@ (8000a74 <MX_TIM4_Init+0xf4>)
 8000a12:	f002 f887 	bl	8002b24 <HAL_TIM_Encoder_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000a1c:	f7ff ff40 	bl	80008a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4811      	ldr	r0, [pc, #68]	@ (8000a74 <MX_TIM4_Init+0xf4>)
 8000a30:	f002 fcfa 	bl	8003428 <HAL_TIMEx_MasterConfigSynchronization>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8000a3a:	f7ff ff31 	bl	80008a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a3e:	2360      	movs	r3, #96	@ 0x60
 8000a40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2208      	movs	r2, #8
 8000a52:	4619      	mov	r1, r3
 8000a54:	4807      	ldr	r0, [pc, #28]	@ (8000a74 <MX_TIM4_Init+0xf4>)
 8000a56:	f002 f9a3 	bl	8002da0 <HAL_TIM_PWM_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 8000a60:	f7ff ff1e 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a64:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <MX_TIM4_Init+0xf4>)
 8000a66:	f000 f851 	bl	8000b0c <HAL_TIM_MspPostInit>

}
 8000a6a:	bf00      	nop
 8000a6c:	3748      	adds	r7, #72	@ 0x48
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000028 	.word	0x20000028
 8000a78:	40000800 	.word	0x40000800

08000a7c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM4)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a19      	ldr	r2, [pc, #100]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x84>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12c      	bne.n	8000af8 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <HAL_TIM_PWM_MspInit+0x88>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a17      	ldr	r2, [pc, #92]	@ (8000b04 <HAL_TIM_PWM_MspInit+0x88>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <HAL_TIM_PWM_MspInit+0x88>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <HAL_TIM_PWM_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a10      	ldr	r2, [pc, #64]	@ (8000b04 <HAL_TIM_PWM_MspInit+0x88>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <HAL_TIM_PWM_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ad6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <HAL_TIM_PWM_MspInit+0x8c>)
 8000af4:	f000 faec 	bl	80010d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	@ 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40000800 	.word	0x40000800
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020c00 	.word	0x40020c00

08000b0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <HAL_TIM_MspPostInit+0x68>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d11e      	bne.n	8000b6c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <HAL_TIM_MspPostInit+0x6c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	4a10      	ldr	r2, [pc, #64]	@ (8000b78 <HAL_TIM_MspPostInit+0x6c>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <HAL_TIM_MspPostInit+0x6c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <HAL_TIM_MspPostInit+0x70>)
 8000b68:	f000 fab2 	bl	80010d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40000800 	.word	0x40000800
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020400 	.word	0x40020400

08000b80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	@ (8000bd0 <MX_USART3_UART_Init+0x50>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000b8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_USART3_UART_Init+0x4c>)
 8000bb8:	f002 fcb2 	bl	8003520 <HAL_UART_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bc2:	f7ff fe6d 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000070 	.word	0x20000070
 8000bd0:	40004800 	.word	0x40004800

08000bd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	@ 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	@ (8000c58 <HAL_UART_MspInit+0x84>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12c      	bne.n	8000c50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <HAL_UART_MspInit+0x88>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	4a17      	ldr	r2, [pc, #92]	@ (8000c5c <HAL_UART_MspInit+0x88>)
 8000c00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <HAL_UART_MspInit+0x88>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <HAL_UART_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a10      	ldr	r2, [pc, #64]	@ (8000c5c <HAL_UART_MspInit+0x88>)
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <HAL_UART_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c40:	2307      	movs	r3, #7
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <HAL_UART_MspInit+0x8c>)
 8000c4c:	f000 fa40 	bl	80010d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	@ 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40004800 	.word	0x40004800
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020c00 	.word	0x40020c00

08000c64 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c68:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c6a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c72:	2206      	movs	r2, #6
 8000c74:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c78:	2202      	movs	r2, #2
 8000c7a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c84:	2202      	movs	r2, #2
 8000c86:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca8:	f000 fbd7 	bl	800145a <HAL_PCD_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cb2:	f7ff fdf5 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200000b8 	.word	0x200000b8

08000cc0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0a0      	sub	sp, #128	@ 0x80
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	225c      	movs	r2, #92	@ 0x5c
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f003 f9da 	bl	800409a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cee:	d141      	bne.n	8000d74 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fe00 	bl	8001904 <HAL_RCCEx_PeriphCLKConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000d0a:	f7ff fdc9 	bl	80008a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <HAL_PCD_MspInit+0xbc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a19      	ldr	r2, [pc, #100]	@ (8000d7c <HAL_PCD_MspInit+0xbc>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <HAL_PCD_MspInit+0xbc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000d2a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d3c:	230a      	movs	r3, #10
 8000d3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d44:	4619      	mov	r1, r3
 8000d46:	480e      	ldr	r0, [pc, #56]	@ (8000d80 <HAL_PCD_MspInit+0xc0>)
 8000d48:	f000 f9c2 	bl	80010d0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <HAL_PCD_MspInit+0xbc>)
 8000d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d50:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <HAL_PCD_MspInit+0xbc>)
 8000d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d56:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <HAL_PCD_MspInit+0xbc>)
 8000d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d60:	4a06      	ldr	r2, [pc, #24]	@ (8000d7c <HAL_PCD_MspInit+0xbc>)
 8000d62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d66:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d68:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <HAL_PCD_MspInit+0xbc>)
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000d74:	bf00      	nop
 8000d76:	3780      	adds	r7, #128	@ 0x80
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000

08000d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d88:	f7ff fde8 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d8c:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8e:	490d      	ldr	r1, [pc, #52]	@ (8000dc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d90:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da4:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000db2:	f003 f97b 	bl	80040ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db6:	f7ff fc49 	bl	800064c <main>
  bx  lr    
 8000dba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc8:	08004134 	.word	0x08004134
  ldr r2, =_sbss
 8000dcc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dd0:	200005a0 	.word	0x200005a0

08000dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e18 <HAL_Init+0x40>)
 8000de2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <HAL_Init+0x40>)
 8000dee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a07      	ldr	r2, [pc, #28]	@ (8000e18 <HAL_Init+0x40>)
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f000 f931 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f000 f808 	bl	8000e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0c:	f7ff fd4e 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023c00 	.word	0x40023c00

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_InitTick+0x54>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_InitTick+0x58>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f93b 	bl	80010b6 <HAL_SYSTICK_Config>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00e      	b.n	8000e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d80a      	bhi.n	8000e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e58:	f000 f911 	bl	800107e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e5c:	4a06      	ldr	r2, [pc, #24]	@ (8000e78 <HAL_InitTick+0x5c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	2000059c 	.word	0x2000059c

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	@ (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	2000059c 	.word	0x2000059c

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ed4:	d005      	beq.n	8000ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_Delay+0x44>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee2:	bf00      	nop
 8000ee4:	f7ff ffde 	bl	8000ea4 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d8f7      	bhi.n	8000ee4 <HAL_Delay+0x28>
  {
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	@ (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	@ (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	@ 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	@ 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001048:	f7ff ff8e 	bl	8000f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff47 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff5c 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff8e 	bl	8000fbc <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5d 	bl	8000f68 <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffb0 	bl	8001024 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	@ 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e165      	b.n	80013b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8154 	bne.w	80013b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b01      	cmp	r3, #1
 8001114:	d005      	beq.n	8001122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111e:	2b02      	cmp	r3, #2
 8001120:	d130      	bne.n	8001184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 0201 	and.w	r2, r3, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b03      	cmp	r3, #3
 800118e:	d017      	beq.n	80011c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d123      	bne.n	8001214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	08da      	lsrs	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3208      	adds	r2, #8
 80011d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	08da      	lsrs	r2, r3, #3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3208      	adds	r2, #8
 800120e:	69b9      	ldr	r1, [r7, #24]
 8001210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0203 	and.w	r2, r3, #3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80ae 	beq.w	80013b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b5d      	ldr	r3, [pc, #372]	@ (80013d0 <HAL_GPIO_Init+0x300>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125e:	4a5c      	ldr	r2, [pc, #368]	@ (80013d0 <HAL_GPIO_Init+0x300>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001264:	6453      	str	r3, [r2, #68]	@ 0x44
 8001266:	4b5a      	ldr	r3, [pc, #360]	@ (80013d0 <HAL_GPIO_Init+0x300>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001272:	4a58      	ldr	r2, [pc, #352]	@ (80013d4 <HAL_GPIO_Init+0x304>)
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4f      	ldr	r2, [pc, #316]	@ (80013d8 <HAL_GPIO_Init+0x308>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d025      	beq.n	80012ea <HAL_GPIO_Init+0x21a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4e      	ldr	r2, [pc, #312]	@ (80013dc <HAL_GPIO_Init+0x30c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d01f      	beq.n	80012e6 <HAL_GPIO_Init+0x216>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4d      	ldr	r2, [pc, #308]	@ (80013e0 <HAL_GPIO_Init+0x310>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d019      	beq.n	80012e2 <HAL_GPIO_Init+0x212>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4c      	ldr	r2, [pc, #304]	@ (80013e4 <HAL_GPIO_Init+0x314>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d013      	beq.n	80012de <HAL_GPIO_Init+0x20e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4b      	ldr	r2, [pc, #300]	@ (80013e8 <HAL_GPIO_Init+0x318>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d00d      	beq.n	80012da <HAL_GPIO_Init+0x20a>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4a      	ldr	r2, [pc, #296]	@ (80013ec <HAL_GPIO_Init+0x31c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d007      	beq.n	80012d6 <HAL_GPIO_Init+0x206>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a49      	ldr	r2, [pc, #292]	@ (80013f0 <HAL_GPIO_Init+0x320>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_GPIO_Init+0x202>
 80012ce:	2306      	movs	r3, #6
 80012d0:	e00c      	b.n	80012ec <HAL_GPIO_Init+0x21c>
 80012d2:	2307      	movs	r3, #7
 80012d4:	e00a      	b.n	80012ec <HAL_GPIO_Init+0x21c>
 80012d6:	2305      	movs	r3, #5
 80012d8:	e008      	b.n	80012ec <HAL_GPIO_Init+0x21c>
 80012da:	2304      	movs	r3, #4
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x21c>
 80012de:	2303      	movs	r3, #3
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x21c>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x21c>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x21c>
 80012ea:	2300      	movs	r3, #0
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	f002 0203 	and.w	r2, r2, #3
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4093      	lsls	r3, r2
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012fc:	4935      	ldr	r1, [pc, #212]	@ (80013d4 <HAL_GPIO_Init+0x304>)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130a:	4b3a      	ldr	r3, [pc, #232]	@ (80013f4 <HAL_GPIO_Init+0x324>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132e:	4a31      	ldr	r2, [pc, #196]	@ (80013f4 <HAL_GPIO_Init+0x324>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001334:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <HAL_GPIO_Init+0x324>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001358:	4a26      	ldr	r2, [pc, #152]	@ (80013f4 <HAL_GPIO_Init+0x324>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800135e:	4b25      	ldr	r3, [pc, #148]	@ (80013f4 <HAL_GPIO_Init+0x324>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001382:	4a1c      	ldr	r2, [pc, #112]	@ (80013f4 <HAL_GPIO_Init+0x324>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001388:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <HAL_GPIO_Init+0x324>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ac:	4a11      	ldr	r2, [pc, #68]	@ (80013f4 <HAL_GPIO_Init+0x324>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	f67f ae96 	bls.w	80010ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3724      	adds	r7, #36	@ 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40013800 	.word	0x40013800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020c00 	.word	0x40020c00
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40021400 	.word	0x40021400
 80013f0:	40021800 	.word	0x40021800
 80013f4:	40013c00 	.word	0x40013c00

080013f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	e001      	b.n	800141a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800141a:	7bfb      	ldrb	r3, [r7, #15]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
 8001434:	4613      	mov	r3, r2
 8001436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001444:	e003      	b.n	800144e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	041a      	lsls	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	619a      	str	r2, [r3, #24]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af02      	add	r7, sp, #8
 8001460:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e108      	b.n	800167e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fc1a 	bl	8000cc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2203      	movs	r2, #3
 8001490:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800149a:	d102      	bne.n	80014a2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f002 fb62 	bl	8003b70 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7c1a      	ldrb	r2, [r3, #16]
 80014b4:	f88d 2000 	strb.w	r2, [sp]
 80014b8:	3304      	adds	r3, #4
 80014ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014bc:	f002 faf4 	bl	8003aa8 <USB_CoreInit>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2202      	movs	r2, #2
 80014ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e0d5      	b.n	800167e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 fb5a 	bl	8003b92 <USB_SetCurrentMode>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2202      	movs	r2, #2
 80014e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0c6      	b.n	800167e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e04a      	b.n	800158c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	3315      	adds	r3, #21
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	3314      	adds	r3, #20
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	b298      	uxth	r0, r3
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	332e      	adds	r3, #46	@ 0x2e
 8001532:	4602      	mov	r2, r0
 8001534:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	3318      	adds	r3, #24
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	331c      	adds	r3, #28
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3320      	adds	r3, #32
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	3324      	adds	r3, #36	@ 0x24
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	3301      	adds	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	791b      	ldrb	r3, [r3, #4]
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	429a      	cmp	r2, r3
 8001594:	d3af      	bcc.n	80014f6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	e044      	b.n	8001626 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	3301      	adds	r3, #1
 8001624:	73fb      	strb	r3, [r7, #15]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	791b      	ldrb	r3, [r3, #4]
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	429a      	cmp	r2, r3
 800162e:	d3b5      	bcc.n	800159c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7c1a      	ldrb	r2, [r3, #16]
 8001638:	f88d 2000 	strb.w	r2, [sp]
 800163c:	3304      	adds	r3, #4
 800163e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001640:	f002 faf4 	bl	8003c2c <USB_DevInit>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2202      	movs	r2, #2
 800164e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e013      	b.n	800167e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7b1b      	ldrb	r3, [r3, #12]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d102      	bne.n	8001672 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f80a 	bl	8001686 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fcaf 	bl	8003fda <USB_DevDisconnect>

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001686:	b480      	push	{r7}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	f043 0303 	orr.w	r3, r3, #3
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0cc      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016e4:	4b68      	ldr	r3, [pc, #416]	@ (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d90c      	bls.n	800170c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4b65      	ldr	r3, [pc, #404]	@ (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fa:	4b63      	ldr	r3, [pc, #396]	@ (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0b8      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d020      	beq.n	800175a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001724:	4b59      	ldr	r3, [pc, #356]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a58      	ldr	r2, [pc, #352]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800172e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800173c:	4b53      	ldr	r3, [pc, #332]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4a52      	ldr	r2, [pc, #328]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001748:	4b50      	ldr	r3, [pc, #320]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	494d      	ldr	r1, [pc, #308]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d044      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d107      	bne.n	800177e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	4b47      	ldr	r3, [pc, #284]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d119      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e07f      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d003      	beq.n	800178e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178a:	2b03      	cmp	r3, #3
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178e:	4b3f      	ldr	r3, [pc, #252]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e06f      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e067      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ae:	4b37      	ldr	r3, [pc, #220]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f023 0203 	bic.w	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4934      	ldr	r1, [pc, #208]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c0:	f7ff fb70 	bl	8000ea4 <HAL_GetTick>
 80017c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	e00a      	b.n	80017de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7ff fb6c 	bl	8000ea4 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e04f      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 020c 	and.w	r2, r3, #12
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d1eb      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	4b25      	ldr	r3, [pc, #148]	@ (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 030f 	and.w	r3, r3, #15
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d20c      	bcs.n	8001818 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b22      	ldr	r3, [pc, #136]	@ (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e032      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001824:	4b19      	ldr	r3, [pc, #100]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4916      	ldr	r1, [pc, #88]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d009      	beq.n	8001856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001842:	4b12      	ldr	r3, [pc, #72]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	490e      	ldr	r1, [pc, #56]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001856:	f000 fb7f 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 800185a:	4602      	mov	r2, r0
 800185c:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	490a      	ldr	r1, [pc, #40]	@ (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	5ccb      	ldrb	r3, [r1, r3]
 800186a:	fa22 f303 	lsr.w	r3, r2, r3
 800186e:	4a09      	ldr	r2, [pc, #36]	@ (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001872:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <HAL_RCC_ClockConfig+0x1c8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fad0 	bl	8000e1c <HAL_InitTick>

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023c00 	.word	0x40023c00
 800188c:	40023800 	.word	0x40023800
 8001890:	0800410c 	.word	0x0800410c
 8001894:	20000000 	.word	0x20000000
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000000 	.word	0x20000000

080018b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018b8:	f7ff fff0 	bl	800189c <HAL_RCC_GetHCLKFreq>
 80018bc:	4602      	mov	r2, r0
 80018be:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	0a9b      	lsrs	r3, r3, #10
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	4903      	ldr	r1, [pc, #12]	@ (80018d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ca:	5ccb      	ldrb	r3, [r1, r3]
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	0800411c 	.word	0x0800411c

080018dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018e0:	f7ff ffdc 	bl	800189c <HAL_RCC_GetHCLKFreq>
 80018e4:	4602      	mov	r2, r0
 80018e6:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	0b5b      	lsrs	r3, r3, #13
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	4903      	ldr	r1, [pc, #12]	@ (8001900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018f2:	5ccb      	ldrb	r3, [r1, r3]
 80018f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	0800411c 	.word	0x0800411c

08001904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08c      	sub	sp, #48	@ 0x30
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d010      	beq.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800193c:	4b6f      	ldr	r3, [pc, #444]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800193e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001942:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800194a:	496c      	ldr	r1, [pc, #432]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800194c:	4313      	orrs	r3, r2
 800194e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800195a:	2301      	movs	r3, #1
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d010      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800196a:	4b64      	ldr	r3, [pc, #400]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800196c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001970:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001978:	4960      	ldr	r1, [pc, #384]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800197a:	4313      	orrs	r3, r2
 800197c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001988:	2301      	movs	r3, #1
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d017      	beq.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001998:	4b58      	ldr	r3, [pc, #352]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800199a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800199e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4955      	ldr	r1, [pc, #340]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019b6:	d101      	bne.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80019b8:	2301      	movs	r3, #1
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80019c4:	2301      	movs	r3, #1
 80019c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d017      	beq.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80019d4:	4b49      	ldr	r3, [pc, #292]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e2:	4946      	ldr	r1, [pc, #280]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019f2:	d101      	bne.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80019f4:	2301      	movs	r3, #1
 80019f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001a00:	2301      	movs	r3, #1
 8001a02:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0320 	and.w	r3, r3, #32
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 808a 	beq.w	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	4b39      	ldr	r3, [pc, #228]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	4a38      	ldr	r2, [pc, #224]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a22:	4b36      	ldr	r3, [pc, #216]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a2e:	4b34      	ldr	r3, [pc, #208]	@ (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a33      	ldr	r2, [pc, #204]	@ (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a3a:	f7ff fa33 	bl	8000ea4 <HAL_GetTick>
 8001a3e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a42:	f7ff fa2f 	bl	8000ea4 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e278      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001a54:	4b2a      	ldr	r3, [pc, #168]	@ (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a60:	4b26      	ldr	r3, [pc, #152]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a68:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d02f      	beq.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a78:	6a3a      	ldr	r2, [r7, #32]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d028      	beq.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a86:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a88:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001a94:	4a19      	ldr	r2, [pc, #100]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a9a:	4b18      	ldr	r3, [pc, #96]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d114      	bne.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff f9fd 	bl	8000ea4 <HAL_GetTick>
 8001aaa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aae:	f7ff f9f9 	bl	8000ea4 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e240      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0ee      	beq.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ad8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001adc:	d114      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001ade:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001af2:	4902      	ldr	r1, [pc, #8]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]
 8001af8:	e00c      	b.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000
 8001b04:	42470e40 	.word	0x42470e40
 8001b08:	4b4a      	ldr	r3, [pc, #296]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4a49      	ldr	r2, [pc, #292]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b0e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001b12:	6093      	str	r3, [r2, #8]
 8001b14:	4b47      	ldr	r3, [pc, #284]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b20:	4944      	ldr	r1, [pc, #272]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001b38:	4b3f      	ldr	r3, [pc, #252]	@ (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001b3a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00a      	beq.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001b48:	4b3a      	ldr	r3, [pc, #232]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b56:	4937      	ldr	r1, [pc, #220]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00a      	beq.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b6a:	4b32      	ldr	r3, [pc, #200]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b70:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b78:	492e      	ldr	r1, [pc, #184]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d011      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001b8c:	4b29      	ldr	r3, [pc, #164]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b92:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b9a:	4926      	ldr	r1, [pc, #152]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001bac:	2301      	movs	r3, #1
 8001bae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00a      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bc2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	491a      	ldr	r1, [pc, #104]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d011      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001bde:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001be4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bec:	4911      	ldr	r1, [pc, #68]	@ (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d005      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c10:	f040 80ff 	bne.w	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c1a:	f7ff f943 	bl	8000ea4 <HAL_GetTick>
 8001c1e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c20:	e00e      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c22:	f7ff f93f 	bl	8000ea4 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d907      	bls.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e188      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001c34:	40023800 	.word	0x40023800
 8001c38:	424711e0 	.word	0x424711e0
 8001c3c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c40:	4b7e      	ldr	r3, [pc, #504]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1ea      	bne.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d009      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d028      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d124      	bne.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c74:	4b71      	ldr	r3, [pc, #452]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c7a:	0c1b      	lsrs	r3, r3, #16
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	3301      	adds	r3, #1
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c86:	4b6d      	ldr	r3, [pc, #436]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c8c:	0e1b      	lsrs	r3, r3, #24
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	019b      	lsls	r3, r3, #6
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	085b      	lsrs	r3, r3, #1
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	041b      	lsls	r3, r3, #16
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	061b      	lsls	r3, r3, #24
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	071b      	lsls	r3, r3, #28
 8001cb6:	4961      	ldr	r1, [pc, #388]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d004      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cd2:	d00a      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d035      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ce8:	d130      	bne.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001cea:	4b54      	ldr	r3, [pc, #336]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cf0:	0c1b      	lsrs	r3, r3, #16
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001cfc:	4b4f      	ldr	r3, [pc, #316]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d02:	0f1b      	lsrs	r3, r3, #28
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	019b      	lsls	r3, r3, #6
 8001d14:	431a      	orrs	r2, r3
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	085b      	lsrs	r3, r3, #1
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	041b      	lsls	r3, r3, #16
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	061b      	lsls	r3, r3, #24
 8001d26:	431a      	orrs	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	071b      	lsls	r3, r3, #28
 8001d2c:	4943      	ldr	r1, [pc, #268]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d34:	4b41      	ldr	r3, [pc, #260]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d3a:	f023 021f 	bic.w	r2, r3, #31
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d42:	3b01      	subs	r3, #1
 8001d44:	493d      	ldr	r1, [pc, #244]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d029      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d60:	d124      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d62:	4b36      	ldr	r3, [pc, #216]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d68:	0c1b      	lsrs	r3, r3, #16
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d74:	4b31      	ldr	r3, [pc, #196]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d7a:	0f1b      	lsrs	r3, r3, #28
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	019b      	lsls	r3, r3, #6
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	085b      	lsrs	r3, r3, #1
 8001d94:	3b01      	subs	r3, #1
 8001d96:	041b      	lsls	r3, r3, #16
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	061b      	lsls	r3, r3, #24
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	071b      	lsls	r3, r3, #28
 8001da4:	4925      	ldr	r1, [pc, #148]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d016      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	019b      	lsls	r3, r3, #6
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	041b      	lsls	r3, r3, #16
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	071b      	lsls	r3, r3, #28
 8001dde:	4917      	ldr	r1, [pc, #92]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001de6:	4b16      	ldr	r3, [pc, #88]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dec:	f7ff f85a 	bl	8000ea4 <HAL_GetTick>
 8001df0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001df4:	f7ff f856 	bl	8000ea4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e09f      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e06:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8001e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	f040 8095 	bne.w	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e20:	f7ff f840 	bl	8000ea4 <HAL_GetTick>
 8001e24:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e26:	e00f      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e28:	f7ff f83c 	bl	8000ea4 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d908      	bls.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e085      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	42470068 	.word	0x42470068
 8001e44:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e48:	4b41      	ldr	r3, [pc, #260]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e54:	d0e8      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d02b      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d127      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001e7e:	4b34      	ldr	r3, [pc, #208]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e84:	0c1b      	lsrs	r3, r3, #16
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699a      	ldr	r2, [r3, #24]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	019b      	lsls	r3, r3, #6
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	085b      	lsrs	r3, r3, #1
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	041b      	lsls	r3, r3, #16
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	061b      	lsls	r3, r3, #24
 8001eac:	4928      	ldr	r1, [pc, #160]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001eb4:	4b26      	ldr	r3, [pc, #152]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eba:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	4922      	ldr	r1, [pc, #136]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d01d      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ede:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ee2:	d118      	bne.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eea:	0e1b      	lsrs	r3, r3, #24
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	019b      	lsls	r3, r3, #6
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	085b      	lsrs	r3, r3, #1
 8001f04:	3b01      	subs	r3, #1
 8001f06:	041b      	lsls	r3, r3, #16
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	061b      	lsls	r3, r3, #24
 8001f0e:	4910      	ldr	r1, [pc, #64]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001f16:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f1c:	f7fe ffc2 	bl	8000ea4 <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f24:	f7fe ffbe 	bl	8000ea4 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e007      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f42:	d1ef      	bne.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3730      	adds	r7, #48	@ 0x30
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	42470070 	.word	0x42470070

08001f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f5c:	b0ae      	sub	sp, #184	@ 0xb8
 8001f5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f7e:	4bcb      	ldr	r3, [pc, #812]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x354>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b0c      	cmp	r3, #12
 8001f88:	f200 8206 	bhi.w	8002398 <HAL_RCC_GetSysClockFreq+0x440>
 8001f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f94 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f92:	bf00      	nop
 8001f94:	08001fc9 	.word	0x08001fc9
 8001f98:	08002399 	.word	0x08002399
 8001f9c:	08002399 	.word	0x08002399
 8001fa0:	08002399 	.word	0x08002399
 8001fa4:	08001fd1 	.word	0x08001fd1
 8001fa8:	08002399 	.word	0x08002399
 8001fac:	08002399 	.word	0x08002399
 8001fb0:	08002399 	.word	0x08002399
 8001fb4:	08001fd9 	.word	0x08001fd9
 8001fb8:	08002399 	.word	0x08002399
 8001fbc:	08002399 	.word	0x08002399
 8001fc0:	08002399 	.word	0x08002399
 8001fc4:	080021c9 	.word	0x080021c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fc8:	4bb9      	ldr	r3, [pc, #740]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fce:	e1e7      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fd0:	4bb8      	ldr	r3, [pc, #736]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fd6:	e1e3      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fd8:	4bb4      	ldr	r3, [pc, #720]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x354>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fe4:	4bb1      	ldr	r3, [pc, #708]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x354>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d071      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff0:	4bae      	ldr	r3, [pc, #696]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ffc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002000:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002008:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002012:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002016:	4622      	mov	r2, r4
 8002018:	462b      	mov	r3, r5
 800201a:	f04f 0000 	mov.w	r0, #0
 800201e:	f04f 0100 	mov.w	r1, #0
 8002022:	0159      	lsls	r1, r3, #5
 8002024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002028:	0150      	lsls	r0, r2, #5
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4621      	mov	r1, r4
 8002030:	1a51      	subs	r1, r2, r1
 8002032:	6439      	str	r1, [r7, #64]	@ 0x40
 8002034:	4629      	mov	r1, r5
 8002036:	eb63 0301 	sbc.w	r3, r3, r1
 800203a:	647b      	str	r3, [r7, #68]	@ 0x44
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002048:	4649      	mov	r1, r9
 800204a:	018b      	lsls	r3, r1, #6
 800204c:	4641      	mov	r1, r8
 800204e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002052:	4641      	mov	r1, r8
 8002054:	018a      	lsls	r2, r1, #6
 8002056:	4641      	mov	r1, r8
 8002058:	1a51      	subs	r1, r2, r1
 800205a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800205c:	4649      	mov	r1, r9
 800205e:	eb63 0301 	sbc.w	r3, r3, r1
 8002062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002070:	4649      	mov	r1, r9
 8002072:	00cb      	lsls	r3, r1, #3
 8002074:	4641      	mov	r1, r8
 8002076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800207a:	4641      	mov	r1, r8
 800207c:	00ca      	lsls	r2, r1, #3
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	4603      	mov	r3, r0
 8002084:	4622      	mov	r2, r4
 8002086:	189b      	adds	r3, r3, r2
 8002088:	633b      	str	r3, [r7, #48]	@ 0x30
 800208a:	462b      	mov	r3, r5
 800208c:	460a      	mov	r2, r1
 800208e:	eb42 0303 	adc.w	r3, r2, r3
 8002092:	637b      	str	r3, [r7, #52]	@ 0x34
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80020a0:	4629      	mov	r1, r5
 80020a2:	024b      	lsls	r3, r1, #9
 80020a4:	4621      	mov	r1, r4
 80020a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020aa:	4621      	mov	r1, r4
 80020ac:	024a      	lsls	r2, r1, #9
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020b6:	2200      	movs	r2, #0
 80020b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80020c4:	f7fe f89e 	bl	8000204 <__aeabi_uldivmod>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4613      	mov	r3, r2
 80020ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020d2:	e067      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d4:	4b75      	ldr	r3, [pc, #468]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x354>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	2200      	movs	r2, #0
 80020dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020e0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80020e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020ee:	2300      	movs	r3, #0
 80020f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80020f6:	4622      	mov	r2, r4
 80020f8:	462b      	mov	r3, r5
 80020fa:	f04f 0000 	mov.w	r0, #0
 80020fe:	f04f 0100 	mov.w	r1, #0
 8002102:	0159      	lsls	r1, r3, #5
 8002104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002108:	0150      	lsls	r0, r2, #5
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4621      	mov	r1, r4
 8002110:	1a51      	subs	r1, r2, r1
 8002112:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002114:	4629      	mov	r1, r5
 8002116:	eb63 0301 	sbc.w	r3, r3, r1
 800211a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002128:	4649      	mov	r1, r9
 800212a:	018b      	lsls	r3, r1, #6
 800212c:	4641      	mov	r1, r8
 800212e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002132:	4641      	mov	r1, r8
 8002134:	018a      	lsls	r2, r1, #6
 8002136:	4641      	mov	r1, r8
 8002138:	ebb2 0a01 	subs.w	sl, r2, r1
 800213c:	4649      	mov	r1, r9
 800213e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800214e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002152:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002156:	4692      	mov	sl, r2
 8002158:	469b      	mov	fp, r3
 800215a:	4623      	mov	r3, r4
 800215c:	eb1a 0303 	adds.w	r3, sl, r3
 8002160:	623b      	str	r3, [r7, #32]
 8002162:	462b      	mov	r3, r5
 8002164:	eb4b 0303 	adc.w	r3, fp, r3
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002176:	4629      	mov	r1, r5
 8002178:	028b      	lsls	r3, r1, #10
 800217a:	4621      	mov	r1, r4
 800217c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002180:	4621      	mov	r1, r4
 8002182:	028a      	lsls	r2, r1, #10
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800218c:	2200      	movs	r2, #0
 800218e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002190:	677a      	str	r2, [r7, #116]	@ 0x74
 8002192:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002196:	f7fe f835 	bl	8000204 <__aeabi_uldivmod>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4613      	mov	r3, r2
 80021a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021a4:	4b41      	ldr	r3, [pc, #260]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x354>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	0c1b      	lsrs	r3, r3, #16
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	3301      	adds	r3, #1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80021b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021c6:	e0eb      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c8:	4b38      	ldr	r3, [pc, #224]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x354>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021d4:	4b35      	ldr	r3, [pc, #212]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x354>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d06b      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e0:	4b32      	ldr	r3, [pc, #200]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x354>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	099b      	lsrs	r3, r3, #6
 80021e6:	2200      	movs	r2, #0
 80021e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80021ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80021f4:	2300      	movs	r3, #0
 80021f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80021f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80021fc:	4622      	mov	r2, r4
 80021fe:	462b      	mov	r3, r5
 8002200:	f04f 0000 	mov.w	r0, #0
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	0159      	lsls	r1, r3, #5
 800220a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800220e:	0150      	lsls	r0, r2, #5
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4621      	mov	r1, r4
 8002216:	1a51      	subs	r1, r2, r1
 8002218:	61b9      	str	r1, [r7, #24]
 800221a:	4629      	mov	r1, r5
 800221c:	eb63 0301 	sbc.w	r3, r3, r1
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800222e:	4659      	mov	r1, fp
 8002230:	018b      	lsls	r3, r1, #6
 8002232:	4651      	mov	r1, sl
 8002234:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002238:	4651      	mov	r1, sl
 800223a:	018a      	lsls	r2, r1, #6
 800223c:	4651      	mov	r1, sl
 800223e:	ebb2 0801 	subs.w	r8, r2, r1
 8002242:	4659      	mov	r1, fp
 8002244:	eb63 0901 	sbc.w	r9, r3, r1
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002254:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002258:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800225c:	4690      	mov	r8, r2
 800225e:	4699      	mov	r9, r3
 8002260:	4623      	mov	r3, r4
 8002262:	eb18 0303 	adds.w	r3, r8, r3
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	462b      	mov	r3, r5
 800226a:	eb49 0303 	adc.w	r3, r9, r3
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800227c:	4629      	mov	r1, r5
 800227e:	024b      	lsls	r3, r1, #9
 8002280:	4621      	mov	r1, r4
 8002282:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002286:	4621      	mov	r1, r4
 8002288:	024a      	lsls	r2, r1, #9
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002292:	2200      	movs	r2, #0
 8002294:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002296:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002298:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800229c:	f7fd ffb2 	bl	8000204 <__aeabi_uldivmod>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4613      	mov	r3, r2
 80022a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022aa:	e065      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x420>
 80022ac:	40023800 	.word	0x40023800
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b8:	4b3d      	ldr	r3, [pc, #244]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x458>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	099b      	lsrs	r3, r3, #6
 80022be:	2200      	movs	r2, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	4611      	mov	r1, r2
 80022c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80022ca:	2300      	movs	r3, #0
 80022cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80022ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80022d2:	4642      	mov	r2, r8
 80022d4:	464b      	mov	r3, r9
 80022d6:	f04f 0000 	mov.w	r0, #0
 80022da:	f04f 0100 	mov.w	r1, #0
 80022de:	0159      	lsls	r1, r3, #5
 80022e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022e4:	0150      	lsls	r0, r2, #5
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4641      	mov	r1, r8
 80022ec:	1a51      	subs	r1, r2, r1
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	4649      	mov	r1, r9
 80022f2:	eb63 0301 	sbc.w	r3, r3, r1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002304:	4659      	mov	r1, fp
 8002306:	018b      	lsls	r3, r1, #6
 8002308:	4651      	mov	r1, sl
 800230a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800230e:	4651      	mov	r1, sl
 8002310:	018a      	lsls	r2, r1, #6
 8002312:	4651      	mov	r1, sl
 8002314:	1a54      	subs	r4, r2, r1
 8002316:	4659      	mov	r1, fp
 8002318:	eb63 0501 	sbc.w	r5, r3, r1
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	00eb      	lsls	r3, r5, #3
 8002326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800232a:	00e2      	lsls	r2, r4, #3
 800232c:	4614      	mov	r4, r2
 800232e:	461d      	mov	r5, r3
 8002330:	4643      	mov	r3, r8
 8002332:	18e3      	adds	r3, r4, r3
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	464b      	mov	r3, r9
 8002338:	eb45 0303 	adc.w	r3, r5, r3
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	e9d7 4500 	ldrd	r4, r5, [r7]
 800234a:	4629      	mov	r1, r5
 800234c:	028b      	lsls	r3, r1, #10
 800234e:	4621      	mov	r1, r4
 8002350:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002354:	4621      	mov	r1, r4
 8002356:	028a      	lsls	r2, r1, #10
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002360:	2200      	movs	r2, #0
 8002362:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002364:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002366:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800236a:	f7fd ff4b 	bl	8000204 <__aeabi_uldivmod>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4613      	mov	r3, r2
 8002374:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002378:	4b0d      	ldr	r3, [pc, #52]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0f1b      	lsrs	r3, r3, #28
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002386:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800238a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002396:	e003      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800239a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800239e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	37b8      	adds	r7, #184	@ 0xb8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	00f42400 	.word	0x00f42400

080023b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e28d      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8083 	beq.w	80024de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023d8:	4b94      	ldr	r3, [pc, #592]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d019      	beq.n	8002418 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023e4:	4b91      	ldr	r3, [pc, #580]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 030c 	and.w	r3, r3, #12
        || \
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023f0:	4b8e      	ldr	r3, [pc, #568]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023fc:	d00c      	beq.n	8002418 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fe:	4b8b      	ldr	r3, [pc, #556]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d112      	bne.n	8002430 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240a:	4b88      	ldr	r3, [pc, #544]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002412:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002416:	d10b      	bne.n	8002430 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	4b84      	ldr	r3, [pc, #528]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d05b      	beq.n	80024dc <HAL_RCC_OscConfig+0x124>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d157      	bne.n	80024dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e25a      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002438:	d106      	bne.n	8002448 <HAL_RCC_OscConfig+0x90>
 800243a:	4b7c      	ldr	r3, [pc, #496]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a7b      	ldr	r2, [pc, #492]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e01d      	b.n	8002484 <HAL_RCC_OscConfig+0xcc>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0xb4>
 8002452:	4b76      	ldr	r3, [pc, #472]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a75      	ldr	r2, [pc, #468]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b73      	ldr	r3, [pc, #460]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a72      	ldr	r2, [pc, #456]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0xcc>
 800246c:	4b6f      	ldr	r3, [pc, #444]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a6e      	ldr	r2, [pc, #440]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b6c      	ldr	r3, [pc, #432]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a6b      	ldr	r2, [pc, #428]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 800247e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe fd0a 	bl	8000ea4 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002494:	f7fe fd06 	bl	8000ea4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	@ 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e21f      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b61      	ldr	r3, [pc, #388]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0xdc>
 80024b2:	e014      	b.n	80024de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe fcf6 	bl	8000ea4 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024bc:	f7fe fcf2 	bl	8000ea4 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	@ 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e20b      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	4b57      	ldr	r3, [pc, #348]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x104>
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d06f      	beq.n	80025ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024ea:	4b50      	ldr	r3, [pc, #320]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d017      	beq.n	8002526 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80024f6:	4b4d      	ldr	r3, [pc, #308]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
        || \
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d105      	bne.n	800250e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002502:	4b4a      	ldr	r3, [pc, #296]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250e:	4b47      	ldr	r3, [pc, #284]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d11c      	bne.n	8002554 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251a:	4b44      	ldr	r3, [pc, #272]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d116      	bne.n	8002554 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	4b41      	ldr	r3, [pc, #260]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_RCC_OscConfig+0x186>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d001      	beq.n	800253e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e1d3      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253e:	4b3b      	ldr	r3, [pc, #236]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4937      	ldr	r1, [pc, #220]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	e03a      	b.n	80025ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255c:	4b34      	ldr	r3, [pc, #208]	@ (8002630 <HAL_RCC_OscConfig+0x278>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7fe fc9f 	bl	8000ea4 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256a:	f7fe fc9b 	bl	8000ea4 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e1b4      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	4b2b      	ldr	r3, [pc, #172]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b28      	ldr	r3, [pc, #160]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4925      	ldr	r1, [pc, #148]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
 800259c:	e015      	b.n	80025ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259e:	4b24      	ldr	r3, [pc, #144]	@ (8002630 <HAL_RCC_OscConfig+0x278>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fc7e 	bl	8000ea4 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ac:	f7fe fc7a 	bl	8000ea4 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e193      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	4b1b      	ldr	r3, [pc, #108]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d036      	beq.n	8002644 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025de:	4b15      	ldr	r3, [pc, #84]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7fe fc5e 	bl	8000ea4 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ec:	f7fe fc5a 	bl	8000ea4 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e173      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x234>
 800260a:	e01b      	b.n	8002644 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260c:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <HAL_RCC_OscConfig+0x27c>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002612:	f7fe fc47 	bl	8000ea4 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002618:	e00e      	b.n	8002638 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261a:	f7fe fc43 	bl	8000ea4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d907      	bls.n	8002638 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e15c      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
 800262c:	40023800 	.word	0x40023800
 8002630:	42470000 	.word	0x42470000
 8002634:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	4b8a      	ldr	r3, [pc, #552]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 800263a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1ea      	bne.n	800261a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8097 	beq.w	8002780 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002656:	4b83      	ldr	r3, [pc, #524]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10f      	bne.n	8002682 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	4b7f      	ldr	r3, [pc, #508]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	4a7e      	ldr	r2, [pc, #504]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002670:	6413      	str	r3, [r2, #64]	@ 0x40
 8002672:	4b7c      	ldr	r3, [pc, #496]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267e:	2301      	movs	r3, #1
 8002680:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	4b79      	ldr	r3, [pc, #484]	@ (8002868 <HAL_RCC_OscConfig+0x4b0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d118      	bne.n	80026c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268e:	4b76      	ldr	r3, [pc, #472]	@ (8002868 <HAL_RCC_OscConfig+0x4b0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a75      	ldr	r2, [pc, #468]	@ (8002868 <HAL_RCC_OscConfig+0x4b0>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269a:	f7fe fc03 	bl	8000ea4 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a2:	f7fe fbff 	bl	8000ea4 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e118      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002868 <HAL_RCC_OscConfig+0x4b0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x31e>
 80026c8:	4b66      	ldr	r3, [pc, #408]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026cc:	4a65      	ldr	r2, [pc, #404]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d4:	e01c      	b.n	8002710 <HAL_RCC_OscConfig+0x358>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b05      	cmp	r3, #5
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x340>
 80026de:	4b61      	ldr	r3, [pc, #388]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e2:	4a60      	ldr	r2, [pc, #384]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ea:	4b5e      	ldr	r3, [pc, #376]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ee:	4a5d      	ldr	r2, [pc, #372]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f6:	e00b      	b.n	8002710 <HAL_RCC_OscConfig+0x358>
 80026f8:	4b5a      	ldr	r3, [pc, #360]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fc:	4a59      	ldr	r2, [pc, #356]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80026fe:	f023 0301 	bic.w	r3, r3, #1
 8002702:	6713      	str	r3, [r2, #112]	@ 0x70
 8002704:	4b57      	ldr	r3, [pc, #348]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002708:	4a56      	ldr	r2, [pc, #344]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 800270a:	f023 0304 	bic.w	r3, r3, #4
 800270e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d015      	beq.n	8002744 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7fe fbc4 	bl	8000ea4 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271e:	e00a      	b.n	8002736 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002720:	f7fe fbc0 	bl	8000ea4 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e0d7      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002736:	4b4b      	ldr	r3, [pc, #300]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0ee      	beq.n	8002720 <HAL_RCC_OscConfig+0x368>
 8002742:	e014      	b.n	800276e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7fe fbae 	bl	8000ea4 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274a:	e00a      	b.n	8002762 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274c:	f7fe fbaa 	bl	8000ea4 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e0c1      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002762:	4b40      	ldr	r3, [pc, #256]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1ee      	bne.n	800274c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800276e:	7dfb      	ldrb	r3, [r7, #23]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d105      	bne.n	8002780 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002774:	4b3b      	ldr	r3, [pc, #236]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	4a3a      	ldr	r2, [pc, #232]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 800277a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800277e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80ad 	beq.w	80028e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800278a:	4b36      	ldr	r3, [pc, #216]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b08      	cmp	r3, #8
 8002794:	d060      	beq.n	8002858 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d145      	bne.n	800282a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279e:	4b33      	ldr	r3, [pc, #204]	@ (800286c <HAL_RCC_OscConfig+0x4b4>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fb7e 	bl	8000ea4 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7fe fb7a 	bl	8000ea4 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e093      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	4b29      	ldr	r3, [pc, #164]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69da      	ldr	r2, [r3, #28]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	019b      	lsls	r3, r3, #6
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	3b01      	subs	r3, #1
 80027e4:	041b      	lsls	r3, r3, #16
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f4:	071b      	lsls	r3, r3, #28
 80027f6:	491b      	ldr	r1, [pc, #108]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fc:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <HAL_RCC_OscConfig+0x4b4>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7fe fb4f 	bl	8000ea4 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280a:	f7fe fb4b 	bl	8000ea4 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e064      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281c:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x452>
 8002828:	e05c      	b.n	80028e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282a:	4b10      	ldr	r3, [pc, #64]	@ (800286c <HAL_RCC_OscConfig+0x4b4>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fb38 	bl	8000ea4 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002838:	f7fe fb34 	bl	8000ea4 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e04d      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284a:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <HAL_RCC_OscConfig+0x4ac>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x480>
 8002856:	e045      	b.n	80028e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d107      	bne.n	8002870 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e040      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
 8002864:	40023800 	.word	0x40023800
 8002868:	40007000 	.word	0x40007000
 800286c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002870:	4b1f      	ldr	r3, [pc, #124]	@ (80028f0 <HAL_RCC_OscConfig+0x538>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d030      	beq.n	80028e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d129      	bne.n	80028e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d122      	bne.n	80028e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028a0:	4013      	ands	r3, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d119      	bne.n	80028e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b6:	085b      	lsrs	r3, r3, #1
 80028b8:	3b01      	subs	r3, #1
 80028ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d10f      	bne.n	80028e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800

080028f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e041      	b.n	800298a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe f8ae 	bl	8000a7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f000 faf6 	bl	8002f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d109      	bne.n	80029b8 <HAL_TIM_PWM_Start+0x24>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	bf14      	ite	ne
 80029b0:	2301      	movne	r3, #1
 80029b2:	2300      	moveq	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	e022      	b.n	80029fe <HAL_TIM_PWM_Start+0x6a>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d109      	bne.n	80029d2 <HAL_TIM_PWM_Start+0x3e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	bf14      	ite	ne
 80029ca:	2301      	movne	r3, #1
 80029cc:	2300      	moveq	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	e015      	b.n	80029fe <HAL_TIM_PWM_Start+0x6a>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d109      	bne.n	80029ec <HAL_TIM_PWM_Start+0x58>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	e008      	b.n	80029fe <HAL_TIM_PWM_Start+0x6a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	bf14      	ite	ne
 80029f8:	2301      	movne	r3, #1
 80029fa:	2300      	moveq	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e07c      	b.n	8002b00 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d104      	bne.n	8002a16 <HAL_TIM_PWM_Start+0x82>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a14:	e013      	b.n	8002a3e <HAL_TIM_PWM_Start+0xaa>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d104      	bne.n	8002a26 <HAL_TIM_PWM_Start+0x92>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a24:	e00b      	b.n	8002a3e <HAL_TIM_PWM_Start+0xaa>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d104      	bne.n	8002a36 <HAL_TIM_PWM_Start+0xa2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a34:	e003      	b.n	8002a3e <HAL_TIM_PWM_Start+0xaa>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2201      	movs	r2, #1
 8002a44:	6839      	ldr	r1, [r7, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fcc8 	bl	80033dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a2d      	ldr	r2, [pc, #180]	@ (8002b08 <HAL_TIM_PWM_Start+0x174>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <HAL_TIM_PWM_Start+0xcc>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8002b0c <HAL_TIM_PWM_Start+0x178>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d101      	bne.n	8002a64 <HAL_TIM_PWM_Start+0xd0>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <HAL_TIM_PWM_Start+0xd2>
 8002a64:	2300      	movs	r3, #0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d007      	beq.n	8002a7a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a22      	ldr	r2, [pc, #136]	@ (8002b08 <HAL_TIM_PWM_Start+0x174>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d022      	beq.n	8002aca <HAL_TIM_PWM_Start+0x136>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a8c:	d01d      	beq.n	8002aca <HAL_TIM_PWM_Start+0x136>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1f      	ldr	r2, [pc, #124]	@ (8002b10 <HAL_TIM_PWM_Start+0x17c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d018      	beq.n	8002aca <HAL_TIM_PWM_Start+0x136>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002b14 <HAL_TIM_PWM_Start+0x180>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_TIM_PWM_Start+0x136>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b18 <HAL_TIM_PWM_Start+0x184>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00e      	beq.n	8002aca <HAL_TIM_PWM_Start+0x136>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a16      	ldr	r2, [pc, #88]	@ (8002b0c <HAL_TIM_PWM_Start+0x178>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d009      	beq.n	8002aca <HAL_TIM_PWM_Start+0x136>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a18      	ldr	r2, [pc, #96]	@ (8002b1c <HAL_TIM_PWM_Start+0x188>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d004      	beq.n	8002aca <HAL_TIM_PWM_Start+0x136>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a16      	ldr	r2, [pc, #88]	@ (8002b20 <HAL_TIM_PWM_Start+0x18c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d111      	bne.n	8002aee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b06      	cmp	r3, #6
 8002ada:	d010      	beq.n	8002afe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aec:	e007      	b.n	8002afe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0201 	orr.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	40010400 	.word	0x40010400
 8002b10:	40000400 	.word	0x40000400
 8002b14:	40000800 	.word	0x40000800
 8002b18:	40000c00 	.word	0x40000c00
 8002b1c:	40014000 	.word	0x40014000
 8002b20:	40001800 	.word	0x40001800

08002b24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e097      	b.n	8002c68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d106      	bne.n	8002b52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f88f 	bl	8002c70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b68:	f023 0307 	bic.w	r3, r3, #7
 8002b6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3304      	adds	r3, #4
 8002b76:	4619      	mov	r1, r3
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f000 f9d3 	bl	8002f24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ba6:	f023 0303 	bic.w	r3, r3, #3
 8002baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002bc4:	f023 030c 	bic.w	r3, r3, #12
 8002bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bd0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	4313      	orrs	r3, r2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	011a      	lsls	r2, r3, #4
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	031b      	lsls	r3, r3, #12
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002c02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002c0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	4313      	orrs	r3, r2
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ca4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002cac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d110      	bne.n	8002cd6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cba:	7b7b      	ldrb	r3, [r7, #13]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d001      	beq.n	8002cc4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e069      	b.n	8002d98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cd4:	e031      	b.n	8002d3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d110      	bne.n	8002cfe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cdc:	7bbb      	ldrb	r3, [r7, #14]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d102      	bne.n	8002ce8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ce2:	7b3b      	ldrb	r3, [r7, #12]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d001      	beq.n	8002cec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e055      	b.n	8002d98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cfc:	e01d      	b.n	8002d3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d108      	bne.n	8002d16 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d04:	7bbb      	ldrb	r3, [r7, #14]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d105      	bne.n	8002d16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d0a:	7b7b      	ldrb	r3, [r7, #13]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d102      	bne.n	8002d16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d10:	7b3b      	ldrb	r3, [r7, #12]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d001      	beq.n	8002d1a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e03e      	b.n	8002d98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_TIM_Encoder_Start+0xc4>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d008      	beq.n	8002d58 <HAL_TIM_Encoder_Start+0xd4>
 8002d46:	e00f      	b.n	8002d68 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fb43 	bl	80033dc <TIM_CCxChannelCmd>
      break;
 8002d56:	e016      	b.n	8002d86 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	2104      	movs	r1, #4
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fb3b 	bl	80033dc <TIM_CCxChannelCmd>
      break;
 8002d66:	e00e      	b.n	8002d86 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	2100      	movs	r1, #0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fb33 	bl	80033dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	2104      	movs	r1, #4
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fb2c 	bl	80033dc <TIM_CCxChannelCmd>
      break;
 8002d84:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e0ae      	b.n	8002f1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b0c      	cmp	r3, #12
 8002dca:	f200 809f 	bhi.w	8002f0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002dce:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd4:	08002e09 	.word	0x08002e09
 8002dd8:	08002f0d 	.word	0x08002f0d
 8002ddc:	08002f0d 	.word	0x08002f0d
 8002de0:	08002f0d 	.word	0x08002f0d
 8002de4:	08002e49 	.word	0x08002e49
 8002de8:	08002f0d 	.word	0x08002f0d
 8002dec:	08002f0d 	.word	0x08002f0d
 8002df0:	08002f0d 	.word	0x08002f0d
 8002df4:	08002e8b 	.word	0x08002e8b
 8002df8:	08002f0d 	.word	0x08002f0d
 8002dfc:	08002f0d 	.word	0x08002f0d
 8002e00:	08002f0d 	.word	0x08002f0d
 8002e04:	08002ecb 	.word	0x08002ecb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f934 	bl	800307c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0208 	orr.w	r2, r2, #8
 8002e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0204 	bic.w	r2, r2, #4
 8002e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6999      	ldr	r1, [r3, #24]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	619a      	str	r2, [r3, #24]
      break;
 8002e46:	e064      	b.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 f984 	bl	800315c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6999      	ldr	r1, [r3, #24]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	021a      	lsls	r2, r3, #8
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	619a      	str	r2, [r3, #24]
      break;
 8002e88:	e043      	b.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 f9d9 	bl	8003248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0208 	orr.w	r2, r2, #8
 8002ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0204 	bic.w	r2, r2, #4
 8002eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69d9      	ldr	r1, [r3, #28]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	61da      	str	r2, [r3, #28]
      break;
 8002ec8:	e023      	b.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fa2d 	bl	8003330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69d9      	ldr	r1, [r3, #28]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	021a      	lsls	r2, r3, #8
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	61da      	str	r2, [r3, #28]
      break;
 8002f0a:	e002      	b.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a46      	ldr	r2, [pc, #280]	@ (8003050 <TIM_Base_SetConfig+0x12c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <TIM_Base_SetConfig+0x40>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f42:	d00f      	beq.n	8002f64 <TIM_Base_SetConfig+0x40>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a43      	ldr	r2, [pc, #268]	@ (8003054 <TIM_Base_SetConfig+0x130>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00b      	beq.n	8002f64 <TIM_Base_SetConfig+0x40>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a42      	ldr	r2, [pc, #264]	@ (8003058 <TIM_Base_SetConfig+0x134>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d007      	beq.n	8002f64 <TIM_Base_SetConfig+0x40>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a41      	ldr	r2, [pc, #260]	@ (800305c <TIM_Base_SetConfig+0x138>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d003      	beq.n	8002f64 <TIM_Base_SetConfig+0x40>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a40      	ldr	r2, [pc, #256]	@ (8003060 <TIM_Base_SetConfig+0x13c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d108      	bne.n	8002f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a35      	ldr	r2, [pc, #212]	@ (8003050 <TIM_Base_SetConfig+0x12c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d02b      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f84:	d027      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a32      	ldr	r2, [pc, #200]	@ (8003054 <TIM_Base_SetConfig+0x130>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d023      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a31      	ldr	r2, [pc, #196]	@ (8003058 <TIM_Base_SetConfig+0x134>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01f      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a30      	ldr	r2, [pc, #192]	@ (800305c <TIM_Base_SetConfig+0x138>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01b      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a2f      	ldr	r2, [pc, #188]	@ (8003060 <TIM_Base_SetConfig+0x13c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d017      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8003064 <TIM_Base_SetConfig+0x140>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2d      	ldr	r2, [pc, #180]	@ (8003068 <TIM_Base_SetConfig+0x144>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00f      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a2c      	ldr	r2, [pc, #176]	@ (800306c <TIM_Base_SetConfig+0x148>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00b      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8003070 <TIM_Base_SetConfig+0x14c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8003074 <TIM_Base_SetConfig+0x150>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a29      	ldr	r2, [pc, #164]	@ (8003078 <TIM_Base_SetConfig+0x154>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d108      	bne.n	8002fe8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a10      	ldr	r2, [pc, #64]	@ (8003050 <TIM_Base_SetConfig+0x12c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d003      	beq.n	800301c <TIM_Base_SetConfig+0xf8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a12      	ldr	r2, [pc, #72]	@ (8003060 <TIM_Base_SetConfig+0x13c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d103      	bne.n	8003024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b01      	cmp	r3, #1
 8003034:	d105      	bne.n	8003042 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f023 0201 	bic.w	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	611a      	str	r2, [r3, #16]
  }
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40010000 	.word	0x40010000
 8003054:	40000400 	.word	0x40000400
 8003058:	40000800 	.word	0x40000800
 800305c:	40000c00 	.word	0x40000c00
 8003060:	40010400 	.word	0x40010400
 8003064:	40014000 	.word	0x40014000
 8003068:	40014400 	.word	0x40014400
 800306c:	40014800 	.word	0x40014800
 8003070:	40001800 	.word	0x40001800
 8003074:	40001c00 	.word	0x40001c00
 8003078:	40002000 	.word	0x40002000

0800307c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f023 0201 	bic.w	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0303 	bic.w	r3, r3, #3
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f023 0302 	bic.w	r3, r3, #2
 80030c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a20      	ldr	r2, [pc, #128]	@ (8003154 <TIM_OC1_SetConfig+0xd8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d003      	beq.n	80030e0 <TIM_OC1_SetConfig+0x64>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a1f      	ldr	r2, [pc, #124]	@ (8003158 <TIM_OC1_SetConfig+0xdc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d10c      	bne.n	80030fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f023 0308 	bic.w	r3, r3, #8
 80030e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f023 0304 	bic.w	r3, r3, #4
 80030f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a15      	ldr	r2, [pc, #84]	@ (8003154 <TIM_OC1_SetConfig+0xd8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d003      	beq.n	800310a <TIM_OC1_SetConfig+0x8e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a14      	ldr	r2, [pc, #80]	@ (8003158 <TIM_OC1_SetConfig+0xdc>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d111      	bne.n	800312e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	621a      	str	r2, [r3, #32]
}
 8003148:	bf00      	nop
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40010000 	.word	0x40010000
 8003158:	40010400 	.word	0x40010400

0800315c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f023 0210 	bic.w	r2, r3, #16
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800318a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f023 0320 	bic.w	r3, r3, #32
 80031a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a22      	ldr	r2, [pc, #136]	@ (8003240 <TIM_OC2_SetConfig+0xe4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d003      	beq.n	80031c4 <TIM_OC2_SetConfig+0x68>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a21      	ldr	r2, [pc, #132]	@ (8003244 <TIM_OC2_SetConfig+0xe8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d10d      	bne.n	80031e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a17      	ldr	r2, [pc, #92]	@ (8003240 <TIM_OC2_SetConfig+0xe4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <TIM_OC2_SetConfig+0x94>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a16      	ldr	r2, [pc, #88]	@ (8003244 <TIM_OC2_SetConfig+0xe8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d113      	bne.n	8003218 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	621a      	str	r2, [r3, #32]
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40010000 	.word	0x40010000
 8003244:	40010400 	.word	0x40010400

08003248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0303 	bic.w	r3, r3, #3
 800327e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a21      	ldr	r2, [pc, #132]	@ (8003328 <TIM_OC3_SetConfig+0xe0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d003      	beq.n	80032ae <TIM_OC3_SetConfig+0x66>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a20      	ldr	r2, [pc, #128]	@ (800332c <TIM_OC3_SetConfig+0xe4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d10d      	bne.n	80032ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a16      	ldr	r2, [pc, #88]	@ (8003328 <TIM_OC3_SetConfig+0xe0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_OC3_SetConfig+0x92>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a15      	ldr	r2, [pc, #84]	@ (800332c <TIM_OC3_SetConfig+0xe4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d113      	bne.n	8003302 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	621a      	str	r2, [r3, #32]
}
 800331c:	bf00      	nop
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40010000 	.word	0x40010000
 800332c:	40010400 	.word	0x40010400

08003330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800335e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800337a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	031b      	lsls	r3, r3, #12
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a12      	ldr	r2, [pc, #72]	@ (80033d4 <TIM_OC4_SetConfig+0xa4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_OC4_SetConfig+0x68>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a11      	ldr	r2, [pc, #68]	@ (80033d8 <TIM_OC4_SetConfig+0xa8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d109      	bne.n	80033ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800339e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	019b      	lsls	r3, r3, #6
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	621a      	str	r2, [r3, #32]
}
 80033c6:	bf00      	nop
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40010000 	.word	0x40010000
 80033d8:	40010400 	.word	0x40010400

080033dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	2201      	movs	r2, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a1a      	ldr	r2, [r3, #32]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	401a      	ands	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a1a      	ldr	r2, [r3, #32]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	fa01 f303 	lsl.w	r3, r1, r3
 8003414:	431a      	orrs	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	621a      	str	r2, [r3, #32]
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800343c:	2302      	movs	r3, #2
 800343e:	e05a      	b.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a21      	ldr	r2, [pc, #132]	@ (8003504 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d022      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800348c:	d01d      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1d      	ldr	r2, [pc, #116]	@ (8003508 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d018      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1b      	ldr	r2, [pc, #108]	@ (800350c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003510 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00e      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a18      	ldr	r2, [pc, #96]	@ (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d009      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a17      	ldr	r2, [pc, #92]	@ (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d004      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a15      	ldr	r2, [pc, #84]	@ (800351c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d10c      	bne.n	80034e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40010000 	.word	0x40010000
 8003508:	40000400 	.word	0x40000400
 800350c:	40000800 	.word	0x40000800
 8003510:	40000c00 	.word	0x40000c00
 8003514:	40010400 	.word	0x40010400
 8003518:	40014000 	.word	0x40014000
 800351c:	40001800 	.word	0x40001800

08003520 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e042      	b.n	80035b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fd fb44 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2224      	movs	r2, #36	@ 0x24
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003562:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f82b 	bl	80035c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003578:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003588:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003598:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c4:	b0c0      	sub	sp, #256	@ 0x100
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035dc:	68d9      	ldr	r1, [r3, #12]
 80035de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	ea40 0301 	orr.w	r3, r0, r1
 80035e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	431a      	orrs	r2, r3
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800360c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003618:	f021 010c 	bic.w	r1, r1, #12
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003626:	430b      	orrs	r3, r1
 8003628:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800362a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363a:	6999      	ldr	r1, [r3, #24]
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	ea40 0301 	orr.w	r3, r0, r1
 8003646:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b8f      	ldr	r3, [pc, #572]	@ (800388c <UART_SetConfig+0x2cc>)
 8003650:	429a      	cmp	r2, r3
 8003652:	d005      	beq.n	8003660 <UART_SetConfig+0xa0>
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4b8d      	ldr	r3, [pc, #564]	@ (8003890 <UART_SetConfig+0x2d0>)
 800365c:	429a      	cmp	r2, r3
 800365e:	d104      	bne.n	800366a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003660:	f7fe f93c 	bl	80018dc <HAL_RCC_GetPCLK2Freq>
 8003664:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003668:	e003      	b.n	8003672 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800366a:	f7fe f923 	bl	80018b4 <HAL_RCC_GetPCLK1Freq>
 800366e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800367c:	f040 810c 	bne.w	8003898 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003684:	2200      	movs	r2, #0
 8003686:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800368a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800368e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003692:	4622      	mov	r2, r4
 8003694:	462b      	mov	r3, r5
 8003696:	1891      	adds	r1, r2, r2
 8003698:	65b9      	str	r1, [r7, #88]	@ 0x58
 800369a:	415b      	adcs	r3, r3
 800369c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800369e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036a2:	4621      	mov	r1, r4
 80036a4:	eb12 0801 	adds.w	r8, r2, r1
 80036a8:	4629      	mov	r1, r5
 80036aa:	eb43 0901 	adc.w	r9, r3, r1
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c2:	4690      	mov	r8, r2
 80036c4:	4699      	mov	r9, r3
 80036c6:	4623      	mov	r3, r4
 80036c8:	eb18 0303 	adds.w	r3, r8, r3
 80036cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036d0:	462b      	mov	r3, r5
 80036d2:	eb49 0303 	adc.w	r3, r9, r3
 80036d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80036e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80036ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80036ee:	460b      	mov	r3, r1
 80036f0:	18db      	adds	r3, r3, r3
 80036f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80036f4:	4613      	mov	r3, r2
 80036f6:	eb42 0303 	adc.w	r3, r2, r3
 80036fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80036fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003700:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003704:	f7fc fd7e 	bl	8000204 <__aeabi_uldivmod>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4b61      	ldr	r3, [pc, #388]	@ (8003894 <UART_SetConfig+0x2d4>)
 800370e:	fba3 2302 	umull	r2, r3, r3, r2
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	011c      	lsls	r4, r3, #4
 8003716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800371a:	2200      	movs	r2, #0
 800371c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003720:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003724:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003728:	4642      	mov	r2, r8
 800372a:	464b      	mov	r3, r9
 800372c:	1891      	adds	r1, r2, r2
 800372e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003730:	415b      	adcs	r3, r3
 8003732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003734:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003738:	4641      	mov	r1, r8
 800373a:	eb12 0a01 	adds.w	sl, r2, r1
 800373e:	4649      	mov	r1, r9
 8003740:	eb43 0b01 	adc.w	fp, r3, r1
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003750:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003758:	4692      	mov	sl, r2
 800375a:	469b      	mov	fp, r3
 800375c:	4643      	mov	r3, r8
 800375e:	eb1a 0303 	adds.w	r3, sl, r3
 8003762:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003766:	464b      	mov	r3, r9
 8003768:	eb4b 0303 	adc.w	r3, fp, r3
 800376c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800377c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003780:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003784:	460b      	mov	r3, r1
 8003786:	18db      	adds	r3, r3, r3
 8003788:	643b      	str	r3, [r7, #64]	@ 0x40
 800378a:	4613      	mov	r3, r2
 800378c:	eb42 0303 	adc.w	r3, r2, r3
 8003790:	647b      	str	r3, [r7, #68]	@ 0x44
 8003792:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003796:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800379a:	f7fc fd33 	bl	8000204 <__aeabi_uldivmod>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4611      	mov	r1, r2
 80037a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003894 <UART_SetConfig+0x2d4>)
 80037a6:	fba3 2301 	umull	r2, r3, r3, r1
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	2264      	movs	r2, #100	@ 0x64
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	1acb      	subs	r3, r1, r3
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80037ba:	4b36      	ldr	r3, [pc, #216]	@ (8003894 <UART_SetConfig+0x2d4>)
 80037bc:	fba3 2302 	umull	r2, r3, r3, r2
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80037c8:	441c      	add	r4, r3
 80037ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80037d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80037dc:	4642      	mov	r2, r8
 80037de:	464b      	mov	r3, r9
 80037e0:	1891      	adds	r1, r2, r2
 80037e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80037e4:	415b      	adcs	r3, r3
 80037e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80037ec:	4641      	mov	r1, r8
 80037ee:	1851      	adds	r1, r2, r1
 80037f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80037f2:	4649      	mov	r1, r9
 80037f4:	414b      	adcs	r3, r1
 80037f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003804:	4659      	mov	r1, fp
 8003806:	00cb      	lsls	r3, r1, #3
 8003808:	4651      	mov	r1, sl
 800380a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800380e:	4651      	mov	r1, sl
 8003810:	00ca      	lsls	r2, r1, #3
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	4603      	mov	r3, r0
 8003818:	4642      	mov	r2, r8
 800381a:	189b      	adds	r3, r3, r2
 800381c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003820:	464b      	mov	r3, r9
 8003822:	460a      	mov	r2, r1
 8003824:	eb42 0303 	adc.w	r3, r2, r3
 8003828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003838:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800383c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003840:	460b      	mov	r3, r1
 8003842:	18db      	adds	r3, r3, r3
 8003844:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003846:	4613      	mov	r3, r2
 8003848:	eb42 0303 	adc.w	r3, r2, r3
 800384c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800384e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003852:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003856:	f7fc fcd5 	bl	8000204 <__aeabi_uldivmod>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4b0d      	ldr	r3, [pc, #52]	@ (8003894 <UART_SetConfig+0x2d4>)
 8003860:	fba3 1302 	umull	r1, r3, r3, r2
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	2164      	movs	r1, #100	@ 0x64
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	3332      	adds	r3, #50	@ 0x32
 8003872:	4a08      	ldr	r2, [pc, #32]	@ (8003894 <UART_SetConfig+0x2d4>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	f003 0207 	and.w	r2, r3, #7
 800387e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4422      	add	r2, r4
 8003886:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003888:	e106      	b.n	8003a98 <UART_SetConfig+0x4d8>
 800388a:	bf00      	nop
 800388c:	40011000 	.word	0x40011000
 8003890:	40011400 	.word	0x40011400
 8003894:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800389c:	2200      	movs	r2, #0
 800389e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80038a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80038aa:	4642      	mov	r2, r8
 80038ac:	464b      	mov	r3, r9
 80038ae:	1891      	adds	r1, r2, r2
 80038b0:	6239      	str	r1, [r7, #32]
 80038b2:	415b      	adcs	r3, r3
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038ba:	4641      	mov	r1, r8
 80038bc:	1854      	adds	r4, r2, r1
 80038be:	4649      	mov	r1, r9
 80038c0:	eb43 0501 	adc.w	r5, r3, r1
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	00eb      	lsls	r3, r5, #3
 80038ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d2:	00e2      	lsls	r2, r4, #3
 80038d4:	4614      	mov	r4, r2
 80038d6:	461d      	mov	r5, r3
 80038d8:	4643      	mov	r3, r8
 80038da:	18e3      	adds	r3, r4, r3
 80038dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038e0:	464b      	mov	r3, r9
 80038e2:	eb45 0303 	adc.w	r3, r5, r3
 80038e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80038f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003906:	4629      	mov	r1, r5
 8003908:	008b      	lsls	r3, r1, #2
 800390a:	4621      	mov	r1, r4
 800390c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003910:	4621      	mov	r1, r4
 8003912:	008a      	lsls	r2, r1, #2
 8003914:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003918:	f7fc fc74 	bl	8000204 <__aeabi_uldivmod>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4b60      	ldr	r3, [pc, #384]	@ (8003aa4 <UART_SetConfig+0x4e4>)
 8003922:	fba3 2302 	umull	r2, r3, r3, r2
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	011c      	lsls	r4, r3, #4
 800392a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800392e:	2200      	movs	r2, #0
 8003930:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003934:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003938:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	1891      	adds	r1, r2, r2
 8003942:	61b9      	str	r1, [r7, #24]
 8003944:	415b      	adcs	r3, r3
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800394c:	4641      	mov	r1, r8
 800394e:	1851      	adds	r1, r2, r1
 8003950:	6139      	str	r1, [r7, #16]
 8003952:	4649      	mov	r1, r9
 8003954:	414b      	adcs	r3, r1
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003964:	4659      	mov	r1, fp
 8003966:	00cb      	lsls	r3, r1, #3
 8003968:	4651      	mov	r1, sl
 800396a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800396e:	4651      	mov	r1, sl
 8003970:	00ca      	lsls	r2, r1, #3
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	4603      	mov	r3, r0
 8003978:	4642      	mov	r2, r8
 800397a:	189b      	adds	r3, r3, r2
 800397c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003980:	464b      	mov	r3, r9
 8003982:	460a      	mov	r2, r1
 8003984:	eb42 0303 	adc.w	r3, r2, r3
 8003988:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003996:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80039a4:	4649      	mov	r1, r9
 80039a6:	008b      	lsls	r3, r1, #2
 80039a8:	4641      	mov	r1, r8
 80039aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039ae:	4641      	mov	r1, r8
 80039b0:	008a      	lsls	r2, r1, #2
 80039b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80039b6:	f7fc fc25 	bl	8000204 <__aeabi_uldivmod>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4611      	mov	r1, r2
 80039c0:	4b38      	ldr	r3, [pc, #224]	@ (8003aa4 <UART_SetConfig+0x4e4>)
 80039c2:	fba3 2301 	umull	r2, r3, r3, r1
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	2264      	movs	r2, #100	@ 0x64
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	1acb      	subs	r3, r1, r3
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	3332      	adds	r3, #50	@ 0x32
 80039d4:	4a33      	ldr	r2, [pc, #204]	@ (8003aa4 <UART_SetConfig+0x4e4>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039e0:	441c      	add	r4, r3
 80039e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039e6:	2200      	movs	r2, #0
 80039e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80039ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80039ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80039f0:	4642      	mov	r2, r8
 80039f2:	464b      	mov	r3, r9
 80039f4:	1891      	adds	r1, r2, r2
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	415b      	adcs	r3, r3
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a00:	4641      	mov	r1, r8
 8003a02:	1851      	adds	r1, r2, r1
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	4649      	mov	r1, r9
 8003a08:	414b      	adcs	r3, r1
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a18:	4659      	mov	r1, fp
 8003a1a:	00cb      	lsls	r3, r1, #3
 8003a1c:	4651      	mov	r1, sl
 8003a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a22:	4651      	mov	r1, sl
 8003a24:	00ca      	lsls	r2, r1, #3
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4642      	mov	r2, r8
 8003a2e:	189b      	adds	r3, r3, r2
 8003a30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a32:	464b      	mov	r3, r9
 8003a34:	460a      	mov	r2, r1
 8003a36:	eb42 0303 	adc.w	r3, r2, r3
 8003a3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a46:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a54:	4649      	mov	r1, r9
 8003a56:	008b      	lsls	r3, r1, #2
 8003a58:	4641      	mov	r1, r8
 8003a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a5e:	4641      	mov	r1, r8
 8003a60:	008a      	lsls	r2, r1, #2
 8003a62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003a66:	f7fc fbcd 	bl	8000204 <__aeabi_uldivmod>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa4 <UART_SetConfig+0x4e4>)
 8003a70:	fba3 1302 	umull	r1, r3, r3, r2
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	2164      	movs	r1, #100	@ 0x64
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	3332      	adds	r3, #50	@ 0x32
 8003a82:	4a08      	ldr	r2, [pc, #32]	@ (8003aa4 <UART_SetConfig+0x4e4>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	f003 020f 	and.w	r2, r3, #15
 8003a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4422      	add	r2, r4
 8003a96:	609a      	str	r2, [r3, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aa4:	51eb851f 	.word	0x51eb851f

08003aa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	f107 001c 	add.w	r0, r7, #28
 8003ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003aba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d123      	bne.n	8003b0a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003ad6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003aea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d105      	bne.n	8003afe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fa9a 	bl	8004038 <USB_CoreReset>
 8003b04:	4603      	mov	r3, r0
 8003b06:	73fb      	strb	r3, [r7, #15]
 8003b08:	e01b      	b.n	8003b42 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fa8e 	bl	8004038 <USB_CoreReset>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b20:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d106      	bne.n	8003b36 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b34:	e005      	b.n	8003b42 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b42:	7fbb      	ldrb	r3, [r7, #30]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d10b      	bne.n	8003b60 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f043 0206 	orr.w	r2, r3, #6
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b6c:	b004      	add	sp, #16
 8003b6e:	4770      	bx	lr

08003b70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f023 0201 	bic.w	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d115      	bne.n	8003be0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003bc0:	200a      	movs	r0, #10
 8003bc2:	f7fd f97b 	bl	8000ebc <HAL_Delay>
      ms += 10U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	330a      	adds	r3, #10
 8003bca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fa25 	bl	800401c <USB_GetMode>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d01e      	beq.n	8003c16 <USB_SetCurrentMode+0x84>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2bc7      	cmp	r3, #199	@ 0xc7
 8003bdc:	d9f0      	bls.n	8003bc0 <USB_SetCurrentMode+0x2e>
 8003bde:	e01a      	b.n	8003c16 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d115      	bne.n	8003c12 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003bf2:	200a      	movs	r0, #10
 8003bf4:	f7fd f962 	bl	8000ebc <HAL_Delay>
      ms += 10U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	330a      	adds	r3, #10
 8003bfc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fa0c 	bl	800401c <USB_GetMode>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <USB_SetCurrentMode+0x84>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2bc7      	cmp	r3, #199	@ 0xc7
 8003c0e:	d9f0      	bls.n	8003bf2 <USB_SetCurrentMode+0x60>
 8003c10:	e001      	b.n	8003c16 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e005      	b.n	8003c22 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2bc8      	cmp	r3, #200	@ 0xc8
 8003c1a:	d101      	bne.n	8003c20 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b086      	sub	sp, #24
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c46:	2300      	movs	r3, #0
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	e009      	b.n	8003c60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	3340      	adds	r3, #64	@ 0x40
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	2200      	movs	r2, #0
 8003c58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	2b0e      	cmp	r3, #14
 8003c64:	d9f2      	bls.n	8003c4c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c66:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d11c      	bne.n	8003ca8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c7c:	f043 0302 	orr.w	r3, r3, #2
 8003c80:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c86:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	e005      	b.n	8003cb4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cc0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d10d      	bne.n	8003ce4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d104      	bne.n	8003cda <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f968 	bl	8003fa8 <USB_SetDevSpeed>
 8003cd8:	e008      	b.n	8003cec <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003cda:	2101      	movs	r1, #1
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f963 	bl	8003fa8 <USB_SetDevSpeed>
 8003ce2:	e003      	b.n	8003cec <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ce4:	2103      	movs	r1, #3
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f95e 	bl	8003fa8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003cec:	2110      	movs	r1, #16
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f8fa 	bl	8003ee8 <USB_FlushTxFifo>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f924 	bl	8003f4c <USB_FlushRxFifo>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d14:	461a      	mov	r2, r3
 8003d16:	2300      	movs	r3, #0
 8003d18:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d20:	461a      	mov	r2, r3
 8003d22:	2300      	movs	r3, #0
 8003d24:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	e043      	b.n	8003dc0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d4e:	d118      	bne.n	8003d82 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d62:	461a      	mov	r2, r3
 8003d64:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	e013      	b.n	8003d94 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	e008      	b.n	8003d94 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2300      	movs	r3, #0
 8003d92:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da0:	461a      	mov	r2, r3
 8003da2:	2300      	movs	r3, #0
 8003da4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003db2:	461a      	mov	r2, r3
 8003db4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003db8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d3b5      	bcc.n	8003d38 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	e043      	b.n	8003e5a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003de4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003de8:	d118      	bne.n	8003e1c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	e013      	b.n	8003e2e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e12:	461a      	mov	r2, r3
 8003e14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	e008      	b.n	8003e2e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	3301      	adds	r3, #1
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003e5e:	461a      	mov	r2, r3
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d3b5      	bcc.n	8003dd2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003e86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d105      	bne.n	8003e9c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f043 0210 	orr.w	r2, r3, #16
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699a      	ldr	r2, [r3, #24]
 8003ea0:	4b10      	ldr	r3, [pc, #64]	@ (8003ee4 <USB_DevInit+0x2b8>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ea8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f043 0208 	orr.w	r2, r3, #8
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ebc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d107      	bne.n	8003ed4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ecc:	f043 0304 	orr.w	r3, r3, #4
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ee0:	b004      	add	sp, #16
 8003ee2:	4770      	bx	lr
 8003ee4:	803c3800 	.word	0x803c3800

08003ee8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f02:	d901      	bls.n	8003f08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e01b      	b.n	8003f40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	daf2      	bge.n	8003ef6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	019b      	lsls	r3, r3, #6
 8003f18:	f043 0220 	orr.w	r2, r3, #32
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3301      	adds	r3, #1
 8003f24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f2c:	d901      	bls.n	8003f32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e006      	b.n	8003f40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d0f0      	beq.n	8003f20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f64:	d901      	bls.n	8003f6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e018      	b.n	8003f9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	daf2      	bge.n	8003f58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2210      	movs	r2, #16
 8003f7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f88:	d901      	bls.n	8003f8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e006      	b.n	8003f9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d0f0      	beq.n	8003f7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	68f9      	ldr	r1, [r7, #12]
 8003fc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003ff4:	f023 0303 	bic.w	r3, r3, #3
 8003ff8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004008:	f043 0302 	orr.w	r3, r3, #2
 800400c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f003 0301 	and.w	r3, r3, #1
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3301      	adds	r3, #1
 8004048:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004050:	d901      	bls.n	8004056 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e01b      	b.n	800408e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	daf2      	bge.n	8004044 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f043 0201 	orr.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3301      	adds	r3, #1
 8004072:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800407a:	d901      	bls.n	8004080 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e006      	b.n	800408e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d0f0      	beq.n	800406e <USB_CoreReset+0x36>

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <memset>:
 800409a:	4402      	add	r2, r0
 800409c:	4603      	mov	r3, r0
 800409e:	4293      	cmp	r3, r2
 80040a0:	d100      	bne.n	80040a4 <memset+0xa>
 80040a2:	4770      	bx	lr
 80040a4:	f803 1b01 	strb.w	r1, [r3], #1
 80040a8:	e7f9      	b.n	800409e <memset+0x4>
	...

080040ac <__libc_init_array>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	4d0d      	ldr	r5, [pc, #52]	@ (80040e4 <__libc_init_array+0x38>)
 80040b0:	4c0d      	ldr	r4, [pc, #52]	@ (80040e8 <__libc_init_array+0x3c>)
 80040b2:	1b64      	subs	r4, r4, r5
 80040b4:	10a4      	asrs	r4, r4, #2
 80040b6:	2600      	movs	r6, #0
 80040b8:	42a6      	cmp	r6, r4
 80040ba:	d109      	bne.n	80040d0 <__libc_init_array+0x24>
 80040bc:	4d0b      	ldr	r5, [pc, #44]	@ (80040ec <__libc_init_array+0x40>)
 80040be:	4c0c      	ldr	r4, [pc, #48]	@ (80040f0 <__libc_init_array+0x44>)
 80040c0:	f000 f818 	bl	80040f4 <_init>
 80040c4:	1b64      	subs	r4, r4, r5
 80040c6:	10a4      	asrs	r4, r4, #2
 80040c8:	2600      	movs	r6, #0
 80040ca:	42a6      	cmp	r6, r4
 80040cc:	d105      	bne.n	80040da <__libc_init_array+0x2e>
 80040ce:	bd70      	pop	{r4, r5, r6, pc}
 80040d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d4:	4798      	blx	r3
 80040d6:	3601      	adds	r6, #1
 80040d8:	e7ee      	b.n	80040b8 <__libc_init_array+0xc>
 80040da:	f855 3b04 	ldr.w	r3, [r5], #4
 80040de:	4798      	blx	r3
 80040e0:	3601      	adds	r6, #1
 80040e2:	e7f2      	b.n	80040ca <__libc_init_array+0x1e>
 80040e4:	0800412c 	.word	0x0800412c
 80040e8:	0800412c 	.word	0x0800412c
 80040ec:	0800412c 	.word	0x0800412c
 80040f0:	08004130 	.word	0x08004130

080040f4 <_init>:
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	bf00      	nop
 80040f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fa:	bc08      	pop	{r3}
 80040fc:	469e      	mov	lr, r3
 80040fe:	4770      	bx	lr

08004100 <_fini>:
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	bf00      	nop
 8004104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004106:	bc08      	pop	{r3}
 8004108:	469e      	mov	lr, r3
 800410a:	4770      	bx	lr
