
rs485_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002278  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002384  08002384  00003384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023e8  080023e8  00004060  2**0
                  CONTENTS
  4 .ARM          00000000  080023e8  080023e8  00004060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023e8  080023e8  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023e8  080023e8  000033e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023ec  080023ec  000033ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080023f0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000060  08002450  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08002450  0000424c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069ec  00000000  00000000  00004089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015cc  00000000  00000000  0000aa75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  0000c048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004c7  00000000  00000000  0000c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d68  00000000  00000000  0000cb67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000082eb  00000000  00000000  000238cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081abf  00000000  00000000  0002bbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad679  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cdc  00000000  00000000  000ad6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000af398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	0800236c 	.word	0x0800236c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	0800236c 	.word	0x0800236c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b2d      	ldr	r3, [pc, #180]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2c      	ldr	r2, [pc, #176]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2a      	ldr	r3, [pc, #168]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b27      	ldr	r3, [pc, #156]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a26      	ldr	r2, [pc, #152]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b24      	ldr	r3, [pc, #144]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b21      	ldr	r3, [pc, #132]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a20      	ldr	r2, [pc, #128]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1e      	ldr	r3, [pc, #120]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b18      	ldr	r3, [pc, #96]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2130      	movs	r1, #48	@ 0x30
 80001c4:	4815      	ldr	r0, [pc, #84]	@ (800021c <MX_GPIO_Init+0xd0>)
 80001c6:	f000 fd1b 	bl	8000c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d0:	4b13      	ldr	r3, [pc, #76]	@ (8000220 <MX_GPIO_Init+0xd4>)
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	4811      	ldr	r0, [pc, #68]	@ (8000224 <MX_GPIO_Init+0xd8>)
 80001e0:	f000 fb8a 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80001e4:	2330      	movs	r3, #48	@ 0x30
 80001e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4808      	ldr	r0, [pc, #32]	@ (800021c <MX_GPIO_Init+0xd0>)
 80001fc:	f000 fb7c 	bl	80008f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	2100      	movs	r1, #0
 8000204:	2028      	movs	r0, #40	@ 0x28
 8000206:	f000 fb40 	bl	800088a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800020a:	2028      	movs	r0, #40	@ 0x28
 800020c:	f000 fb59 	bl	80008c2 <HAL_NVIC_EnableIRQ>

}
 8000210:	bf00      	nop
 8000212:	3720      	adds	r7, #32
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40010800 	.word	0x40010800
 8000220:	10110000 	.word	0x10110000
 8000224:	40011000 	.word	0x40011000

08000228 <RS485_EnableTransmit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to enable RS485 Transmit Mode
void RS485_EnableTransmit(void) {
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RS485_DE_RE_PORT, RS485_DE_RE_PIN, GPIO_PIN_SET);
 800022c:	2201      	movs	r2, #1
 800022e:	2110      	movs	r1, #16
 8000230:	4802      	ldr	r0, [pc, #8]	@ (800023c <RS485_EnableTransmit+0x14>)
 8000232:	f000 fce5 	bl	8000c00 <HAL_GPIO_WritePin>
}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	40010800 	.word	0x40010800

08000240 <RS485_EnableReceive>:

// Function to enable RS485 Receive Mode
void RS485_EnableReceive(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RS485_DE_RE_PORT, RS485_DE_RE_PIN, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <RS485_EnableReceive+0x14>)
 800024a:	f000 fcd9 	bl	8000c00 <HAL_GPIO_WritePin>
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40010800 	.word	0x40010800

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025c:	f000 f9b8 	bl	80005d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000260:	f000 f83a 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000264:	f7ff ff72 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000268:	f000 f924 	bl	80004b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    /* Infinite loop */
    while (1)
    {
        // Transmit Mode
        RS485_EnableTransmit();  // Enable TX Mode
 800026c:	f7ff ffdc 	bl	8000228 <RS485_EnableTransmit>
        sprintf(usermsg, "%s", ADDRESS);
 8000270:	4a14      	ldr	r2, [pc, #80]	@ (80002c4 <main+0x6c>)
 8000272:	4915      	ldr	r1, [pc, #84]	@ (80002c8 <main+0x70>)
 8000274:	4815      	ldr	r0, [pc, #84]	@ (80002cc <main+0x74>)
 8000276:	f001 fbc9 	bl	8001a0c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)usermsg, sizeof(usermsg), HAL_MAX_DELAY);
 800027a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800027e:	2202      	movs	r2, #2
 8000280:	4912      	ldr	r1, [pc, #72]	@ (80002cc <main+0x74>)
 8000282:	4813      	ldr	r0, [pc, #76]	@ (80002d0 <main+0x78>)
 8000284:	f001 f956 	bl	8001534 <HAL_UART_Transmit>
        //HAL_UART_Transmit(&huart2, (uint8_t*)txData, sizeof(txData), HAL_MAX_DELAY);
        HAL_Delay(100);  // Delay for data to stabilize
 8000288:	2064      	movs	r0, #100	@ 0x64
 800028a:	f000 fa03 	bl	8000694 <HAL_Delay>

        // Receive Mode
        RS485_EnableReceive();  // Enable RX Mode
 800028e:	f7ff ffd7 	bl	8000240 <RS485_EnableReceive>
        if (HAL_UART_Receive(&huart2, (uint8_t*)rxData, sizeof(rxData), HAL_MAX_DELAY) == HAL_OK) {
 8000292:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000296:	2232      	movs	r2, #50	@ 0x32
 8000298:	490e      	ldr	r1, [pc, #56]	@ (80002d4 <main+0x7c>)
 800029a:	480d      	ldr	r0, [pc, #52]	@ (80002d0 <main+0x78>)
 800029c:	f001 f9d5 	bl	800164a <HAL_UART_Receive>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d108      	bne.n	80002b8 <main+0x60>
            // Optional: Echo back received data for testing
            RS485_EnableTransmit();
 80002a6:	f7ff ffbf 	bl	8000228 <RS485_EnableTransmit>
            HAL_UART_Transmit(&huart2, (uint8_t*)rxData, sizeof(rxData), HAL_MAX_DELAY);
 80002aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002ae:	2232      	movs	r2, #50	@ 0x32
 80002b0:	4908      	ldr	r1, [pc, #32]	@ (80002d4 <main+0x7c>)
 80002b2:	4807      	ldr	r0, [pc, #28]	@ (80002d0 <main+0x78>)
 80002b4:	f001 f93e 	bl	8001534 <HAL_UART_Transmit>
        }

        HAL_Delay(1000); // Loop delay
 80002b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002bc:	f000 f9ea 	bl	8000694 <HAL_Delay>
    {
 80002c0:	e7d4      	b.n	800026c <main+0x14>
 80002c2:	bf00      	nop
 80002c4:	20000000 	.word	0x20000000
 80002c8:	08002384 	.word	0x08002384
 80002cc:	200000b0 	.word	0x200000b0
 80002d0:	200000b8 	.word	0x200000b8
 80002d4:	2000007c 	.word	0x2000007c

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b090      	sub	sp, #64	@ 0x40
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	2228      	movs	r2, #40	@ 0x28
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 fbb0 	bl	8001a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002fa:	2301      	movs	r3, #1
 80002fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002fe:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000302:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	2301      	movs	r3, #1
 800030a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030c:	2302      	movs	r3, #2
 800030e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000310:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000314:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000316:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800031a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031c:	f107 0318 	add.w	r3, r7, #24
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fca7 	bl	8000c74 <HAL_RCC_OscConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800032c:	f000 f819 	bl	8000362 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	230f      	movs	r3, #15
 8000332:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	2302      	movs	r3, #2
 8000336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2102      	movs	r1, #2
 800034a:	4618      	mov	r0, r3
 800034c:	f000 ff14 	bl	8001178 <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000356:	f000 f804 	bl	8000362 <Error_Handler>
  }
}
 800035a:	bf00      	nop
 800035c:	3740      	adds	r7, #64	@ 0x40
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000366:	b672      	cpsid	i
}
 8000368:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036a:	bf00      	nop
 800036c:	e7fd      	b.n	800036a <Error_Handler+0x8>
	...

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000376:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <HAL_MspInit+0x5c>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a14      	ldr	r2, [pc, #80]	@ (80003cc <HAL_MspInit+0x5c>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <HAL_MspInit+0x5c>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <HAL_MspInit+0x5c>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	4a0e      	ldr	r2, [pc, #56]	@ (80003cc <HAL_MspInit+0x5c>)
 8000394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000398:	61d3      	str	r3, [r2, #28]
 800039a:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <HAL_MspInit+0x5c>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003a6:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <HAL_MspInit+0x60>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	4a04      	ldr	r2, [pc, #16]	@ (80003d0 <HAL_MspInit+0x60>)
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c2:	bf00      	nop
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010000 	.word	0x40010000

080003d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <NMI_Handler+0x4>

080003dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <HardFault_Handler+0x4>

080003e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <MemManage_Handler+0x4>

080003ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <BusFault_Handler+0x4>

080003f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <UsageFault_Handler+0x4>

080003fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr

08000414 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000424:	f000 f91a 	bl	800065c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}

0800042c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000430:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000434:	f000 fbfc 	bl	8000c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}

0800043c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000444:	4a14      	ldr	r2, [pc, #80]	@ (8000498 <_sbrk+0x5c>)
 8000446:	4b15      	ldr	r3, [pc, #84]	@ (800049c <_sbrk+0x60>)
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000450:	4b13      	ldr	r3, [pc, #76]	@ (80004a0 <_sbrk+0x64>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d102      	bne.n	800045e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000458:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <_sbrk+0x64>)
 800045a:	4a12      	ldr	r2, [pc, #72]	@ (80004a4 <_sbrk+0x68>)
 800045c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800045e:	4b10      	ldr	r3, [pc, #64]	@ (80004a0 <_sbrk+0x64>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4413      	add	r3, r2
 8000466:	693a      	ldr	r2, [r7, #16]
 8000468:	429a      	cmp	r2, r3
 800046a:	d207      	bcs.n	800047c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800046c:	f001 faf6 	bl	8001a5c <__errno>
 8000470:	4603      	mov	r3, r0
 8000472:	220c      	movs	r2, #12
 8000474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000476:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800047a:	e009      	b.n	8000490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800047c:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <_sbrk+0x64>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000482:	4b07      	ldr	r3, [pc, #28]	@ (80004a0 <_sbrk+0x64>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4413      	add	r3, r2
 800048a:	4a05      	ldr	r2, [pc, #20]	@ (80004a0 <_sbrk+0x64>)
 800048c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800048e:	68fb      	ldr	r3, [r7, #12]
}
 8000490:	4618      	mov	r0, r3
 8000492:	3718      	adds	r7, #24
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20005000 	.word	0x20005000
 800049c:	00000400 	.word	0x00000400
 80004a0:	200000b4 	.word	0x200000b4
 80004a4:	20000250 	.word	0x20000250

080004a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b8:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <MX_USART2_UART_Init+0x4c>)
 80004ba:	4a12      	ldr	r2, [pc, #72]	@ (8000504 <MX_USART2_UART_Init+0x50>)
 80004bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004be:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <MX_USART2_UART_Init+0x4c>)
 80004c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80004c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000500 <MX_USART2_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <MX_USART2_UART_Init+0x4c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000500 <MX_USART2_UART_Init+0x4c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d8:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <MX_USART2_UART_Init+0x4c>)
 80004da:	220c      	movs	r2, #12
 80004dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004de:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <MX_USART2_UART_Init+0x4c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <MX_USART2_UART_Init+0x4c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	@ (8000500 <MX_USART2_UART_Init+0x4c>)
 80004ec:	f000 ffd2 	bl	8001494 <HAL_UART_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004f6:	f7ff ff34 	bl	8000362 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200000b8 	.word	0x200000b8
 8000504:	40004400 	.word	0x40004400

08000508 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a15      	ldr	r2, [pc, #84]	@ (8000578 <HAL_UART_MspInit+0x70>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d123      	bne.n	8000570 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000528:	4b14      	ldr	r3, [pc, #80]	@ (800057c <HAL_UART_MspInit+0x74>)
 800052a:	69db      	ldr	r3, [r3, #28]
 800052c:	4a13      	ldr	r2, [pc, #76]	@ (800057c <HAL_UART_MspInit+0x74>)
 800052e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000532:	61d3      	str	r3, [r2, #28]
 8000534:	4b11      	ldr	r3, [pc, #68]	@ (800057c <HAL_UART_MspInit+0x74>)
 8000536:	69db      	ldr	r3, [r3, #28]
 8000538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <HAL_UART_MspInit+0x74>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a0d      	ldr	r2, [pc, #52]	@ (800057c <HAL_UART_MspInit+0x74>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <HAL_UART_MspInit+0x74>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000558:	230c      	movs	r3, #12
 800055a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055c:	2302      	movs	r3, #2
 800055e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2302      	movs	r3, #2
 8000562:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	4619      	mov	r1, r3
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <HAL_UART_MspInit+0x78>)
 800056c:	f000 f9c4 	bl	80008f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40004400 	.word	0x40004400
 800057c:	40021000 	.word	0x40021000
 8000580:	40010800 	.word	0x40010800

08000584 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000584:	f7ff ff90 	bl	80004a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000588:	480b      	ldr	r0, [pc, #44]	@ (80005b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800058a:	490c      	ldr	r1, [pc, #48]	@ (80005bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800058c:	4a0c      	ldr	r2, [pc, #48]	@ (80005c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000590:	e002      	b.n	8000598 <LoopCopyDataInit>

08000592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000596:	3304      	adds	r3, #4

08000598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800059c:	d3f9      	bcc.n	8000592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059e:	4a09      	ldr	r2, [pc, #36]	@ (80005c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005a0:	4c09      	ldr	r4, [pc, #36]	@ (80005c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a4:	e001      	b.n	80005aa <LoopFillZerobss>

080005a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a8:	3204      	adds	r2, #4

080005aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ac:	d3fb      	bcc.n	80005a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ae:	f001 fa5b 	bl	8001a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005b2:	f7ff fe51 	bl	8000258 <main>
  bx lr
 80005b6:	4770      	bx	lr
  ldr r0, =_sdata
 80005b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005bc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80005c0:	080023f0 	.word	0x080023f0
  ldr r2, =_sbss
 80005c4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80005c8:	2000024c 	.word	0x2000024c

080005cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005cc:	e7fe      	b.n	80005cc <ADC1_2_IRQHandler>
	...

080005d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d4:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <HAL_Init+0x28>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a07      	ldr	r2, [pc, #28]	@ (80005f8 <HAL_Init+0x28>)
 80005da:	f043 0310 	orr.w	r3, r3, #16
 80005de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e0:	2003      	movs	r0, #3
 80005e2:	f000 f947 	bl	8000874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 f808 	bl	80005fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005ec:	f7ff fec0 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40022000 	.word	0x40022000

080005fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <HAL_InitTick+0x54>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <HAL_InitTick+0x58>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000612:	fbb3 f3f1 	udiv	r3, r3, r1
 8000616:	fbb2 f3f3 	udiv	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f95f 	bl	80008de <HAL_SYSTICK_Config>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	e00e      	b.n	8000648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b0f      	cmp	r3, #15
 800062e:	d80a      	bhi.n	8000646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000630:	2200      	movs	r2, #0
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000638:	f000 f927 	bl	800088a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800063c:	4a06      	ldr	r2, [pc, #24]	@ (8000658 <HAL_InitTick+0x5c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000642:	2300      	movs	r3, #0
 8000644:	e000      	b.n	8000648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000004 	.word	0x20000004
 8000654:	2000000c 	.word	0x2000000c
 8000658:	20000008 	.word	0x20000008

0800065c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000660:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <HAL_IncTick+0x1c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b05      	ldr	r3, [pc, #20]	@ (800067c <HAL_IncTick+0x20>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4413      	add	r3, r2
 800066c:	4a03      	ldr	r2, [pc, #12]	@ (800067c <HAL_IncTick+0x20>)
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	2000000c 	.word	0x2000000c
 800067c:	20000100 	.word	0x20000100

08000680 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return uwTick;
 8000684:	4b02      	ldr	r3, [pc, #8]	@ (8000690 <HAL_GetTick+0x10>)
 8000686:	681b      	ldr	r3, [r3, #0]
}
 8000688:	4618      	mov	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	20000100 	.word	0x20000100

08000694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800069c:	f7ff fff0 	bl	8000680 <HAL_GetTick>
 80006a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80006ac:	d005      	beq.n	80006ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <HAL_Delay+0x44>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ba:	bf00      	nop
 80006bc:	f7ff ffe0 	bl	8000680 <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d8f7      	bhi.n	80006bc <HAL_Delay+0x28>
  {
  }
}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000000c 	.word	0x2000000c

080006dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800070c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070e:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	60d3      	str	r3, [r2, #12]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <__NVIC_GetPriorityGrouping+0x18>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	f003 0307 	and.w	r3, r3, #7
}
 8000732:	4618      	mov	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	2b00      	cmp	r3, #0
 8000750:	db0b      	blt.n	800076a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	f003 021f 	and.w	r2, r3, #31
 8000758:	4906      	ldr	r1, [pc, #24]	@ (8000774 <__NVIC_EnableIRQ+0x34>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	095b      	lsrs	r3, r3, #5
 8000760:	2001      	movs	r0, #1
 8000762:	fa00 f202 	lsl.w	r2, r0, r2
 8000766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100

08000778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	6039      	str	r1, [r7, #0]
 8000782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	db0a      	blt.n	80007a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	490c      	ldr	r1, [pc, #48]	@ (80007c4 <__NVIC_SetPriority+0x4c>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	440b      	add	r3, r1
 800079c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a0:	e00a      	b.n	80007b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4908      	ldr	r1, [pc, #32]	@ (80007c8 <__NVIC_SetPriority+0x50>)
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f003 030f 	and.w	r3, r3, #15
 80007ae:	3b04      	subs	r3, #4
 80007b0:	0112      	lsls	r2, r2, #4
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	440b      	add	r3, r1
 80007b6:	761a      	strb	r2, [r3, #24]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000e100 	.word	0xe000e100
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b089      	sub	sp, #36	@ 0x24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	f1c3 0307 	rsb	r3, r3, #7
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	bf28      	it	cs
 80007ea:	2304      	movcs	r3, #4
 80007ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3304      	adds	r3, #4
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	d902      	bls.n	80007fc <NVIC_EncodePriority+0x30>
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3b03      	subs	r3, #3
 80007fa:	e000      	b.n	80007fe <NVIC_EncodePriority+0x32>
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43da      	mvns	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	401a      	ands	r2, r3
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000814:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43d9      	mvns	r1, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	4313      	orrs	r3, r2
         );
}
 8000826:	4618      	mov	r0, r3
 8000828:	3724      	adds	r7, #36	@ 0x24
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000840:	d301      	bcc.n	8000846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000842:	2301      	movs	r3, #1
 8000844:	e00f      	b.n	8000866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000846:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <SysTick_Config+0x40>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084e:	210f      	movs	r1, #15
 8000850:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000854:	f7ff ff90 	bl	8000778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <SysTick_Config+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085e:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <SysTick_Config+0x40>)
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	e000e010 	.word	0xe000e010

08000874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ff2d 	bl	80006dc <__NVIC_SetPriorityGrouping>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800089c:	f7ff ff42 	bl	8000724 <__NVIC_GetPriorityGrouping>
 80008a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	68b9      	ldr	r1, [r7, #8]
 80008a6:	6978      	ldr	r0, [r7, #20]
 80008a8:	f7ff ff90 	bl	80007cc <NVIC_EncodePriority>
 80008ac:	4602      	mov	r2, r0
 80008ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff5f 	bl	8000778 <__NVIC_SetPriority>
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff35 	bl	8000740 <__NVIC_EnableIRQ>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffa2 	bl	8000830 <SysTick_Config>
 80008ec:	4603      	mov	r3, r0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b08b      	sub	sp, #44	@ 0x2c
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090a:	e169      	b.n	8000be0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800090c:	2201      	movs	r2, #1
 800090e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	4013      	ands	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	429a      	cmp	r2, r3
 8000926:	f040 8158 	bne.w	8000bda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	4a9a      	ldr	r2, [pc, #616]	@ (8000b98 <HAL_GPIO_Init+0x2a0>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d05e      	beq.n	80009f2 <HAL_GPIO_Init+0xfa>
 8000934:	4a98      	ldr	r2, [pc, #608]	@ (8000b98 <HAL_GPIO_Init+0x2a0>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d875      	bhi.n	8000a26 <HAL_GPIO_Init+0x12e>
 800093a:	4a98      	ldr	r2, [pc, #608]	@ (8000b9c <HAL_GPIO_Init+0x2a4>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d058      	beq.n	80009f2 <HAL_GPIO_Init+0xfa>
 8000940:	4a96      	ldr	r2, [pc, #600]	@ (8000b9c <HAL_GPIO_Init+0x2a4>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d86f      	bhi.n	8000a26 <HAL_GPIO_Init+0x12e>
 8000946:	4a96      	ldr	r2, [pc, #600]	@ (8000ba0 <HAL_GPIO_Init+0x2a8>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d052      	beq.n	80009f2 <HAL_GPIO_Init+0xfa>
 800094c:	4a94      	ldr	r2, [pc, #592]	@ (8000ba0 <HAL_GPIO_Init+0x2a8>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d869      	bhi.n	8000a26 <HAL_GPIO_Init+0x12e>
 8000952:	4a94      	ldr	r2, [pc, #592]	@ (8000ba4 <HAL_GPIO_Init+0x2ac>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d04c      	beq.n	80009f2 <HAL_GPIO_Init+0xfa>
 8000958:	4a92      	ldr	r2, [pc, #584]	@ (8000ba4 <HAL_GPIO_Init+0x2ac>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d863      	bhi.n	8000a26 <HAL_GPIO_Init+0x12e>
 800095e:	4a92      	ldr	r2, [pc, #584]	@ (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d046      	beq.n	80009f2 <HAL_GPIO_Init+0xfa>
 8000964:	4a90      	ldr	r2, [pc, #576]	@ (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d85d      	bhi.n	8000a26 <HAL_GPIO_Init+0x12e>
 800096a:	2b12      	cmp	r3, #18
 800096c:	d82a      	bhi.n	80009c4 <HAL_GPIO_Init+0xcc>
 800096e:	2b12      	cmp	r3, #18
 8000970:	d859      	bhi.n	8000a26 <HAL_GPIO_Init+0x12e>
 8000972:	a201      	add	r2, pc, #4	@ (adr r2, 8000978 <HAL_GPIO_Init+0x80>)
 8000974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000978:	080009f3 	.word	0x080009f3
 800097c:	080009cd 	.word	0x080009cd
 8000980:	080009df 	.word	0x080009df
 8000984:	08000a21 	.word	0x08000a21
 8000988:	08000a27 	.word	0x08000a27
 800098c:	08000a27 	.word	0x08000a27
 8000990:	08000a27 	.word	0x08000a27
 8000994:	08000a27 	.word	0x08000a27
 8000998:	08000a27 	.word	0x08000a27
 800099c:	08000a27 	.word	0x08000a27
 80009a0:	08000a27 	.word	0x08000a27
 80009a4:	08000a27 	.word	0x08000a27
 80009a8:	08000a27 	.word	0x08000a27
 80009ac:	08000a27 	.word	0x08000a27
 80009b0:	08000a27 	.word	0x08000a27
 80009b4:	08000a27 	.word	0x08000a27
 80009b8:	08000a27 	.word	0x08000a27
 80009bc:	080009d5 	.word	0x080009d5
 80009c0:	080009e9 	.word	0x080009e9
 80009c4:	4a79      	ldr	r2, [pc, #484]	@ (8000bac <HAL_GPIO_Init+0x2b4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d013      	beq.n	80009f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ca:	e02c      	b.n	8000a26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	623b      	str	r3, [r7, #32]
          break;
 80009d2:	e029      	b.n	8000a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	3304      	adds	r3, #4
 80009da:	623b      	str	r3, [r7, #32]
          break;
 80009dc:	e024      	b.n	8000a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	3308      	adds	r3, #8
 80009e4:	623b      	str	r3, [r7, #32]
          break;
 80009e6:	e01f      	b.n	8000a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	330c      	adds	r3, #12
 80009ee:	623b      	str	r3, [r7, #32]
          break;
 80009f0:	e01a      	b.n	8000a28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d102      	bne.n	8000a00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009fa:	2304      	movs	r3, #4
 80009fc:	623b      	str	r3, [r7, #32]
          break;
 80009fe:	e013      	b.n	8000a28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d105      	bne.n	8000a14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	611a      	str	r2, [r3, #16]
          break;
 8000a12:	e009      	b.n	8000a28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a14:	2308      	movs	r3, #8
 8000a16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	69fa      	ldr	r2, [r7, #28]
 8000a1c:	615a      	str	r2, [r3, #20]
          break;
 8000a1e:	e003      	b.n	8000a28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
          break;
 8000a24:	e000      	b.n	8000a28 <HAL_GPIO_Init+0x130>
          break;
 8000a26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	2bff      	cmp	r3, #255	@ 0xff
 8000a2c:	d801      	bhi.n	8000a32 <HAL_GPIO_Init+0x13a>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	e001      	b.n	8000a36 <HAL_GPIO_Init+0x13e>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3304      	adds	r3, #4
 8000a36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	2bff      	cmp	r3, #255	@ 0xff
 8000a3c:	d802      	bhi.n	8000a44 <HAL_GPIO_Init+0x14c>
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	e002      	b.n	8000a4a <HAL_GPIO_Init+0x152>
 8000a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a46:	3b08      	subs	r3, #8
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	210f      	movs	r1, #15
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	fa01 f303 	lsl.w	r3, r1, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	6a39      	ldr	r1, [r7, #32]
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	431a      	orrs	r2, r3
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 80b1 	beq.w	8000bda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a78:	4b4d      	ldr	r3, [pc, #308]	@ (8000bb0 <HAL_GPIO_Init+0x2b8>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8000bb0 <HAL_GPIO_Init+0x2b8>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb0 <HAL_GPIO_Init+0x2b8>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a90:	4a48      	ldr	r2, [pc, #288]	@ (8000bb4 <HAL_GPIO_Init+0x2bc>)
 8000a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	3302      	adds	r3, #2
 8000a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a40      	ldr	r2, [pc, #256]	@ (8000bb8 <HAL_GPIO_Init+0x2c0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d013      	beq.n	8000ae4 <HAL_GPIO_Init+0x1ec>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a3f      	ldr	r2, [pc, #252]	@ (8000bbc <HAL_GPIO_Init+0x2c4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d00d      	beq.n	8000ae0 <HAL_GPIO_Init+0x1e8>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a3e      	ldr	r2, [pc, #248]	@ (8000bc0 <HAL_GPIO_Init+0x2c8>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d007      	beq.n	8000adc <HAL_GPIO_Init+0x1e4>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a3d      	ldr	r2, [pc, #244]	@ (8000bc4 <HAL_GPIO_Init+0x2cc>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d101      	bne.n	8000ad8 <HAL_GPIO_Init+0x1e0>
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	e006      	b.n	8000ae6 <HAL_GPIO_Init+0x1ee>
 8000ad8:	2304      	movs	r3, #4
 8000ada:	e004      	b.n	8000ae6 <HAL_GPIO_Init+0x1ee>
 8000adc:	2302      	movs	r3, #2
 8000ade:	e002      	b.n	8000ae6 <HAL_GPIO_Init+0x1ee>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e000      	b.n	8000ae6 <HAL_GPIO_Init+0x1ee>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ae8:	f002 0203 	and.w	r2, r2, #3
 8000aec:	0092      	lsls	r2, r2, #2
 8000aee:	4093      	lsls	r3, r2
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000af6:	492f      	ldr	r1, [pc, #188]	@ (8000bb4 <HAL_GPIO_Init+0x2bc>)
 8000af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	3302      	adds	r3, #2
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d006      	beq.n	8000b1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b10:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	492c      	ldr	r1, [pc, #176]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	608b      	str	r3, [r1, #8]
 8000b1c:	e006      	b.n	8000b2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b20:	689a      	ldr	r2, [r3, #8]
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	4928      	ldr	r1, [pc, #160]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b28:	4013      	ands	r3, r2
 8000b2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d006      	beq.n	8000b46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b38:	4b23      	ldr	r3, [pc, #140]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	4922      	ldr	r1, [pc, #136]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	60cb      	str	r3, [r1, #12]
 8000b44:	e006      	b.n	8000b54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b46:	4b20      	ldr	r3, [pc, #128]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b48:	68da      	ldr	r2, [r3, #12]
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	491e      	ldr	r1, [pc, #120]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d006      	beq.n	8000b6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b60:	4b19      	ldr	r3, [pc, #100]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	4918      	ldr	r1, [pc, #96]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	604b      	str	r3, [r1, #4]
 8000b6c:	e006      	b.n	8000b7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b6e:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	4914      	ldr	r1, [pc, #80]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b78:	4013      	ands	r3, r2
 8000b7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d021      	beq.n	8000bcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b88:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	490e      	ldr	r1, [pc, #56]	@ (8000bc8 <HAL_GPIO_Init+0x2d0>)
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	600b      	str	r3, [r1, #0]
 8000b94:	e021      	b.n	8000bda <HAL_GPIO_Init+0x2e2>
 8000b96:	bf00      	nop
 8000b98:	10320000 	.word	0x10320000
 8000b9c:	10310000 	.word	0x10310000
 8000ba0:	10220000 	.word	0x10220000
 8000ba4:	10210000 	.word	0x10210000
 8000ba8:	10120000 	.word	0x10120000
 8000bac:	10110000 	.word	0x10110000
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40010000 	.word	0x40010000
 8000bb8:	40010800 	.word	0x40010800
 8000bbc:	40010c00 	.word	0x40010c00
 8000bc0:	40011000 	.word	0x40011000
 8000bc4:	40011400 	.word	0x40011400
 8000bc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <HAL_GPIO_Init+0x304>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	4909      	ldr	r1, [pc, #36]	@ (8000bfc <HAL_GPIO_Init+0x304>)
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bdc:	3301      	adds	r3, #1
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f47f ae8e 	bne.w	800090c <HAL_GPIO_Init+0x14>
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	372c      	adds	r7, #44	@ 0x2c
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	40010400 	.word	0x40010400

08000c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c10:	787b      	ldrb	r3, [r7, #1]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c16:	887a      	ldrh	r2, [r7, #2]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c1c:	e003      	b.n	8000c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c1e:	887b      	ldrh	r3, [r7, #2]
 8000c20:	041a      	lsls	r2, r3, #16
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	611a      	str	r2, [r3, #16]
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c3c:	695a      	ldr	r2, [r3, #20]
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	4013      	ands	r3, r2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d006      	beq.n	8000c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f806 	bl	8000c60 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40010400 	.word	0x40010400

08000c60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e272      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 8087 	beq.w	8000da2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c94:	4b92      	ldr	r3, [pc, #584]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 030c 	and.w	r3, r3, #12
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	d00c      	beq.n	8000cba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ca0:	4b8f      	ldr	r3, [pc, #572]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 030c 	and.w	r3, r3, #12
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d112      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x5e>
 8000cac:	4b8c      	ldr	r3, [pc, #560]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cb8:	d10b      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cba:	4b89      	ldr	r3, [pc, #548]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d06c      	beq.n	8000da0 <HAL_RCC_OscConfig+0x12c>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d168      	bne.n	8000da0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e24c      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cda:	d106      	bne.n	8000cea <HAL_RCC_OscConfig+0x76>
 8000cdc:	4b80      	ldr	r3, [pc, #512]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a7f      	ldr	r2, [pc, #508]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	e02e      	b.n	8000d48 <HAL_RCC_OscConfig+0xd4>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10c      	bne.n	8000d0c <HAL_RCC_OscConfig+0x98>
 8000cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a7a      	ldr	r2, [pc, #488]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	4b78      	ldr	r3, [pc, #480]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a77      	ldr	r2, [pc, #476]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e01d      	b.n	8000d48 <HAL_RCC_OscConfig+0xd4>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d14:	d10c      	bne.n	8000d30 <HAL_RCC_OscConfig+0xbc>
 8000d16:	4b72      	ldr	r3, [pc, #456]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a71      	ldr	r2, [pc, #452]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	4b6f      	ldr	r3, [pc, #444]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a6e      	ldr	r2, [pc, #440]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	e00b      	b.n	8000d48 <HAL_RCC_OscConfig+0xd4>
 8000d30:	4b6b      	ldr	r3, [pc, #428]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a6a      	ldr	r2, [pc, #424]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	4b68      	ldr	r3, [pc, #416]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a67      	ldr	r2, [pc, #412]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d013      	beq.n	8000d78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d50:	f7ff fc96 	bl	8000680 <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d56:	e008      	b.n	8000d6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d58:	f7ff fc92 	bl	8000680 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b64      	cmp	r3, #100	@ 0x64
 8000d64:	d901      	bls.n	8000d6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e200      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f0      	beq.n	8000d58 <HAL_RCC_OscConfig+0xe4>
 8000d76:	e014      	b.n	8000da2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d78:	f7ff fc82 	bl	8000680 <HAL_GetTick>
 8000d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7e:	e008      	b.n	8000d92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d80:	f7ff fc7e 	bl	8000680 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b64      	cmp	r3, #100	@ 0x64
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e1ec      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d92:	4b53      	ldr	r3, [pc, #332]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f0      	bne.n	8000d80 <HAL_RCC_OscConfig+0x10c>
 8000d9e:	e000      	b.n	8000da2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d063      	beq.n	8000e76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dae:	4b4c      	ldr	r3, [pc, #304]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 030c 	and.w	r3, r3, #12
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00b      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dba:	4b49      	ldr	r3, [pc, #292]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 030c 	and.w	r3, r3, #12
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	d11c      	bne.n	8000e00 <HAL_RCC_OscConfig+0x18c>
 8000dc6:	4b46      	ldr	r3, [pc, #280]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d116      	bne.n	8000e00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd2:	4b43      	ldr	r3, [pc, #268]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <HAL_RCC_OscConfig+0x176>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d001      	beq.n	8000dea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e1c0      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dea:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4939      	ldr	r1, [pc, #228]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfe:	e03a      	b.n	8000e76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d020      	beq.n	8000e4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e08:	4b36      	ldr	r3, [pc, #216]	@ (8000ee4 <HAL_RCC_OscConfig+0x270>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0e:	f7ff fc37 	bl	8000680 <HAL_GetTick>
 8000e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e14:	e008      	b.n	8000e28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e16:	f7ff fc33 	bl	8000680 <HAL_GetTick>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d901      	bls.n	8000e28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	e1a1      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0f0      	beq.n	8000e16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	4927      	ldr	r1, [pc, #156]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	4313      	orrs	r3, r2
 8000e46:	600b      	str	r3, [r1, #0]
 8000e48:	e015      	b.n	8000e76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <HAL_RCC_OscConfig+0x270>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e50:	f7ff fc16 	bl	8000680 <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e56:	e008      	b.n	8000e6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e58:	f7ff fc12 	bl	8000680 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e180      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f0      	bne.n	8000e58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d03a      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d019      	beq.n	8000ebe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <HAL_RCC_OscConfig+0x274>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e90:	f7ff fbf6 	bl	8000680 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e98:	f7ff fbf2 	bl	8000680 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e160      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f0      	beq.n	8000e98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f000 face 	bl	8001458 <RCC_Delay>
 8000ebc:	e01c      	b.n	8000ef8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <HAL_RCC_OscConfig+0x274>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec4:	f7ff fbdc 	bl	8000680 <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eca:	e00f      	b.n	8000eec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fbd8 	bl	8000680 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d908      	bls.n	8000eec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e146      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	42420000 	.word	0x42420000
 8000ee8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eec:	4b92      	ldr	r3, [pc, #584]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1e9      	bne.n	8000ecc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 80a6 	beq.w	8001052 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f06:	2300      	movs	r3, #0
 8000f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f0a:	4b8b      	ldr	r3, [pc, #556]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10d      	bne.n	8000f32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b88      	ldr	r3, [pc, #544]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	4a87      	ldr	r2, [pc, #540]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f20:	61d3      	str	r3, [r2, #28]
 8000f22:	4b85      	ldr	r3, [pc, #532]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f32:	4b82      	ldr	r3, [pc, #520]	@ (800113c <HAL_RCC_OscConfig+0x4c8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d118      	bne.n	8000f70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800113c <HAL_RCC_OscConfig+0x4c8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a7e      	ldr	r2, [pc, #504]	@ (800113c <HAL_RCC_OscConfig+0x4c8>)
 8000f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f4a:	f7ff fb99 	bl	8000680 <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f52:	f7ff fb95 	bl	8000680 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b64      	cmp	r3, #100	@ 0x64
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e103      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f64:	4b75      	ldr	r3, [pc, #468]	@ (800113c <HAL_RCC_OscConfig+0x4c8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0f0      	beq.n	8000f52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d106      	bne.n	8000f86 <HAL_RCC_OscConfig+0x312>
 8000f78:	4b6f      	ldr	r3, [pc, #444]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	4a6e      	ldr	r2, [pc, #440]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6213      	str	r3, [r2, #32]
 8000f84:	e02d      	b.n	8000fe2 <HAL_RCC_OscConfig+0x36e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x334>
 8000f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	4a69      	ldr	r2, [pc, #420]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	f023 0301 	bic.w	r3, r3, #1
 8000f98:	6213      	str	r3, [r2, #32]
 8000f9a:	4b67      	ldr	r3, [pc, #412]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	4a66      	ldr	r2, [pc, #408]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
 8000fa4:	6213      	str	r3, [r2, #32]
 8000fa6:	e01c      	b.n	8000fe2 <HAL_RCC_OscConfig+0x36e>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2b05      	cmp	r3, #5
 8000fae:	d10c      	bne.n	8000fca <HAL_RCC_OscConfig+0x356>
 8000fb0:	4b61      	ldr	r3, [pc, #388]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4a60      	ldr	r2, [pc, #384]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	6213      	str	r3, [r2, #32]
 8000fbc:	4b5e      	ldr	r3, [pc, #376]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6213      	str	r3, [r2, #32]
 8000fc8:	e00b      	b.n	8000fe2 <HAL_RCC_OscConfig+0x36e>
 8000fca:	4b5b      	ldr	r3, [pc, #364]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	4a5a      	ldr	r2, [pc, #360]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	f023 0301 	bic.w	r3, r3, #1
 8000fd4:	6213      	str	r3, [r2, #32]
 8000fd6:	4b58      	ldr	r3, [pc, #352]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	4a57      	ldr	r2, [pc, #348]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	f023 0304 	bic.w	r3, r3, #4
 8000fe0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d015      	beq.n	8001016 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fea:	f7ff fb49 	bl	8000680 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff0:	e00a      	b.n	8001008 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fb45 	bl	8000680 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001000:	4293      	cmp	r3, r2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e0b1      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001008:	4b4b      	ldr	r3, [pc, #300]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0ee      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x37e>
 8001014:	e014      	b.n	8001040 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001016:	f7ff fb33 	bl	8000680 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800101c:	e00a      	b.n	8001034 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800101e:	f7ff fb2f 	bl	8000680 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800102c:	4293      	cmp	r3, r2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e09b      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001034:	4b40      	ldr	r3, [pc, #256]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1ee      	bne.n	800101e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d105      	bne.n	8001052 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001046:	4b3c      	ldr	r3, [pc, #240]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a3b      	ldr	r2, [pc, #236]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 800104c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001050:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 8087 	beq.w	800116a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800105c:	4b36      	ldr	r3, [pc, #216]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	2b08      	cmp	r3, #8
 8001066:	d061      	beq.n	800112c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d146      	bne.n	80010fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001070:	4b33      	ldr	r3, [pc, #204]	@ (8001140 <HAL_RCC_OscConfig+0x4cc>)
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001076:	f7ff fb03 	bl	8000680 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800107e:	f7ff faff 	bl	8000680 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e06d      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001090:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1f0      	bne.n	800107e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010a4:	d108      	bne.n	80010b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010a6:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	4921      	ldr	r1, [pc, #132]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a19      	ldr	r1, [r3, #32]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c8:	430b      	orrs	r3, r1
 80010ca:	491b      	ldr	r1, [pc, #108]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <HAL_RCC_OscConfig+0x4cc>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fad3 	bl	8000680 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010de:	f7ff facf 	bl	8000680 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e03d      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010f0:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x46a>
 80010fc:	e035      	b.n	800116a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <HAL_RCC_OscConfig+0x4cc>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fabc 	bl	8000680 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800110c:	f7ff fab8 	bl	8000680 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e026      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111e:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x498>
 800112a:	e01e      	b.n	800116a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d107      	bne.n	8001144 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e019      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
 8001138:	40021000 	.word	0x40021000
 800113c:	40007000 	.word	0x40007000
 8001140:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <HAL_RCC_OscConfig+0x500>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	429a      	cmp	r2, r3
 8001156:	d106      	bne.n	8001166 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001162:	429a      	cmp	r2, r3
 8001164:	d001      	beq.n	800116a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000

08001178 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e0d0      	b.n	800132e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800118c:	4b6a      	ldr	r3, [pc, #424]	@ (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d910      	bls.n	80011bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119a:	4b67      	ldr	r3, [pc, #412]	@ (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f023 0207 	bic.w	r2, r3, #7
 80011a2:	4965      	ldr	r1, [pc, #404]	@ (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011aa:	4b63      	ldr	r3, [pc, #396]	@ (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d001      	beq.n	80011bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0b8      	b.n	800132e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d020      	beq.n	800120a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d4:	4b59      	ldr	r3, [pc, #356]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4a58      	ldr	r2, [pc, #352]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ec:	4b53      	ldr	r3, [pc, #332]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4a52      	ldr	r2, [pc, #328]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80011f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f8:	4b50      	ldr	r3, [pc, #320]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	494d      	ldr	r1, [pc, #308]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d040      	beq.n	8001298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d107      	bne.n	800122e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	4b47      	ldr	r3, [pc, #284]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d115      	bne.n	8001256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e07f      	b.n	800132e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d107      	bne.n	8001246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001236:	4b41      	ldr	r3, [pc, #260]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d109      	bne.n	8001256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e073      	b.n	800132e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001246:	4b3d      	ldr	r3, [pc, #244]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e06b      	b.n	800132e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001256:	4b39      	ldr	r3, [pc, #228]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f023 0203 	bic.w	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	4936      	ldr	r1, [pc, #216]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001268:	f7ff fa0a 	bl	8000680 <HAL_GetTick>
 800126c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126e:	e00a      	b.n	8001286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001270:	f7ff fa06 	bl	8000680 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800127e:	4293      	cmp	r3, r2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e053      	b.n	800132e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001286:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 020c 	and.w	r2, r3, #12
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	429a      	cmp	r2, r3
 8001296:	d1eb      	bne.n	8001270 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001298:	4b27      	ldr	r3, [pc, #156]	@ (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d210      	bcs.n	80012c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a6:	4b24      	ldr	r3, [pc, #144]	@ (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 0207 	bic.w	r2, r3, #7
 80012ae:	4922      	ldr	r1, [pc, #136]	@ (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b6:	4b20      	ldr	r3, [pc, #128]	@ (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e032      	b.n	800132e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d4:	4b19      	ldr	r3, [pc, #100]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	4916      	ldr	r1, [pc, #88]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d009      	beq.n	8001306 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012f2:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	490e      	ldr	r1, [pc, #56]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	4313      	orrs	r3, r2
 8001304:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001306:	f000 f821 	bl	800134c <HAL_RCC_GetSysClockFreq>
 800130a:	4602      	mov	r2, r0
 800130c:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	490a      	ldr	r1, [pc, #40]	@ (8001340 <HAL_RCC_ClockConfig+0x1c8>)
 8001318:	5ccb      	ldrb	r3, [r1, r3]
 800131a:	fa22 f303 	lsr.w	r3, r2, r3
 800131e:	4a09      	ldr	r2, [pc, #36]	@ (8001344 <HAL_RCC_ClockConfig+0x1cc>)
 8001320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <HAL_RCC_ClockConfig+0x1d0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f968 	bl	80005fc <HAL_InitTick>

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40022000 	.word	0x40022000
 800133c:	40021000 	.word	0x40021000
 8001340:	08002388 	.word	0x08002388
 8001344:	20000004 	.word	0x20000004
 8001348:	20000008 	.word	0x20000008

0800134c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001366:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b04      	cmp	r3, #4
 8001374:	d002      	beq.n	800137c <HAL_RCC_GetSysClockFreq+0x30>
 8001376:	2b08      	cmp	r3, #8
 8001378:	d003      	beq.n	8001382 <HAL_RCC_GetSysClockFreq+0x36>
 800137a:	e027      	b.n	80013cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800137c:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800137e:	613b      	str	r3, [r7, #16]
      break;
 8001380:	e027      	b.n	80013d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	0c9b      	lsrs	r3, r3, #18
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	4a17      	ldr	r2, [pc, #92]	@ (80013e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800138c:	5cd3      	ldrb	r3, [r2, r3]
 800138e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d010      	beq.n	80013bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	0c5b      	lsrs	r3, r3, #17
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	4a11      	ldr	r2, [pc, #68]	@ (80013ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a0d      	ldr	r2, [pc, #52]	@ (80013e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ae:	fb03 f202 	mul.w	r2, r3, r2
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	e004      	b.n	80013c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a0c      	ldr	r2, [pc, #48]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013c0:	fb02 f303 	mul.w	r3, r2, r3
 80013c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	613b      	str	r3, [r7, #16]
      break;
 80013ca:	e002      	b.n	80013d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ce:	613b      	str	r3, [r7, #16]
      break;
 80013d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013d2:	693b      	ldr	r3, [r7, #16]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000
 80013e4:	007a1200 	.word	0x007a1200
 80013e8:	080023a0 	.word	0x080023a0
 80013ec:	080023b0 	.word	0x080023b0
 80013f0:	003d0900 	.word	0x003d0900

080013f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013f8:	4b02      	ldr	r3, [pc, #8]	@ (8001404 <HAL_RCC_GetHCLKFreq+0x10>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	20000004 	.word	0x20000004

08001408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800140c:	f7ff fff2 	bl	80013f4 <HAL_RCC_GetHCLKFreq>
 8001410:	4602      	mov	r2, r0
 8001412:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	0a1b      	lsrs	r3, r3, #8
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	4903      	ldr	r1, [pc, #12]	@ (800142c <HAL_RCC_GetPCLK1Freq+0x24>)
 800141e:	5ccb      	ldrb	r3, [r1, r3]
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001424:	4618      	mov	r0, r3
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40021000 	.word	0x40021000
 800142c:	08002398 	.word	0x08002398

08001430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001434:	f7ff ffde 	bl	80013f4 <HAL_RCC_GetHCLKFreq>
 8001438:	4602      	mov	r2, r0
 800143a:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	0adb      	lsrs	r3, r3, #11
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	4903      	ldr	r1, [pc, #12]	@ (8001454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001446:	5ccb      	ldrb	r3, [r1, r3]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800144c:	4618      	mov	r0, r3
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40021000 	.word	0x40021000
 8001454:	08002398 	.word	0x08002398

08001458 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001460:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <RCC_Delay+0x34>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <RCC_Delay+0x38>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	0a5b      	lsrs	r3, r3, #9
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001474:	bf00      	nop
  }
  while (Delay --);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1e5a      	subs	r2, r3, #1
 800147a:	60fa      	str	r2, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f9      	bne.n	8001474 <RCC_Delay+0x1c>
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	20000004 	.word	0x20000004
 8001490:	10624dd3 	.word	0x10624dd3

08001494 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e042      	b.n	800152c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff f824 	bl	8000508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2224      	movs	r2, #36	@ 0x24
 80014c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80014d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 fa09 	bl	80018f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80014ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80014fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800150c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2220      	movs	r2, #32
 8001518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2220      	movs	r2, #32
 8001520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	@ 0x28
 8001538:	af02      	add	r7, sp, #8
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	4613      	mov	r3, r2
 8001542:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b20      	cmp	r3, #32
 8001552:	d175      	bne.n	8001640 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <HAL_UART_Transmit+0x2c>
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e06e      	b.n	8001642 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2221      	movs	r2, #33	@ 0x21
 800156e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001572:	f7ff f885 	bl	8000680 <HAL_GetTick>
 8001576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	88fa      	ldrh	r2, [r7, #6]
 800157c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800158c:	d108      	bne.n	80015a0 <HAL_UART_Transmit+0x6c>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d104      	bne.n	80015a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	e003      	b.n	80015a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80015a8:	e02e      	b.n	8001608 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2200      	movs	r2, #0
 80015b2:	2180      	movs	r1, #128	@ 0x80
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 f8df 	bl	8001778 <UART_WaitOnFlagUntilTimeout>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2220      	movs	r2, #32
 80015c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e03a      	b.n	8001642 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10b      	bne.n	80015ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	3302      	adds	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	e007      	b.n	80015fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	3301      	adds	r3, #1
 80015f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b01      	subs	r3, #1
 8001602:	b29a      	uxth	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800160c:	b29b      	uxth	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1cb      	bne.n	80015aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2200      	movs	r2, #0
 800161a:	2140      	movs	r1, #64	@ 0x40
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 f8ab 	bl	8001778 <UART_WaitOnFlagUntilTimeout>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2220      	movs	r2, #32
 800162c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e006      	b.n	8001642 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2220      	movs	r2, #32
 8001638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	e000      	b.n	8001642 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001640:	2302      	movs	r3, #2
  }
}
 8001642:	4618      	mov	r0, r3
 8001644:	3720      	adds	r7, #32
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b08a      	sub	sp, #40	@ 0x28
 800164e:	af02      	add	r7, sp, #8
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4613      	mov	r3, r2
 8001658:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b20      	cmp	r3, #32
 8001668:	f040 8081 	bne.w	800176e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <HAL_UART_Receive+0x2e>
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e079      	b.n	8001770 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2222      	movs	r2, #34	@ 0x22
 8001686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001690:	f7fe fff6 	bl	8000680 <HAL_GetTick>
 8001694:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	88fa      	ldrh	r2, [r7, #6]
 800169a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	88fa      	ldrh	r2, [r7, #6]
 80016a0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016aa:	d108      	bne.n	80016be <HAL_UART_Receive+0x74>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d104      	bne.n	80016be <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	e003      	b.n	80016c6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80016c6:	e047      	b.n	8001758 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2200      	movs	r2, #0
 80016d0:	2120      	movs	r1, #32
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f000 f850 	bl	8001778 <UART_WaitOnFlagUntilTimeout>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2220      	movs	r2, #32
 80016e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e042      	b.n	8001770 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10c      	bne.n	800170a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	3302      	adds	r3, #2
 8001706:	61bb      	str	r3, [r7, #24]
 8001708:	e01f      	b.n	800174a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001712:	d007      	beq.n	8001724 <HAL_UART_Receive+0xda>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10a      	bne.n	8001732 <HAL_UART_Receive+0xe8>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d106      	bne.n	8001732 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	e008      	b.n	8001744 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800173e:	b2da      	uxtb	r2, r3
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	3301      	adds	r3, #1
 8001748:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800174e:	b29b      	uxth	r3, r3
 8001750:	3b01      	subs	r3, #1
 8001752:	b29a      	uxth	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800175c:	b29b      	uxth	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1b2      	bne.n	80016c8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2220      	movs	r2, #32
 8001766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800176e:	2302      	movs	r3, #2
  }
}
 8001770:	4618      	mov	r0, r3
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	4613      	mov	r3, r2
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001788:	e03b      	b.n	8001802 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001790:	d037      	beq.n	8001802 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001792:	f7fe ff75 	bl	8000680 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	6a3a      	ldr	r2, [r7, #32]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d302      	bcc.n	80017a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e03a      	b.n	8001822 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d023      	beq.n	8001802 <UART_WaitOnFlagUntilTimeout+0x8a>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2b80      	cmp	r3, #128	@ 0x80
 80017be:	d020      	beq.n	8001802 <UART_WaitOnFlagUntilTimeout+0x8a>
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b40      	cmp	r3, #64	@ 0x40
 80017c4:	d01d      	beq.n	8001802 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d116      	bne.n	8001802 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f81d 	bl	800182a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2208      	movs	r2, #8
 80017f4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e00f      	b.n	8001822 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4013      	ands	r3, r2
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	429a      	cmp	r2, r3
 8001810:	bf0c      	ite	eq
 8001812:	2301      	moveq	r3, #1
 8001814:	2300      	movne	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	429a      	cmp	r2, r3
 800181e:	d0b4      	beq.n	800178a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800182a:	b480      	push	{r7}
 800182c:	b095      	sub	sp, #84	@ 0x54
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	330c      	adds	r3, #12
 8001838:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800183a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800183c:	e853 3f00 	ldrex	r3, [r3]
 8001840:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001844:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001848:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	330c      	adds	r3, #12
 8001850:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001852:	643a      	str	r2, [r7, #64]	@ 0x40
 8001854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001856:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001858:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800185a:	e841 2300 	strex	r3, r2, [r1]
 800185e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1e5      	bne.n	8001832 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3314      	adds	r3, #20
 800186c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	e853 3f00 	ldrex	r3, [r3]
 8001874:	61fb      	str	r3, [r7, #28]
   return(result);
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3314      	adds	r3, #20
 8001884:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001888:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800188a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800188c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800188e:	e841 2300 	strex	r3, r2, [r1]
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1e5      	bne.n	8001866 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d119      	bne.n	80018d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	330c      	adds	r3, #12
 80018a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	e853 3f00 	ldrex	r3, [r3]
 80018b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f023 0310 	bic.w	r3, r3, #16
 80018b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	330c      	adds	r3, #12
 80018c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80018c2:	61ba      	str	r2, [r7, #24]
 80018c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018c6:	6979      	ldr	r1, [r7, #20]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	e841 2300 	strex	r3, r2, [r1]
 80018ce:	613b      	str	r3, [r7, #16]
   return(result);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1e5      	bne.n	80018a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2220      	movs	r2, #32
 80018da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80018e4:	bf00      	nop
 80018e6:	3754      	adds	r7, #84	@ 0x54
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
	...

080018f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	4313      	orrs	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800192a:	f023 030c 	bic.w	r3, r3, #12
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	430b      	orrs	r3, r1
 8001936:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699a      	ldr	r2, [r3, #24]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a2c      	ldr	r2, [pc, #176]	@ (8001a04 <UART_SetConfig+0x114>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d103      	bne.n	8001960 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001958:	f7ff fd6a 	bl	8001430 <HAL_RCC_GetPCLK2Freq>
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	e002      	b.n	8001966 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001960:	f7ff fd52 	bl	8001408 <HAL_RCC_GetPCLK1Freq>
 8001964:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	009a      	lsls	r2, r3, #2
 8001970:	441a      	add	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	fbb2 f3f3 	udiv	r3, r2, r3
 800197c:	4a22      	ldr	r2, [pc, #136]	@ (8001a08 <UART_SetConfig+0x118>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	0119      	lsls	r1, r3, #4
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	009a      	lsls	r2, r3, #2
 8001990:	441a      	add	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	fbb2 f2f3 	udiv	r2, r2, r3
 800199c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <UART_SetConfig+0x118>)
 800199e:	fba3 0302 	umull	r0, r3, r3, r2
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2064      	movs	r0, #100	@ 0x64
 80019a6:	fb00 f303 	mul.w	r3, r0, r3
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	3332      	adds	r3, #50	@ 0x32
 80019b0:	4a15      	ldr	r2, [pc, #84]	@ (8001a08 <UART_SetConfig+0x118>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019bc:	4419      	add	r1, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	009a      	lsls	r2, r3, #2
 80019c8:	441a      	add	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <UART_SetConfig+0x118>)
 80019d6:	fba3 0302 	umull	r0, r3, r3, r2
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2064      	movs	r0, #100	@ 0x64
 80019de:	fb00 f303 	mul.w	r3, r0, r3
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	3332      	adds	r3, #50	@ 0x32
 80019e8:	4a07      	ldr	r2, [pc, #28]	@ (8001a08 <UART_SetConfig+0x118>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	f003 020f 	and.w	r2, r3, #15
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	440a      	add	r2, r1
 80019fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40013800 	.word	0x40013800
 8001a08:	51eb851f 	.word	0x51eb851f

08001a0c <siprintf>:
 8001a0c:	b40e      	push	{r1, r2, r3}
 8001a0e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001a12:	b500      	push	{lr}
 8001a14:	b09c      	sub	sp, #112	@ 0x70
 8001a16:	ab1d      	add	r3, sp, #116	@ 0x74
 8001a18:	9002      	str	r0, [sp, #8]
 8001a1a:	9006      	str	r0, [sp, #24]
 8001a1c:	9107      	str	r1, [sp, #28]
 8001a1e:	9104      	str	r1, [sp, #16]
 8001a20:	4808      	ldr	r0, [pc, #32]	@ (8001a44 <siprintf+0x38>)
 8001a22:	4909      	ldr	r1, [pc, #36]	@ (8001a48 <siprintf+0x3c>)
 8001a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a28:	9105      	str	r1, [sp, #20]
 8001a2a:	6800      	ldr	r0, [r0, #0]
 8001a2c:	a902      	add	r1, sp, #8
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	f000 f89c 	bl	8001b6c <_svfiprintf_r>
 8001a34:	2200      	movs	r2, #0
 8001a36:	9b02      	ldr	r3, [sp, #8]
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	b01c      	add	sp, #112	@ 0x70
 8001a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a40:	b003      	add	sp, #12
 8001a42:	4770      	bx	lr
 8001a44:	20000010 	.word	0x20000010
 8001a48:	ffff0208 	.word	0xffff0208

08001a4c <memset>:
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4402      	add	r2, r0
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d100      	bne.n	8001a56 <memset+0xa>
 8001a54:	4770      	bx	lr
 8001a56:	f803 1b01 	strb.w	r1, [r3], #1
 8001a5a:	e7f9      	b.n	8001a50 <memset+0x4>

08001a5c <__errno>:
 8001a5c:	4b01      	ldr	r3, [pc, #4]	@ (8001a64 <__errno+0x8>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000010 	.word	0x20000010

08001a68 <__libc_init_array>:
 8001a68:	b570      	push	{r4, r5, r6, lr}
 8001a6a:	2600      	movs	r6, #0
 8001a6c:	4d0c      	ldr	r5, [pc, #48]	@ (8001aa0 <__libc_init_array+0x38>)
 8001a6e:	4c0d      	ldr	r4, [pc, #52]	@ (8001aa4 <__libc_init_array+0x3c>)
 8001a70:	1b64      	subs	r4, r4, r5
 8001a72:	10a4      	asrs	r4, r4, #2
 8001a74:	42a6      	cmp	r6, r4
 8001a76:	d109      	bne.n	8001a8c <__libc_init_array+0x24>
 8001a78:	f000 fc78 	bl	800236c <_init>
 8001a7c:	2600      	movs	r6, #0
 8001a7e:	4d0a      	ldr	r5, [pc, #40]	@ (8001aa8 <__libc_init_array+0x40>)
 8001a80:	4c0a      	ldr	r4, [pc, #40]	@ (8001aac <__libc_init_array+0x44>)
 8001a82:	1b64      	subs	r4, r4, r5
 8001a84:	10a4      	asrs	r4, r4, #2
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d105      	bne.n	8001a96 <__libc_init_array+0x2e>
 8001a8a:	bd70      	pop	{r4, r5, r6, pc}
 8001a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a90:	4798      	blx	r3
 8001a92:	3601      	adds	r6, #1
 8001a94:	e7ee      	b.n	8001a74 <__libc_init_array+0xc>
 8001a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a9a:	4798      	blx	r3
 8001a9c:	3601      	adds	r6, #1
 8001a9e:	e7f2      	b.n	8001a86 <__libc_init_array+0x1e>
 8001aa0:	080023e8 	.word	0x080023e8
 8001aa4:	080023e8 	.word	0x080023e8
 8001aa8:	080023e8 	.word	0x080023e8
 8001aac:	080023ec 	.word	0x080023ec

08001ab0 <__retarget_lock_acquire_recursive>:
 8001ab0:	4770      	bx	lr

08001ab2 <__retarget_lock_release_recursive>:
 8001ab2:	4770      	bx	lr

08001ab4 <__ssputs_r>:
 8001ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ab8:	461f      	mov	r7, r3
 8001aba:	688e      	ldr	r6, [r1, #8]
 8001abc:	4682      	mov	sl, r0
 8001abe:	42be      	cmp	r6, r7
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	4690      	mov	r8, r2
 8001ac4:	680b      	ldr	r3, [r1, #0]
 8001ac6:	d82d      	bhi.n	8001b24 <__ssputs_r+0x70>
 8001ac8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001acc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001ad0:	d026      	beq.n	8001b20 <__ssputs_r+0x6c>
 8001ad2:	6965      	ldr	r5, [r4, #20]
 8001ad4:	6909      	ldr	r1, [r1, #16]
 8001ad6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ada:	eba3 0901 	sub.w	r9, r3, r1
 8001ade:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001ae2:	1c7b      	adds	r3, r7, #1
 8001ae4:	444b      	add	r3, r9
 8001ae6:	106d      	asrs	r5, r5, #1
 8001ae8:	429d      	cmp	r5, r3
 8001aea:	bf38      	it	cc
 8001aec:	461d      	movcc	r5, r3
 8001aee:	0553      	lsls	r3, r2, #21
 8001af0:	d527      	bpl.n	8001b42 <__ssputs_r+0x8e>
 8001af2:	4629      	mov	r1, r5
 8001af4:	f000 f958 	bl	8001da8 <_malloc_r>
 8001af8:	4606      	mov	r6, r0
 8001afa:	b360      	cbz	r0, 8001b56 <__ssputs_r+0xa2>
 8001afc:	464a      	mov	r2, r9
 8001afe:	6921      	ldr	r1, [r4, #16]
 8001b00:	f000 fbd6 	bl	80022b0 <memcpy>
 8001b04:	89a3      	ldrh	r3, [r4, #12]
 8001b06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b0e:	81a3      	strh	r3, [r4, #12]
 8001b10:	6126      	str	r6, [r4, #16]
 8001b12:	444e      	add	r6, r9
 8001b14:	6026      	str	r6, [r4, #0]
 8001b16:	463e      	mov	r6, r7
 8001b18:	6165      	str	r5, [r4, #20]
 8001b1a:	eba5 0509 	sub.w	r5, r5, r9
 8001b1e:	60a5      	str	r5, [r4, #8]
 8001b20:	42be      	cmp	r6, r7
 8001b22:	d900      	bls.n	8001b26 <__ssputs_r+0x72>
 8001b24:	463e      	mov	r6, r7
 8001b26:	4632      	mov	r2, r6
 8001b28:	4641      	mov	r1, r8
 8001b2a:	6820      	ldr	r0, [r4, #0]
 8001b2c:	f000 fb88 	bl	8002240 <memmove>
 8001b30:	2000      	movs	r0, #0
 8001b32:	68a3      	ldr	r3, [r4, #8]
 8001b34:	1b9b      	subs	r3, r3, r6
 8001b36:	60a3      	str	r3, [r4, #8]
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	4433      	add	r3, r6
 8001b3c:	6023      	str	r3, [r4, #0]
 8001b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b42:	462a      	mov	r2, r5
 8001b44:	f000 fb4e 	bl	80021e4 <_realloc_r>
 8001b48:	4606      	mov	r6, r0
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d1e0      	bne.n	8001b10 <__ssputs_r+0x5c>
 8001b4e:	4650      	mov	r0, sl
 8001b50:	6921      	ldr	r1, [r4, #16]
 8001b52:	f000 fbbb 	bl	80022cc <_free_r>
 8001b56:	230c      	movs	r3, #12
 8001b58:	f8ca 3000 	str.w	r3, [sl]
 8001b5c:	89a3      	ldrh	r3, [r4, #12]
 8001b5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b66:	81a3      	strh	r3, [r4, #12]
 8001b68:	e7e9      	b.n	8001b3e <__ssputs_r+0x8a>
	...

08001b6c <_svfiprintf_r>:
 8001b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b70:	4698      	mov	r8, r3
 8001b72:	898b      	ldrh	r3, [r1, #12]
 8001b74:	4607      	mov	r7, r0
 8001b76:	061b      	lsls	r3, r3, #24
 8001b78:	460d      	mov	r5, r1
 8001b7a:	4614      	mov	r4, r2
 8001b7c:	b09d      	sub	sp, #116	@ 0x74
 8001b7e:	d510      	bpl.n	8001ba2 <_svfiprintf_r+0x36>
 8001b80:	690b      	ldr	r3, [r1, #16]
 8001b82:	b973      	cbnz	r3, 8001ba2 <_svfiprintf_r+0x36>
 8001b84:	2140      	movs	r1, #64	@ 0x40
 8001b86:	f000 f90f 	bl	8001da8 <_malloc_r>
 8001b8a:	6028      	str	r0, [r5, #0]
 8001b8c:	6128      	str	r0, [r5, #16]
 8001b8e:	b930      	cbnz	r0, 8001b9e <_svfiprintf_r+0x32>
 8001b90:	230c      	movs	r3, #12
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b98:	b01d      	add	sp, #116	@ 0x74
 8001b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b9e:	2340      	movs	r3, #64	@ 0x40
 8001ba0:	616b      	str	r3, [r5, #20]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001bac:	2330      	movs	r3, #48	@ 0x30
 8001bae:	f04f 0901 	mov.w	r9, #1
 8001bb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001bb6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001d50 <_svfiprintf_r+0x1e4>
 8001bba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	469a      	mov	sl, r3
 8001bc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001bc6:	b10a      	cbz	r2, 8001bcc <_svfiprintf_r+0x60>
 8001bc8:	2a25      	cmp	r2, #37	@ 0x25
 8001bca:	d1f9      	bne.n	8001bc0 <_svfiprintf_r+0x54>
 8001bcc:	ebba 0b04 	subs.w	fp, sl, r4
 8001bd0:	d00b      	beq.n	8001bea <_svfiprintf_r+0x7e>
 8001bd2:	465b      	mov	r3, fp
 8001bd4:	4622      	mov	r2, r4
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	4638      	mov	r0, r7
 8001bda:	f7ff ff6b 	bl	8001ab4 <__ssputs_r>
 8001bde:	3001      	adds	r0, #1
 8001be0:	f000 80a7 	beq.w	8001d32 <_svfiprintf_r+0x1c6>
 8001be4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001be6:	445a      	add	r2, fp
 8001be8:	9209      	str	r2, [sp, #36]	@ 0x24
 8001bea:	f89a 3000 	ldrb.w	r3, [sl]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 809f 	beq.w	8001d32 <_svfiprintf_r+0x1c6>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bfe:	f10a 0a01 	add.w	sl, sl, #1
 8001c02:	9304      	str	r3, [sp, #16]
 8001c04:	9307      	str	r3, [sp, #28]
 8001c06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001c0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8001c0c:	4654      	mov	r4, sl
 8001c0e:	2205      	movs	r2, #5
 8001c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c14:	484e      	ldr	r0, [pc, #312]	@ (8001d50 <_svfiprintf_r+0x1e4>)
 8001c16:	f000 fb3d 	bl	8002294 <memchr>
 8001c1a:	9a04      	ldr	r2, [sp, #16]
 8001c1c:	b9d8      	cbnz	r0, 8001c56 <_svfiprintf_r+0xea>
 8001c1e:	06d0      	lsls	r0, r2, #27
 8001c20:	bf44      	itt	mi
 8001c22:	2320      	movmi	r3, #32
 8001c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c28:	0711      	lsls	r1, r2, #28
 8001c2a:	bf44      	itt	mi
 8001c2c:	232b      	movmi	r3, #43	@ 0x2b
 8001c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c32:	f89a 3000 	ldrb.w	r3, [sl]
 8001c36:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c38:	d015      	beq.n	8001c66 <_svfiprintf_r+0xfa>
 8001c3a:	4654      	mov	r4, sl
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f04f 0c0a 	mov.w	ip, #10
 8001c42:	9a07      	ldr	r2, [sp, #28]
 8001c44:	4621      	mov	r1, r4
 8001c46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c4a:	3b30      	subs	r3, #48	@ 0x30
 8001c4c:	2b09      	cmp	r3, #9
 8001c4e:	d94b      	bls.n	8001ce8 <_svfiprintf_r+0x17c>
 8001c50:	b1b0      	cbz	r0, 8001c80 <_svfiprintf_r+0x114>
 8001c52:	9207      	str	r2, [sp, #28]
 8001c54:	e014      	b.n	8001c80 <_svfiprintf_r+0x114>
 8001c56:	eba0 0308 	sub.w	r3, r0, r8
 8001c5a:	fa09 f303 	lsl.w	r3, r9, r3
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	46a2      	mov	sl, r4
 8001c62:	9304      	str	r3, [sp, #16]
 8001c64:	e7d2      	b.n	8001c0c <_svfiprintf_r+0xa0>
 8001c66:	9b03      	ldr	r3, [sp, #12]
 8001c68:	1d19      	adds	r1, r3, #4
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	9103      	str	r1, [sp, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bfbb      	ittet	lt
 8001c72:	425b      	neglt	r3, r3
 8001c74:	f042 0202 	orrlt.w	r2, r2, #2
 8001c78:	9307      	strge	r3, [sp, #28]
 8001c7a:	9307      	strlt	r3, [sp, #28]
 8001c7c:	bfb8      	it	lt
 8001c7e:	9204      	strlt	r2, [sp, #16]
 8001c80:	7823      	ldrb	r3, [r4, #0]
 8001c82:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c84:	d10a      	bne.n	8001c9c <_svfiprintf_r+0x130>
 8001c86:	7863      	ldrb	r3, [r4, #1]
 8001c88:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c8a:	d132      	bne.n	8001cf2 <_svfiprintf_r+0x186>
 8001c8c:	9b03      	ldr	r3, [sp, #12]
 8001c8e:	3402      	adds	r4, #2
 8001c90:	1d1a      	adds	r2, r3, #4
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	9203      	str	r2, [sp, #12]
 8001c96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001c9a:	9305      	str	r3, [sp, #20]
 8001c9c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001d54 <_svfiprintf_r+0x1e8>
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	4650      	mov	r0, sl
 8001ca4:	7821      	ldrb	r1, [r4, #0]
 8001ca6:	f000 faf5 	bl	8002294 <memchr>
 8001caa:	b138      	cbz	r0, 8001cbc <_svfiprintf_r+0x150>
 8001cac:	2240      	movs	r2, #64	@ 0x40
 8001cae:	9b04      	ldr	r3, [sp, #16]
 8001cb0:	eba0 000a 	sub.w	r0, r0, sl
 8001cb4:	4082      	lsls	r2, r0
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	3401      	adds	r4, #1
 8001cba:	9304      	str	r3, [sp, #16]
 8001cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cc0:	2206      	movs	r2, #6
 8001cc2:	4825      	ldr	r0, [pc, #148]	@ (8001d58 <_svfiprintf_r+0x1ec>)
 8001cc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001cc8:	f000 fae4 	bl	8002294 <memchr>
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	d036      	beq.n	8001d3e <_svfiprintf_r+0x1d2>
 8001cd0:	4b22      	ldr	r3, [pc, #136]	@ (8001d5c <_svfiprintf_r+0x1f0>)
 8001cd2:	bb1b      	cbnz	r3, 8001d1c <_svfiprintf_r+0x1b0>
 8001cd4:	9b03      	ldr	r3, [sp, #12]
 8001cd6:	3307      	adds	r3, #7
 8001cd8:	f023 0307 	bic.w	r3, r3, #7
 8001cdc:	3308      	adds	r3, #8
 8001cde:	9303      	str	r3, [sp, #12]
 8001ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001ce2:	4433      	add	r3, r6
 8001ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ce6:	e76a      	b.n	8001bbe <_svfiprintf_r+0x52>
 8001ce8:	460c      	mov	r4, r1
 8001cea:	2001      	movs	r0, #1
 8001cec:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cf0:	e7a8      	b.n	8001c44 <_svfiprintf_r+0xd8>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f04f 0c0a 	mov.w	ip, #10
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	3401      	adds	r4, #1
 8001cfc:	9305      	str	r3, [sp, #20]
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d04:	3a30      	subs	r2, #48	@ 0x30
 8001d06:	2a09      	cmp	r2, #9
 8001d08:	d903      	bls.n	8001d12 <_svfiprintf_r+0x1a6>
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0c6      	beq.n	8001c9c <_svfiprintf_r+0x130>
 8001d0e:	9105      	str	r1, [sp, #20]
 8001d10:	e7c4      	b.n	8001c9c <_svfiprintf_r+0x130>
 8001d12:	4604      	mov	r4, r0
 8001d14:	2301      	movs	r3, #1
 8001d16:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d1a:	e7f0      	b.n	8001cfe <_svfiprintf_r+0x192>
 8001d1c:	ab03      	add	r3, sp, #12
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	462a      	mov	r2, r5
 8001d22:	4638      	mov	r0, r7
 8001d24:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <_svfiprintf_r+0x1f4>)
 8001d26:	a904      	add	r1, sp, #16
 8001d28:	f3af 8000 	nop.w
 8001d2c:	1c42      	adds	r2, r0, #1
 8001d2e:	4606      	mov	r6, r0
 8001d30:	d1d6      	bne.n	8001ce0 <_svfiprintf_r+0x174>
 8001d32:	89ab      	ldrh	r3, [r5, #12]
 8001d34:	065b      	lsls	r3, r3, #25
 8001d36:	f53f af2d 	bmi.w	8001b94 <_svfiprintf_r+0x28>
 8001d3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001d3c:	e72c      	b.n	8001b98 <_svfiprintf_r+0x2c>
 8001d3e:	ab03      	add	r3, sp, #12
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	462a      	mov	r2, r5
 8001d44:	4638      	mov	r0, r7
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <_svfiprintf_r+0x1f4>)
 8001d48:	a904      	add	r1, sp, #16
 8001d4a:	f000 f91f 	bl	8001f8c <_printf_i>
 8001d4e:	e7ed      	b.n	8001d2c <_svfiprintf_r+0x1c0>
 8001d50:	080023b2 	.word	0x080023b2
 8001d54:	080023b8 	.word	0x080023b8
 8001d58:	080023bc 	.word	0x080023bc
 8001d5c:	00000000 	.word	0x00000000
 8001d60:	08001ab5 	.word	0x08001ab5

08001d64 <sbrk_aligned>:
 8001d64:	b570      	push	{r4, r5, r6, lr}
 8001d66:	4e0f      	ldr	r6, [pc, #60]	@ (8001da4 <sbrk_aligned+0x40>)
 8001d68:	460c      	mov	r4, r1
 8001d6a:	6831      	ldr	r1, [r6, #0]
 8001d6c:	4605      	mov	r5, r0
 8001d6e:	b911      	cbnz	r1, 8001d76 <sbrk_aligned+0x12>
 8001d70:	f000 fa80 	bl	8002274 <_sbrk_r>
 8001d74:	6030      	str	r0, [r6, #0]
 8001d76:	4621      	mov	r1, r4
 8001d78:	4628      	mov	r0, r5
 8001d7a:	f000 fa7b 	bl	8002274 <_sbrk_r>
 8001d7e:	1c43      	adds	r3, r0, #1
 8001d80:	d103      	bne.n	8001d8a <sbrk_aligned+0x26>
 8001d82:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001d86:	4620      	mov	r0, r4
 8001d88:	bd70      	pop	{r4, r5, r6, pc}
 8001d8a:	1cc4      	adds	r4, r0, #3
 8001d8c:	f024 0403 	bic.w	r4, r4, #3
 8001d90:	42a0      	cmp	r0, r4
 8001d92:	d0f8      	beq.n	8001d86 <sbrk_aligned+0x22>
 8001d94:	1a21      	subs	r1, r4, r0
 8001d96:	4628      	mov	r0, r5
 8001d98:	f000 fa6c 	bl	8002274 <_sbrk_r>
 8001d9c:	3001      	adds	r0, #1
 8001d9e:	d1f2      	bne.n	8001d86 <sbrk_aligned+0x22>
 8001da0:	e7ef      	b.n	8001d82 <sbrk_aligned+0x1e>
 8001da2:	bf00      	nop
 8001da4:	20000240 	.word	0x20000240

08001da8 <_malloc_r>:
 8001da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dac:	1ccd      	adds	r5, r1, #3
 8001dae:	f025 0503 	bic.w	r5, r5, #3
 8001db2:	3508      	adds	r5, #8
 8001db4:	2d0c      	cmp	r5, #12
 8001db6:	bf38      	it	cc
 8001db8:	250c      	movcc	r5, #12
 8001dba:	2d00      	cmp	r5, #0
 8001dbc:	4606      	mov	r6, r0
 8001dbe:	db01      	blt.n	8001dc4 <_malloc_r+0x1c>
 8001dc0:	42a9      	cmp	r1, r5
 8001dc2:	d904      	bls.n	8001dce <_malloc_r+0x26>
 8001dc4:	230c      	movs	r3, #12
 8001dc6:	6033      	str	r3, [r6, #0]
 8001dc8:	2000      	movs	r0, #0
 8001dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001dce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001ea4 <_malloc_r+0xfc>
 8001dd2:	f000 f9fb 	bl	80021cc <__malloc_lock>
 8001dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8001dda:	461c      	mov	r4, r3
 8001ddc:	bb44      	cbnz	r4, 8001e30 <_malloc_r+0x88>
 8001dde:	4629      	mov	r1, r5
 8001de0:	4630      	mov	r0, r6
 8001de2:	f7ff ffbf 	bl	8001d64 <sbrk_aligned>
 8001de6:	1c43      	adds	r3, r0, #1
 8001de8:	4604      	mov	r4, r0
 8001dea:	d158      	bne.n	8001e9e <_malloc_r+0xf6>
 8001dec:	f8d8 4000 	ldr.w	r4, [r8]
 8001df0:	4627      	mov	r7, r4
 8001df2:	2f00      	cmp	r7, #0
 8001df4:	d143      	bne.n	8001e7e <_malloc_r+0xd6>
 8001df6:	2c00      	cmp	r4, #0
 8001df8:	d04b      	beq.n	8001e92 <_malloc_r+0xea>
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	4639      	mov	r1, r7
 8001dfe:	4630      	mov	r0, r6
 8001e00:	eb04 0903 	add.w	r9, r4, r3
 8001e04:	f000 fa36 	bl	8002274 <_sbrk_r>
 8001e08:	4581      	cmp	r9, r0
 8001e0a:	d142      	bne.n	8001e92 <_malloc_r+0xea>
 8001e0c:	6821      	ldr	r1, [r4, #0]
 8001e0e:	4630      	mov	r0, r6
 8001e10:	1a6d      	subs	r5, r5, r1
 8001e12:	4629      	mov	r1, r5
 8001e14:	f7ff ffa6 	bl	8001d64 <sbrk_aligned>
 8001e18:	3001      	adds	r0, #1
 8001e1a:	d03a      	beq.n	8001e92 <_malloc_r+0xea>
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	442b      	add	r3, r5
 8001e20:	6023      	str	r3, [r4, #0]
 8001e22:	f8d8 3000 	ldr.w	r3, [r8]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	bb62      	cbnz	r2, 8001e84 <_malloc_r+0xdc>
 8001e2a:	f8c8 7000 	str.w	r7, [r8]
 8001e2e:	e00f      	b.n	8001e50 <_malloc_r+0xa8>
 8001e30:	6822      	ldr	r2, [r4, #0]
 8001e32:	1b52      	subs	r2, r2, r5
 8001e34:	d420      	bmi.n	8001e78 <_malloc_r+0xd0>
 8001e36:	2a0b      	cmp	r2, #11
 8001e38:	d917      	bls.n	8001e6a <_malloc_r+0xc2>
 8001e3a:	1961      	adds	r1, r4, r5
 8001e3c:	42a3      	cmp	r3, r4
 8001e3e:	6025      	str	r5, [r4, #0]
 8001e40:	bf18      	it	ne
 8001e42:	6059      	strne	r1, [r3, #4]
 8001e44:	6863      	ldr	r3, [r4, #4]
 8001e46:	bf08      	it	eq
 8001e48:	f8c8 1000 	streq.w	r1, [r8]
 8001e4c:	5162      	str	r2, [r4, r5]
 8001e4e:	604b      	str	r3, [r1, #4]
 8001e50:	4630      	mov	r0, r6
 8001e52:	f000 f9c1 	bl	80021d8 <__malloc_unlock>
 8001e56:	f104 000b 	add.w	r0, r4, #11
 8001e5a:	1d23      	adds	r3, r4, #4
 8001e5c:	f020 0007 	bic.w	r0, r0, #7
 8001e60:	1ac2      	subs	r2, r0, r3
 8001e62:	bf1c      	itt	ne
 8001e64:	1a1b      	subne	r3, r3, r0
 8001e66:	50a3      	strne	r3, [r4, r2]
 8001e68:	e7af      	b.n	8001dca <_malloc_r+0x22>
 8001e6a:	6862      	ldr	r2, [r4, #4]
 8001e6c:	42a3      	cmp	r3, r4
 8001e6e:	bf0c      	ite	eq
 8001e70:	f8c8 2000 	streq.w	r2, [r8]
 8001e74:	605a      	strne	r2, [r3, #4]
 8001e76:	e7eb      	b.n	8001e50 <_malloc_r+0xa8>
 8001e78:	4623      	mov	r3, r4
 8001e7a:	6864      	ldr	r4, [r4, #4]
 8001e7c:	e7ae      	b.n	8001ddc <_malloc_r+0x34>
 8001e7e:	463c      	mov	r4, r7
 8001e80:	687f      	ldr	r7, [r7, #4]
 8001e82:	e7b6      	b.n	8001df2 <_malloc_r+0x4a>
 8001e84:	461a      	mov	r2, r3
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	42a3      	cmp	r3, r4
 8001e8a:	d1fb      	bne.n	8001e84 <_malloc_r+0xdc>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	6053      	str	r3, [r2, #4]
 8001e90:	e7de      	b.n	8001e50 <_malloc_r+0xa8>
 8001e92:	230c      	movs	r3, #12
 8001e94:	4630      	mov	r0, r6
 8001e96:	6033      	str	r3, [r6, #0]
 8001e98:	f000 f99e 	bl	80021d8 <__malloc_unlock>
 8001e9c:	e794      	b.n	8001dc8 <_malloc_r+0x20>
 8001e9e:	6005      	str	r5, [r0, #0]
 8001ea0:	e7d6      	b.n	8001e50 <_malloc_r+0xa8>
 8001ea2:	bf00      	nop
 8001ea4:	20000244 	.word	0x20000244

08001ea8 <_printf_common>:
 8001ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eac:	4616      	mov	r6, r2
 8001eae:	4698      	mov	r8, r3
 8001eb0:	688a      	ldr	r2, [r1, #8]
 8001eb2:	690b      	ldr	r3, [r1, #16]
 8001eb4:	4607      	mov	r7, r0
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	bfb8      	it	lt
 8001eba:	4613      	movlt	r3, r2
 8001ebc:	6033      	str	r3, [r6, #0]
 8001ebe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ec2:	460c      	mov	r4, r1
 8001ec4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ec8:	b10a      	cbz	r2, 8001ece <_printf_common+0x26>
 8001eca:	3301      	adds	r3, #1
 8001ecc:	6033      	str	r3, [r6, #0]
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	0699      	lsls	r1, r3, #26
 8001ed2:	bf42      	ittt	mi
 8001ed4:	6833      	ldrmi	r3, [r6, #0]
 8001ed6:	3302      	addmi	r3, #2
 8001ed8:	6033      	strmi	r3, [r6, #0]
 8001eda:	6825      	ldr	r5, [r4, #0]
 8001edc:	f015 0506 	ands.w	r5, r5, #6
 8001ee0:	d106      	bne.n	8001ef0 <_printf_common+0x48>
 8001ee2:	f104 0a19 	add.w	sl, r4, #25
 8001ee6:	68e3      	ldr	r3, [r4, #12]
 8001ee8:	6832      	ldr	r2, [r6, #0]
 8001eea:	1a9b      	subs	r3, r3, r2
 8001eec:	42ab      	cmp	r3, r5
 8001eee:	dc2b      	bgt.n	8001f48 <_printf_common+0xa0>
 8001ef0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001ef4:	6822      	ldr	r2, [r4, #0]
 8001ef6:	3b00      	subs	r3, #0
 8001ef8:	bf18      	it	ne
 8001efa:	2301      	movne	r3, #1
 8001efc:	0692      	lsls	r2, r2, #26
 8001efe:	d430      	bmi.n	8001f62 <_printf_common+0xba>
 8001f00:	4641      	mov	r1, r8
 8001f02:	4638      	mov	r0, r7
 8001f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001f08:	47c8      	blx	r9
 8001f0a:	3001      	adds	r0, #1
 8001f0c:	d023      	beq.n	8001f56 <_printf_common+0xae>
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	6922      	ldr	r2, [r4, #16]
 8001f12:	f003 0306 	and.w	r3, r3, #6
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	bf14      	ite	ne
 8001f1a:	2500      	movne	r5, #0
 8001f1c:	6833      	ldreq	r3, [r6, #0]
 8001f1e:	f04f 0600 	mov.w	r6, #0
 8001f22:	bf08      	it	eq
 8001f24:	68e5      	ldreq	r5, [r4, #12]
 8001f26:	f104 041a 	add.w	r4, r4, #26
 8001f2a:	bf08      	it	eq
 8001f2c:	1aed      	subeq	r5, r5, r3
 8001f2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001f32:	bf08      	it	eq
 8001f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	bfc4      	itt	gt
 8001f3c:	1a9b      	subgt	r3, r3, r2
 8001f3e:	18ed      	addgt	r5, r5, r3
 8001f40:	42b5      	cmp	r5, r6
 8001f42:	d11a      	bne.n	8001f7a <_printf_common+0xd2>
 8001f44:	2000      	movs	r0, #0
 8001f46:	e008      	b.n	8001f5a <_printf_common+0xb2>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	4652      	mov	r2, sl
 8001f4c:	4641      	mov	r1, r8
 8001f4e:	4638      	mov	r0, r7
 8001f50:	47c8      	blx	r9
 8001f52:	3001      	adds	r0, #1
 8001f54:	d103      	bne.n	8001f5e <_printf_common+0xb6>
 8001f56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f5e:	3501      	adds	r5, #1
 8001f60:	e7c1      	b.n	8001ee6 <_printf_common+0x3e>
 8001f62:	2030      	movs	r0, #48	@ 0x30
 8001f64:	18e1      	adds	r1, r4, r3
 8001f66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001f70:	4422      	add	r2, r4
 8001f72:	3302      	adds	r3, #2
 8001f74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001f78:	e7c2      	b.n	8001f00 <_printf_common+0x58>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	4622      	mov	r2, r4
 8001f7e:	4641      	mov	r1, r8
 8001f80:	4638      	mov	r0, r7
 8001f82:	47c8      	blx	r9
 8001f84:	3001      	adds	r0, #1
 8001f86:	d0e6      	beq.n	8001f56 <_printf_common+0xae>
 8001f88:	3601      	adds	r6, #1
 8001f8a:	e7d9      	b.n	8001f40 <_printf_common+0x98>

08001f8c <_printf_i>:
 8001f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f90:	7e0f      	ldrb	r7, [r1, #24]
 8001f92:	4691      	mov	r9, r2
 8001f94:	2f78      	cmp	r7, #120	@ 0x78
 8001f96:	4680      	mov	r8, r0
 8001f98:	460c      	mov	r4, r1
 8001f9a:	469a      	mov	sl, r3
 8001f9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001f9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001fa2:	d807      	bhi.n	8001fb4 <_printf_i+0x28>
 8001fa4:	2f62      	cmp	r7, #98	@ 0x62
 8001fa6:	d80a      	bhi.n	8001fbe <_printf_i+0x32>
 8001fa8:	2f00      	cmp	r7, #0
 8001faa:	f000 80d3 	beq.w	8002154 <_printf_i+0x1c8>
 8001fae:	2f58      	cmp	r7, #88	@ 0x58
 8001fb0:	f000 80ba 	beq.w	8002128 <_printf_i+0x19c>
 8001fb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001fb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001fbc:	e03a      	b.n	8002034 <_printf_i+0xa8>
 8001fbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001fc2:	2b15      	cmp	r3, #21
 8001fc4:	d8f6      	bhi.n	8001fb4 <_printf_i+0x28>
 8001fc6:	a101      	add	r1, pc, #4	@ (adr r1, 8001fcc <_printf_i+0x40>)
 8001fc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001fcc:	08002025 	.word	0x08002025
 8001fd0:	08002039 	.word	0x08002039
 8001fd4:	08001fb5 	.word	0x08001fb5
 8001fd8:	08001fb5 	.word	0x08001fb5
 8001fdc:	08001fb5 	.word	0x08001fb5
 8001fe0:	08001fb5 	.word	0x08001fb5
 8001fe4:	08002039 	.word	0x08002039
 8001fe8:	08001fb5 	.word	0x08001fb5
 8001fec:	08001fb5 	.word	0x08001fb5
 8001ff0:	08001fb5 	.word	0x08001fb5
 8001ff4:	08001fb5 	.word	0x08001fb5
 8001ff8:	0800213b 	.word	0x0800213b
 8001ffc:	08002063 	.word	0x08002063
 8002000:	080020f5 	.word	0x080020f5
 8002004:	08001fb5 	.word	0x08001fb5
 8002008:	08001fb5 	.word	0x08001fb5
 800200c:	0800215d 	.word	0x0800215d
 8002010:	08001fb5 	.word	0x08001fb5
 8002014:	08002063 	.word	0x08002063
 8002018:	08001fb5 	.word	0x08001fb5
 800201c:	08001fb5 	.word	0x08001fb5
 8002020:	080020fd 	.word	0x080020fd
 8002024:	6833      	ldr	r3, [r6, #0]
 8002026:	1d1a      	adds	r2, r3, #4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6032      	str	r2, [r6, #0]
 800202c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002030:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002034:	2301      	movs	r3, #1
 8002036:	e09e      	b.n	8002176 <_printf_i+0x1ea>
 8002038:	6833      	ldr	r3, [r6, #0]
 800203a:	6820      	ldr	r0, [r4, #0]
 800203c:	1d19      	adds	r1, r3, #4
 800203e:	6031      	str	r1, [r6, #0]
 8002040:	0606      	lsls	r6, r0, #24
 8002042:	d501      	bpl.n	8002048 <_printf_i+0xbc>
 8002044:	681d      	ldr	r5, [r3, #0]
 8002046:	e003      	b.n	8002050 <_printf_i+0xc4>
 8002048:	0645      	lsls	r5, r0, #25
 800204a:	d5fb      	bpl.n	8002044 <_printf_i+0xb8>
 800204c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002050:	2d00      	cmp	r5, #0
 8002052:	da03      	bge.n	800205c <_printf_i+0xd0>
 8002054:	232d      	movs	r3, #45	@ 0x2d
 8002056:	426d      	negs	r5, r5
 8002058:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800205c:	230a      	movs	r3, #10
 800205e:	4859      	ldr	r0, [pc, #356]	@ (80021c4 <_printf_i+0x238>)
 8002060:	e011      	b.n	8002086 <_printf_i+0xfa>
 8002062:	6821      	ldr	r1, [r4, #0]
 8002064:	6833      	ldr	r3, [r6, #0]
 8002066:	0608      	lsls	r0, r1, #24
 8002068:	f853 5b04 	ldr.w	r5, [r3], #4
 800206c:	d402      	bmi.n	8002074 <_printf_i+0xe8>
 800206e:	0649      	lsls	r1, r1, #25
 8002070:	bf48      	it	mi
 8002072:	b2ad      	uxthmi	r5, r5
 8002074:	2f6f      	cmp	r7, #111	@ 0x6f
 8002076:	6033      	str	r3, [r6, #0]
 8002078:	bf14      	ite	ne
 800207a:	230a      	movne	r3, #10
 800207c:	2308      	moveq	r3, #8
 800207e:	4851      	ldr	r0, [pc, #324]	@ (80021c4 <_printf_i+0x238>)
 8002080:	2100      	movs	r1, #0
 8002082:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002086:	6866      	ldr	r6, [r4, #4]
 8002088:	2e00      	cmp	r6, #0
 800208a:	bfa8      	it	ge
 800208c:	6821      	ldrge	r1, [r4, #0]
 800208e:	60a6      	str	r6, [r4, #8]
 8002090:	bfa4      	itt	ge
 8002092:	f021 0104 	bicge.w	r1, r1, #4
 8002096:	6021      	strge	r1, [r4, #0]
 8002098:	b90d      	cbnz	r5, 800209e <_printf_i+0x112>
 800209a:	2e00      	cmp	r6, #0
 800209c:	d04b      	beq.n	8002136 <_printf_i+0x1aa>
 800209e:	4616      	mov	r6, r2
 80020a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80020a4:	fb03 5711 	mls	r7, r3, r1, r5
 80020a8:	5dc7      	ldrb	r7, [r0, r7]
 80020aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80020ae:	462f      	mov	r7, r5
 80020b0:	42bb      	cmp	r3, r7
 80020b2:	460d      	mov	r5, r1
 80020b4:	d9f4      	bls.n	80020a0 <_printf_i+0x114>
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d10b      	bne.n	80020d2 <_printf_i+0x146>
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	07df      	lsls	r7, r3, #31
 80020be:	d508      	bpl.n	80020d2 <_printf_i+0x146>
 80020c0:	6923      	ldr	r3, [r4, #16]
 80020c2:	6861      	ldr	r1, [r4, #4]
 80020c4:	4299      	cmp	r1, r3
 80020c6:	bfde      	ittt	le
 80020c8:	2330      	movle	r3, #48	@ 0x30
 80020ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020ce:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80020d2:	1b92      	subs	r2, r2, r6
 80020d4:	6122      	str	r2, [r4, #16]
 80020d6:	464b      	mov	r3, r9
 80020d8:	4621      	mov	r1, r4
 80020da:	4640      	mov	r0, r8
 80020dc:	f8cd a000 	str.w	sl, [sp]
 80020e0:	aa03      	add	r2, sp, #12
 80020e2:	f7ff fee1 	bl	8001ea8 <_printf_common>
 80020e6:	3001      	adds	r0, #1
 80020e8:	d14a      	bne.n	8002180 <_printf_i+0x1f4>
 80020ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020ee:	b004      	add	sp, #16
 80020f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	f043 0320 	orr.w	r3, r3, #32
 80020fa:	6023      	str	r3, [r4, #0]
 80020fc:	2778      	movs	r7, #120	@ 0x78
 80020fe:	4832      	ldr	r0, [pc, #200]	@ (80021c8 <_printf_i+0x23c>)
 8002100:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	6831      	ldr	r1, [r6, #0]
 8002108:	061f      	lsls	r7, r3, #24
 800210a:	f851 5b04 	ldr.w	r5, [r1], #4
 800210e:	d402      	bmi.n	8002116 <_printf_i+0x18a>
 8002110:	065f      	lsls	r7, r3, #25
 8002112:	bf48      	it	mi
 8002114:	b2ad      	uxthmi	r5, r5
 8002116:	6031      	str	r1, [r6, #0]
 8002118:	07d9      	lsls	r1, r3, #31
 800211a:	bf44      	itt	mi
 800211c:	f043 0320 	orrmi.w	r3, r3, #32
 8002120:	6023      	strmi	r3, [r4, #0]
 8002122:	b11d      	cbz	r5, 800212c <_printf_i+0x1a0>
 8002124:	2310      	movs	r3, #16
 8002126:	e7ab      	b.n	8002080 <_printf_i+0xf4>
 8002128:	4826      	ldr	r0, [pc, #152]	@ (80021c4 <_printf_i+0x238>)
 800212a:	e7e9      	b.n	8002100 <_printf_i+0x174>
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	f023 0320 	bic.w	r3, r3, #32
 8002132:	6023      	str	r3, [r4, #0]
 8002134:	e7f6      	b.n	8002124 <_printf_i+0x198>
 8002136:	4616      	mov	r6, r2
 8002138:	e7bd      	b.n	80020b6 <_printf_i+0x12a>
 800213a:	6833      	ldr	r3, [r6, #0]
 800213c:	6825      	ldr	r5, [r4, #0]
 800213e:	1d18      	adds	r0, r3, #4
 8002140:	6961      	ldr	r1, [r4, #20]
 8002142:	6030      	str	r0, [r6, #0]
 8002144:	062e      	lsls	r6, r5, #24
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	d501      	bpl.n	800214e <_printf_i+0x1c2>
 800214a:	6019      	str	r1, [r3, #0]
 800214c:	e002      	b.n	8002154 <_printf_i+0x1c8>
 800214e:	0668      	lsls	r0, r5, #25
 8002150:	d5fb      	bpl.n	800214a <_printf_i+0x1be>
 8002152:	8019      	strh	r1, [r3, #0]
 8002154:	2300      	movs	r3, #0
 8002156:	4616      	mov	r6, r2
 8002158:	6123      	str	r3, [r4, #16]
 800215a:	e7bc      	b.n	80020d6 <_printf_i+0x14a>
 800215c:	6833      	ldr	r3, [r6, #0]
 800215e:	2100      	movs	r1, #0
 8002160:	1d1a      	adds	r2, r3, #4
 8002162:	6032      	str	r2, [r6, #0]
 8002164:	681e      	ldr	r6, [r3, #0]
 8002166:	6862      	ldr	r2, [r4, #4]
 8002168:	4630      	mov	r0, r6
 800216a:	f000 f893 	bl	8002294 <memchr>
 800216e:	b108      	cbz	r0, 8002174 <_printf_i+0x1e8>
 8002170:	1b80      	subs	r0, r0, r6
 8002172:	6060      	str	r0, [r4, #4]
 8002174:	6863      	ldr	r3, [r4, #4]
 8002176:	6123      	str	r3, [r4, #16]
 8002178:	2300      	movs	r3, #0
 800217a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800217e:	e7aa      	b.n	80020d6 <_printf_i+0x14a>
 8002180:	4632      	mov	r2, r6
 8002182:	4649      	mov	r1, r9
 8002184:	4640      	mov	r0, r8
 8002186:	6923      	ldr	r3, [r4, #16]
 8002188:	47d0      	blx	sl
 800218a:	3001      	adds	r0, #1
 800218c:	d0ad      	beq.n	80020ea <_printf_i+0x15e>
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	079b      	lsls	r3, r3, #30
 8002192:	d413      	bmi.n	80021bc <_printf_i+0x230>
 8002194:	68e0      	ldr	r0, [r4, #12]
 8002196:	9b03      	ldr	r3, [sp, #12]
 8002198:	4298      	cmp	r0, r3
 800219a:	bfb8      	it	lt
 800219c:	4618      	movlt	r0, r3
 800219e:	e7a6      	b.n	80020ee <_printf_i+0x162>
 80021a0:	2301      	movs	r3, #1
 80021a2:	4632      	mov	r2, r6
 80021a4:	4649      	mov	r1, r9
 80021a6:	4640      	mov	r0, r8
 80021a8:	47d0      	blx	sl
 80021aa:	3001      	adds	r0, #1
 80021ac:	d09d      	beq.n	80020ea <_printf_i+0x15e>
 80021ae:	3501      	adds	r5, #1
 80021b0:	68e3      	ldr	r3, [r4, #12]
 80021b2:	9903      	ldr	r1, [sp, #12]
 80021b4:	1a5b      	subs	r3, r3, r1
 80021b6:	42ab      	cmp	r3, r5
 80021b8:	dcf2      	bgt.n	80021a0 <_printf_i+0x214>
 80021ba:	e7eb      	b.n	8002194 <_printf_i+0x208>
 80021bc:	2500      	movs	r5, #0
 80021be:	f104 0619 	add.w	r6, r4, #25
 80021c2:	e7f5      	b.n	80021b0 <_printf_i+0x224>
 80021c4:	080023c3 	.word	0x080023c3
 80021c8:	080023d4 	.word	0x080023d4

080021cc <__malloc_lock>:
 80021cc:	4801      	ldr	r0, [pc, #4]	@ (80021d4 <__malloc_lock+0x8>)
 80021ce:	f7ff bc6f 	b.w	8001ab0 <__retarget_lock_acquire_recursive>
 80021d2:	bf00      	nop
 80021d4:	2000023c 	.word	0x2000023c

080021d8 <__malloc_unlock>:
 80021d8:	4801      	ldr	r0, [pc, #4]	@ (80021e0 <__malloc_unlock+0x8>)
 80021da:	f7ff bc6a 	b.w	8001ab2 <__retarget_lock_release_recursive>
 80021de:	bf00      	nop
 80021e0:	2000023c 	.word	0x2000023c

080021e4 <_realloc_r>:
 80021e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021e8:	4680      	mov	r8, r0
 80021ea:	4615      	mov	r5, r2
 80021ec:	460c      	mov	r4, r1
 80021ee:	b921      	cbnz	r1, 80021fa <_realloc_r+0x16>
 80021f0:	4611      	mov	r1, r2
 80021f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021f6:	f7ff bdd7 	b.w	8001da8 <_malloc_r>
 80021fa:	b92a      	cbnz	r2, 8002208 <_realloc_r+0x24>
 80021fc:	f000 f866 	bl	80022cc <_free_r>
 8002200:	2400      	movs	r4, #0
 8002202:	4620      	mov	r0, r4
 8002204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002208:	f000 f8a8 	bl	800235c <_malloc_usable_size_r>
 800220c:	4285      	cmp	r5, r0
 800220e:	4606      	mov	r6, r0
 8002210:	d802      	bhi.n	8002218 <_realloc_r+0x34>
 8002212:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002216:	d8f4      	bhi.n	8002202 <_realloc_r+0x1e>
 8002218:	4629      	mov	r1, r5
 800221a:	4640      	mov	r0, r8
 800221c:	f7ff fdc4 	bl	8001da8 <_malloc_r>
 8002220:	4607      	mov	r7, r0
 8002222:	2800      	cmp	r0, #0
 8002224:	d0ec      	beq.n	8002200 <_realloc_r+0x1c>
 8002226:	42b5      	cmp	r5, r6
 8002228:	462a      	mov	r2, r5
 800222a:	4621      	mov	r1, r4
 800222c:	bf28      	it	cs
 800222e:	4632      	movcs	r2, r6
 8002230:	f000 f83e 	bl	80022b0 <memcpy>
 8002234:	4621      	mov	r1, r4
 8002236:	4640      	mov	r0, r8
 8002238:	f000 f848 	bl	80022cc <_free_r>
 800223c:	463c      	mov	r4, r7
 800223e:	e7e0      	b.n	8002202 <_realloc_r+0x1e>

08002240 <memmove>:
 8002240:	4288      	cmp	r0, r1
 8002242:	b510      	push	{r4, lr}
 8002244:	eb01 0402 	add.w	r4, r1, r2
 8002248:	d902      	bls.n	8002250 <memmove+0x10>
 800224a:	4284      	cmp	r4, r0
 800224c:	4623      	mov	r3, r4
 800224e:	d807      	bhi.n	8002260 <memmove+0x20>
 8002250:	1e43      	subs	r3, r0, #1
 8002252:	42a1      	cmp	r1, r4
 8002254:	d008      	beq.n	8002268 <memmove+0x28>
 8002256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800225a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800225e:	e7f8      	b.n	8002252 <memmove+0x12>
 8002260:	4601      	mov	r1, r0
 8002262:	4402      	add	r2, r0
 8002264:	428a      	cmp	r2, r1
 8002266:	d100      	bne.n	800226a <memmove+0x2a>
 8002268:	bd10      	pop	{r4, pc}
 800226a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800226e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002272:	e7f7      	b.n	8002264 <memmove+0x24>

08002274 <_sbrk_r>:
 8002274:	b538      	push	{r3, r4, r5, lr}
 8002276:	2300      	movs	r3, #0
 8002278:	4d05      	ldr	r5, [pc, #20]	@ (8002290 <_sbrk_r+0x1c>)
 800227a:	4604      	mov	r4, r0
 800227c:	4608      	mov	r0, r1
 800227e:	602b      	str	r3, [r5, #0]
 8002280:	f7fe f8dc 	bl	800043c <_sbrk>
 8002284:	1c43      	adds	r3, r0, #1
 8002286:	d102      	bne.n	800228e <_sbrk_r+0x1a>
 8002288:	682b      	ldr	r3, [r5, #0]
 800228a:	b103      	cbz	r3, 800228e <_sbrk_r+0x1a>
 800228c:	6023      	str	r3, [r4, #0]
 800228e:	bd38      	pop	{r3, r4, r5, pc}
 8002290:	20000248 	.word	0x20000248

08002294 <memchr>:
 8002294:	4603      	mov	r3, r0
 8002296:	b510      	push	{r4, lr}
 8002298:	b2c9      	uxtb	r1, r1
 800229a:	4402      	add	r2, r0
 800229c:	4293      	cmp	r3, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	d101      	bne.n	80022a6 <memchr+0x12>
 80022a2:	2000      	movs	r0, #0
 80022a4:	e003      	b.n	80022ae <memchr+0x1a>
 80022a6:	7804      	ldrb	r4, [r0, #0]
 80022a8:	3301      	adds	r3, #1
 80022aa:	428c      	cmp	r4, r1
 80022ac:	d1f6      	bne.n	800229c <memchr+0x8>
 80022ae:	bd10      	pop	{r4, pc}

080022b0 <memcpy>:
 80022b0:	440a      	add	r2, r1
 80022b2:	4291      	cmp	r1, r2
 80022b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80022b8:	d100      	bne.n	80022bc <memcpy+0xc>
 80022ba:	4770      	bx	lr
 80022bc:	b510      	push	{r4, lr}
 80022be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80022c2:	4291      	cmp	r1, r2
 80022c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80022c8:	d1f9      	bne.n	80022be <memcpy+0xe>
 80022ca:	bd10      	pop	{r4, pc}

080022cc <_free_r>:
 80022cc:	b538      	push	{r3, r4, r5, lr}
 80022ce:	4605      	mov	r5, r0
 80022d0:	2900      	cmp	r1, #0
 80022d2:	d040      	beq.n	8002356 <_free_r+0x8a>
 80022d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022d8:	1f0c      	subs	r4, r1, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bfb8      	it	lt
 80022de:	18e4      	addlt	r4, r4, r3
 80022e0:	f7ff ff74 	bl	80021cc <__malloc_lock>
 80022e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002358 <_free_r+0x8c>)
 80022e6:	6813      	ldr	r3, [r2, #0]
 80022e8:	b933      	cbnz	r3, 80022f8 <_free_r+0x2c>
 80022ea:	6063      	str	r3, [r4, #4]
 80022ec:	6014      	str	r4, [r2, #0]
 80022ee:	4628      	mov	r0, r5
 80022f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022f4:	f7ff bf70 	b.w	80021d8 <__malloc_unlock>
 80022f8:	42a3      	cmp	r3, r4
 80022fa:	d908      	bls.n	800230e <_free_r+0x42>
 80022fc:	6820      	ldr	r0, [r4, #0]
 80022fe:	1821      	adds	r1, r4, r0
 8002300:	428b      	cmp	r3, r1
 8002302:	bf01      	itttt	eq
 8002304:	6819      	ldreq	r1, [r3, #0]
 8002306:	685b      	ldreq	r3, [r3, #4]
 8002308:	1809      	addeq	r1, r1, r0
 800230a:	6021      	streq	r1, [r4, #0]
 800230c:	e7ed      	b.n	80022ea <_free_r+0x1e>
 800230e:	461a      	mov	r2, r3
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	b10b      	cbz	r3, 8002318 <_free_r+0x4c>
 8002314:	42a3      	cmp	r3, r4
 8002316:	d9fa      	bls.n	800230e <_free_r+0x42>
 8002318:	6811      	ldr	r1, [r2, #0]
 800231a:	1850      	adds	r0, r2, r1
 800231c:	42a0      	cmp	r0, r4
 800231e:	d10b      	bne.n	8002338 <_free_r+0x6c>
 8002320:	6820      	ldr	r0, [r4, #0]
 8002322:	4401      	add	r1, r0
 8002324:	1850      	adds	r0, r2, r1
 8002326:	4283      	cmp	r3, r0
 8002328:	6011      	str	r1, [r2, #0]
 800232a:	d1e0      	bne.n	80022ee <_free_r+0x22>
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4408      	add	r0, r1
 8002332:	6010      	str	r0, [r2, #0]
 8002334:	6053      	str	r3, [r2, #4]
 8002336:	e7da      	b.n	80022ee <_free_r+0x22>
 8002338:	d902      	bls.n	8002340 <_free_r+0x74>
 800233a:	230c      	movs	r3, #12
 800233c:	602b      	str	r3, [r5, #0]
 800233e:	e7d6      	b.n	80022ee <_free_r+0x22>
 8002340:	6820      	ldr	r0, [r4, #0]
 8002342:	1821      	adds	r1, r4, r0
 8002344:	428b      	cmp	r3, r1
 8002346:	bf01      	itttt	eq
 8002348:	6819      	ldreq	r1, [r3, #0]
 800234a:	685b      	ldreq	r3, [r3, #4]
 800234c:	1809      	addeq	r1, r1, r0
 800234e:	6021      	streq	r1, [r4, #0]
 8002350:	6063      	str	r3, [r4, #4]
 8002352:	6054      	str	r4, [r2, #4]
 8002354:	e7cb      	b.n	80022ee <_free_r+0x22>
 8002356:	bd38      	pop	{r3, r4, r5, pc}
 8002358:	20000244 	.word	0x20000244

0800235c <_malloc_usable_size_r>:
 800235c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002360:	1f18      	subs	r0, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	bfbc      	itt	lt
 8002366:	580b      	ldrlt	r3, [r1, r0]
 8002368:	18c0      	addlt	r0, r0, r3
 800236a:	4770      	bx	lr

0800236c <_init>:
 800236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236e:	bf00      	nop
 8002370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002372:	bc08      	pop	{r3}
 8002374:	469e      	mov	lr, r3
 8002376:	4770      	bx	lr

08002378 <_fini>:
 8002378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237a:	bf00      	nop
 800237c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237e:	bc08      	pop	{r3}
 8002380:	469e      	mov	lr, r3
 8002382:	4770      	bx	lr
