
rs485_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002274  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002380  08002380  00003380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023e4  080023e4  00004060  2**0
                  CONTENTS
  4 .ARM          00000000  080023e4  080023e4  00004060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023e4  080023e4  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023e4  080023e4  000033e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023e8  080023e8  000033e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080023ec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000060  0800244c  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  0800244c  00004250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a06  00000000  00000000  00004089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015cb  00000000  00000000  0000aa8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  0000c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004c6  00000000  00000000  0000c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d68  00000000  00000000  0000cb7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000082ef  00000000  00000000  000238e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081ac5  00000000  00000000  0002bbd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad69a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cdc  00000000  00000000  000ad6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000af3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002368 	.word	0x08002368

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002368 	.word	0x08002368

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b2d      	ldr	r3, [pc, #180]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2c      	ldr	r2, [pc, #176]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2a      	ldr	r3, [pc, #168]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b27      	ldr	r3, [pc, #156]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a26      	ldr	r2, [pc, #152]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b24      	ldr	r3, [pc, #144]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b21      	ldr	r3, [pc, #132]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a20      	ldr	r2, [pc, #128]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1e      	ldr	r3, [pc, #120]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b18      	ldr	r3, [pc, #96]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2130      	movs	r1, #48	@ 0x30
 80001c4:	4815      	ldr	r0, [pc, #84]	@ (800021c <MX_GPIO_Init+0xd0>)
 80001c6:	f000 fd19 	bl	8000bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d0:	4b13      	ldr	r3, [pc, #76]	@ (8000220 <MX_GPIO_Init+0xd4>)
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	4811      	ldr	r0, [pc, #68]	@ (8000224 <MX_GPIO_Init+0xd8>)
 80001e0:	f000 fb88 	bl	80008f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80001e4:	2330      	movs	r3, #48	@ 0x30
 80001e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4808      	ldr	r0, [pc, #32]	@ (800021c <MX_GPIO_Init+0xd0>)
 80001fc:	f000 fb7a 	bl	80008f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	2100      	movs	r1, #0
 8000204:	2028      	movs	r0, #40	@ 0x28
 8000206:	f000 fb3e 	bl	8000886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800020a:	2028      	movs	r0, #40	@ 0x28
 800020c:	f000 fb57 	bl	80008be <HAL_NVIC_EnableIRQ>

}
 8000210:	bf00      	nop
 8000212:	3720      	adds	r7, #32
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40010800 	.word	0x40010800
 8000220:	10110000 	.word	0x10110000
 8000224:	40011000 	.word	0x40011000

08000228 <RS485_EnableTransmit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to enable RS485 Transmit Mode
void RS485_EnableTransmit(void) {
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RS485_DE_RE_PORT, RS485_DE_RE_PIN, GPIO_PIN_SET);
 800022c:	2201      	movs	r2, #1
 800022e:	2110      	movs	r1, #16
 8000230:	4802      	ldr	r0, [pc, #8]	@ (800023c <RS485_EnableTransmit+0x14>)
 8000232:	f000 fce3 	bl	8000bfc <HAL_GPIO_WritePin>
}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	40010800 	.word	0x40010800

08000240 <RS485_EnableReceive>:

// Function to enable RS485 Receive Mode
void RS485_EnableReceive(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RS485_DE_RE_PORT, RS485_DE_RE_PIN, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <RS485_EnableReceive+0x14>)
 800024a:	f000 fcd7 	bl	8000bfc <HAL_GPIO_WritePin>
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40010800 	.word	0x40010800

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025c:	f000 f9b6 	bl	80005cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000260:	f000 f838 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000264:	f7ff ff72 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000268:	f000 f922 	bl	80004b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    /* Infinite loop */
    while (1)
    {
        // Transmit Mode
        RS485_EnableTransmit();  // Enable TX Mode
 800026c:	f7ff ffdc 	bl	8000228 <RS485_EnableTransmit>
        sprintf(usermsg, "%s", ADDRESS);
 8000270:	4a12      	ldr	r2, [pc, #72]	@ (80002bc <main+0x64>)
 8000272:	4913      	ldr	r1, [pc, #76]	@ (80002c0 <main+0x68>)
 8000274:	4813      	ldr	r0, [pc, #76]	@ (80002c4 <main+0x6c>)
 8000276:	f001 fbc7 	bl	8001a08 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)usermsg, sizeof(usermsg), HAL_MAX_DELAY);
 800027a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800027e:	2202      	movs	r2, #2
 8000280:	4910      	ldr	r1, [pc, #64]	@ (80002c4 <main+0x6c>)
 8000282:	4811      	ldr	r0, [pc, #68]	@ (80002c8 <main+0x70>)
 8000284:	f001 f954 	bl	8001530 <HAL_UART_Transmit>
        check = 1;
 8000288:	4b10      	ldr	r3, [pc, #64]	@ (80002cc <main+0x74>)
 800028a:	2201      	movs	r2, #1
 800028c:	601a      	str	r2, [r3, #0]
        //HAL_UART_Transmit(&huart2, (uint8_t*)txData, sizeof(txData), HAL_MAX_DELAY);
        HAL_Delay(100);  // Delay for data to stabilize
 800028e:	2064      	movs	r0, #100	@ 0x64
 8000290:	f000 f9fe 	bl	8000690 <HAL_Delay>

        // Receive Mode
        RS485_EnableReceive();  // Enable RX Mode
 8000294:	f7ff ffd4 	bl	8000240 <RS485_EnableReceive>
        if (HAL_UART_Receive(&huart2, (uint8_t*)rxData, sizeof(rxData), HAL_MAX_DELAY) == HAL_OK) {
 8000298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800029c:	2232      	movs	r2, #50	@ 0x32
 800029e:	490c      	ldr	r1, [pc, #48]	@ (80002d0 <main+0x78>)
 80002a0:	4809      	ldr	r0, [pc, #36]	@ (80002c8 <main+0x70>)
 80002a2:	f001 f9d0 	bl	8001646 <HAL_UART_Receive>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d101      	bne.n	80002b0 <main+0x58>
            // Optional: Echo back received data for testing
            RS485_EnableTransmit();
 80002ac:	f7ff ffbc 	bl	8000228 <RS485_EnableTransmit>
            //HAL_UART_Transmit(&huart2, (uint8_t*)rxData, sizeof(rxData), HAL_MAX_DELAY);
        }

        HAL_Delay(1000); // Loop delay
 80002b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b4:	f000 f9ec 	bl	8000690 <HAL_Delay>
    {
 80002b8:	e7d8      	b.n	800026c <main+0x14>
 80002ba:	bf00      	nop
 80002bc:	20000000 	.word	0x20000000
 80002c0:	08002380 	.word	0x08002380
 80002c4:	200000b0 	.word	0x200000b0
 80002c8:	200000bc 	.word	0x200000bc
 80002cc:	200000b4 	.word	0x200000b4
 80002d0:	2000007c 	.word	0x2000007c

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b090      	sub	sp, #64	@ 0x40
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2228      	movs	r2, #40	@ 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 fbb0 	bl	8001a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f6:	2301      	movs	r3, #1
 80002f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002fa:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80002fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000308:	2302      	movs	r3, #2
 800030a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000310:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000312:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f107 0318 	add.w	r3, r7, #24
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fca7 	bl	8000c70 <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000328:	f000 f819 	bl	800035e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	2302      	movs	r3, #2
 8000332:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800033c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2102      	movs	r1, #2
 8000346:	4618      	mov	r0, r3
 8000348:	f000 ff14 	bl	8001174 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000352:	f000 f804 	bl	800035e <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3740      	adds	r7, #64	@ 0x40
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000362:	b672      	cpsid	i
}
 8000364:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000366:	bf00      	nop
 8000368:	e7fd      	b.n	8000366 <Error_Handler+0x8>
	...

0800036c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800036c:	b480      	push	{r7}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000372:	4b15      	ldr	r3, [pc, #84]	@ (80003c8 <HAL_MspInit+0x5c>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a14      	ldr	r2, [pc, #80]	@ (80003c8 <HAL_MspInit+0x5c>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6193      	str	r3, [r2, #24]
 800037e:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <HAL_MspInit+0x5c>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <HAL_MspInit+0x5c>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	4a0e      	ldr	r2, [pc, #56]	@ (80003c8 <HAL_MspInit+0x5c>)
 8000390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000394:	61d3      	str	r3, [r2, #28]
 8000396:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <HAL_MspInit+0x5c>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003a2:	4b0a      	ldr	r3, [pc, #40]	@ (80003cc <HAL_MspInit+0x60>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	4a04      	ldr	r2, [pc, #16]	@ (80003cc <HAL_MspInit+0x60>)
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003be:	bf00      	nop
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40010000 	.word	0x40010000

080003d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <NMI_Handler+0x4>

080003d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <HardFault_Handler+0x4>

080003e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <MemManage_Handler+0x4>

080003e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <BusFault_Handler+0x4>

080003f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f4:	bf00      	nop
 80003f6:	e7fd      	b.n	80003f4 <UsageFault_Handler+0x4>

080003f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000420:	f000 f91a 	bl	8000658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}

08000428 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800042c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000430:	f000 fbfc 	bl	8000c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}

08000438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000440:	4a14      	ldr	r2, [pc, #80]	@ (8000494 <_sbrk+0x5c>)
 8000442:	4b15      	ldr	r3, [pc, #84]	@ (8000498 <_sbrk+0x60>)
 8000444:	1ad3      	subs	r3, r2, r3
 8000446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800044c:	4b13      	ldr	r3, [pc, #76]	@ (800049c <_sbrk+0x64>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d102      	bne.n	800045a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000454:	4b11      	ldr	r3, [pc, #68]	@ (800049c <_sbrk+0x64>)
 8000456:	4a12      	ldr	r2, [pc, #72]	@ (80004a0 <_sbrk+0x68>)
 8000458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800045a:	4b10      	ldr	r3, [pc, #64]	@ (800049c <_sbrk+0x64>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4413      	add	r3, r2
 8000462:	693a      	ldr	r2, [r7, #16]
 8000464:	429a      	cmp	r2, r3
 8000466:	d207      	bcs.n	8000478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000468:	f001 faf6 	bl	8001a58 <__errno>
 800046c:	4603      	mov	r3, r0
 800046e:	220c      	movs	r2, #12
 8000470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000472:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000476:	e009      	b.n	800048c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <_sbrk+0x64>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800047e:	4b07      	ldr	r3, [pc, #28]	@ (800049c <_sbrk+0x64>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	4a05      	ldr	r2, [pc, #20]	@ (800049c <_sbrk+0x64>)
 8000488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800048a:	68fb      	ldr	r3, [r7, #12]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20005000 	.word	0x20005000
 8000498:	00000400 	.word	0x00000400
 800049c:	200000b8 	.word	0x200000b8
 80004a0:	20000250 	.word	0x20000250

080004a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b4:	4b11      	ldr	r3, [pc, #68]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004b6:	4a12      	ldr	r2, [pc, #72]	@ (8000500 <MX_USART2_UART_Init+0x50>)
 80004b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004ba:	4b10      	ldr	r3, [pc, #64]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80004c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ce:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d4:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004d6:	220c      	movs	r2, #12
 80004d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004da:	4b08      	ldr	r3, [pc, #32]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e0:	4b06      	ldr	r3, [pc, #24]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004e6:	4805      	ldr	r0, [pc, #20]	@ (80004fc <MX_USART2_UART_Init+0x4c>)
 80004e8:	f000 ffd2 	bl	8001490 <HAL_UART_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004f2:	f7ff ff34 	bl	800035e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200000bc 	.word	0x200000bc
 8000500:	40004400 	.word	0x40004400

08000504 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a15      	ldr	r2, [pc, #84]	@ (8000574 <HAL_UART_MspInit+0x70>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d123      	bne.n	800056c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000524:	4b14      	ldr	r3, [pc, #80]	@ (8000578 <HAL_UART_MspInit+0x74>)
 8000526:	69db      	ldr	r3, [r3, #28]
 8000528:	4a13      	ldr	r2, [pc, #76]	@ (8000578 <HAL_UART_MspInit+0x74>)
 800052a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800052e:	61d3      	str	r3, [r2, #28]
 8000530:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <HAL_UART_MspInit+0x74>)
 8000532:	69db      	ldr	r3, [r3, #28]
 8000534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053c:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <HAL_UART_MspInit+0x74>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a0d      	ldr	r2, [pc, #52]	@ (8000578 <HAL_UART_MspInit+0x74>)
 8000542:	f043 0304 	orr.w	r3, r3, #4
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <HAL_UART_MspInit+0x74>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0304 	and.w	r3, r3, #4
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000554:	230c      	movs	r3, #12
 8000556:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000558:	2302      	movs	r3, #2
 800055a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	2302      	movs	r3, #2
 800055e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	4805      	ldr	r0, [pc, #20]	@ (800057c <HAL_UART_MspInit+0x78>)
 8000568:	f000 f9c4 	bl	80008f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40004400 	.word	0x40004400
 8000578:	40021000 	.word	0x40021000
 800057c:	40010800 	.word	0x40010800

08000580 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000580:	f7ff ff90 	bl	80004a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000584:	480b      	ldr	r0, [pc, #44]	@ (80005b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000586:	490c      	ldr	r1, [pc, #48]	@ (80005b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000588:	4a0c      	ldr	r2, [pc, #48]	@ (80005bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800058c:	e002      	b.n	8000594 <LoopCopyDataInit>

0800058e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000592:	3304      	adds	r3, #4

08000594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000598:	d3f9      	bcc.n	800058e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059a:	4a09      	ldr	r2, [pc, #36]	@ (80005c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800059c:	4c09      	ldr	r4, [pc, #36]	@ (80005c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a0:	e001      	b.n	80005a6 <LoopFillZerobss>

080005a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a4:	3204      	adds	r2, #4

080005a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a8:	d3fb      	bcc.n	80005a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005aa:	f001 fa5b 	bl	8001a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ae:	f7ff fe53 	bl	8000258 <main>
  bx lr
 80005b2:	4770      	bx	lr
  ldr r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80005bc:	080023ec 	.word	0x080023ec
  ldr r2, =_sbss
 80005c0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80005c4:	20000250 	.word	0x20000250

080005c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC1_2_IRQHandler>
	...

080005cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d0:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <HAL_Init+0x28>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a07      	ldr	r2, [pc, #28]	@ (80005f4 <HAL_Init+0x28>)
 80005d6:	f043 0310 	orr.w	r3, r3, #16
 80005da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f947 	bl	8000870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f808 	bl	80005f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e8:	f7ff fec0 	bl	800036c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40022000 	.word	0x40022000

080005f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <HAL_InitTick+0x54>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <HAL_InitTick+0x58>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4619      	mov	r1, r3
 800060a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800060e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000612:	fbb2 f3f3 	udiv	r3, r2, r3
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f95f 	bl	80008da <HAL_SYSTICK_Config>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
 8000624:	e00e      	b.n	8000644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b0f      	cmp	r3, #15
 800062a:	d80a      	bhi.n	8000642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800062c:	2200      	movs	r2, #0
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000634:	f000 f927 	bl	8000886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000638:	4a06      	ldr	r2, [pc, #24]	@ (8000654 <HAL_InitTick+0x5c>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800063e:	2300      	movs	r3, #0
 8000640:	e000      	b.n	8000644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000642:	2301      	movs	r3, #1
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000004 	.word	0x20000004
 8000650:	2000000c 	.word	0x2000000c
 8000654:	20000008 	.word	0x20000008

08000658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <HAL_IncTick+0x1c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <HAL_IncTick+0x20>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4413      	add	r3, r2
 8000668:	4a03      	ldr	r2, [pc, #12]	@ (8000678 <HAL_IncTick+0x20>)
 800066a:	6013      	str	r3, [r2, #0]
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	2000000c 	.word	0x2000000c
 8000678:	20000104 	.word	0x20000104

0800067c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return uwTick;
 8000680:	4b02      	ldr	r3, [pc, #8]	@ (800068c <HAL_GetTick+0x10>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	20000104 	.word	0x20000104

08000690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000698:	f7ff fff0 	bl	800067c <HAL_GetTick>
 800069c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80006a8:	d005      	beq.n	80006b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <HAL_Delay+0x44>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006b6:	bf00      	nop
 80006b8:	f7ff ffe0 	bl	800067c <HAL_GetTick>
 80006bc:	4602      	mov	r2, r0
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d8f7      	bhi.n	80006b8 <HAL_Delay+0x28>
  {
  }
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000000c 	.word	0x2000000c

080006d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <__NVIC_SetPriorityGrouping+0x44>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000700:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070a:	4a04      	ldr	r2, [pc, #16]	@ (800071c <__NVIC_SetPriorityGrouping+0x44>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b04      	ldr	r3, [pc, #16]	@ (8000738 <__NVIC_GetPriorityGrouping+0x18>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	f003 0307 	and.w	r3, r3, #7
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	2b00      	cmp	r3, #0
 800074c:	db0b      	blt.n	8000766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	f003 021f 	and.w	r2, r3, #31
 8000754:	4906      	ldr	r1, [pc, #24]	@ (8000770 <__NVIC_EnableIRQ+0x34>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	095b      	lsrs	r3, r3, #5
 800075c:	2001      	movs	r0, #1
 800075e:	fa00 f202 	lsl.w	r2, r0, r2
 8000762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	e000e100 	.word	0xe000e100

08000774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db0a      	blt.n	800079e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	490c      	ldr	r1, [pc, #48]	@ (80007c0 <__NVIC_SetPriority+0x4c>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800079c:	e00a      	b.n	80007b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4908      	ldr	r1, [pc, #32]	@ (80007c4 <__NVIC_SetPriority+0x50>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f003 030f 	and.w	r3, r3, #15
 80007aa:	3b04      	subs	r3, #4
 80007ac:	0112      	lsls	r2, r2, #4
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	761a      	strb	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	@ 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	f1c3 0307 	rsb	r3, r3, #7
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	bf28      	it	cs
 80007e6:	2304      	movcs	r3, #4
 80007e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3304      	adds	r3, #4
 80007ee:	2b06      	cmp	r3, #6
 80007f0:	d902      	bls.n	80007f8 <NVIC_EncodePriority+0x30>
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3b03      	subs	r3, #3
 80007f6:	e000      	b.n	80007fa <NVIC_EncodePriority+0x32>
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43da      	mvns	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	401a      	ands	r2, r3
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000810:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	43d9      	mvns	r1, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	4313      	orrs	r3, r2
         );
}
 8000822:	4618      	mov	r0, r3
 8000824:	3724      	adds	r7, #36	@ 0x24
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800083c:	d301      	bcc.n	8000842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083e:	2301      	movs	r3, #1
 8000840:	e00f      	b.n	8000862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000842:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <SysTick_Config+0x40>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084a:	210f      	movs	r1, #15
 800084c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000850:	f7ff ff90 	bl	8000774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <SysTick_Config+0x40>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085a:	4b04      	ldr	r3, [pc, #16]	@ (800086c <SysTick_Config+0x40>)
 800085c:	2207      	movs	r2, #7
 800085e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	e000e010 	.word	0xe000e010

08000870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff ff2d 	bl	80006d8 <__NVIC_SetPriorityGrouping>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000898:	f7ff ff42 	bl	8000720 <__NVIC_GetPriorityGrouping>
 800089c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	6978      	ldr	r0, [r7, #20]
 80008a4:	f7ff ff90 	bl	80007c8 <NVIC_EncodePriority>
 80008a8:	4602      	mov	r2, r0
 80008aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff5f 	bl	8000774 <__NVIC_SetPriority>
}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff35 	bl	800073c <__NVIC_EnableIRQ>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ffa2 	bl	800082c <SysTick_Config>
 80008e8:	4603      	mov	r3, r0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b08b      	sub	sp, #44	@ 0x2c
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000906:	e169      	b.n	8000bdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000908:	2201      	movs	r2, #1
 800090a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	69fa      	ldr	r2, [r7, #28]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	429a      	cmp	r2, r3
 8000922:	f040 8158 	bne.w	8000bd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	4a9a      	ldr	r2, [pc, #616]	@ (8000b94 <HAL_GPIO_Init+0x2a0>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d05e      	beq.n	80009ee <HAL_GPIO_Init+0xfa>
 8000930:	4a98      	ldr	r2, [pc, #608]	@ (8000b94 <HAL_GPIO_Init+0x2a0>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d875      	bhi.n	8000a22 <HAL_GPIO_Init+0x12e>
 8000936:	4a98      	ldr	r2, [pc, #608]	@ (8000b98 <HAL_GPIO_Init+0x2a4>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d058      	beq.n	80009ee <HAL_GPIO_Init+0xfa>
 800093c:	4a96      	ldr	r2, [pc, #600]	@ (8000b98 <HAL_GPIO_Init+0x2a4>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d86f      	bhi.n	8000a22 <HAL_GPIO_Init+0x12e>
 8000942:	4a96      	ldr	r2, [pc, #600]	@ (8000b9c <HAL_GPIO_Init+0x2a8>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d052      	beq.n	80009ee <HAL_GPIO_Init+0xfa>
 8000948:	4a94      	ldr	r2, [pc, #592]	@ (8000b9c <HAL_GPIO_Init+0x2a8>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d869      	bhi.n	8000a22 <HAL_GPIO_Init+0x12e>
 800094e:	4a94      	ldr	r2, [pc, #592]	@ (8000ba0 <HAL_GPIO_Init+0x2ac>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d04c      	beq.n	80009ee <HAL_GPIO_Init+0xfa>
 8000954:	4a92      	ldr	r2, [pc, #584]	@ (8000ba0 <HAL_GPIO_Init+0x2ac>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d863      	bhi.n	8000a22 <HAL_GPIO_Init+0x12e>
 800095a:	4a92      	ldr	r2, [pc, #584]	@ (8000ba4 <HAL_GPIO_Init+0x2b0>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d046      	beq.n	80009ee <HAL_GPIO_Init+0xfa>
 8000960:	4a90      	ldr	r2, [pc, #576]	@ (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d85d      	bhi.n	8000a22 <HAL_GPIO_Init+0x12e>
 8000966:	2b12      	cmp	r3, #18
 8000968:	d82a      	bhi.n	80009c0 <HAL_GPIO_Init+0xcc>
 800096a:	2b12      	cmp	r3, #18
 800096c:	d859      	bhi.n	8000a22 <HAL_GPIO_Init+0x12e>
 800096e:	a201      	add	r2, pc, #4	@ (adr r2, 8000974 <HAL_GPIO_Init+0x80>)
 8000970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000974:	080009ef 	.word	0x080009ef
 8000978:	080009c9 	.word	0x080009c9
 800097c:	080009db 	.word	0x080009db
 8000980:	08000a1d 	.word	0x08000a1d
 8000984:	08000a23 	.word	0x08000a23
 8000988:	08000a23 	.word	0x08000a23
 800098c:	08000a23 	.word	0x08000a23
 8000990:	08000a23 	.word	0x08000a23
 8000994:	08000a23 	.word	0x08000a23
 8000998:	08000a23 	.word	0x08000a23
 800099c:	08000a23 	.word	0x08000a23
 80009a0:	08000a23 	.word	0x08000a23
 80009a4:	08000a23 	.word	0x08000a23
 80009a8:	08000a23 	.word	0x08000a23
 80009ac:	08000a23 	.word	0x08000a23
 80009b0:	08000a23 	.word	0x08000a23
 80009b4:	08000a23 	.word	0x08000a23
 80009b8:	080009d1 	.word	0x080009d1
 80009bc:	080009e5 	.word	0x080009e5
 80009c0:	4a79      	ldr	r2, [pc, #484]	@ (8000ba8 <HAL_GPIO_Init+0x2b4>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d013      	beq.n	80009ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009c6:	e02c      	b.n	8000a22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	623b      	str	r3, [r7, #32]
          break;
 80009ce:	e029      	b.n	8000a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	3304      	adds	r3, #4
 80009d6:	623b      	str	r3, [r7, #32]
          break;
 80009d8:	e024      	b.n	8000a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	3308      	adds	r3, #8
 80009e0:	623b      	str	r3, [r7, #32]
          break;
 80009e2:	e01f      	b.n	8000a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	330c      	adds	r3, #12
 80009ea:	623b      	str	r3, [r7, #32]
          break;
 80009ec:	e01a      	b.n	8000a24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009f6:	2304      	movs	r3, #4
 80009f8:	623b      	str	r3, [r7, #32]
          break;
 80009fa:	e013      	b.n	8000a24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d105      	bne.n	8000a10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a04:	2308      	movs	r3, #8
 8000a06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	611a      	str	r2, [r3, #16]
          break;
 8000a0e:	e009      	b.n	8000a24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a10:	2308      	movs	r3, #8
 8000a12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	69fa      	ldr	r2, [r7, #28]
 8000a18:	615a      	str	r2, [r3, #20]
          break;
 8000a1a:	e003      	b.n	8000a24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
          break;
 8000a20:	e000      	b.n	8000a24 <HAL_GPIO_Init+0x130>
          break;
 8000a22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	2bff      	cmp	r3, #255	@ 0xff
 8000a28:	d801      	bhi.n	8000a2e <HAL_GPIO_Init+0x13a>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	e001      	b.n	8000a32 <HAL_GPIO_Init+0x13e>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3304      	adds	r3, #4
 8000a32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	2bff      	cmp	r3, #255	@ 0xff
 8000a38:	d802      	bhi.n	8000a40 <HAL_GPIO_Init+0x14c>
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	e002      	b.n	8000a46 <HAL_GPIO_Init+0x152>
 8000a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a42:	3b08      	subs	r3, #8
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	210f      	movs	r1, #15
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	fa01 f303 	lsl.w	r3, r1, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	401a      	ands	r2, r3
 8000a58:	6a39      	ldr	r1, [r7, #32]
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a60:	431a      	orrs	r2, r3
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 80b1 	beq.w	8000bd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a74:	4b4d      	ldr	r3, [pc, #308]	@ (8000bac <HAL_GPIO_Init+0x2b8>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a4c      	ldr	r2, [pc, #304]	@ (8000bac <HAL_GPIO_Init+0x2b8>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b4a      	ldr	r3, [pc, #296]	@ (8000bac <HAL_GPIO_Init+0x2b8>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a8c:	4a48      	ldr	r2, [pc, #288]	@ (8000bb0 <HAL_GPIO_Init+0x2bc>)
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a90:	089b      	lsrs	r3, r3, #2
 8000a92:	3302      	adds	r3, #2
 8000a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9c:	f003 0303 	and.w	r3, r3, #3
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	220f      	movs	r2, #15
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a40      	ldr	r2, [pc, #256]	@ (8000bb4 <HAL_GPIO_Init+0x2c0>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d013      	beq.n	8000ae0 <HAL_GPIO_Init+0x1ec>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a3f      	ldr	r2, [pc, #252]	@ (8000bb8 <HAL_GPIO_Init+0x2c4>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d00d      	beq.n	8000adc <HAL_GPIO_Init+0x1e8>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a3e      	ldr	r2, [pc, #248]	@ (8000bbc <HAL_GPIO_Init+0x2c8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d007      	beq.n	8000ad8 <HAL_GPIO_Init+0x1e4>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a3d      	ldr	r2, [pc, #244]	@ (8000bc0 <HAL_GPIO_Init+0x2cc>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d101      	bne.n	8000ad4 <HAL_GPIO_Init+0x1e0>
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	e006      	b.n	8000ae2 <HAL_GPIO_Init+0x1ee>
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	e004      	b.n	8000ae2 <HAL_GPIO_Init+0x1ee>
 8000ad8:	2302      	movs	r3, #2
 8000ada:	e002      	b.n	8000ae2 <HAL_GPIO_Init+0x1ee>
 8000adc:	2301      	movs	r3, #1
 8000ade:	e000      	b.n	8000ae2 <HAL_GPIO_Init+0x1ee>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ae4:	f002 0203 	and.w	r2, r2, #3
 8000ae8:	0092      	lsls	r2, r2, #2
 8000aea:	4093      	lsls	r3, r2
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000af2:	492f      	ldr	r1, [pc, #188]	@ (8000bb0 <HAL_GPIO_Init+0x2bc>)
 8000af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	3302      	adds	r3, #2
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d006      	beq.n	8000b1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b0e:	689a      	ldr	r2, [r3, #8]
 8000b10:	492c      	ldr	r1, [pc, #176]	@ (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	608b      	str	r3, [r1, #8]
 8000b18:	e006      	b.n	8000b28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	4928      	ldr	r1, [pc, #160]	@ (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b24:	4013      	ands	r3, r2
 8000b26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d006      	beq.n	8000b42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b34:	4b23      	ldr	r3, [pc, #140]	@ (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	4922      	ldr	r1, [pc, #136]	@ (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	60cb      	str	r3, [r1, #12]
 8000b40:	e006      	b.n	8000b50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b42:	4b20      	ldr	r3, [pc, #128]	@ (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b44:	68da      	ldr	r2, [r3, #12]
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	491e      	ldr	r1, [pc, #120]	@ (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d006      	beq.n	8000b6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b5c:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	4918      	ldr	r1, [pc, #96]	@ (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	604b      	str	r3, [r1, #4]
 8000b68:	e006      	b.n	8000b78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b6a:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	4914      	ldr	r1, [pc, #80]	@ (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d021      	beq.n	8000bc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	490e      	ldr	r1, [pc, #56]	@ (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	600b      	str	r3, [r1, #0]
 8000b90:	e021      	b.n	8000bd6 <HAL_GPIO_Init+0x2e2>
 8000b92:	bf00      	nop
 8000b94:	10320000 	.word	0x10320000
 8000b98:	10310000 	.word	0x10310000
 8000b9c:	10220000 	.word	0x10220000
 8000ba0:	10210000 	.word	0x10210000
 8000ba4:	10120000 	.word	0x10120000
 8000ba8:	10110000 	.word	0x10110000
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40010000 	.word	0x40010000
 8000bb4:	40010800 	.word	0x40010800
 8000bb8:	40010c00 	.word	0x40010c00
 8000bbc:	40011000 	.word	0x40011000
 8000bc0:	40011400 	.word	0x40011400
 8000bc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <HAL_GPIO_Init+0x304>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	4909      	ldr	r1, [pc, #36]	@ (8000bf8 <HAL_GPIO_Init+0x304>)
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd8:	3301      	adds	r3, #1
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be2:	fa22 f303 	lsr.w	r3, r2, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f47f ae8e 	bne.w	8000908 <HAL_GPIO_Init+0x14>
  }
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	372c      	adds	r7, #44	@ 0x2c
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	40010400 	.word	0x40010400

08000bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c0c:	787b      	ldrb	r3, [r7, #1]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c12:	887a      	ldrh	r2, [r7, #2]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c18:	e003      	b.n	8000c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c1a:	887b      	ldrh	r3, [r7, #2]
 8000c1c:	041a      	lsls	r2, r3, #16
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	611a      	str	r2, [r3, #16]
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c38:	695a      	ldr	r2, [r3, #20]
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d006      	beq.n	8000c50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c42:	4a05      	ldr	r2, [pc, #20]	@ (8000c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c44:	88fb      	ldrh	r3, [r7, #6]
 8000c46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f806 	bl	8000c5c <HAL_GPIO_EXTI_Callback>
  }
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40010400 	.word	0x40010400

08000c5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e272      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 8087 	beq.w	8000d9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c90:	4b92      	ldr	r3, [pc, #584]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 030c 	and.w	r3, r3, #12
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d00c      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c9c:	4b8f      	ldr	r3, [pc, #572]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 030c 	and.w	r3, r3, #12
 8000ca4:	2b08      	cmp	r3, #8
 8000ca6:	d112      	bne.n	8000cce <HAL_RCC_OscConfig+0x5e>
 8000ca8:	4b8c      	ldr	r3, [pc, #560]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cb4:	d10b      	bne.n	8000cce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb6:	4b89      	ldr	r3, [pc, #548]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d06c      	beq.n	8000d9c <HAL_RCC_OscConfig+0x12c>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d168      	bne.n	8000d9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e24c      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cd6:	d106      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x76>
 8000cd8:	4b80      	ldr	r3, [pc, #512]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a7f      	ldr	r2, [pc, #508]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	e02e      	b.n	8000d44 <HAL_RCC_OscConfig+0xd4>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d10c      	bne.n	8000d08 <HAL_RCC_OscConfig+0x98>
 8000cee:	4b7b      	ldr	r3, [pc, #492]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a7a      	ldr	r2, [pc, #488]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	4b78      	ldr	r3, [pc, #480]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a77      	ldr	r2, [pc, #476]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	e01d      	b.n	8000d44 <HAL_RCC_OscConfig+0xd4>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d10:	d10c      	bne.n	8000d2c <HAL_RCC_OscConfig+0xbc>
 8000d12:	4b72      	ldr	r3, [pc, #456]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a71      	ldr	r2, [pc, #452]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	4b6f      	ldr	r3, [pc, #444]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a6e      	ldr	r2, [pc, #440]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e00b      	b.n	8000d44 <HAL_RCC_OscConfig+0xd4>
 8000d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a6a      	ldr	r2, [pc, #424]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4b68      	ldr	r3, [pc, #416]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a67      	ldr	r2, [pc, #412]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d013      	beq.n	8000d74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fc96 	bl	800067c <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d54:	f7ff fc92 	bl	800067c <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b64      	cmp	r3, #100	@ 0x64
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e200      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	4b5d      	ldr	r3, [pc, #372]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f0      	beq.n	8000d54 <HAL_RCC_OscConfig+0xe4>
 8000d72:	e014      	b.n	8000d9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d74:	f7ff fc82 	bl	800067c <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d7c:	f7ff fc7e 	bl	800067c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b64      	cmp	r3, #100	@ 0x64
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e1ec      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8e:	4b53      	ldr	r3, [pc, #332]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f0      	bne.n	8000d7c <HAL_RCC_OscConfig+0x10c>
 8000d9a:	e000      	b.n	8000d9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d063      	beq.n	8000e72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000daa:	4b4c      	ldr	r3, [pc, #304]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00b      	beq.n	8000dce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000db6:	4b49      	ldr	r3, [pc, #292]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	2b08      	cmp	r3, #8
 8000dc0:	d11c      	bne.n	8000dfc <HAL_RCC_OscConfig+0x18c>
 8000dc2:	4b46      	ldr	r3, [pc, #280]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d116      	bne.n	8000dfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dce:	4b43      	ldr	r3, [pc, #268]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d005      	beq.n	8000de6 <HAL_RCC_OscConfig+0x176>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d001      	beq.n	8000de6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e1c0      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de6:	4b3d      	ldr	r3, [pc, #244]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	4939      	ldr	r1, [pc, #228]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfa:	e03a      	b.n	8000e72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d020      	beq.n	8000e46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e04:	4b36      	ldr	r3, [pc, #216]	@ (8000ee0 <HAL_RCC_OscConfig+0x270>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fc37 	bl	800067c <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e12:	f7ff fc33 	bl	800067c <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e1a1      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e24:	4b2d      	ldr	r3, [pc, #180]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f0      	beq.n	8000e12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e30:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4927      	ldr	r1, [pc, #156]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	600b      	str	r3, [r1, #0]
 8000e44:	e015      	b.n	8000e72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e46:	4b26      	ldr	r3, [pc, #152]	@ (8000ee0 <HAL_RCC_OscConfig+0x270>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fc16 	bl	800067c <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e54:	f7ff fc12 	bl	800067c <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e180      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e66:	4b1d      	ldr	r3, [pc, #116]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f0      	bne.n	8000e54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d03a      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d019      	beq.n	8000eba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e86:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <HAL_RCC_OscConfig+0x274>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e8c:	f7ff fbf6 	bl	800067c <HAL_GetTick>
 8000e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e94:	f7ff fbf2 	bl	800067c <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e160      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f0      	beq.n	8000e94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f000 face 	bl	8001454 <RCC_Delay>
 8000eb8:	e01c      	b.n	8000ef4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_RCC_OscConfig+0x274>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec0:	f7ff fbdc 	bl	800067c <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec6:	e00f      	b.n	8000ee8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fbd8 	bl	800067c <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d908      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e146      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	42420000 	.word	0x42420000
 8000ee4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee8:	4b92      	ldr	r3, [pc, #584]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1e9      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80a6 	beq.w	800104e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f06:	4b8b      	ldr	r3, [pc, #556]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10d      	bne.n	8000f2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	4b88      	ldr	r3, [pc, #544]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	4a87      	ldr	r2, [pc, #540]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f1c:	61d3      	str	r3, [r2, #28]
 8000f1e:	4b85      	ldr	r3, [pc, #532]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2e:	4b82      	ldr	r3, [pc, #520]	@ (8001138 <HAL_RCC_OscConfig+0x4c8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d118      	bne.n	8000f6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8001138 <HAL_RCC_OscConfig+0x4c8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8001138 <HAL_RCC_OscConfig+0x4c8>)
 8000f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f46:	f7ff fb99 	bl	800067c <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f4e:	f7ff fb95 	bl	800067c <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b64      	cmp	r3, #100	@ 0x64
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e103      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f60:	4b75      	ldr	r3, [pc, #468]	@ (8001138 <HAL_RCC_OscConfig+0x4c8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0f0      	beq.n	8000f4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d106      	bne.n	8000f82 <HAL_RCC_OscConfig+0x312>
 8000f74:	4b6f      	ldr	r3, [pc, #444]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	4a6e      	ldr	r2, [pc, #440]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6213      	str	r3, [r2, #32]
 8000f80:	e02d      	b.n	8000fde <HAL_RCC_OscConfig+0x36e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x334>
 8000f8a:	4b6a      	ldr	r3, [pc, #424]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	4a69      	ldr	r2, [pc, #420]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	6213      	str	r3, [r2, #32]
 8000f96:	4b67      	ldr	r3, [pc, #412]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	4a66      	ldr	r2, [pc, #408]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	f023 0304 	bic.w	r3, r3, #4
 8000fa0:	6213      	str	r3, [r2, #32]
 8000fa2:	e01c      	b.n	8000fde <HAL_RCC_OscConfig+0x36e>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b05      	cmp	r3, #5
 8000faa:	d10c      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x356>
 8000fac:	4b61      	ldr	r3, [pc, #388]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	4a60      	ldr	r2, [pc, #384]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	6213      	str	r3, [r2, #32]
 8000fb8:	4b5e      	ldr	r3, [pc, #376]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4a5d      	ldr	r2, [pc, #372]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6213      	str	r3, [r2, #32]
 8000fc4:	e00b      	b.n	8000fde <HAL_RCC_OscConfig+0x36e>
 8000fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	4a5a      	ldr	r2, [pc, #360]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	f023 0301 	bic.w	r3, r3, #1
 8000fd0:	6213      	str	r3, [r2, #32]
 8000fd2:	4b58      	ldr	r3, [pc, #352]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	4a57      	ldr	r2, [pc, #348]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	f023 0304 	bic.w	r3, r3, #4
 8000fdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d015      	beq.n	8001012 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe6:	f7ff fb49 	bl	800067c <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fec:	e00a      	b.n	8001004 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fee:	f7ff fb45 	bl	800067c <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e0b1      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001004:	4b4b      	ldr	r3, [pc, #300]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0ee      	beq.n	8000fee <HAL_RCC_OscConfig+0x37e>
 8001010:	e014      	b.n	800103c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001012:	f7ff fb33 	bl	800067c <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001018:	e00a      	b.n	8001030 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800101a:	f7ff fb2f 	bl	800067c <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001028:	4293      	cmp	r3, r2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e09b      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001030:	4b40      	ldr	r3, [pc, #256]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1ee      	bne.n	800101a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d105      	bne.n	800104e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001042:	4b3c      	ldr	r3, [pc, #240]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a3b      	ldr	r2, [pc, #236]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800104c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 8087 	beq.w	8001166 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001058:	4b36      	ldr	r3, [pc, #216]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b08      	cmp	r3, #8
 8001062:	d061      	beq.n	8001128 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d146      	bne.n	80010fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800106c:	4b33      	ldr	r3, [pc, #204]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001072:	f7ff fb03 	bl	800067c <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800107a:	f7ff faff 	bl	800067c <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e06d      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108c:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f0      	bne.n	800107a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010a0:	d108      	bne.n	80010b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010a2:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	4921      	ldr	r1, [pc, #132]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a19      	ldr	r1, [r3, #32]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c4:	430b      	orrs	r3, r1
 80010c6:	491b      	ldr	r1, [pc, #108]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d2:	f7ff fad3 	bl	800067c <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010da:	f7ff facf 	bl	800067c <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e03d      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f0      	beq.n	80010da <HAL_RCC_OscConfig+0x46a>
 80010f8:	e035      	b.n	8001166 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fabc 	bl	800067c <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001108:	f7ff fab8 	bl	800067c <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e026      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_RCC_OscConfig+0x4c4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f0      	bne.n	8001108 <HAL_RCC_OscConfig+0x498>
 8001126:	e01e      	b.n	8001166 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d107      	bne.n	8001140 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e019      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
 8001134:	40021000 	.word	0x40021000
 8001138:	40007000 	.word	0x40007000
 800113c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_RCC_OscConfig+0x500>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	429a      	cmp	r2, r3
 8001152:	d106      	bne.n	8001162 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800115e:	429a      	cmp	r2, r3
 8001160:	d001      	beq.n	8001166 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000

08001174 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e0d0      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001188:	4b6a      	ldr	r3, [pc, #424]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d910      	bls.n	80011b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001196:	4b67      	ldr	r3, [pc, #412]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f023 0207 	bic.w	r2, r3, #7
 800119e:	4965      	ldr	r1, [pc, #404]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a6:	4b63      	ldr	r3, [pc, #396]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d001      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e0b8      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d020      	beq.n	8001206 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d0:	4b59      	ldr	r3, [pc, #356]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a58      	ldr	r2, [pc, #352]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80011d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011e8:	4b53      	ldr	r3, [pc, #332]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	4a52      	ldr	r2, [pc, #328]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f4:	4b50      	ldr	r3, [pc, #320]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	494d      	ldr	r1, [pc, #308]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	4313      	orrs	r3, r2
 8001204:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d040      	beq.n	8001294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d107      	bne.n	800122a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	4b47      	ldr	r3, [pc, #284]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d115      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e07f      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d107      	bne.n	8001242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001232:	4b41      	ldr	r3, [pc, #260]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d109      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e073      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001242:	4b3d      	ldr	r3, [pc, #244]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e06b      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001252:	4b39      	ldr	r3, [pc, #228]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f023 0203 	bic.w	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4936      	ldr	r1, [pc, #216]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	4313      	orrs	r3, r2
 8001262:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001264:	f7ff fa0a 	bl	800067c <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126a:	e00a      	b.n	8001282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800126c:	f7ff fa06 	bl	800067c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800127a:	4293      	cmp	r3, r2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e053      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001282:	4b2d      	ldr	r3, [pc, #180]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 020c 	and.w	r2, r3, #12
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	429a      	cmp	r2, r3
 8001292:	d1eb      	bne.n	800126c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001294:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d210      	bcs.n	80012c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a2:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 0207 	bic.w	r2, r3, #7
 80012aa:	4922      	ldr	r1, [pc, #136]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d001      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e032      	b.n	800132a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d008      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4916      	ldr	r1, [pc, #88]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d009      	beq.n	8001302 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012ee:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	490e      	ldr	r1, [pc, #56]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001302:	f000 f821 	bl	8001348 <HAL_RCC_GetSysClockFreq>
 8001306:	4602      	mov	r2, r0
 8001308:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	490a      	ldr	r1, [pc, #40]	@ (800133c <HAL_RCC_ClockConfig+0x1c8>)
 8001314:	5ccb      	ldrb	r3, [r1, r3]
 8001316:	fa22 f303 	lsr.w	r3, r2, r3
 800131a:	4a09      	ldr	r2, [pc, #36]	@ (8001340 <HAL_RCC_ClockConfig+0x1cc>)
 800131c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <HAL_RCC_ClockConfig+0x1d0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f968 	bl	80005f8 <HAL_InitTick>

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40022000 	.word	0x40022000
 8001338:	40021000 	.word	0x40021000
 800133c:	08002384 	.word	0x08002384
 8001340:	20000004 	.word	0x20000004
 8001344:	20000008 	.word	0x20000008

08001348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001362:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b04      	cmp	r3, #4
 8001370:	d002      	beq.n	8001378 <HAL_RCC_GetSysClockFreq+0x30>
 8001372:	2b08      	cmp	r3, #8
 8001374:	d003      	beq.n	800137e <HAL_RCC_GetSysClockFreq+0x36>
 8001376:	e027      	b.n	80013c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001378:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800137a:	613b      	str	r3, [r7, #16]
      break;
 800137c:	e027      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	0c9b      	lsrs	r3, r3, #18
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	4a17      	ldr	r2, [pc, #92]	@ (80013e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001388:	5cd3      	ldrb	r3, [r2, r3]
 800138a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d010      	beq.n	80013b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001396:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x94>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	0c5b      	lsrs	r3, r3, #17
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	4a11      	ldr	r2, [pc, #68]	@ (80013e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013a2:	5cd3      	ldrb	r3, [r2, r3]
 80013a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	@ (80013e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80013aa:	fb03 f202 	mul.w	r2, r3, r2
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e004      	b.n	80013c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a0c      	ldr	r2, [pc, #48]	@ (80013ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80013bc:	fb02 f303 	mul.w	r3, r2, r3
 80013c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	613b      	str	r3, [r7, #16]
      break;
 80013c6:	e002      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ca:	613b      	str	r3, [r7, #16]
      break;
 80013cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ce:	693b      	ldr	r3, [r7, #16]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	371c      	adds	r7, #28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	007a1200 	.word	0x007a1200
 80013e4:	0800239c 	.word	0x0800239c
 80013e8:	080023ac 	.word	0x080023ac
 80013ec:	003d0900 	.word	0x003d0900

080013f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013f4:	4b02      	ldr	r3, [pc, #8]	@ (8001400 <HAL_RCC_GetHCLKFreq+0x10>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	20000004 	.word	0x20000004

08001404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001408:	f7ff fff2 	bl	80013f0 <HAL_RCC_GetHCLKFreq>
 800140c:	4602      	mov	r2, r0
 800140e:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	4903      	ldr	r1, [pc, #12]	@ (8001428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800141a:	5ccb      	ldrb	r3, [r1, r3]
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001420:	4618      	mov	r0, r3
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021000 	.word	0x40021000
 8001428:	08002394 	.word	0x08002394

0800142c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001430:	f7ff ffde 	bl	80013f0 <HAL_RCC_GetHCLKFreq>
 8001434:	4602      	mov	r2, r0
 8001436:	4b05      	ldr	r3, [pc, #20]	@ (800144c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	0adb      	lsrs	r3, r3, #11
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	4903      	ldr	r1, [pc, #12]	@ (8001450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001442:	5ccb      	ldrb	r3, [r1, r3]
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001448:	4618      	mov	r0, r3
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	08002394 	.word	0x08002394

08001454 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800145c:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <RCC_Delay+0x34>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <RCC_Delay+0x38>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	0a5b      	lsrs	r3, r3, #9
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001470:	bf00      	nop
  }
  while (Delay --);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1e5a      	subs	r2, r3, #1
 8001476:	60fa      	str	r2, [r7, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f9      	bne.n	8001470 <RCC_Delay+0x1c>
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	20000004 	.word	0x20000004
 800148c:	10624dd3 	.word	0x10624dd3

08001490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e042      	b.n	8001528 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff f824 	bl	8000504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2224      	movs	r2, #36	@ 0x24
 80014c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80014d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 fa09 	bl	80018ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80014e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	695a      	ldr	r2, [r3, #20]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80014f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2220      	movs	r2, #32
 8001514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2220      	movs	r2, #32
 800151c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	@ 0x28
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b20      	cmp	r3, #32
 800154e:	d175      	bne.n	800163c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <HAL_UART_Transmit+0x2c>
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e06e      	b.n	800163e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2221      	movs	r2, #33	@ 0x21
 800156a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800156e:	f7ff f885 	bl	800067c <HAL_GetTick>
 8001572:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	88fa      	ldrh	r2, [r7, #6]
 8001578:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	88fa      	ldrh	r2, [r7, #6]
 800157e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001588:	d108      	bne.n	800159c <HAL_UART_Transmit+0x6c>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d104      	bne.n	800159c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	e003      	b.n	80015a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80015a4:	e02e      	b.n	8001604 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2200      	movs	r2, #0
 80015ae:	2180      	movs	r1, #128	@ 0x80
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 f8df 	bl	8001774 <UART_WaitOnFlagUntilTimeout>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2220      	movs	r2, #32
 80015c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e03a      	b.n	800163e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10b      	bne.n	80015e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	3302      	adds	r3, #2
 80015e2:	61bb      	str	r3, [r7, #24]
 80015e4:	e007      	b.n	80015f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	3301      	adds	r3, #1
 80015f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	3b01      	subs	r3, #1
 80015fe:	b29a      	uxth	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001608:	b29b      	uxth	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1cb      	bne.n	80015a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2200      	movs	r2, #0
 8001616:	2140      	movs	r1, #64	@ 0x40
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 f8ab 	bl	8001774 <UART_WaitOnFlagUntilTimeout>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2220      	movs	r2, #32
 8001628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e006      	b.n	800163e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2220      	movs	r2, #32
 8001634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	e000      	b.n	800163e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800163c:	2302      	movs	r3, #2
  }
}
 800163e:	4618      	mov	r0, r3
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b08a      	sub	sp, #40	@ 0x28
 800164a:	af02      	add	r7, sp, #8
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4613      	mov	r3, r2
 8001654:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b20      	cmp	r3, #32
 8001664:	f040 8081 	bne.w	800176a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <HAL_UART_Receive+0x2e>
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e079      	b.n	800176c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2222      	movs	r2, #34	@ 0x22
 8001682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800168c:	f7fe fff6 	bl	800067c <HAL_GetTick>
 8001690:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	88fa      	ldrh	r2, [r7, #6]
 8001696:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	88fa      	ldrh	r2, [r7, #6]
 800169c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016a6:	d108      	bne.n	80016ba <HAL_UART_Receive+0x74>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d104      	bne.n	80016ba <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	e003      	b.n	80016c2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80016c2:	e047      	b.n	8001754 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2200      	movs	r2, #0
 80016cc:	2120      	movs	r1, #32
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 f850 	bl	8001774 <UART_WaitOnFlagUntilTimeout>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2220      	movs	r2, #32
 80016de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e042      	b.n	800176c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10c      	bne.n	8001706 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	3302      	adds	r3, #2
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	e01f      	b.n	8001746 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800170e:	d007      	beq.n	8001720 <HAL_UART_Receive+0xda>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10a      	bne.n	800172e <HAL_UART_Receive+0xe8>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d106      	bne.n	800172e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	e008      	b.n	8001740 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800173a:	b2da      	uxtb	r2, r3
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	3301      	adds	r3, #1
 8001744:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001758:	b29b      	uxth	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1b2      	bne.n	80016c4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2220      	movs	r2, #32
 8001762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800176a:	2302      	movs	r3, #2
  }
}
 800176c:	4618      	mov	r0, r3
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	4613      	mov	r3, r2
 8001782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001784:	e03b      	b.n	80017fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800178c:	d037      	beq.n	80017fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800178e:	f7fe ff75 	bl	800067c <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	6a3a      	ldr	r2, [r7, #32]
 800179a:	429a      	cmp	r2, r3
 800179c:	d302      	bcc.n	80017a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e03a      	b.n	800181e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d023      	beq.n	80017fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b80      	cmp	r3, #128	@ 0x80
 80017ba:	d020      	beq.n	80017fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b40      	cmp	r3, #64	@ 0x40
 80017c0:	d01d      	beq.n	80017fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d116      	bne.n	80017fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 f81d 	bl	8001826 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2208      	movs	r2, #8
 80017f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4013      	ands	r3, r2
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	429a      	cmp	r2, r3
 800180c:	bf0c      	ite	eq
 800180e:	2301      	moveq	r3, #1
 8001810:	2300      	movne	r3, #0
 8001812:	b2db      	uxtb	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	429a      	cmp	r2, r3
 800181a:	d0b4      	beq.n	8001786 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001826:	b480      	push	{r7}
 8001828:	b095      	sub	sp, #84	@ 0x54
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	330c      	adds	r3, #12
 8001834:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001838:	e853 3f00 	ldrex	r3, [r3]
 800183c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800183e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001840:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001844:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	330c      	adds	r3, #12
 800184c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800184e:	643a      	str	r2, [r7, #64]	@ 0x40
 8001850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001852:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001854:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001856:	e841 2300 	strex	r3, r2, [r1]
 800185a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800185c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1e5      	bne.n	800182e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3314      	adds	r3, #20
 8001868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	e853 3f00 	ldrex	r3, [r3]
 8001870:	61fb      	str	r3, [r7, #28]
   return(result);
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	64bb      	str	r3, [r7, #72]	@ 0x48
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3314      	adds	r3, #20
 8001880:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001882:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001884:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001886:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800188a:	e841 2300 	strex	r3, r2, [r1]
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1e5      	bne.n	8001862 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	2b01      	cmp	r3, #1
 800189c:	d119      	bne.n	80018d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	330c      	adds	r3, #12
 80018a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	e853 3f00 	ldrex	r3, [r3]
 80018ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f023 0310 	bic.w	r3, r3, #16
 80018b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	330c      	adds	r3, #12
 80018bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80018be:	61ba      	str	r2, [r7, #24]
 80018c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018c2:	6979      	ldr	r1, [r7, #20]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	e841 2300 	strex	r3, r2, [r1]
 80018ca:	613b      	str	r3, [r7, #16]
   return(result);
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1e5      	bne.n	800189e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2220      	movs	r2, #32
 80018d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80018e0:	bf00      	nop
 80018e2:	3754      	adds	r7, #84	@ 0x54
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
	...

080018ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	4313      	orrs	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001926:	f023 030c 	bic.w	r3, r3, #12
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	68b9      	ldr	r1, [r7, #8]
 8001930:	430b      	orrs	r3, r1
 8001932:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a2c      	ldr	r2, [pc, #176]	@ (8001a00 <UART_SetConfig+0x114>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d103      	bne.n	800195c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001954:	f7ff fd6a 	bl	800142c <HAL_RCC_GetPCLK2Freq>
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	e002      	b.n	8001962 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800195c:	f7ff fd52 	bl	8001404 <HAL_RCC_GetPCLK1Freq>
 8001960:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	009a      	lsls	r2, r3, #2
 800196c:	441a      	add	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	fbb2 f3f3 	udiv	r3, r2, r3
 8001978:	4a22      	ldr	r2, [pc, #136]	@ (8001a04 <UART_SetConfig+0x118>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	0119      	lsls	r1, r3, #4
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	009a      	lsls	r2, r3, #2
 800198c:	441a      	add	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	fbb2 f2f3 	udiv	r2, r2, r3
 8001998:	4b1a      	ldr	r3, [pc, #104]	@ (8001a04 <UART_SetConfig+0x118>)
 800199a:	fba3 0302 	umull	r0, r3, r3, r2
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2064      	movs	r0, #100	@ 0x64
 80019a2:	fb00 f303 	mul.w	r3, r0, r3
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	3332      	adds	r3, #50	@ 0x32
 80019ac:	4a15      	ldr	r2, [pc, #84]	@ (8001a04 <UART_SetConfig+0x118>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019b8:	4419      	add	r1, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	009a      	lsls	r2, r3, #2
 80019c4:	441a      	add	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <UART_SetConfig+0x118>)
 80019d2:	fba3 0302 	umull	r0, r3, r3, r2
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2064      	movs	r0, #100	@ 0x64
 80019da:	fb00 f303 	mul.w	r3, r0, r3
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	3332      	adds	r3, #50	@ 0x32
 80019e4:	4a07      	ldr	r2, [pc, #28]	@ (8001a04 <UART_SetConfig+0x118>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	f003 020f 	and.w	r2, r3, #15
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	440a      	add	r2, r1
 80019f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40013800 	.word	0x40013800
 8001a04:	51eb851f 	.word	0x51eb851f

08001a08 <siprintf>:
 8001a08:	b40e      	push	{r1, r2, r3}
 8001a0a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001a0e:	b500      	push	{lr}
 8001a10:	b09c      	sub	sp, #112	@ 0x70
 8001a12:	ab1d      	add	r3, sp, #116	@ 0x74
 8001a14:	9002      	str	r0, [sp, #8]
 8001a16:	9006      	str	r0, [sp, #24]
 8001a18:	9107      	str	r1, [sp, #28]
 8001a1a:	9104      	str	r1, [sp, #16]
 8001a1c:	4808      	ldr	r0, [pc, #32]	@ (8001a40 <siprintf+0x38>)
 8001a1e:	4909      	ldr	r1, [pc, #36]	@ (8001a44 <siprintf+0x3c>)
 8001a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a24:	9105      	str	r1, [sp, #20]
 8001a26:	6800      	ldr	r0, [r0, #0]
 8001a28:	a902      	add	r1, sp, #8
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	f000 f89c 	bl	8001b68 <_svfiprintf_r>
 8001a30:	2200      	movs	r2, #0
 8001a32:	9b02      	ldr	r3, [sp, #8]
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	b01c      	add	sp, #112	@ 0x70
 8001a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a3c:	b003      	add	sp, #12
 8001a3e:	4770      	bx	lr
 8001a40:	20000010 	.word	0x20000010
 8001a44:	ffff0208 	.word	0xffff0208

08001a48 <memset>:
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4402      	add	r2, r0
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d100      	bne.n	8001a52 <memset+0xa>
 8001a50:	4770      	bx	lr
 8001a52:	f803 1b01 	strb.w	r1, [r3], #1
 8001a56:	e7f9      	b.n	8001a4c <memset+0x4>

08001a58 <__errno>:
 8001a58:	4b01      	ldr	r3, [pc, #4]	@ (8001a60 <__errno+0x8>)
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000010 	.word	0x20000010

08001a64 <__libc_init_array>:
 8001a64:	b570      	push	{r4, r5, r6, lr}
 8001a66:	2600      	movs	r6, #0
 8001a68:	4d0c      	ldr	r5, [pc, #48]	@ (8001a9c <__libc_init_array+0x38>)
 8001a6a:	4c0d      	ldr	r4, [pc, #52]	@ (8001aa0 <__libc_init_array+0x3c>)
 8001a6c:	1b64      	subs	r4, r4, r5
 8001a6e:	10a4      	asrs	r4, r4, #2
 8001a70:	42a6      	cmp	r6, r4
 8001a72:	d109      	bne.n	8001a88 <__libc_init_array+0x24>
 8001a74:	f000 fc78 	bl	8002368 <_init>
 8001a78:	2600      	movs	r6, #0
 8001a7a:	4d0a      	ldr	r5, [pc, #40]	@ (8001aa4 <__libc_init_array+0x40>)
 8001a7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001aa8 <__libc_init_array+0x44>)
 8001a7e:	1b64      	subs	r4, r4, r5
 8001a80:	10a4      	asrs	r4, r4, #2
 8001a82:	42a6      	cmp	r6, r4
 8001a84:	d105      	bne.n	8001a92 <__libc_init_array+0x2e>
 8001a86:	bd70      	pop	{r4, r5, r6, pc}
 8001a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a8c:	4798      	blx	r3
 8001a8e:	3601      	adds	r6, #1
 8001a90:	e7ee      	b.n	8001a70 <__libc_init_array+0xc>
 8001a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a96:	4798      	blx	r3
 8001a98:	3601      	adds	r6, #1
 8001a9a:	e7f2      	b.n	8001a82 <__libc_init_array+0x1e>
 8001a9c:	080023e4 	.word	0x080023e4
 8001aa0:	080023e4 	.word	0x080023e4
 8001aa4:	080023e4 	.word	0x080023e4
 8001aa8:	080023e8 	.word	0x080023e8

08001aac <__retarget_lock_acquire_recursive>:
 8001aac:	4770      	bx	lr

08001aae <__retarget_lock_release_recursive>:
 8001aae:	4770      	bx	lr

08001ab0 <__ssputs_r>:
 8001ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ab4:	461f      	mov	r7, r3
 8001ab6:	688e      	ldr	r6, [r1, #8]
 8001ab8:	4682      	mov	sl, r0
 8001aba:	42be      	cmp	r6, r7
 8001abc:	460c      	mov	r4, r1
 8001abe:	4690      	mov	r8, r2
 8001ac0:	680b      	ldr	r3, [r1, #0]
 8001ac2:	d82d      	bhi.n	8001b20 <__ssputs_r+0x70>
 8001ac4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001ac8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001acc:	d026      	beq.n	8001b1c <__ssputs_r+0x6c>
 8001ace:	6965      	ldr	r5, [r4, #20]
 8001ad0:	6909      	ldr	r1, [r1, #16]
 8001ad2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ad6:	eba3 0901 	sub.w	r9, r3, r1
 8001ada:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001ade:	1c7b      	adds	r3, r7, #1
 8001ae0:	444b      	add	r3, r9
 8001ae2:	106d      	asrs	r5, r5, #1
 8001ae4:	429d      	cmp	r5, r3
 8001ae6:	bf38      	it	cc
 8001ae8:	461d      	movcc	r5, r3
 8001aea:	0553      	lsls	r3, r2, #21
 8001aec:	d527      	bpl.n	8001b3e <__ssputs_r+0x8e>
 8001aee:	4629      	mov	r1, r5
 8001af0:	f000 f958 	bl	8001da4 <_malloc_r>
 8001af4:	4606      	mov	r6, r0
 8001af6:	b360      	cbz	r0, 8001b52 <__ssputs_r+0xa2>
 8001af8:	464a      	mov	r2, r9
 8001afa:	6921      	ldr	r1, [r4, #16]
 8001afc:	f000 fbd6 	bl	80022ac <memcpy>
 8001b00:	89a3      	ldrh	r3, [r4, #12]
 8001b02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b0a:	81a3      	strh	r3, [r4, #12]
 8001b0c:	6126      	str	r6, [r4, #16]
 8001b0e:	444e      	add	r6, r9
 8001b10:	6026      	str	r6, [r4, #0]
 8001b12:	463e      	mov	r6, r7
 8001b14:	6165      	str	r5, [r4, #20]
 8001b16:	eba5 0509 	sub.w	r5, r5, r9
 8001b1a:	60a5      	str	r5, [r4, #8]
 8001b1c:	42be      	cmp	r6, r7
 8001b1e:	d900      	bls.n	8001b22 <__ssputs_r+0x72>
 8001b20:	463e      	mov	r6, r7
 8001b22:	4632      	mov	r2, r6
 8001b24:	4641      	mov	r1, r8
 8001b26:	6820      	ldr	r0, [r4, #0]
 8001b28:	f000 fb88 	bl	800223c <memmove>
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	68a3      	ldr	r3, [r4, #8]
 8001b30:	1b9b      	subs	r3, r3, r6
 8001b32:	60a3      	str	r3, [r4, #8]
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	4433      	add	r3, r6
 8001b38:	6023      	str	r3, [r4, #0]
 8001b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b3e:	462a      	mov	r2, r5
 8001b40:	f000 fb4e 	bl	80021e0 <_realloc_r>
 8001b44:	4606      	mov	r6, r0
 8001b46:	2800      	cmp	r0, #0
 8001b48:	d1e0      	bne.n	8001b0c <__ssputs_r+0x5c>
 8001b4a:	4650      	mov	r0, sl
 8001b4c:	6921      	ldr	r1, [r4, #16]
 8001b4e:	f000 fbbb 	bl	80022c8 <_free_r>
 8001b52:	230c      	movs	r3, #12
 8001b54:	f8ca 3000 	str.w	r3, [sl]
 8001b58:	89a3      	ldrh	r3, [r4, #12]
 8001b5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b62:	81a3      	strh	r3, [r4, #12]
 8001b64:	e7e9      	b.n	8001b3a <__ssputs_r+0x8a>
	...

08001b68 <_svfiprintf_r>:
 8001b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b6c:	4698      	mov	r8, r3
 8001b6e:	898b      	ldrh	r3, [r1, #12]
 8001b70:	4607      	mov	r7, r0
 8001b72:	061b      	lsls	r3, r3, #24
 8001b74:	460d      	mov	r5, r1
 8001b76:	4614      	mov	r4, r2
 8001b78:	b09d      	sub	sp, #116	@ 0x74
 8001b7a:	d510      	bpl.n	8001b9e <_svfiprintf_r+0x36>
 8001b7c:	690b      	ldr	r3, [r1, #16]
 8001b7e:	b973      	cbnz	r3, 8001b9e <_svfiprintf_r+0x36>
 8001b80:	2140      	movs	r1, #64	@ 0x40
 8001b82:	f000 f90f 	bl	8001da4 <_malloc_r>
 8001b86:	6028      	str	r0, [r5, #0]
 8001b88:	6128      	str	r0, [r5, #16]
 8001b8a:	b930      	cbnz	r0, 8001b9a <_svfiprintf_r+0x32>
 8001b8c:	230c      	movs	r3, #12
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b94:	b01d      	add	sp, #116	@ 0x74
 8001b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b9a:	2340      	movs	r3, #64	@ 0x40
 8001b9c:	616b      	str	r3, [r5, #20]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ba2:	2320      	movs	r3, #32
 8001ba4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001ba8:	2330      	movs	r3, #48	@ 0x30
 8001baa:	f04f 0901 	mov.w	r9, #1
 8001bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8001bb2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001d4c <_svfiprintf_r+0x1e4>
 8001bb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001bba:	4623      	mov	r3, r4
 8001bbc:	469a      	mov	sl, r3
 8001bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001bc2:	b10a      	cbz	r2, 8001bc8 <_svfiprintf_r+0x60>
 8001bc4:	2a25      	cmp	r2, #37	@ 0x25
 8001bc6:	d1f9      	bne.n	8001bbc <_svfiprintf_r+0x54>
 8001bc8:	ebba 0b04 	subs.w	fp, sl, r4
 8001bcc:	d00b      	beq.n	8001be6 <_svfiprintf_r+0x7e>
 8001bce:	465b      	mov	r3, fp
 8001bd0:	4622      	mov	r2, r4
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	4638      	mov	r0, r7
 8001bd6:	f7ff ff6b 	bl	8001ab0 <__ssputs_r>
 8001bda:	3001      	adds	r0, #1
 8001bdc:	f000 80a7 	beq.w	8001d2e <_svfiprintf_r+0x1c6>
 8001be0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001be2:	445a      	add	r2, fp
 8001be4:	9209      	str	r2, [sp, #36]	@ 0x24
 8001be6:	f89a 3000 	ldrb.w	r3, [sl]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 809f 	beq.w	8001d2e <_svfiprintf_r+0x1c6>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bfa:	f10a 0a01 	add.w	sl, sl, #1
 8001bfe:	9304      	str	r3, [sp, #16]
 8001c00:	9307      	str	r3, [sp, #28]
 8001c02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001c06:	931a      	str	r3, [sp, #104]	@ 0x68
 8001c08:	4654      	mov	r4, sl
 8001c0a:	2205      	movs	r2, #5
 8001c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c10:	484e      	ldr	r0, [pc, #312]	@ (8001d4c <_svfiprintf_r+0x1e4>)
 8001c12:	f000 fb3d 	bl	8002290 <memchr>
 8001c16:	9a04      	ldr	r2, [sp, #16]
 8001c18:	b9d8      	cbnz	r0, 8001c52 <_svfiprintf_r+0xea>
 8001c1a:	06d0      	lsls	r0, r2, #27
 8001c1c:	bf44      	itt	mi
 8001c1e:	2320      	movmi	r3, #32
 8001c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c24:	0711      	lsls	r1, r2, #28
 8001c26:	bf44      	itt	mi
 8001c28:	232b      	movmi	r3, #43	@ 0x2b
 8001c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8001c32:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c34:	d015      	beq.n	8001c62 <_svfiprintf_r+0xfa>
 8001c36:	4654      	mov	r4, sl
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f04f 0c0a 	mov.w	ip, #10
 8001c3e:	9a07      	ldr	r2, [sp, #28]
 8001c40:	4621      	mov	r1, r4
 8001c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c46:	3b30      	subs	r3, #48	@ 0x30
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	d94b      	bls.n	8001ce4 <_svfiprintf_r+0x17c>
 8001c4c:	b1b0      	cbz	r0, 8001c7c <_svfiprintf_r+0x114>
 8001c4e:	9207      	str	r2, [sp, #28]
 8001c50:	e014      	b.n	8001c7c <_svfiprintf_r+0x114>
 8001c52:	eba0 0308 	sub.w	r3, r0, r8
 8001c56:	fa09 f303 	lsl.w	r3, r9, r3
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	46a2      	mov	sl, r4
 8001c5e:	9304      	str	r3, [sp, #16]
 8001c60:	e7d2      	b.n	8001c08 <_svfiprintf_r+0xa0>
 8001c62:	9b03      	ldr	r3, [sp, #12]
 8001c64:	1d19      	adds	r1, r3, #4
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	9103      	str	r1, [sp, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bfbb      	ittet	lt
 8001c6e:	425b      	neglt	r3, r3
 8001c70:	f042 0202 	orrlt.w	r2, r2, #2
 8001c74:	9307      	strge	r3, [sp, #28]
 8001c76:	9307      	strlt	r3, [sp, #28]
 8001c78:	bfb8      	it	lt
 8001c7a:	9204      	strlt	r2, [sp, #16]
 8001c7c:	7823      	ldrb	r3, [r4, #0]
 8001c7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c80:	d10a      	bne.n	8001c98 <_svfiprintf_r+0x130>
 8001c82:	7863      	ldrb	r3, [r4, #1]
 8001c84:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c86:	d132      	bne.n	8001cee <_svfiprintf_r+0x186>
 8001c88:	9b03      	ldr	r3, [sp, #12]
 8001c8a:	3402      	adds	r4, #2
 8001c8c:	1d1a      	adds	r2, r3, #4
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	9203      	str	r2, [sp, #12]
 8001c92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001c96:	9305      	str	r3, [sp, #20]
 8001c98:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001d50 <_svfiprintf_r+0x1e8>
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	4650      	mov	r0, sl
 8001ca0:	7821      	ldrb	r1, [r4, #0]
 8001ca2:	f000 faf5 	bl	8002290 <memchr>
 8001ca6:	b138      	cbz	r0, 8001cb8 <_svfiprintf_r+0x150>
 8001ca8:	2240      	movs	r2, #64	@ 0x40
 8001caa:	9b04      	ldr	r3, [sp, #16]
 8001cac:	eba0 000a 	sub.w	r0, r0, sl
 8001cb0:	4082      	lsls	r2, r0
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	3401      	adds	r4, #1
 8001cb6:	9304      	str	r3, [sp, #16]
 8001cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cbc:	2206      	movs	r2, #6
 8001cbe:	4825      	ldr	r0, [pc, #148]	@ (8001d54 <_svfiprintf_r+0x1ec>)
 8001cc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001cc4:	f000 fae4 	bl	8002290 <memchr>
 8001cc8:	2800      	cmp	r0, #0
 8001cca:	d036      	beq.n	8001d3a <_svfiprintf_r+0x1d2>
 8001ccc:	4b22      	ldr	r3, [pc, #136]	@ (8001d58 <_svfiprintf_r+0x1f0>)
 8001cce:	bb1b      	cbnz	r3, 8001d18 <_svfiprintf_r+0x1b0>
 8001cd0:	9b03      	ldr	r3, [sp, #12]
 8001cd2:	3307      	adds	r3, #7
 8001cd4:	f023 0307 	bic.w	r3, r3, #7
 8001cd8:	3308      	adds	r3, #8
 8001cda:	9303      	str	r3, [sp, #12]
 8001cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001cde:	4433      	add	r3, r6
 8001ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ce2:	e76a      	b.n	8001bba <_svfiprintf_r+0x52>
 8001ce4:	460c      	mov	r4, r1
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cec:	e7a8      	b.n	8001c40 <_svfiprintf_r+0xd8>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f04f 0c0a 	mov.w	ip, #10
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	3401      	adds	r4, #1
 8001cf8:	9305      	str	r3, [sp, #20]
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d00:	3a30      	subs	r2, #48	@ 0x30
 8001d02:	2a09      	cmp	r2, #9
 8001d04:	d903      	bls.n	8001d0e <_svfiprintf_r+0x1a6>
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0c6      	beq.n	8001c98 <_svfiprintf_r+0x130>
 8001d0a:	9105      	str	r1, [sp, #20]
 8001d0c:	e7c4      	b.n	8001c98 <_svfiprintf_r+0x130>
 8001d0e:	4604      	mov	r4, r0
 8001d10:	2301      	movs	r3, #1
 8001d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d16:	e7f0      	b.n	8001cfa <_svfiprintf_r+0x192>
 8001d18:	ab03      	add	r3, sp, #12
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	462a      	mov	r2, r5
 8001d1e:	4638      	mov	r0, r7
 8001d20:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <_svfiprintf_r+0x1f4>)
 8001d22:	a904      	add	r1, sp, #16
 8001d24:	f3af 8000 	nop.w
 8001d28:	1c42      	adds	r2, r0, #1
 8001d2a:	4606      	mov	r6, r0
 8001d2c:	d1d6      	bne.n	8001cdc <_svfiprintf_r+0x174>
 8001d2e:	89ab      	ldrh	r3, [r5, #12]
 8001d30:	065b      	lsls	r3, r3, #25
 8001d32:	f53f af2d 	bmi.w	8001b90 <_svfiprintf_r+0x28>
 8001d36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001d38:	e72c      	b.n	8001b94 <_svfiprintf_r+0x2c>
 8001d3a:	ab03      	add	r3, sp, #12
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	462a      	mov	r2, r5
 8001d40:	4638      	mov	r0, r7
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <_svfiprintf_r+0x1f4>)
 8001d44:	a904      	add	r1, sp, #16
 8001d46:	f000 f91f 	bl	8001f88 <_printf_i>
 8001d4a:	e7ed      	b.n	8001d28 <_svfiprintf_r+0x1c0>
 8001d4c:	080023ae 	.word	0x080023ae
 8001d50:	080023b4 	.word	0x080023b4
 8001d54:	080023b8 	.word	0x080023b8
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	08001ab1 	.word	0x08001ab1

08001d60 <sbrk_aligned>:
 8001d60:	b570      	push	{r4, r5, r6, lr}
 8001d62:	4e0f      	ldr	r6, [pc, #60]	@ (8001da0 <sbrk_aligned+0x40>)
 8001d64:	460c      	mov	r4, r1
 8001d66:	6831      	ldr	r1, [r6, #0]
 8001d68:	4605      	mov	r5, r0
 8001d6a:	b911      	cbnz	r1, 8001d72 <sbrk_aligned+0x12>
 8001d6c:	f000 fa80 	bl	8002270 <_sbrk_r>
 8001d70:	6030      	str	r0, [r6, #0]
 8001d72:	4621      	mov	r1, r4
 8001d74:	4628      	mov	r0, r5
 8001d76:	f000 fa7b 	bl	8002270 <_sbrk_r>
 8001d7a:	1c43      	adds	r3, r0, #1
 8001d7c:	d103      	bne.n	8001d86 <sbrk_aligned+0x26>
 8001d7e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001d82:	4620      	mov	r0, r4
 8001d84:	bd70      	pop	{r4, r5, r6, pc}
 8001d86:	1cc4      	adds	r4, r0, #3
 8001d88:	f024 0403 	bic.w	r4, r4, #3
 8001d8c:	42a0      	cmp	r0, r4
 8001d8e:	d0f8      	beq.n	8001d82 <sbrk_aligned+0x22>
 8001d90:	1a21      	subs	r1, r4, r0
 8001d92:	4628      	mov	r0, r5
 8001d94:	f000 fa6c 	bl	8002270 <_sbrk_r>
 8001d98:	3001      	adds	r0, #1
 8001d9a:	d1f2      	bne.n	8001d82 <sbrk_aligned+0x22>
 8001d9c:	e7ef      	b.n	8001d7e <sbrk_aligned+0x1e>
 8001d9e:	bf00      	nop
 8001da0:	20000244 	.word	0x20000244

08001da4 <_malloc_r>:
 8001da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001da8:	1ccd      	adds	r5, r1, #3
 8001daa:	f025 0503 	bic.w	r5, r5, #3
 8001dae:	3508      	adds	r5, #8
 8001db0:	2d0c      	cmp	r5, #12
 8001db2:	bf38      	it	cc
 8001db4:	250c      	movcc	r5, #12
 8001db6:	2d00      	cmp	r5, #0
 8001db8:	4606      	mov	r6, r0
 8001dba:	db01      	blt.n	8001dc0 <_malloc_r+0x1c>
 8001dbc:	42a9      	cmp	r1, r5
 8001dbe:	d904      	bls.n	8001dca <_malloc_r+0x26>
 8001dc0:	230c      	movs	r3, #12
 8001dc2:	6033      	str	r3, [r6, #0]
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001dca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001ea0 <_malloc_r+0xfc>
 8001dce:	f000 f9fb 	bl	80021c8 <__malloc_lock>
 8001dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8001dd6:	461c      	mov	r4, r3
 8001dd8:	bb44      	cbnz	r4, 8001e2c <_malloc_r+0x88>
 8001dda:	4629      	mov	r1, r5
 8001ddc:	4630      	mov	r0, r6
 8001dde:	f7ff ffbf 	bl	8001d60 <sbrk_aligned>
 8001de2:	1c43      	adds	r3, r0, #1
 8001de4:	4604      	mov	r4, r0
 8001de6:	d158      	bne.n	8001e9a <_malloc_r+0xf6>
 8001de8:	f8d8 4000 	ldr.w	r4, [r8]
 8001dec:	4627      	mov	r7, r4
 8001dee:	2f00      	cmp	r7, #0
 8001df0:	d143      	bne.n	8001e7a <_malloc_r+0xd6>
 8001df2:	2c00      	cmp	r4, #0
 8001df4:	d04b      	beq.n	8001e8e <_malloc_r+0xea>
 8001df6:	6823      	ldr	r3, [r4, #0]
 8001df8:	4639      	mov	r1, r7
 8001dfa:	4630      	mov	r0, r6
 8001dfc:	eb04 0903 	add.w	r9, r4, r3
 8001e00:	f000 fa36 	bl	8002270 <_sbrk_r>
 8001e04:	4581      	cmp	r9, r0
 8001e06:	d142      	bne.n	8001e8e <_malloc_r+0xea>
 8001e08:	6821      	ldr	r1, [r4, #0]
 8001e0a:	4630      	mov	r0, r6
 8001e0c:	1a6d      	subs	r5, r5, r1
 8001e0e:	4629      	mov	r1, r5
 8001e10:	f7ff ffa6 	bl	8001d60 <sbrk_aligned>
 8001e14:	3001      	adds	r0, #1
 8001e16:	d03a      	beq.n	8001e8e <_malloc_r+0xea>
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	442b      	add	r3, r5
 8001e1c:	6023      	str	r3, [r4, #0]
 8001e1e:	f8d8 3000 	ldr.w	r3, [r8]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	bb62      	cbnz	r2, 8001e80 <_malloc_r+0xdc>
 8001e26:	f8c8 7000 	str.w	r7, [r8]
 8001e2a:	e00f      	b.n	8001e4c <_malloc_r+0xa8>
 8001e2c:	6822      	ldr	r2, [r4, #0]
 8001e2e:	1b52      	subs	r2, r2, r5
 8001e30:	d420      	bmi.n	8001e74 <_malloc_r+0xd0>
 8001e32:	2a0b      	cmp	r2, #11
 8001e34:	d917      	bls.n	8001e66 <_malloc_r+0xc2>
 8001e36:	1961      	adds	r1, r4, r5
 8001e38:	42a3      	cmp	r3, r4
 8001e3a:	6025      	str	r5, [r4, #0]
 8001e3c:	bf18      	it	ne
 8001e3e:	6059      	strne	r1, [r3, #4]
 8001e40:	6863      	ldr	r3, [r4, #4]
 8001e42:	bf08      	it	eq
 8001e44:	f8c8 1000 	streq.w	r1, [r8]
 8001e48:	5162      	str	r2, [r4, r5]
 8001e4a:	604b      	str	r3, [r1, #4]
 8001e4c:	4630      	mov	r0, r6
 8001e4e:	f000 f9c1 	bl	80021d4 <__malloc_unlock>
 8001e52:	f104 000b 	add.w	r0, r4, #11
 8001e56:	1d23      	adds	r3, r4, #4
 8001e58:	f020 0007 	bic.w	r0, r0, #7
 8001e5c:	1ac2      	subs	r2, r0, r3
 8001e5e:	bf1c      	itt	ne
 8001e60:	1a1b      	subne	r3, r3, r0
 8001e62:	50a3      	strne	r3, [r4, r2]
 8001e64:	e7af      	b.n	8001dc6 <_malloc_r+0x22>
 8001e66:	6862      	ldr	r2, [r4, #4]
 8001e68:	42a3      	cmp	r3, r4
 8001e6a:	bf0c      	ite	eq
 8001e6c:	f8c8 2000 	streq.w	r2, [r8]
 8001e70:	605a      	strne	r2, [r3, #4]
 8001e72:	e7eb      	b.n	8001e4c <_malloc_r+0xa8>
 8001e74:	4623      	mov	r3, r4
 8001e76:	6864      	ldr	r4, [r4, #4]
 8001e78:	e7ae      	b.n	8001dd8 <_malloc_r+0x34>
 8001e7a:	463c      	mov	r4, r7
 8001e7c:	687f      	ldr	r7, [r7, #4]
 8001e7e:	e7b6      	b.n	8001dee <_malloc_r+0x4a>
 8001e80:	461a      	mov	r2, r3
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	42a3      	cmp	r3, r4
 8001e86:	d1fb      	bne.n	8001e80 <_malloc_r+0xdc>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	6053      	str	r3, [r2, #4]
 8001e8c:	e7de      	b.n	8001e4c <_malloc_r+0xa8>
 8001e8e:	230c      	movs	r3, #12
 8001e90:	4630      	mov	r0, r6
 8001e92:	6033      	str	r3, [r6, #0]
 8001e94:	f000 f99e 	bl	80021d4 <__malloc_unlock>
 8001e98:	e794      	b.n	8001dc4 <_malloc_r+0x20>
 8001e9a:	6005      	str	r5, [r0, #0]
 8001e9c:	e7d6      	b.n	8001e4c <_malloc_r+0xa8>
 8001e9e:	bf00      	nop
 8001ea0:	20000248 	.word	0x20000248

08001ea4 <_printf_common>:
 8001ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ea8:	4616      	mov	r6, r2
 8001eaa:	4698      	mov	r8, r3
 8001eac:	688a      	ldr	r2, [r1, #8]
 8001eae:	690b      	ldr	r3, [r1, #16]
 8001eb0:	4607      	mov	r7, r0
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	bfb8      	it	lt
 8001eb6:	4613      	movlt	r3, r2
 8001eb8:	6033      	str	r3, [r6, #0]
 8001eba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ebe:	460c      	mov	r4, r1
 8001ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ec4:	b10a      	cbz	r2, 8001eca <_printf_common+0x26>
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	6033      	str	r3, [r6, #0]
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	0699      	lsls	r1, r3, #26
 8001ece:	bf42      	ittt	mi
 8001ed0:	6833      	ldrmi	r3, [r6, #0]
 8001ed2:	3302      	addmi	r3, #2
 8001ed4:	6033      	strmi	r3, [r6, #0]
 8001ed6:	6825      	ldr	r5, [r4, #0]
 8001ed8:	f015 0506 	ands.w	r5, r5, #6
 8001edc:	d106      	bne.n	8001eec <_printf_common+0x48>
 8001ede:	f104 0a19 	add.w	sl, r4, #25
 8001ee2:	68e3      	ldr	r3, [r4, #12]
 8001ee4:	6832      	ldr	r2, [r6, #0]
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	42ab      	cmp	r3, r5
 8001eea:	dc2b      	bgt.n	8001f44 <_printf_common+0xa0>
 8001eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001ef0:	6822      	ldr	r2, [r4, #0]
 8001ef2:	3b00      	subs	r3, #0
 8001ef4:	bf18      	it	ne
 8001ef6:	2301      	movne	r3, #1
 8001ef8:	0692      	lsls	r2, r2, #26
 8001efa:	d430      	bmi.n	8001f5e <_printf_common+0xba>
 8001efc:	4641      	mov	r1, r8
 8001efe:	4638      	mov	r0, r7
 8001f00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001f04:	47c8      	blx	r9
 8001f06:	3001      	adds	r0, #1
 8001f08:	d023      	beq.n	8001f52 <_printf_common+0xae>
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	6922      	ldr	r2, [r4, #16]
 8001f0e:	f003 0306 	and.w	r3, r3, #6
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	bf14      	ite	ne
 8001f16:	2500      	movne	r5, #0
 8001f18:	6833      	ldreq	r3, [r6, #0]
 8001f1a:	f04f 0600 	mov.w	r6, #0
 8001f1e:	bf08      	it	eq
 8001f20:	68e5      	ldreq	r5, [r4, #12]
 8001f22:	f104 041a 	add.w	r4, r4, #26
 8001f26:	bf08      	it	eq
 8001f28:	1aed      	subeq	r5, r5, r3
 8001f2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001f2e:	bf08      	it	eq
 8001f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f34:	4293      	cmp	r3, r2
 8001f36:	bfc4      	itt	gt
 8001f38:	1a9b      	subgt	r3, r3, r2
 8001f3a:	18ed      	addgt	r5, r5, r3
 8001f3c:	42b5      	cmp	r5, r6
 8001f3e:	d11a      	bne.n	8001f76 <_printf_common+0xd2>
 8001f40:	2000      	movs	r0, #0
 8001f42:	e008      	b.n	8001f56 <_printf_common+0xb2>
 8001f44:	2301      	movs	r3, #1
 8001f46:	4652      	mov	r2, sl
 8001f48:	4641      	mov	r1, r8
 8001f4a:	4638      	mov	r0, r7
 8001f4c:	47c8      	blx	r9
 8001f4e:	3001      	adds	r0, #1
 8001f50:	d103      	bne.n	8001f5a <_printf_common+0xb6>
 8001f52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f5a:	3501      	adds	r5, #1
 8001f5c:	e7c1      	b.n	8001ee2 <_printf_common+0x3e>
 8001f5e:	2030      	movs	r0, #48	@ 0x30
 8001f60:	18e1      	adds	r1, r4, r3
 8001f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001f6c:	4422      	add	r2, r4
 8001f6e:	3302      	adds	r3, #2
 8001f70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001f74:	e7c2      	b.n	8001efc <_printf_common+0x58>
 8001f76:	2301      	movs	r3, #1
 8001f78:	4622      	mov	r2, r4
 8001f7a:	4641      	mov	r1, r8
 8001f7c:	4638      	mov	r0, r7
 8001f7e:	47c8      	blx	r9
 8001f80:	3001      	adds	r0, #1
 8001f82:	d0e6      	beq.n	8001f52 <_printf_common+0xae>
 8001f84:	3601      	adds	r6, #1
 8001f86:	e7d9      	b.n	8001f3c <_printf_common+0x98>

08001f88 <_printf_i>:
 8001f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f8c:	7e0f      	ldrb	r7, [r1, #24]
 8001f8e:	4691      	mov	r9, r2
 8001f90:	2f78      	cmp	r7, #120	@ 0x78
 8001f92:	4680      	mov	r8, r0
 8001f94:	460c      	mov	r4, r1
 8001f96:	469a      	mov	sl, r3
 8001f98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001f9e:	d807      	bhi.n	8001fb0 <_printf_i+0x28>
 8001fa0:	2f62      	cmp	r7, #98	@ 0x62
 8001fa2:	d80a      	bhi.n	8001fba <_printf_i+0x32>
 8001fa4:	2f00      	cmp	r7, #0
 8001fa6:	f000 80d3 	beq.w	8002150 <_printf_i+0x1c8>
 8001faa:	2f58      	cmp	r7, #88	@ 0x58
 8001fac:	f000 80ba 	beq.w	8002124 <_printf_i+0x19c>
 8001fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001fb8:	e03a      	b.n	8002030 <_printf_i+0xa8>
 8001fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001fbe:	2b15      	cmp	r3, #21
 8001fc0:	d8f6      	bhi.n	8001fb0 <_printf_i+0x28>
 8001fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8001fc8 <_printf_i+0x40>)
 8001fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001fc8:	08002021 	.word	0x08002021
 8001fcc:	08002035 	.word	0x08002035
 8001fd0:	08001fb1 	.word	0x08001fb1
 8001fd4:	08001fb1 	.word	0x08001fb1
 8001fd8:	08001fb1 	.word	0x08001fb1
 8001fdc:	08001fb1 	.word	0x08001fb1
 8001fe0:	08002035 	.word	0x08002035
 8001fe4:	08001fb1 	.word	0x08001fb1
 8001fe8:	08001fb1 	.word	0x08001fb1
 8001fec:	08001fb1 	.word	0x08001fb1
 8001ff0:	08001fb1 	.word	0x08001fb1
 8001ff4:	08002137 	.word	0x08002137
 8001ff8:	0800205f 	.word	0x0800205f
 8001ffc:	080020f1 	.word	0x080020f1
 8002000:	08001fb1 	.word	0x08001fb1
 8002004:	08001fb1 	.word	0x08001fb1
 8002008:	08002159 	.word	0x08002159
 800200c:	08001fb1 	.word	0x08001fb1
 8002010:	0800205f 	.word	0x0800205f
 8002014:	08001fb1 	.word	0x08001fb1
 8002018:	08001fb1 	.word	0x08001fb1
 800201c:	080020f9 	.word	0x080020f9
 8002020:	6833      	ldr	r3, [r6, #0]
 8002022:	1d1a      	adds	r2, r3, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6032      	str	r2, [r6, #0]
 8002028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800202c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002030:	2301      	movs	r3, #1
 8002032:	e09e      	b.n	8002172 <_printf_i+0x1ea>
 8002034:	6833      	ldr	r3, [r6, #0]
 8002036:	6820      	ldr	r0, [r4, #0]
 8002038:	1d19      	adds	r1, r3, #4
 800203a:	6031      	str	r1, [r6, #0]
 800203c:	0606      	lsls	r6, r0, #24
 800203e:	d501      	bpl.n	8002044 <_printf_i+0xbc>
 8002040:	681d      	ldr	r5, [r3, #0]
 8002042:	e003      	b.n	800204c <_printf_i+0xc4>
 8002044:	0645      	lsls	r5, r0, #25
 8002046:	d5fb      	bpl.n	8002040 <_printf_i+0xb8>
 8002048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800204c:	2d00      	cmp	r5, #0
 800204e:	da03      	bge.n	8002058 <_printf_i+0xd0>
 8002050:	232d      	movs	r3, #45	@ 0x2d
 8002052:	426d      	negs	r5, r5
 8002054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002058:	230a      	movs	r3, #10
 800205a:	4859      	ldr	r0, [pc, #356]	@ (80021c0 <_printf_i+0x238>)
 800205c:	e011      	b.n	8002082 <_printf_i+0xfa>
 800205e:	6821      	ldr	r1, [r4, #0]
 8002060:	6833      	ldr	r3, [r6, #0]
 8002062:	0608      	lsls	r0, r1, #24
 8002064:	f853 5b04 	ldr.w	r5, [r3], #4
 8002068:	d402      	bmi.n	8002070 <_printf_i+0xe8>
 800206a:	0649      	lsls	r1, r1, #25
 800206c:	bf48      	it	mi
 800206e:	b2ad      	uxthmi	r5, r5
 8002070:	2f6f      	cmp	r7, #111	@ 0x6f
 8002072:	6033      	str	r3, [r6, #0]
 8002074:	bf14      	ite	ne
 8002076:	230a      	movne	r3, #10
 8002078:	2308      	moveq	r3, #8
 800207a:	4851      	ldr	r0, [pc, #324]	@ (80021c0 <_printf_i+0x238>)
 800207c:	2100      	movs	r1, #0
 800207e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002082:	6866      	ldr	r6, [r4, #4]
 8002084:	2e00      	cmp	r6, #0
 8002086:	bfa8      	it	ge
 8002088:	6821      	ldrge	r1, [r4, #0]
 800208a:	60a6      	str	r6, [r4, #8]
 800208c:	bfa4      	itt	ge
 800208e:	f021 0104 	bicge.w	r1, r1, #4
 8002092:	6021      	strge	r1, [r4, #0]
 8002094:	b90d      	cbnz	r5, 800209a <_printf_i+0x112>
 8002096:	2e00      	cmp	r6, #0
 8002098:	d04b      	beq.n	8002132 <_printf_i+0x1aa>
 800209a:	4616      	mov	r6, r2
 800209c:	fbb5 f1f3 	udiv	r1, r5, r3
 80020a0:	fb03 5711 	mls	r7, r3, r1, r5
 80020a4:	5dc7      	ldrb	r7, [r0, r7]
 80020a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80020aa:	462f      	mov	r7, r5
 80020ac:	42bb      	cmp	r3, r7
 80020ae:	460d      	mov	r5, r1
 80020b0:	d9f4      	bls.n	800209c <_printf_i+0x114>
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d10b      	bne.n	80020ce <_printf_i+0x146>
 80020b6:	6823      	ldr	r3, [r4, #0]
 80020b8:	07df      	lsls	r7, r3, #31
 80020ba:	d508      	bpl.n	80020ce <_printf_i+0x146>
 80020bc:	6923      	ldr	r3, [r4, #16]
 80020be:	6861      	ldr	r1, [r4, #4]
 80020c0:	4299      	cmp	r1, r3
 80020c2:	bfde      	ittt	le
 80020c4:	2330      	movle	r3, #48	@ 0x30
 80020c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020ca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80020ce:	1b92      	subs	r2, r2, r6
 80020d0:	6122      	str	r2, [r4, #16]
 80020d2:	464b      	mov	r3, r9
 80020d4:	4621      	mov	r1, r4
 80020d6:	4640      	mov	r0, r8
 80020d8:	f8cd a000 	str.w	sl, [sp]
 80020dc:	aa03      	add	r2, sp, #12
 80020de:	f7ff fee1 	bl	8001ea4 <_printf_common>
 80020e2:	3001      	adds	r0, #1
 80020e4:	d14a      	bne.n	800217c <_printf_i+0x1f4>
 80020e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020ea:	b004      	add	sp, #16
 80020ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	f043 0320 	orr.w	r3, r3, #32
 80020f6:	6023      	str	r3, [r4, #0]
 80020f8:	2778      	movs	r7, #120	@ 0x78
 80020fa:	4832      	ldr	r0, [pc, #200]	@ (80021c4 <_printf_i+0x23c>)
 80020fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	6831      	ldr	r1, [r6, #0]
 8002104:	061f      	lsls	r7, r3, #24
 8002106:	f851 5b04 	ldr.w	r5, [r1], #4
 800210a:	d402      	bmi.n	8002112 <_printf_i+0x18a>
 800210c:	065f      	lsls	r7, r3, #25
 800210e:	bf48      	it	mi
 8002110:	b2ad      	uxthmi	r5, r5
 8002112:	6031      	str	r1, [r6, #0]
 8002114:	07d9      	lsls	r1, r3, #31
 8002116:	bf44      	itt	mi
 8002118:	f043 0320 	orrmi.w	r3, r3, #32
 800211c:	6023      	strmi	r3, [r4, #0]
 800211e:	b11d      	cbz	r5, 8002128 <_printf_i+0x1a0>
 8002120:	2310      	movs	r3, #16
 8002122:	e7ab      	b.n	800207c <_printf_i+0xf4>
 8002124:	4826      	ldr	r0, [pc, #152]	@ (80021c0 <_printf_i+0x238>)
 8002126:	e7e9      	b.n	80020fc <_printf_i+0x174>
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	f023 0320 	bic.w	r3, r3, #32
 800212e:	6023      	str	r3, [r4, #0]
 8002130:	e7f6      	b.n	8002120 <_printf_i+0x198>
 8002132:	4616      	mov	r6, r2
 8002134:	e7bd      	b.n	80020b2 <_printf_i+0x12a>
 8002136:	6833      	ldr	r3, [r6, #0]
 8002138:	6825      	ldr	r5, [r4, #0]
 800213a:	1d18      	adds	r0, r3, #4
 800213c:	6961      	ldr	r1, [r4, #20]
 800213e:	6030      	str	r0, [r6, #0]
 8002140:	062e      	lsls	r6, r5, #24
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	d501      	bpl.n	800214a <_printf_i+0x1c2>
 8002146:	6019      	str	r1, [r3, #0]
 8002148:	e002      	b.n	8002150 <_printf_i+0x1c8>
 800214a:	0668      	lsls	r0, r5, #25
 800214c:	d5fb      	bpl.n	8002146 <_printf_i+0x1be>
 800214e:	8019      	strh	r1, [r3, #0]
 8002150:	2300      	movs	r3, #0
 8002152:	4616      	mov	r6, r2
 8002154:	6123      	str	r3, [r4, #16]
 8002156:	e7bc      	b.n	80020d2 <_printf_i+0x14a>
 8002158:	6833      	ldr	r3, [r6, #0]
 800215a:	2100      	movs	r1, #0
 800215c:	1d1a      	adds	r2, r3, #4
 800215e:	6032      	str	r2, [r6, #0]
 8002160:	681e      	ldr	r6, [r3, #0]
 8002162:	6862      	ldr	r2, [r4, #4]
 8002164:	4630      	mov	r0, r6
 8002166:	f000 f893 	bl	8002290 <memchr>
 800216a:	b108      	cbz	r0, 8002170 <_printf_i+0x1e8>
 800216c:	1b80      	subs	r0, r0, r6
 800216e:	6060      	str	r0, [r4, #4]
 8002170:	6863      	ldr	r3, [r4, #4]
 8002172:	6123      	str	r3, [r4, #16]
 8002174:	2300      	movs	r3, #0
 8002176:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800217a:	e7aa      	b.n	80020d2 <_printf_i+0x14a>
 800217c:	4632      	mov	r2, r6
 800217e:	4649      	mov	r1, r9
 8002180:	4640      	mov	r0, r8
 8002182:	6923      	ldr	r3, [r4, #16]
 8002184:	47d0      	blx	sl
 8002186:	3001      	adds	r0, #1
 8002188:	d0ad      	beq.n	80020e6 <_printf_i+0x15e>
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	079b      	lsls	r3, r3, #30
 800218e:	d413      	bmi.n	80021b8 <_printf_i+0x230>
 8002190:	68e0      	ldr	r0, [r4, #12]
 8002192:	9b03      	ldr	r3, [sp, #12]
 8002194:	4298      	cmp	r0, r3
 8002196:	bfb8      	it	lt
 8002198:	4618      	movlt	r0, r3
 800219a:	e7a6      	b.n	80020ea <_printf_i+0x162>
 800219c:	2301      	movs	r3, #1
 800219e:	4632      	mov	r2, r6
 80021a0:	4649      	mov	r1, r9
 80021a2:	4640      	mov	r0, r8
 80021a4:	47d0      	blx	sl
 80021a6:	3001      	adds	r0, #1
 80021a8:	d09d      	beq.n	80020e6 <_printf_i+0x15e>
 80021aa:	3501      	adds	r5, #1
 80021ac:	68e3      	ldr	r3, [r4, #12]
 80021ae:	9903      	ldr	r1, [sp, #12]
 80021b0:	1a5b      	subs	r3, r3, r1
 80021b2:	42ab      	cmp	r3, r5
 80021b4:	dcf2      	bgt.n	800219c <_printf_i+0x214>
 80021b6:	e7eb      	b.n	8002190 <_printf_i+0x208>
 80021b8:	2500      	movs	r5, #0
 80021ba:	f104 0619 	add.w	r6, r4, #25
 80021be:	e7f5      	b.n	80021ac <_printf_i+0x224>
 80021c0:	080023bf 	.word	0x080023bf
 80021c4:	080023d0 	.word	0x080023d0

080021c8 <__malloc_lock>:
 80021c8:	4801      	ldr	r0, [pc, #4]	@ (80021d0 <__malloc_lock+0x8>)
 80021ca:	f7ff bc6f 	b.w	8001aac <__retarget_lock_acquire_recursive>
 80021ce:	bf00      	nop
 80021d0:	20000240 	.word	0x20000240

080021d4 <__malloc_unlock>:
 80021d4:	4801      	ldr	r0, [pc, #4]	@ (80021dc <__malloc_unlock+0x8>)
 80021d6:	f7ff bc6a 	b.w	8001aae <__retarget_lock_release_recursive>
 80021da:	bf00      	nop
 80021dc:	20000240 	.word	0x20000240

080021e0 <_realloc_r>:
 80021e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021e4:	4680      	mov	r8, r0
 80021e6:	4615      	mov	r5, r2
 80021e8:	460c      	mov	r4, r1
 80021ea:	b921      	cbnz	r1, 80021f6 <_realloc_r+0x16>
 80021ec:	4611      	mov	r1, r2
 80021ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021f2:	f7ff bdd7 	b.w	8001da4 <_malloc_r>
 80021f6:	b92a      	cbnz	r2, 8002204 <_realloc_r+0x24>
 80021f8:	f000 f866 	bl	80022c8 <_free_r>
 80021fc:	2400      	movs	r4, #0
 80021fe:	4620      	mov	r0, r4
 8002200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002204:	f000 f8a8 	bl	8002358 <_malloc_usable_size_r>
 8002208:	4285      	cmp	r5, r0
 800220a:	4606      	mov	r6, r0
 800220c:	d802      	bhi.n	8002214 <_realloc_r+0x34>
 800220e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002212:	d8f4      	bhi.n	80021fe <_realloc_r+0x1e>
 8002214:	4629      	mov	r1, r5
 8002216:	4640      	mov	r0, r8
 8002218:	f7ff fdc4 	bl	8001da4 <_malloc_r>
 800221c:	4607      	mov	r7, r0
 800221e:	2800      	cmp	r0, #0
 8002220:	d0ec      	beq.n	80021fc <_realloc_r+0x1c>
 8002222:	42b5      	cmp	r5, r6
 8002224:	462a      	mov	r2, r5
 8002226:	4621      	mov	r1, r4
 8002228:	bf28      	it	cs
 800222a:	4632      	movcs	r2, r6
 800222c:	f000 f83e 	bl	80022ac <memcpy>
 8002230:	4621      	mov	r1, r4
 8002232:	4640      	mov	r0, r8
 8002234:	f000 f848 	bl	80022c8 <_free_r>
 8002238:	463c      	mov	r4, r7
 800223a:	e7e0      	b.n	80021fe <_realloc_r+0x1e>

0800223c <memmove>:
 800223c:	4288      	cmp	r0, r1
 800223e:	b510      	push	{r4, lr}
 8002240:	eb01 0402 	add.w	r4, r1, r2
 8002244:	d902      	bls.n	800224c <memmove+0x10>
 8002246:	4284      	cmp	r4, r0
 8002248:	4623      	mov	r3, r4
 800224a:	d807      	bhi.n	800225c <memmove+0x20>
 800224c:	1e43      	subs	r3, r0, #1
 800224e:	42a1      	cmp	r1, r4
 8002250:	d008      	beq.n	8002264 <memmove+0x28>
 8002252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002256:	f803 2f01 	strb.w	r2, [r3, #1]!
 800225a:	e7f8      	b.n	800224e <memmove+0x12>
 800225c:	4601      	mov	r1, r0
 800225e:	4402      	add	r2, r0
 8002260:	428a      	cmp	r2, r1
 8002262:	d100      	bne.n	8002266 <memmove+0x2a>
 8002264:	bd10      	pop	{r4, pc}
 8002266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800226a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800226e:	e7f7      	b.n	8002260 <memmove+0x24>

08002270 <_sbrk_r>:
 8002270:	b538      	push	{r3, r4, r5, lr}
 8002272:	2300      	movs	r3, #0
 8002274:	4d05      	ldr	r5, [pc, #20]	@ (800228c <_sbrk_r+0x1c>)
 8002276:	4604      	mov	r4, r0
 8002278:	4608      	mov	r0, r1
 800227a:	602b      	str	r3, [r5, #0]
 800227c:	f7fe f8dc 	bl	8000438 <_sbrk>
 8002280:	1c43      	adds	r3, r0, #1
 8002282:	d102      	bne.n	800228a <_sbrk_r+0x1a>
 8002284:	682b      	ldr	r3, [r5, #0]
 8002286:	b103      	cbz	r3, 800228a <_sbrk_r+0x1a>
 8002288:	6023      	str	r3, [r4, #0]
 800228a:	bd38      	pop	{r3, r4, r5, pc}
 800228c:	2000024c 	.word	0x2000024c

08002290 <memchr>:
 8002290:	4603      	mov	r3, r0
 8002292:	b510      	push	{r4, lr}
 8002294:	b2c9      	uxtb	r1, r1
 8002296:	4402      	add	r2, r0
 8002298:	4293      	cmp	r3, r2
 800229a:	4618      	mov	r0, r3
 800229c:	d101      	bne.n	80022a2 <memchr+0x12>
 800229e:	2000      	movs	r0, #0
 80022a0:	e003      	b.n	80022aa <memchr+0x1a>
 80022a2:	7804      	ldrb	r4, [r0, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	428c      	cmp	r4, r1
 80022a8:	d1f6      	bne.n	8002298 <memchr+0x8>
 80022aa:	bd10      	pop	{r4, pc}

080022ac <memcpy>:
 80022ac:	440a      	add	r2, r1
 80022ae:	4291      	cmp	r1, r2
 80022b0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80022b4:	d100      	bne.n	80022b8 <memcpy+0xc>
 80022b6:	4770      	bx	lr
 80022b8:	b510      	push	{r4, lr}
 80022ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80022be:	4291      	cmp	r1, r2
 80022c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80022c4:	d1f9      	bne.n	80022ba <memcpy+0xe>
 80022c6:	bd10      	pop	{r4, pc}

080022c8 <_free_r>:
 80022c8:	b538      	push	{r3, r4, r5, lr}
 80022ca:	4605      	mov	r5, r0
 80022cc:	2900      	cmp	r1, #0
 80022ce:	d040      	beq.n	8002352 <_free_r+0x8a>
 80022d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022d4:	1f0c      	subs	r4, r1, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	bfb8      	it	lt
 80022da:	18e4      	addlt	r4, r4, r3
 80022dc:	f7ff ff74 	bl	80021c8 <__malloc_lock>
 80022e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002354 <_free_r+0x8c>)
 80022e2:	6813      	ldr	r3, [r2, #0]
 80022e4:	b933      	cbnz	r3, 80022f4 <_free_r+0x2c>
 80022e6:	6063      	str	r3, [r4, #4]
 80022e8:	6014      	str	r4, [r2, #0]
 80022ea:	4628      	mov	r0, r5
 80022ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022f0:	f7ff bf70 	b.w	80021d4 <__malloc_unlock>
 80022f4:	42a3      	cmp	r3, r4
 80022f6:	d908      	bls.n	800230a <_free_r+0x42>
 80022f8:	6820      	ldr	r0, [r4, #0]
 80022fa:	1821      	adds	r1, r4, r0
 80022fc:	428b      	cmp	r3, r1
 80022fe:	bf01      	itttt	eq
 8002300:	6819      	ldreq	r1, [r3, #0]
 8002302:	685b      	ldreq	r3, [r3, #4]
 8002304:	1809      	addeq	r1, r1, r0
 8002306:	6021      	streq	r1, [r4, #0]
 8002308:	e7ed      	b.n	80022e6 <_free_r+0x1e>
 800230a:	461a      	mov	r2, r3
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	b10b      	cbz	r3, 8002314 <_free_r+0x4c>
 8002310:	42a3      	cmp	r3, r4
 8002312:	d9fa      	bls.n	800230a <_free_r+0x42>
 8002314:	6811      	ldr	r1, [r2, #0]
 8002316:	1850      	adds	r0, r2, r1
 8002318:	42a0      	cmp	r0, r4
 800231a:	d10b      	bne.n	8002334 <_free_r+0x6c>
 800231c:	6820      	ldr	r0, [r4, #0]
 800231e:	4401      	add	r1, r0
 8002320:	1850      	adds	r0, r2, r1
 8002322:	4283      	cmp	r3, r0
 8002324:	6011      	str	r1, [r2, #0]
 8002326:	d1e0      	bne.n	80022ea <_free_r+0x22>
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4408      	add	r0, r1
 800232e:	6010      	str	r0, [r2, #0]
 8002330:	6053      	str	r3, [r2, #4]
 8002332:	e7da      	b.n	80022ea <_free_r+0x22>
 8002334:	d902      	bls.n	800233c <_free_r+0x74>
 8002336:	230c      	movs	r3, #12
 8002338:	602b      	str	r3, [r5, #0]
 800233a:	e7d6      	b.n	80022ea <_free_r+0x22>
 800233c:	6820      	ldr	r0, [r4, #0]
 800233e:	1821      	adds	r1, r4, r0
 8002340:	428b      	cmp	r3, r1
 8002342:	bf01      	itttt	eq
 8002344:	6819      	ldreq	r1, [r3, #0]
 8002346:	685b      	ldreq	r3, [r3, #4]
 8002348:	1809      	addeq	r1, r1, r0
 800234a:	6021      	streq	r1, [r4, #0]
 800234c:	6063      	str	r3, [r4, #4]
 800234e:	6054      	str	r4, [r2, #4]
 8002350:	e7cb      	b.n	80022ea <_free_r+0x22>
 8002352:	bd38      	pop	{r3, r4, r5, pc}
 8002354:	20000248 	.word	0x20000248

08002358 <_malloc_usable_size_r>:
 8002358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800235c:	1f18      	subs	r0, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	bfbc      	itt	lt
 8002362:	580b      	ldrlt	r3, [r1, r0]
 8002364:	18c0      	addlt	r0, r0, r3
 8002366:	4770      	bx	lr

08002368 <_init>:
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	bf00      	nop
 800236c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236e:	bc08      	pop	{r3}
 8002370:	469e      	mov	lr, r3
 8002372:	4770      	bx	lr

08002374 <_fini>:
 8002374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002376:	bf00      	nop
 8002378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237a:	bc08      	pop	{r3}
 800237c:	469e      	mov	lr, r3
 800237e:	4770      	bx	lr
