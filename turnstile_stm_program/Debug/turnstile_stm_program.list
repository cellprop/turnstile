
turnstile_stm_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000603c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006148  08006148  00007148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e4  080062e4  000083ec  2**0
                  CONTENTS
  4 .ARM          00000008  080062e4  080062e4  000072e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062ec  080062ec  000083ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062ec  080062ec  000072ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062f0  080062f0  000072f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003ec  20000000  080062f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004110  200003ec  080066e0  000083ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044fc  080066e0  000084fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000083ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e515  00000000  00000000  00008415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d6  00000000  00000000  0001692a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00019100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b52  00000000  00000000  00019f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018989  00000000  00000000  0001aae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cf5  00000000  00000000  0003346b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bfe4  00000000  00000000  00044160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0144  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000419c  00000000  00000000  000d0188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000d4324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200003ec 	.word	0x200003ec
 8000128:	00000000 	.word	0x00000000
 800012c:	08006130 	.word	0x08006130

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200003f0 	.word	0x200003f0
 8000148:	08006130 	.word	0x08006130

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <strcmp>:
 800015c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000164:	2a01      	cmp	r2, #1
 8000166:	bf28      	it	cs
 8000168:	429a      	cmpcs	r2, r3
 800016a:	d0f7      	beq.n	800015c <strcmp>
 800016c:	1ad0      	subs	r0, r2, r3
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__aeabi_f2uiz>:
 800062c:	0042      	lsls	r2, r0, #1
 800062e:	d20e      	bcs.n	800064e <__aeabi_f2uiz+0x22>
 8000630:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000634:	d30b      	bcc.n	800064e <__aeabi_f2uiz+0x22>
 8000636:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800063a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800063e:	d409      	bmi.n	8000654 <__aeabi_f2uiz+0x28>
 8000640:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000644:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000648:	fa23 f002 	lsr.w	r0, r3, r2
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr
 8000654:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000658:	d101      	bne.n	800065e <__aeabi_f2uiz+0x32>
 800065a:	0242      	lsls	r2, r0, #9
 800065c:	d102      	bne.n	8000664 <__aeabi_f2uiz+0x38>
 800065e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000662:	4770      	bx	lr
 8000664:	f04f 0000 	mov.w	r0, #0
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000672:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <MX_DMA_Init+0x48>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a0f      	ldr	r2, [pc, #60]	@ (80006b4 <MX_DMA_Init+0x48>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <MX_DMA_Init+0x48>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	200f      	movs	r0, #15
 8000690:	f001 fe8d 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000694:	200f      	movs	r0, #15
 8000696:	f001 fea6 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2010      	movs	r0, #16
 80006a0:	f001 fe85 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006a4:	2010      	movs	r0, #16
 80006a6:	f001 fe9e 	bl	80023e6 <HAL_NVIC_EnableIRQ>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000

080006b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006cc:	4b49      	ldr	r3, [pc, #292]	@ (80007f4 <MX_GPIO_Init+0x13c>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a48      	ldr	r2, [pc, #288]	@ (80007f4 <MX_GPIO_Init+0x13c>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b46      	ldr	r3, [pc, #280]	@ (80007f4 <MX_GPIO_Init+0x13c>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0310 	and.w	r3, r3, #16
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e4:	4b43      	ldr	r3, [pc, #268]	@ (80007f4 <MX_GPIO_Init+0x13c>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a42      	ldr	r2, [pc, #264]	@ (80007f4 <MX_GPIO_Init+0x13c>)
 80006ea:	f043 0320 	orr.w	r3, r3, #32
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b40      	ldr	r3, [pc, #256]	@ (80007f4 <MX_GPIO_Init+0x13c>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0320 	and.w	r3, r3, #32
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b3d      	ldr	r3, [pc, #244]	@ (80007f4 <MX_GPIO_Init+0x13c>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a3c      	ldr	r2, [pc, #240]	@ (80007f4 <MX_GPIO_Init+0x13c>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b3a      	ldr	r3, [pc, #232]	@ (80007f4 <MX_GPIO_Init+0x13c>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000714:	4b37      	ldr	r3, [pc, #220]	@ (80007f4 <MX_GPIO_Init+0x13c>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a36      	ldr	r2, [pc, #216]	@ (80007f4 <MX_GPIO_Init+0x13c>)
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b34      	ldr	r3, [pc, #208]	@ (80007f4 <MX_GPIO_Init+0x13c>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0308 	and.w	r3, r3, #8
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IR_PULSE_GEN_Pin|Direction2_Pin|Direction1_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f240 3101 	movw	r1, #769	@ 0x301
 8000732:	4831      	ldr	r0, [pc, #196]	@ (80007f8 <MX_GPIO_Init+0x140>)
 8000734:	f002 fa9c 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2120      	movs	r1, #32
 800073c:	482f      	ldr	r0, [pc, #188]	@ (80007fc <MX_GPIO_Init+0x144>)
 800073e:	f002 fa97 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|IR1_Pin|Encoder_Pin|IR_2_Pin
 8000742:	f242 03fe 	movw	r3, #8446	@ 0x20fe
 8000746:	613b      	str	r3, [r7, #16]
                          |IR_3_Pin|IR_4_Pin|IR_5_Pin|IR_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000748:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <MX_GPIO_Init+0x148>)
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	4828      	ldr	r0, [pc, #160]	@ (80007f8 <MX_GPIO_Init+0x140>)
 8000758:	f002 f906 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IR_PULSE_GEN_Pin|Direction2_Pin|Direction1_Pin;
 800075c:	f240 3301 	movw	r3, #769	@ 0x301
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2302      	movs	r3, #2
 800076c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4619      	mov	r1, r3
 8000774:	4820      	ldr	r0, [pc, #128]	@ (80007f8 <MX_GPIO_Init+0x140>)
 8000776:	f002 f8f7 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800077a:	2320      	movs	r3, #32
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2302      	movs	r3, #2
 8000788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4619      	mov	r1, r3
 8000790:	481a      	ldr	r0, [pc, #104]	@ (80007fc <MX_GPIO_Init+0x144>)
 8000792:	f002 f8e9 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Limit_2A_Pin|Limit_2B_Pin;
 8000796:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <MX_GPIO_Init+0x148>)
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4619      	mov	r1, r3
 80007aa:	4816      	ldr	r0, [pc, #88]	@ (8000804 <MX_GPIO_Init+0x14c>)
 80007ac:	f002 f8dc 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Limit_1A_Pin|Limit_1B_Pin;
 80007b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_GPIO_Init+0x148>)
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	4619      	mov	r1, r3
 80007c4:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <MX_GPIO_Init+0x140>)
 80007c6:	f002 f8cf 	bl	8002968 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	2008      	movs	r0, #8
 80007d0:	f001 fded 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007d4:	2008      	movs	r0, #8
 80007d6:	f001 fe06 	bl	80023e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	2028      	movs	r0, #40	@ 0x28
 80007e0:	f001 fde5 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007e4:	2028      	movs	r0, #40	@ 0x28
 80007e6:	f001 fdfe 	bl	80023e6 <HAL_NVIC_EnableIRQ>

}
 80007ea:	bf00      	nop
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40011000 	.word	0x40011000
 80007fc:	40010800 	.word	0x40010800
 8000800:	10110000 	.word	0x10110000
 8000804:	40010c00 	.word	0x40010c00

08000808 <Draw_Arrow>:
const int entryStripSize = sizeof(entryStrip) / sizeof(entryStrip[0]);
const int exitStripSize = sizeof(exitStrip) / sizeof(exitStrip[0]);
const int entryRFIDSize = sizeof(entryRFID) / sizeof(entryRFID[0]);
const int exitRFIDSize = sizeof(exitRFID) / sizeof(exitRFID[0]);
/* Function to draw the arrow on a specified strip */
void Draw_Arrow(WS28XX_HandleTypeDef *ws, int *arrow, int color) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 26; i++) {
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	e010      	b.n	800083c <Draw_Arrow+0x34>
        WS28XX_SetPixel_RGBW_565(ws, arrow[i], color, brightness);
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	4413      	add	r3, r2
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	b299      	uxth	r1, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <Draw_Arrow+0x48>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f004 feb1 	bl	8005598 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 26; i++) {
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	3301      	adds	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	2b19      	cmp	r3, #25
 8000840:	ddeb      	ble.n	800081a <Draw_Arrow+0x12>
    }
    WS28XX_Update(ws);
 8000842:	68f8      	ldr	r0, [r7, #12]
 8000844:	f004 ff1c 	bl	8005680 <WS28XX_Update>
}
 8000848:	bf00      	nop
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000004 	.word	0x20000004

08000854 <Clear_Arrow>:

void Clear_Arrow(WS28XX_HandleTypeDef *ws, int *arrow) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 26; i++) {
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	e00d      	b.n	8000880 <Clear_Arrow+0x2c>
        WS28XX_SetPixel_RGBW_565(ws, arrow[i], COLOR_RGB565_BLACK, 0);
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	4413      	add	r3, r2
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	b299      	uxth	r1, r3
 8000870:	2300      	movs	r3, #0
 8000872:	2200      	movs	r2, #0
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f004 fe8f 	bl	8005598 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 26; i++) {
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3301      	adds	r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b19      	cmp	r3, #25
 8000884:	ddee      	ble.n	8000864 <Clear_Arrow+0x10>
    }
    WS28XX_Update(ws);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f004 fefa 	bl	8005680 <WS28XX_Update>
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <Shift_Arrow_EntryMatrix>:

/* Function to shift the arrow forward by one row, limited to the first strip */
void Shift_Arrow_EntryMatrix(int *arrow) {
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 26; i++) {
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	e023      	b.n	80008ea <Shift_Arrow_EntryMatrix+0x56>
        arrow[i] += 8;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	6879      	ldr	r1, [r7, #4]
 80008b2:	440b      	add	r3, r1
 80008b4:	3208      	adds	r2, #8
 80008b6:	601a      	str	r2, [r3, #0]
        if (arrow[i] >= 256) {  // Wrap around if out of bounds in the entry matrix (0–255)
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	4413      	add	r3, r2
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2bff      	cmp	r3, #255	@ 0xff
 80008c4:	dd0e      	ble.n	80008e4 <Shift_Arrow_EntryMatrix+0x50>
            arrow[i] = arrow[i] % 256;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	0092      	lsls	r2, r2, #2
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	440a      	add	r2, r1
 80008d8:	4259      	negs	r1, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	b2c9      	uxtb	r1, r1
 80008de:	bf58      	it	pl
 80008e0:	424b      	negpl	r3, r1
 80008e2:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < 26; i++) {
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	3301      	adds	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b19      	cmp	r3, #25
 80008ee:	ddd8      	ble.n	80008a2 <Shift_Arrow_EntryMatrix+0xe>
        }
    }
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <Shift_Arrow_ExitMatrix>:

/* Function to shift the arrow forward by one row, limited to the second strip */
void Shift_Arrow_ExitMatrix(int *arrow) {
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 26; i++) {
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	e029      	b.n	800095e <Shift_Arrow_ExitMatrix+0x62>
        arrow[i] += 8;  // Move forward by 8 (to the next row)
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	440b      	add	r3, r1
 800091c:	3208      	adds	r2, #8
 800091e:	601a      	str	r2, [r3, #0]
        if (arrow[i] >= 578) {  // Wrap around if the index exceeds the maximum address (577)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	4413      	add	r3, r2
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f240 2241 	movw	r2, #577	@ 0x241
 800092e:	4293      	cmp	r3, r2
 8000930:	dd12      	ble.n	8000958 <Shift_Arrow_ExitMatrix+0x5c>
            arrow[i] = 322 + ((arrow[i] - 322) % 256);  // Rebase to 0, wrap, and re-add the base offset
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8000940:	425a      	negs	r2, r3
 8000942:	b2db      	uxtb	r3, r3
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	bf58      	it	pl
 8000948:	4253      	negpl	r3, r2
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	0092      	lsls	r2, r2, #2
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	440a      	add	r2, r1
 8000952:	f503 73a1 	add.w	r3, r3, #322	@ 0x142
 8000956:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < 26; i++) {
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	3301      	adds	r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2b19      	cmp	r3, #25
 8000962:	ddd2      	ble.n	800090a <Shift_Arrow_ExitMatrix+0xe>
        }
    }
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <Led_Strip>:

void Led_Strip(WS28XX_HandleTypeDef *ws, int *strip, int strip_size, char *color) {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b087      	sub	sp, #28
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	603b      	str	r3, [r7, #0]
    uint16_t selected_color; // Variable to hold the selected color value

    // Determine the color based on the input string
    if (strcmp(color, "red") == 0) {
 800097e:	4929      	ldr	r1, [pc, #164]	@ (8000a24 <Led_Strip+0xb4>)
 8000980:	6838      	ldr	r0, [r7, #0]
 8000982:	f7ff fbeb 	bl	800015c <strcmp>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d103      	bne.n	8000994 <Led_Strip+0x24>
        selected_color = COLOR_RGB565_RED;
 800098c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000990:	82fb      	strh	r3, [r7, #22]
 8000992:	e01d      	b.n	80009d0 <Led_Strip+0x60>
    } else if (strcmp(color, "blue") == 0) {
 8000994:	4924      	ldr	r1, [pc, #144]	@ (8000a28 <Led_Strip+0xb8>)
 8000996:	6838      	ldr	r0, [r7, #0]
 8000998:	f7ff fbe0 	bl	800015c <strcmp>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d102      	bne.n	80009a8 <Led_Strip+0x38>
        selected_color = COLOR_RGB565_BLUE;
 80009a2:	231f      	movs	r3, #31
 80009a4:	82fb      	strh	r3, [r7, #22]
 80009a6:	e013      	b.n	80009d0 <Led_Strip+0x60>
    } else if (strcmp(color, "green") == 0) {
 80009a8:	4920      	ldr	r1, [pc, #128]	@ (8000a2c <Led_Strip+0xbc>)
 80009aa:	6838      	ldr	r0, [r7, #0]
 80009ac:	f7ff fbd6 	bl	800015c <strcmp>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d103      	bne.n	80009be <Led_Strip+0x4e>
        selected_color = COLOR_RGB565_GREEN;
 80009b6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80009ba:	82fb      	strh	r3, [r7, #22]
 80009bc:	e008      	b.n	80009d0 <Led_Strip+0x60>
    } else if (strcmp(color, "off") == 0) {
 80009be:	491c      	ldr	r1, [pc, #112]	@ (8000a30 <Led_Strip+0xc0>)
 80009c0:	6838      	ldr	r0, [r7, #0]
 80009c2:	f7ff fbcb 	bl	800015c <strcmp>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d126      	bne.n	8000a1a <Led_Strip+0xaa>
        selected_color = COLOR_RGB565_BLACK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	82fb      	strh	r3, [r7, #22]
    } else {
        return; // Invalid color; do nothing
    }

    // Set the color for each LED in the strip
    for (int i = 0; i < strip_size; i++) {
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	e019      	b.n	8000a0a <Led_Strip+0x9a>
        WS28XX_SetPixel_RGBW_565(ws, strip[i], selected_color, (strcmp(color, "off") == 0) ? 0 : brightness);
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	4413      	add	r3, r2
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	b29c      	uxth	r4, r3
 80009e2:	4913      	ldr	r1, [pc, #76]	@ (8000a30 <Led_Strip+0xc0>)
 80009e4:	6838      	ldr	r0, [r7, #0]
 80009e6:	f7ff fbb9 	bl	800015c <strcmp>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d003      	beq.n	80009f8 <Led_Strip+0x88>
 80009f0:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <Led_Strip+0xc4>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	e000      	b.n	80009fa <Led_Strip+0x8a>
 80009f8:	2300      	movs	r3, #0
 80009fa:	8afa      	ldrh	r2, [r7, #22]
 80009fc:	4621      	mov	r1, r4
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f004 fdca 	bl	8005598 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < strip_size; i++) {
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	3301      	adds	r3, #1
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	dbe1      	blt.n	80009d6 <Led_Strip+0x66>
    }

    // Update the LED strip
    WS28XX_Update(ws);
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f004 fe34 	bl	8005680 <WS28XX_Update>
 8000a18:	e000      	b.n	8000a1c <Led_Strip+0xac>
        return; // Invalid color; do nothing
 8000a1a:	bf00      	nop
}
 8000a1c:	371c      	adds	r7, #28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd90      	pop	{r4, r7, pc}
 8000a22:	bf00      	nop
 8000a24:	08006148 	.word	0x08006148
 8000a28:	0800614c 	.word	0x0800614c
 8000a2c:	08006154 	.word	0x08006154
 8000a30:	0800615c 	.word	0x0800615c
 8000a34:	20000004 	.word	0x20000004

08000a38 <Draw_Cross>:

/* Function to animate the cross pattern */
void Draw_Cross(WS28XX_HandleTypeDef *ws, int *top, int *middle, int *bottom, int color) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 16; i++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	e02c      	b.n	8000aa6 <Draw_Cross+0x6e>
        WS28XX_SetPixel_RGBW_565(ws, top[i], color, brightness);
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	4413      	add	r3, r2
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	b299      	uxth	r1, r3
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <Draw_Cross+0x84>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f004 fd98 	bl	8005598 <WS28XX_SetPixel_RGBW_565>
        WS28XX_SetPixel_RGBW_565(ws, middle[i], color, brightness);
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	4413      	add	r3, r2
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	b299      	uxth	r1, r3
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <Draw_Cross+0x84>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f004 fd8a 	bl	8005598 <WS28XX_SetPixel_RGBW_565>
        WS28XX_SetPixel_RGBW_565(ws, bottom[i], color, brightness);
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	683a      	ldr	r2, [r7, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	b299      	uxth	r1, r3
 8000a90:	6a3b      	ldr	r3, [r7, #32]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <Draw_Cross+0x84>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f004 fd7c 	bl	8005598 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 16; i++) {
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	ddcf      	ble.n	8000a4c <Draw_Cross+0x14>
    }
    WS28XX_Update(ws);
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f004 fde7 	bl	8005680 <WS28XX_Update>
}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000004 	.word	0x20000004

08000ac0 <Clear_Cross>:

void Clear_Cross(WS28XX_HandleTypeDef *ws, int *top, int *middle, int *bottom) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 16; i++) {
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e023      	b.n	8000b1c <Clear_Cross+0x5c>
        WS28XX_SetPixel_RGBW_565(ws, top[i], COLOR_RGB565_BLACK, 0);
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	68ba      	ldr	r2, [r7, #8]
 8000ada:	4413      	add	r3, r2
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	b299      	uxth	r1, r3
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	f004 fd57 	bl	8005598 <WS28XX_SetPixel_RGBW_565>
        WS28XX_SetPixel_RGBW_565(ws, middle[i], COLOR_RGB565_BLACK, 0);
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	b299      	uxth	r1, r3
 8000af6:	2300      	movs	r3, #0
 8000af8:	2200      	movs	r2, #0
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f004 fd4c 	bl	8005598 <WS28XX_SetPixel_RGBW_565>
        WS28XX_SetPixel_RGBW_565(ws, bottom[i], COLOR_RGB565_BLACK, 0);
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	b299      	uxth	r1, r3
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	2200      	movs	r2, #0
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f004 fd41 	bl	8005598 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 16; i++) {
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	2b0f      	cmp	r3, #15
 8000b20:	ddd8      	ble.n	8000ad4 <Clear_Cross+0x14>
    }
    WS28XX_Update(ws);
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f004 fdac 	bl	8005680 <WS28XX_Update>
}
 8000b28:	bf00      	nop
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <Clear_All_Animations>:

/* Function to clear all animations on both strips */
void Clear_All_Animations(WS28XX_HandleTypeDef *ws) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    Clear_Arrow(ws, arrow_entry_matrix);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4918      	ldr	r1, [pc, #96]	@ (8000b9c <Clear_All_Animations+0x6c>)
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fe89 	bl	8000854 <Clear_Arrow>
    Clear_Arrow(ws, arrow_exit_matrix);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4916      	ldr	r1, [pc, #88]	@ (8000ba0 <Clear_All_Animations+0x70>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fe84 	bl	8000854 <Clear_Arrow>
    Clear_Cross(ws, topCross_entry_matrix, middleCross_entry_matrix, bottomCross_entry_matrix);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <Clear_All_Animations+0x74>)
 8000b50:	4a15      	ldr	r2, [pc, #84]	@ (8000ba8 <Clear_All_Animations+0x78>)
 8000b52:	4916      	ldr	r1, [pc, #88]	@ (8000bac <Clear_All_Animations+0x7c>)
 8000b54:	f7ff ffb4 	bl	8000ac0 <Clear_Cross>
    Clear_Cross(ws, topCross_exit_matrix, middleCross_exit_matrix, bottomCross_exit_matrix);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <Clear_All_Animations+0x80>)
 8000b5c:	4a15      	ldr	r2, [pc, #84]	@ (8000bb4 <Clear_All_Animations+0x84>)
 8000b5e:	4916      	ldr	r1, [pc, #88]	@ (8000bb8 <Clear_All_Animations+0x88>)
 8000b60:	f7ff ffae 	bl	8000ac0 <Clear_Cross>
    Led_Strip(&ws, entryStrip, entryStripSize, "off");
 8000b64:	2213      	movs	r2, #19
 8000b66:	1d38      	adds	r0, r7, #4
 8000b68:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <Clear_All_Animations+0x8c>)
 8000b6a:	4915      	ldr	r1, [pc, #84]	@ (8000bc0 <Clear_All_Animations+0x90>)
 8000b6c:	f7ff ff00 	bl	8000970 <Led_Strip>
    Led_Strip(&ws, entryRFID, entryRFIDSize, "off");
 8000b70:	2214      	movs	r2, #20
 8000b72:	1d38      	adds	r0, r7, #4
 8000b74:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <Clear_All_Animations+0x8c>)
 8000b76:	4913      	ldr	r1, [pc, #76]	@ (8000bc4 <Clear_All_Animations+0x94>)
 8000b78:	f7ff fefa 	bl	8000970 <Led_Strip>
    Led_Strip(&ws, exitStrip, exitStripSize, "off");
 8000b7c:	2213      	movs	r2, #19
 8000b7e:	1d38      	adds	r0, r7, #4
 8000b80:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <Clear_All_Animations+0x8c>)
 8000b82:	4911      	ldr	r1, [pc, #68]	@ (8000bc8 <Clear_All_Animations+0x98>)
 8000b84:	f7ff fef4 	bl	8000970 <Led_Strip>
    Led_Strip(&ws, exitRFID, exitRFIDSize, "off");
 8000b88:	2214      	movs	r2, #20
 8000b8a:	1d38      	adds	r0, r7, #4
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <Clear_All_Animations+0x8c>)
 8000b8e:	490f      	ldr	r1, [pc, #60]	@ (8000bcc <Clear_All_Animations+0x9c>)
 8000b90:	f7ff feee 	bl	8000970 <Led_Strip>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000070 	.word	0x20000070
 8000ba4:	20000158 	.word	0x20000158
 8000ba8:	20000118 	.word	0x20000118
 8000bac:	200000d8 	.word	0x200000d8
 8000bb0:	20000218 	.word	0x20000218
 8000bb4:	200001d8 	.word	0x200001d8
 8000bb8:	20000198 	.word	0x20000198
 8000bbc:	0800615c 	.word	0x0800615c
 8000bc0:	20000258 	.word	0x20000258
 8000bc4:	200002f0 	.word	0x200002f0
 8000bc8:	200002a4 	.word	0x200002a4
 8000bcc:	20000340 	.word	0x20000340

08000bd0 <Entry_Granted_Animation>:


void Entry_Granted_Animation(WS28XX_HandleTypeDef *ws) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af02      	add	r7, sp, #8
 8000bd6:	6078      	str	r0, [r7, #4]
    static uint32_t last_update_time = 0;

    if (HAL_GetTick() - last_update_time >= DELAY_TIME) {
 8000bd8:	f001 face 	bl	8002178 <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	4b29      	ldr	r3, [pc, #164]	@ (8000c84 <Entry_Granted_Animation+0xb4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	2b63      	cmp	r3, #99	@ 0x63
 8000be6:	d949      	bls.n	8000c7c <Entry_Granted_Animation+0xac>
        last_update_time = HAL_GetTick();
 8000be8:	f001 fac6 	bl	8002178 <HAL_GetTick>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a25      	ldr	r2, [pc, #148]	@ (8000c84 <Entry_Granted_Animation+0xb4>)
 8000bf0:	6013      	str	r3, [r2, #0]

        Clear_Arrow(ws, arrow_entry_matrix);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4924      	ldr	r1, [pc, #144]	@ (8000c88 <Entry_Granted_Animation+0xb8>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fe2c 	bl	8000854 <Clear_Arrow>
        Shift_Arrow_EntryMatrix(arrow_entry_matrix);
 8000bfc:	4822      	ldr	r0, [pc, #136]	@ (8000c88 <Entry_Granted_Animation+0xb8>)
 8000bfe:	f7ff fe49 	bl	8000894 <Shift_Arrow_EntryMatrix>
        Draw_Arrow(ws, arrow_entry_matrix, COLOR_RGB565_GREEN);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000c08:	491f      	ldr	r1, [pc, #124]	@ (8000c88 <Entry_Granted_Animation+0xb8>)
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fdfc 	bl	8000808 <Draw_Arrow>

        Led_Strip(&ws, entryStrip, entryStripSize, "green");
 8000c10:	2213      	movs	r2, #19
 8000c12:	1d38      	adds	r0, r7, #4
 8000c14:	4b1d      	ldr	r3, [pc, #116]	@ (8000c8c <Entry_Granted_Animation+0xbc>)
 8000c16:	491e      	ldr	r1, [pc, #120]	@ (8000c90 <Entry_Granted_Animation+0xc0>)
 8000c18:	f7ff feaa 	bl	8000970 <Led_Strip>
        Led_Strip(&ws, entryRFID, entryRFIDSize, "green");
 8000c1c:	2214      	movs	r2, #20
 8000c1e:	1d38      	adds	r0, r7, #4
 8000c20:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <Entry_Granted_Animation+0xbc>)
 8000c22:	491c      	ldr	r1, [pc, #112]	@ (8000c94 <Entry_Granted_Animation+0xc4>)
 8000c24:	f7ff fea4 	bl	8000970 <Led_Strip>
        Led_Strip(&ws, exitStrip, exitStripSize, "red");
 8000c28:	2213      	movs	r2, #19
 8000c2a:	1d38      	adds	r0, r7, #4
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <Entry_Granted_Animation+0xc8>)
 8000c2e:	491b      	ldr	r1, [pc, #108]	@ (8000c9c <Entry_Granted_Animation+0xcc>)
 8000c30:	f7ff fe9e 	bl	8000970 <Led_Strip>
        Led_Strip(&ws, exitRFID, exitRFIDSize, "red");
 8000c34:	2214      	movs	r2, #20
 8000c36:	1d38      	adds	r0, r7, #4
 8000c38:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <Entry_Granted_Animation+0xc8>)
 8000c3a:	4919      	ldr	r1, [pc, #100]	@ (8000ca0 <Entry_Granted_Animation+0xd0>)
 8000c3c:	f7ff fe98 	bl	8000970 <Led_Strip>

        if (cross_state) {
 8000c40:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <Entry_Granted_Animation+0xd4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d009      	beq.n	8000c5c <Entry_Granted_Animation+0x8c>
            Draw_Cross(ws, topCross_exit_matrix, middleCross_exit_matrix, bottomCross_exit_matrix, COLOR_RGB565_RED);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <Entry_Granted_Animation+0xd8>)
 8000c52:	4a16      	ldr	r2, [pc, #88]	@ (8000cac <Entry_Granted_Animation+0xdc>)
 8000c54:	4916      	ldr	r1, [pc, #88]	@ (8000cb0 <Entry_Granted_Animation+0xe0>)
 8000c56:	f7ff feef 	bl	8000a38 <Draw_Cross>
 8000c5a:	e005      	b.n	8000c68 <Entry_Granted_Animation+0x98>
        } else {
            Clear_Cross(ws, topCross_exit_matrix, middleCross_exit_matrix, bottomCross_exit_matrix);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <Entry_Granted_Animation+0xd8>)
 8000c60:	4a12      	ldr	r2, [pc, #72]	@ (8000cac <Entry_Granted_Animation+0xdc>)
 8000c62:	4913      	ldr	r1, [pc, #76]	@ (8000cb0 <Entry_Granted_Animation+0xe0>)
 8000c64:	f7ff ff2c 	bl	8000ac0 <Clear_Cross>
        }
        cross_state = !cross_state;
 8000c68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <Entry_Granted_Animation+0xd4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	bf0c      	ite	eq
 8000c70:	2301      	moveq	r3, #1
 8000c72:	2300      	movne	r3, #0
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <Entry_Granted_Animation+0xd4>)
 8000c7a:	601a      	str	r2, [r3, #0]
    }
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000414c 	.word	0x2000414c
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	08006154 	.word	0x08006154
 8000c90:	20000258 	.word	0x20000258
 8000c94:	200002f0 	.word	0x200002f0
 8000c98:	08006148 	.word	0x08006148
 8000c9c:	200002a4 	.word	0x200002a4
 8000ca0:	20000340 	.word	0x20000340
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000218 	.word	0x20000218
 8000cac:	200001d8 	.word	0x200001d8
 8000cb0:	20000198 	.word	0x20000198

08000cb4 <Exit_Granted_Animation>:


void Exit_Granted_Animation(WS28XX_HandleTypeDef *ws) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	6078      	str	r0, [r7, #4]
    static uint32_t last_update_time = 0;

    if (HAL_GetTick() - last_update_time >= DELAY_TIME) {
 8000cbc:	f001 fa5c 	bl	8002178 <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	4b29      	ldr	r3, [pc, #164]	@ (8000d68 <Exit_Granted_Animation+0xb4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	2b63      	cmp	r3, #99	@ 0x63
 8000cca:	d949      	bls.n	8000d60 <Exit_Granted_Animation+0xac>
        last_update_time = HAL_GetTick();
 8000ccc:	f001 fa54 	bl	8002178 <HAL_GetTick>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4a25      	ldr	r2, [pc, #148]	@ (8000d68 <Exit_Granted_Animation+0xb4>)
 8000cd4:	6013      	str	r3, [r2, #0]

        if (cross_state) {
 8000cd6:	4b25      	ldr	r3, [pc, #148]	@ (8000d6c <Exit_Granted_Animation+0xb8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d009      	beq.n	8000cf2 <Exit_Granted_Animation+0x3e>
            Draw_Cross(ws, topCross_entry_matrix, middleCross_entry_matrix, bottomCross_entry_matrix, COLOR_RGB565_RED);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	4b22      	ldr	r3, [pc, #136]	@ (8000d70 <Exit_Granted_Animation+0xbc>)
 8000ce8:	4a22      	ldr	r2, [pc, #136]	@ (8000d74 <Exit_Granted_Animation+0xc0>)
 8000cea:	4923      	ldr	r1, [pc, #140]	@ (8000d78 <Exit_Granted_Animation+0xc4>)
 8000cec:	f7ff fea4 	bl	8000a38 <Draw_Cross>
 8000cf0:	e005      	b.n	8000cfe <Exit_Granted_Animation+0x4a>
        } else {
            Clear_Cross(ws, topCross_entry_matrix, middleCross_entry_matrix, bottomCross_entry_matrix);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d70 <Exit_Granted_Animation+0xbc>)
 8000cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d74 <Exit_Granted_Animation+0xc0>)
 8000cf8:	491f      	ldr	r1, [pc, #124]	@ (8000d78 <Exit_Granted_Animation+0xc4>)
 8000cfa:	f7ff fee1 	bl	8000ac0 <Clear_Cross>
        }
        cross_state = !cross_state;
 8000cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <Exit_Granted_Animation+0xb8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bf0c      	ite	eq
 8000d06:	2301      	moveq	r3, #1
 8000d08:	2300      	movne	r3, #0
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <Exit_Granted_Animation+0xb8>)
 8000d10:	601a      	str	r2, [r3, #0]

        Led_Strip(&ws, entryStrip, entryStripSize, "red");
 8000d12:	2213      	movs	r2, #19
 8000d14:	1d38      	adds	r0, r7, #4
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <Exit_Granted_Animation+0xc8>)
 8000d18:	4919      	ldr	r1, [pc, #100]	@ (8000d80 <Exit_Granted_Animation+0xcc>)
 8000d1a:	f7ff fe29 	bl	8000970 <Led_Strip>
        Led_Strip(&ws, entryRFID, entryRFIDSize, "red");
 8000d1e:	2214      	movs	r2, #20
 8000d20:	1d38      	adds	r0, r7, #4
 8000d22:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <Exit_Granted_Animation+0xc8>)
 8000d24:	4917      	ldr	r1, [pc, #92]	@ (8000d84 <Exit_Granted_Animation+0xd0>)
 8000d26:	f7ff fe23 	bl	8000970 <Led_Strip>
        Led_Strip(&ws, exitStrip, exitStripSize, "green");
 8000d2a:	2213      	movs	r2, #19
 8000d2c:	1d38      	adds	r0, r7, #4
 8000d2e:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <Exit_Granted_Animation+0xd4>)
 8000d30:	4916      	ldr	r1, [pc, #88]	@ (8000d8c <Exit_Granted_Animation+0xd8>)
 8000d32:	f7ff fe1d 	bl	8000970 <Led_Strip>
        Led_Strip(&ws, exitRFID, exitRFIDSize, "green");
 8000d36:	2214      	movs	r2, #20
 8000d38:	1d38      	adds	r0, r7, #4
 8000d3a:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <Exit_Granted_Animation+0xd4>)
 8000d3c:	4914      	ldr	r1, [pc, #80]	@ (8000d90 <Exit_Granted_Animation+0xdc>)
 8000d3e:	f7ff fe17 	bl	8000970 <Led_Strip>

        Clear_Arrow(ws, arrow_exit_matrix);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4913      	ldr	r1, [pc, #76]	@ (8000d94 <Exit_Granted_Animation+0xe0>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fd84 	bl	8000854 <Clear_Arrow>
        Shift_Arrow_ExitMatrix(arrow_exit_matrix);
 8000d4c:	4811      	ldr	r0, [pc, #68]	@ (8000d94 <Exit_Granted_Animation+0xe0>)
 8000d4e:	f7ff fdd5 	bl	80008fc <Shift_Arrow_ExitMatrix>
        Draw_Arrow(ws, arrow_exit_matrix, COLOR_RGB565_GREEN);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000d58:	490e      	ldr	r1, [pc, #56]	@ (8000d94 <Exit_Granted_Animation+0xe0>)
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fd54 	bl	8000808 <Draw_Arrow>
    }
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20004150 	.word	0x20004150
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000158 	.word	0x20000158
 8000d74:	20000118 	.word	0x20000118
 8000d78:	200000d8 	.word	0x200000d8
 8000d7c:	08006148 	.word	0x08006148
 8000d80:	20000258 	.word	0x20000258
 8000d84:	200002f0 	.word	0x200002f0
 8000d88:	08006154 	.word	0x08006154
 8000d8c:	200002a4 	.word	0x200002a4
 8000d90:	20000340 	.word	0x20000340
 8000d94:	20000070 	.word	0x20000070

08000d98 <Access_Denied_Animation>:
        Draw_Arrow(ws, arrow_exit_matrix, COLOR_RGB565_GREEN);
    }
}

/* Function 4: Cross animation on both strips */
void Access_Denied_Animation(WS28XX_HandleTypeDef *ws) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	6078      	str	r0, [r7, #4]
    static uint32_t last_update_time = 0;

    if (HAL_GetTick() - last_update_time >= DELAY_TIME) {
 8000da0:	f001 f9ea 	bl	8002178 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	4b29      	ldr	r3, [pc, #164]	@ (8000e4c <Access_Denied_Animation+0xb4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	2b63      	cmp	r3, #99	@ 0x63
 8000dae:	d949      	bls.n	8000e44 <Access_Denied_Animation+0xac>
        last_update_time = HAL_GetTick();
 8000db0:	f001 f9e2 	bl	8002178 <HAL_GetTick>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4a25      	ldr	r2, [pc, #148]	@ (8000e4c <Access_Denied_Animation+0xb4>)
 8000db8:	6013      	str	r3, [r2, #0]

        if (cross_state) {
 8000dba:	4b25      	ldr	r3, [pc, #148]	@ (8000e50 <Access_Denied_Animation+0xb8>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d012      	beq.n	8000de8 <Access_Denied_Animation+0x50>
            Draw_Cross(ws, topCross_entry_matrix, middleCross_entry_matrix, bottomCross_entry_matrix, COLOR_RGB565_RED);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <Access_Denied_Animation+0xbc>)
 8000dcc:	4a22      	ldr	r2, [pc, #136]	@ (8000e58 <Access_Denied_Animation+0xc0>)
 8000dce:	4923      	ldr	r1, [pc, #140]	@ (8000e5c <Access_Denied_Animation+0xc4>)
 8000dd0:	f7ff fe32 	bl	8000a38 <Draw_Cross>
            Draw_Cross(ws, topCross_exit_matrix, middleCross_exit_matrix, bottomCross_exit_matrix, COLOR_RGB565_RED);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	4b20      	ldr	r3, [pc, #128]	@ (8000e60 <Access_Denied_Animation+0xc8>)
 8000dde:	4a21      	ldr	r2, [pc, #132]	@ (8000e64 <Access_Denied_Animation+0xcc>)
 8000de0:	4921      	ldr	r1, [pc, #132]	@ (8000e68 <Access_Denied_Animation+0xd0>)
 8000de2:	f7ff fe29 	bl	8000a38 <Draw_Cross>
 8000de6:	e00b      	b.n	8000e00 <Access_Denied_Animation+0x68>
        } else {
            Clear_Cross(ws, topCross_entry_matrix, middleCross_entry_matrix, bottomCross_entry_matrix);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <Access_Denied_Animation+0xbc>)
 8000dec:	4a1a      	ldr	r2, [pc, #104]	@ (8000e58 <Access_Denied_Animation+0xc0>)
 8000dee:	491b      	ldr	r1, [pc, #108]	@ (8000e5c <Access_Denied_Animation+0xc4>)
 8000df0:	f7ff fe66 	bl	8000ac0 <Clear_Cross>
            Clear_Cross(ws, topCross_exit_matrix, middleCross_exit_matrix, bottomCross_exit_matrix);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <Access_Denied_Animation+0xc8>)
 8000df8:	4a1a      	ldr	r2, [pc, #104]	@ (8000e64 <Access_Denied_Animation+0xcc>)
 8000dfa:	491b      	ldr	r1, [pc, #108]	@ (8000e68 <Access_Denied_Animation+0xd0>)
 8000dfc:	f7ff fe60 	bl	8000ac0 <Clear_Cross>
        }
        cross_state = !cross_state;
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <Access_Denied_Animation+0xb8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bf0c      	ite	eq
 8000e08:	2301      	moveq	r3, #1
 8000e0a:	2300      	movne	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <Access_Denied_Animation+0xb8>)
 8000e12:	601a      	str	r2, [r3, #0]

        Led_Strip(&ws, entryStrip, entryStripSize, "red");
 8000e14:	2213      	movs	r2, #19
 8000e16:	1d38      	adds	r0, r7, #4
 8000e18:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <Access_Denied_Animation+0xd4>)
 8000e1a:	4915      	ldr	r1, [pc, #84]	@ (8000e70 <Access_Denied_Animation+0xd8>)
 8000e1c:	f7ff fda8 	bl	8000970 <Led_Strip>
        Led_Strip(&ws, entryRFID, entryRFIDSize, "red");
 8000e20:	2214      	movs	r2, #20
 8000e22:	1d38      	adds	r0, r7, #4
 8000e24:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <Access_Denied_Animation+0xd4>)
 8000e26:	4913      	ldr	r1, [pc, #76]	@ (8000e74 <Access_Denied_Animation+0xdc>)
 8000e28:	f7ff fda2 	bl	8000970 <Led_Strip>
        Led_Strip(&ws, exitStrip, exitStripSize, "red");
 8000e2c:	2213      	movs	r2, #19
 8000e2e:	1d38      	adds	r0, r7, #4
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <Access_Denied_Animation+0xd4>)
 8000e32:	4911      	ldr	r1, [pc, #68]	@ (8000e78 <Access_Denied_Animation+0xe0>)
 8000e34:	f7ff fd9c 	bl	8000970 <Led_Strip>
        Led_Strip(&ws, exitRFID, exitRFIDSize, "red");
 8000e38:	2214      	movs	r2, #20
 8000e3a:	1d38      	adds	r0, r7, #4
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <Access_Denied_Animation+0xd4>)
 8000e3e:	490f      	ldr	r1, [pc, #60]	@ (8000e7c <Access_Denied_Animation+0xe4>)
 8000e40:	f7ff fd96 	bl	8000970 <Led_Strip>
    }
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20004154 	.word	0x20004154
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000158 	.word	0x20000158
 8000e58:	20000118 	.word	0x20000118
 8000e5c:	200000d8 	.word	0x200000d8
 8000e60:	20000218 	.word	0x20000218
 8000e64:	200001d8 	.word	0x200001d8
 8000e68:	20000198 	.word	0x20000198
 8000e6c:	08006148 	.word	0x08006148
 8000e70:	20000258 	.word	0x20000258
 8000e74:	200002f0 	.word	0x200002f0
 8000e78:	200002a4 	.word	0x200002a4
 8000e7c:	20000340 	.word	0x20000340

08000e80 <Speed_Control>:
}


//MOTOR CONTROL FUNCTIONS
void Speed_Control(int a)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, a);
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <Speed_Control+0x24>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, a);
 8000e90:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <Speed_Control+0x24>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20004208 	.word	0x20004208

08000ea8 <Direction>:

void Direction(int a)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	if(a==1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d10b      	bne.n	8000ece <Direction+0x26>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ebc:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <Direction+0x4c>)
 8000ebe:	f001 fed7 	bl	8002c70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ec8:	480a      	ldr	r0, [pc, #40]	@ (8000ef4 <Direction+0x4c>)
 8000eca:	f001 fed1 	bl	8002c70 <HAL_GPIO_WritePin>

	}
	if(a==0)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10b      	bne.n	8000eec <Direction+0x44>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eda:	4806      	ldr	r0, [pc, #24]	@ (8000ef4 <Direction+0x4c>)
 8000edc:	f001 fec8 	bl	8002c70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ee6:	4803      	ldr	r0, [pc, #12]	@ (8000ef4 <Direction+0x4c>)
 8000ee8:	f001 fec2 	bl	8002c70 <HAL_GPIO_WritePin>
	}
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40011000 	.word	0x40011000

08000ef8 <encoder>:

void encoder(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
    counter++;
 8000efc:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <encoder+0x2c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	4a08      	ldr	r2, [pc, #32]	@ (8000f24 <encoder+0x2c>)
 8000f04:	6013      	str	r3, [r2, #0]
    if (counter == ENCODER_THRESHOLD) {
 8000f06:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <encoder+0x2c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f240 223a 	movw	r2, #570	@ 0x23a
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d105      	bne.n	8000f1e <encoder+0x26>
        Speed_Control(0); // Stop the motor
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff ffb4 	bl	8000e80 <Speed_Control>
        counter = 0;      // Reset counter for next operation
 8000f18:	4b02      	ldr	r3, [pc, #8]	@ (8000f24 <encoder+0x2c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
    }
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20004148 	.word	0x20004148

08000f28 <HAL_GPIO_EXTI_Callback>:

const uint16_t pulse_pins[NUM_SENSORS] = {GPIO_PIN_1, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
            return; // Exit after updating the correct sensor
        }
    }*/

    // Handle encoder feedback or motor stop
    switch (GPIO_Pin) {
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f38:	d017      	beq.n	8000f6a <HAL_GPIO_EXTI_Callback+0x42>
 8000f3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f3e:	dc1b      	bgt.n	8000f78 <HAL_GPIO_EXTI_Callback+0x50>
 8000f40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000f44:	d011      	beq.n	8000f6a <HAL_GPIO_EXTI_Callback+0x42>
 8000f46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000f4a:	dc15      	bgt.n	8000f78 <HAL_GPIO_EXTI_Callback+0x50>
 8000f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f50:	d00b      	beq.n	8000f6a <HAL_GPIO_EXTI_Callback+0x42>
 8000f52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f56:	dc0f      	bgt.n	8000f78 <HAL_GPIO_EXTI_Callback+0x50>
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_EXTI_Callback+0x3c>
 8000f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_EXTI_Callback+0x42>
            Speed_Control(0);
            counter = 0;
            break;

        default:
            break;
 8000f62:	e009      	b.n	8000f78 <HAL_GPIO_EXTI_Callback+0x50>
            encoder();
 8000f64:	f7ff ffc8 	bl	8000ef8 <encoder>
            break;
 8000f68:	e007      	b.n	8000f7a <HAL_GPIO_EXTI_Callback+0x52>
            Speed_Control(0);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff ff88 	bl	8000e80 <Speed_Control>
            counter = 0;
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
            break;
 8000f76:	e000      	b.n	8000f7a <HAL_GPIO_EXTI_Callback+0x52>
            break;
 8000f78:	bf00      	nop
    }
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20004148 	.word	0x20004148

08000f88 <quarter_cycle_open>:

void quarter_cycle_open(int source) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    uint32_t start_time = HAL_GetTick();  // Record the start time
 8000f90:	f001 f8f2 	bl	8002178 <HAL_GetTick>
 8000f94:	60f8      	str	r0, [r7, #12]
    counter = 0;  // Reset the counter at the start of the operation
 8000f96:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <quarter_cycle_open+0x6c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]

    // Set motor direction based on the source
    if (source == 1) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d103      	bne.n	8000faa <quarter_cycle_open+0x22>
        Direction(0);  // Direction for source 1
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ff80 	bl	8000ea8 <Direction>
 8000fa8:	e005      	b.n	8000fb6 <quarter_cycle_open+0x2e>
    } else if (source == 2) {
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d102      	bne.n	8000fb6 <quarter_cycle_open+0x2e>
        Direction(1);  // Direction for source 2
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f7ff ff79 	bl	8000ea8 <Direction>
    }

    Speed_Control(1000);  // Start the motor
 8000fb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fba:	f7ff ff61 	bl	8000e80 <Speed_Control>

    // Wait for the encoder interrupt to stop the motor or timeout
    while (HAL_GetTick() - start_time <= 3000) {
 8000fbe:	e003      	b.n	8000fc8 <quarter_cycle_open+0x40>
        if (counter == 0) {  // If encoder reset counter, motor has stopped
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <quarter_cycle_open+0x6c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d009      	beq.n	8000fdc <quarter_cycle_open+0x54>
    while (HAL_GetTick() - start_time <= 3000) {
 8000fc8:	f001 f8d6 	bl	8002178 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d9f2      	bls.n	8000fc0 <quarter_cycle_open+0x38>
 8000fda:	e000      	b.n	8000fde <quarter_cycle_open+0x56>
            break;
 8000fdc:	bf00      	nop
        }
    }

    if (counter != 0) {  // If the counter is not reset, stop the motor manually
 8000fde:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <quarter_cycle_open+0x6c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <quarter_cycle_open+0x64>
        Speed_Control(0);  // Safety stop
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f7ff ff4a 	bl	8000e80 <Speed_Control>
        //Report_Error("Timeout: Encoder failed to stop motor");
    }
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20004148 	.word	0x20004148

08000ff8 <quarter_cycle_closed>:

void quarter_cycle_closed(int source) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    uint32_t start_time = HAL_GetTick();  // Record the start time
 8001000:	f001 f8ba 	bl	8002178 <HAL_GetTick>
 8001004:	60f8      	str	r0, [r7, #12]
    counter = 0;  // Reset the counter at the start of the operation
 8001006:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <quarter_cycle_closed+0x6c>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]

    // Set motor direction based on the source
    if (source == 1) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d103      	bne.n	800101a <quarter_cycle_closed+0x22>
        Direction(1);  // Direction for source 1
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff ff48 	bl	8000ea8 <Direction>
 8001018:	e005      	b.n	8001026 <quarter_cycle_closed+0x2e>
    } else if (source == 2) {
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d102      	bne.n	8001026 <quarter_cycle_closed+0x2e>
        Direction(0);  // Direction for source 2
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff ff41 	bl	8000ea8 <Direction>
    }

    Speed_Control(1000);  // Start the motor
 8001026:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800102a:	f7ff ff29 	bl	8000e80 <Speed_Control>

    // Wait for the encoder interrupt to stop the motor or timeout
    while (HAL_GetTick() - start_time <= 3000) {
 800102e:	e003      	b.n	8001038 <quarter_cycle_closed+0x40>
        if (counter == 0) {  // If encoder reset counter, motor has stopped
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <quarter_cycle_closed+0x6c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d009      	beq.n	800104c <quarter_cycle_closed+0x54>
    while (HAL_GetTick() - start_time <= 3000) {
 8001038:	f001 f89e 	bl	8002178 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001046:	4293      	cmp	r3, r2
 8001048:	d9f2      	bls.n	8001030 <quarter_cycle_closed+0x38>
 800104a:	e000      	b.n	800104e <quarter_cycle_closed+0x56>
            break;
 800104c:	bf00      	nop
        }
    }

    if (counter != 0) {  // If the counter is not reset, stop the motor manually
 800104e:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <quarter_cycle_closed+0x6c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <quarter_cycle_closed+0x64>
        Speed_Control(0);  // Safety stop
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff ff12 	bl	8000e80 <Speed_Control>
        //Report_Error("Timeout: Encoder failed to stop motor");
    }
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20004148 	.word	0x20004148

08001068 <ready_state>:

//STATE FUNCTIONS

void ready_state(void) {
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
            currentState = STATE_READING;
        }
    }*/
    //Ready_State_Animation(&ws);

    if (flag_rev == 1) {
 800106c:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <ready_state+0x1c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d102      	bne.n	800107c <ready_state+0x14>
        currentState = STATE_READING;
 8001076:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <ready_state+0x20>)
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
    }
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	20004142 	.word	0x20004142
 8001088:	20004110 	.word	0x20004110

0800108c <reading_state>:

void reading_state(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
    static uint32_t start_time = 0;

    if (start_time == 0) {  // Initialize timer on first call
 8001090:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <reading_state+0xb0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d104      	bne.n	80010a2 <reading_state+0x16>
        start_time = HAL_GetTick();
 8001098:	f001 f86e 	bl	8002178 <HAL_GetTick>
 800109c:	4603      	mov	r3, r0
 800109e:	4a27      	ldr	r2, [pc, #156]	@ (800113c <reading_state+0xb0>)
 80010a0:	6013      	str	r3, [r2, #0]
    }

    if (HAL_GetTick() - start_time >= 1000) {
 80010a2:	f001 f869 	bl	8002178 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <reading_state+0xb0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010b2:	d340      	bcc.n	8001136 <reading_state+0xaa>
        // Execute logic after 1 second delay
        if (flag_rev == 1) {
 80010b4:	4b22      	ldr	r3, [pc, #136]	@ (8001140 <reading_state+0xb4>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d10c      	bne.n	80010d8 <reading_state+0x4c>
            HAL_UART_Transmit_IT(&huart2, (uint8_t *)usermsg, strlen(usermsg));
 80010be:	4821      	ldr	r0, [pc, #132]	@ (8001144 <reading_state+0xb8>)
 80010c0:	f7ff f844 	bl	800014c <strlen>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	461a      	mov	r2, r3
 80010ca:	491e      	ldr	r1, [pc, #120]	@ (8001144 <reading_state+0xb8>)
 80010cc:	481e      	ldr	r0, [pc, #120]	@ (8001148 <reading_state+0xbc>)
 80010ce:	f003 fbda 	bl	8004886 <HAL_UART_Transmit_IT>
            flag_rev = 0;
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <reading_state+0xb4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
        }

        // NOS Potential Responses Setup
        switch (intresponseData) {
 80010d8:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <reading_state+0xc0>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b05      	cmp	r3, #5
 80010de:	d827      	bhi.n	8001130 <reading_state+0xa4>
 80010e0:	a201      	add	r2, pc, #4	@ (adr r2, 80010e8 <reading_state+0x5c>)
 80010e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e6:	bf00      	nop
 80010e8:	08001101 	.word	0x08001101
 80010ec:	08001109 	.word	0x08001109
 80010f0:	08001111 	.word	0x08001111
 80010f4:	08001119 	.word	0x08001119
 80010f8:	08001121 	.word	0x08001121
 80010fc:	08001129 	.word	0x08001129
            case 0: currentState = STATE_READY; break;
 8001100:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <reading_state+0xc4>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e013      	b.n	8001130 <reading_state+0xa4>
            case 1: currentState = STATE_OPEN; break;
 8001108:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <reading_state+0xc4>)
 800110a:	2202      	movs	r2, #2
 800110c:	701a      	strb	r2, [r3, #0]
 800110e:	e00f      	b.n	8001130 <reading_state+0xa4>
            case 2: currentState = STATE_CLOSED; break;
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <reading_state+0xc4>)
 8001112:	2203      	movs	r2, #3
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	e00b      	b.n	8001130 <reading_state+0xa4>
            case 3: currentState = STATE_EMERGENCY; break;
 8001118:	4b0d      	ldr	r3, [pc, #52]	@ (8001150 <reading_state+0xc4>)
 800111a:	2206      	movs	r2, #6
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	e007      	b.n	8001130 <reading_state+0xa4>
            case 4: currentState = STATE_SLEEP; break;
 8001120:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <reading_state+0xc4>)
 8001122:	2205      	movs	r2, #5
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	e003      	b.n	8001130 <reading_state+0xa4>
            case 5: currentState = STATE_OVERCAPACITY; break;
 8001128:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <reading_state+0xc4>)
 800112a:	2204      	movs	r2, #4
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	bf00      	nop
        }

        start_time = 0;  // Reset timer
 8001130:	4b02      	ldr	r3, [pc, #8]	@ (800113c <reading_state+0xb0>)
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
    }
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20004158 	.word	0x20004158
 8001140:	20004142 	.word	0x20004142
 8001144:	20004134 	.word	0x20004134
 8001148:	20004320 	.word	0x20004320
 800114c:	20004146 	.word	0x20004146
 8001150:	20004110 	.word	0x20004110

08001154 <open_state>:

void open_state(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
    static uint32_t start_time = 0;
    static int step = 0;

    if (step == 0) {
 8001158:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <open_state+0xac>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d110      	bne.n	8001182 <open_state+0x2e>
        Clear_All_Animations(&ws);
 8001160:	4828      	ldr	r0, [pc, #160]	@ (8001204 <open_state+0xb0>)
 8001162:	f7ff fce5 	bl	8000b30 <Clear_All_Animations>
        quarter_cycle_open(uart_source);
 8001166:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <open_state+0xb4>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff0b 	bl	8000f88 <quarter_cycle_open>
        start_time = HAL_GetTick();
 8001172:	f001 f801 	bl	8002178 <HAL_GetTick>
 8001176:	4603      	mov	r3, r0
 8001178:	4a24      	ldr	r2, [pc, #144]	@ (800120c <open_state+0xb8>)
 800117a:	6013      	str	r3, [r2, #0]
        step = 1;
 800117c:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <open_state+0xac>)
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]
    }

    if (step == 1 && HAL_GetTick() - start_time >= 2000) {
 8001182:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <open_state+0xac>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d10b      	bne.n	80011a2 <open_state+0x4e>
 800118a:	f000 fff5 	bl	8002178 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <open_state+0xb8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800119a:	d302      	bcc.n	80011a2 <open_state+0x4e>
        // Step 1: Wait for 2 seconds after opening
        step = 2;
 800119c:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <open_state+0xac>)
 800119e:	2202      	movs	r2, #2
 80011a0:	601a      	str	r2, [r3, #0]
    }

    if (step == 2) {
 80011a2:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <open_state+0xac>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d117      	bne.n	80011da <open_state+0x86>
                Entry_Granted_Animation(&ws);
            } else if (uart_source == 2) {
                Exit_Granted_Animation(&ws);
            }
        }*/
        if (uart_source == 1) {
 80011aa:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <open_state+0xb4>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d103      	bne.n	80011bc <open_state+0x68>
            Entry_Granted_Animation(&ws);
 80011b4:	4813      	ldr	r0, [pc, #76]	@ (8001204 <open_state+0xb0>)
 80011b6:	f7ff fd0b 	bl	8000bd0 <Entry_Granted_Animation>
 80011ba:	e007      	b.n	80011cc <open_state+0x78>
        } else if (uart_source == 2) {
 80011bc:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <open_state+0xb4>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d102      	bne.n	80011cc <open_state+0x78>
            Exit_Granted_Animation(&ws);
 80011c6:	480f      	ldr	r0, [pc, #60]	@ (8001204 <open_state+0xb0>)
 80011c8:	f7ff fd74 	bl	8000cb4 <Exit_Granted_Animation>
        }
        HAL_Delay(4000);
 80011cc:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80011d0:	f000 ffdc 	bl	800218c <HAL_Delay>

        // No object detected, proceed to close the doors
        step = 3;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <open_state+0xac>)
 80011d6:	2203      	movs	r2, #3
 80011d8:	601a      	str	r2, [r3, #0]
    }

    if (step == 3) {
 80011da:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <open_state+0xac>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d10b      	bne.n	80011fa <open_state+0xa6>
        quarter_cycle_closed(uart_source);
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <open_state+0xb4>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff05 	bl	8000ff8 <quarter_cycle_closed>
        currentState = STATE_READY;
 80011ee:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <open_state+0xbc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
        step = 0; // Reset step for the next cycle
 80011f4:	4b02      	ldr	r3, [pc, #8]	@ (8001200 <open_state+0xac>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
    }
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000415c 	.word	0x2000415c
 8001204:	20000408 	.word	0x20000408
 8001208:	20004143 	.word	0x20004143
 800120c:	20004160 	.word	0x20004160
 8001210:	20004110 	.word	0x20004110

08001214 <closed_state>:

void closed_state(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
    static uint32_t start_time = 0;

    if (start_time == 0) {
 8001218:	4b10      	ldr	r3, [pc, #64]	@ (800125c <closed_state+0x48>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d107      	bne.n	8001230 <closed_state+0x1c>
        start_time = HAL_GetTick();
 8001220:	f000 ffaa 	bl	8002178 <HAL_GetTick>
 8001224:	4603      	mov	r3, r0
 8001226:	4a0d      	ldr	r2, [pc, #52]	@ (800125c <closed_state+0x48>)
 8001228:	6013      	str	r3, [r2, #0]
        Clear_All_Animations(&ws);
 800122a:	480d      	ldr	r0, [pc, #52]	@ (8001260 <closed_state+0x4c>)
 800122c:	f7ff fc80 	bl	8000b30 <Clear_All_Animations>
    }

    if (HAL_GetTick() - start_time < 2000) {
 8001230:	f000 ffa2 	bl	8002178 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <closed_state+0x48>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001240:	d203      	bcs.n	800124a <closed_state+0x36>
        Access_Denied_Animation(&ws);
 8001242:	4807      	ldr	r0, [pc, #28]	@ (8001260 <closed_state+0x4c>)
 8001244:	f7ff fda8 	bl	8000d98 <Access_Denied_Animation>
    } else {
        currentState = STATE_READY;
        start_time = 0; // Reset for the next execution
    }
}
 8001248:	e005      	b.n	8001256 <closed_state+0x42>
        currentState = STATE_READY;
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <closed_state+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
        start_time = 0; // Reset for the next execution
 8001250:	4b02      	ldr	r3, [pc, #8]	@ (800125c <closed_state+0x48>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20004164 	.word	0x20004164
 8001260:	20000408 	.word	0x20000408
 8001264:	20004110 	.word	0x20004110

08001268 <sleep_state>:

void sleep_state(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
    Clear_All_Animations(&ws);
 800126c:	480a      	ldr	r0, [pc, #40]	@ (8001298 <sleep_state+0x30>)
 800126e:	f7ff fc5f 	bl	8000b30 <Clear_All_Animations>
    Led_Strip(&ws, entryStrip, entryStripSize, "off");
 8001272:	2213      	movs	r2, #19
 8001274:	4b09      	ldr	r3, [pc, #36]	@ (800129c <sleep_state+0x34>)
 8001276:	490a      	ldr	r1, [pc, #40]	@ (80012a0 <sleep_state+0x38>)
 8001278:	4807      	ldr	r0, [pc, #28]	@ (8001298 <sleep_state+0x30>)
 800127a:	f7ff fb79 	bl	8000970 <Led_Strip>
    Led_Strip(&ws, exitStrip, exitStripSize, "off");
 800127e:	2213      	movs	r2, #19
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <sleep_state+0x34>)
 8001282:	4908      	ldr	r1, [pc, #32]	@ (80012a4 <sleep_state+0x3c>)
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <sleep_state+0x30>)
 8001286:	f7ff fb73 	bl	8000970 <Led_Strip>
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800128a:	2101      	movs	r1, #1
 800128c:	2000      	movs	r0, #0
 800128e:	f001 fd39 	bl	8002d04 <HAL_PWR_EnterSLEEPMode>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000408 	.word	0x20000408
 800129c:	0800615c 	.word	0x0800615c
 80012a0:	20000258 	.word	0x20000258
 80012a4:	200002a4 	.word	0x200002a4

080012a8 <overcapacity_state>:

void overcapacity_state(void) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
    static uint32_t start_time = 0;

    if (start_time == 0) {
 80012ac:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <overcapacity_state+0x54>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d104      	bne.n	80012be <overcapacity_state+0x16>
        start_time = HAL_GetTick();
 80012b4:	f000 ff60 	bl	8002178 <HAL_GetTick>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a10      	ldr	r2, [pc, #64]	@ (80012fc <overcapacity_state+0x54>)
 80012bc:	6013      	str	r3, [r2, #0]
    }

    if (HAL_GetTick() - start_time < 2000) {
 80012be:	f000 ff5b 	bl	8002178 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <overcapacity_state+0x54>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80012ce:	d20c      	bcs.n	80012ea <overcapacity_state+0x42>
        Led_Strip(&ws, entryStrip, entryStripSize, "red");
 80012d0:	2213      	movs	r2, #19
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <overcapacity_state+0x58>)
 80012d4:	490b      	ldr	r1, [pc, #44]	@ (8001304 <overcapacity_state+0x5c>)
 80012d6:	480c      	ldr	r0, [pc, #48]	@ (8001308 <overcapacity_state+0x60>)
 80012d8:	f7ff fb4a 	bl	8000970 <Led_Strip>
        Led_Strip(&ws, exitStrip, exitStripSize, "red");
 80012dc:	2213      	movs	r2, #19
 80012de:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <overcapacity_state+0x58>)
 80012e0:	490a      	ldr	r1, [pc, #40]	@ (800130c <overcapacity_state+0x64>)
 80012e2:	4809      	ldr	r0, [pc, #36]	@ (8001308 <overcapacity_state+0x60>)
 80012e4:	f7ff fb44 	bl	8000970 <Led_Strip>
    } else {
        currentState = STATE_READY;
        start_time = 0; // Reset timer
    }
}
 80012e8:	e005      	b.n	80012f6 <overcapacity_state+0x4e>
        currentState = STATE_READY;
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <overcapacity_state+0x68>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
        start_time = 0; // Reset timer
 80012f0:	4b02      	ldr	r3, [pc, #8]	@ (80012fc <overcapacity_state+0x54>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20004168 	.word	0x20004168
 8001300:	08006148 	.word	0x08006148
 8001304:	20000258 	.word	0x20000258
 8001308:	20000408 	.word	0x20000408
 800130c:	200002a4 	.word	0x200002a4
 8001310:	20004110 	.word	0x20004110

08001314 <emergency_state>:

void emergency_state(void) {
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
    static uint32_t last_blink_time = 0;
    static int blink_count = 0;

    if (blink_count < 10) {
 8001318:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <emergency_state+0x90>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b09      	cmp	r3, #9
 800131e:	dc32      	bgt.n	8001386 <emergency_state+0x72>
        if (HAL_GetTick() - last_blink_time >= 500) {
 8001320:	f000 ff2a 	bl	8002178 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <emergency_state+0x94>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001330:	d335      	bcc.n	800139e <emergency_state+0x8a>
            last_blink_time = HAL_GetTick();
 8001332:	f000 ff21 	bl	8002178 <HAL_GetTick>
 8001336:	4603      	mov	r3, r0
 8001338:	4a1b      	ldr	r2, [pc, #108]	@ (80013a8 <emergency_state+0x94>)
 800133a:	6013      	str	r3, [r2, #0]
            if (blink_count % 2 == 0) {
 800133c:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <emergency_state+0x90>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10c      	bne.n	8001362 <emergency_state+0x4e>
                Led_Strip(&ws, entryStrip, entryStripSize, "red");
 8001348:	2213      	movs	r2, #19
 800134a:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <emergency_state+0x98>)
 800134c:	4918      	ldr	r1, [pc, #96]	@ (80013b0 <emergency_state+0x9c>)
 800134e:	4819      	ldr	r0, [pc, #100]	@ (80013b4 <emergency_state+0xa0>)
 8001350:	f7ff fb0e 	bl	8000970 <Led_Strip>
                Led_Strip(&ws, exitStrip, exitStripSize, "red");
 8001354:	2213      	movs	r2, #19
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <emergency_state+0x98>)
 8001358:	4917      	ldr	r1, [pc, #92]	@ (80013b8 <emergency_state+0xa4>)
 800135a:	4816      	ldr	r0, [pc, #88]	@ (80013b4 <emergency_state+0xa0>)
 800135c:	f7ff fb08 	bl	8000970 <Led_Strip>
 8001360:	e00b      	b.n	800137a <emergency_state+0x66>
            } else {
                Led_Strip(&ws, entryStrip, entryStripSize, "off");
 8001362:	2213      	movs	r2, #19
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <emergency_state+0xa8>)
 8001366:	4912      	ldr	r1, [pc, #72]	@ (80013b0 <emergency_state+0x9c>)
 8001368:	4812      	ldr	r0, [pc, #72]	@ (80013b4 <emergency_state+0xa0>)
 800136a:	f7ff fb01 	bl	8000970 <Led_Strip>
                Led_Strip(&ws, exitStrip, exitStripSize, "off");
 800136e:	2213      	movs	r2, #19
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <emergency_state+0xa8>)
 8001372:	4911      	ldr	r1, [pc, #68]	@ (80013b8 <emergency_state+0xa4>)
 8001374:	480f      	ldr	r0, [pc, #60]	@ (80013b4 <emergency_state+0xa0>)
 8001376:	f7ff fafb 	bl	8000970 <Led_Strip>
            }
            blink_count++;
 800137a:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <emergency_state+0x90>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4a08      	ldr	r2, [pc, #32]	@ (80013a4 <emergency_state+0x90>)
 8001382:	6013      	str	r3, [r2, #0]
        quarter_cycle_open(1);
        quarter_cycle_open(1);
        currentState = STATE_SLEEP;
        blink_count = 0;
    }
}
 8001384:	e00b      	b.n	800139e <emergency_state+0x8a>
        quarter_cycle_open(1);
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff fdfe 	bl	8000f88 <quarter_cycle_open>
        quarter_cycle_open(1);
 800138c:	2001      	movs	r0, #1
 800138e:	f7ff fdfb 	bl	8000f88 <quarter_cycle_open>
        currentState = STATE_SLEEP;
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <emergency_state+0xac>)
 8001394:	2205      	movs	r2, #5
 8001396:	701a      	strb	r2, [r3, #0]
        blink_count = 0;
 8001398:	4b02      	ldr	r3, [pc, #8]	@ (80013a4 <emergency_state+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000416c 	.word	0x2000416c
 80013a8:	20004170 	.word	0x20004170
 80013ac:	08006148 	.word	0x08006148
 80013b0:	20000258 	.word	0x20000258
 80013b4:	20000408 	.word	0x20000408
 80013b8:	200002a4 	.word	0x200002a4
 80013bc:	0800615c 	.word	0x0800615c
 80013c0:	20004110 	.word	0x20004110

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ca:	f000 fe7d 	bl	80020c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ce:	f000 f873 	bl	80014b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d2:	f7ff f971 	bl	80006b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80013d6:	f7ff f949 	bl	800066c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013da:	f000 fd2f 	bl	8001e3c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80013de:	f000 faf9 	bl	80019d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013e2:	f000 fb6d 	bl	8001ac0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80013e6:	f000 fcff 	bl	8001de8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80013ea:	f000 fd51 	bl	8001e90 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80013ee:	f000 fa7b 	bl	80018e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 80013f2:	4828      	ldr	r0, [pc, #160]	@ (8001494 <main+0xd0>)
 80013f4:	f002 f902 	bl	80035fc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80013f8:	2100      	movs	r1, #0
 80013fa:	4826      	ldr	r0, [pc, #152]	@ (8001494 <main+0xd0>)
 80013fc:	f002 f9a0 	bl	8003740 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001400:	2104      	movs	r1, #4
 8001402:	4824      	ldr	r0, [pc, #144]	@ (8001494 <main+0xd0>)
 8001404:	f002 f99c 	bl	8003740 <HAL_TIM_PWM_Start>
  WS28XX_Init(&ws, &htim3, 72, TIM_CHANNEL_1, LED_TOTAL);
 8001408:	f240 2342 	movw	r3, #578	@ 0x242
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2300      	movs	r3, #0
 8001410:	2248      	movs	r2, #72	@ 0x48
 8001412:	4921      	ldr	r1, [pc, #132]	@ (8001498 <main+0xd4>)
 8001414:	4821      	ldr	r0, [pc, #132]	@ (800149c <main+0xd8>)
 8001416:	f004 f825 	bl	8005464 <WS28XX_Init>


  // Start UART reception for RFID Reader (USART1)
  HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));
 800141a:	220e      	movs	r2, #14
 800141c:	4920      	ldr	r1, [pc, #128]	@ (80014a0 <main+0xdc>)
 800141e:	4821      	ldr	r0, [pc, #132]	@ (80014a4 <main+0xe0>)
 8001420:	f003 fa66 	bl	80048f0 <HAL_UART_Receive_IT>

  // Start UART reception for Additional UART (USART2)
  HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));
 8001424:	220e      	movs	r2, #14
 8001426:	491e      	ldr	r1, [pc, #120]	@ (80014a0 <main+0xdc>)
 8001428:	481f      	ldr	r0, [pc, #124]	@ (80014a8 <main+0xe4>)
 800142a:	f003 fa61 	bl	80048f0 <HAL_UART_Receive_IT>

  // Start UART reception for NOS response (USART3)
  HAL_UART_Receive_IT(&huart3, &responseData, 2);
 800142e:	2202      	movs	r2, #2
 8001430:	491e      	ldr	r1, [pc, #120]	@ (80014ac <main+0xe8>)
 8001432:	481f      	ldr	r0, [pc, #124]	@ (80014b0 <main+0xec>)
 8001434:	f003 fa5c 	bl	80048f0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		switch (currentState)
 8001438:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <main+0xf0>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b06      	cmp	r3, #6
 800143e:	d826      	bhi.n	800148e <main+0xca>
 8001440:	a201      	add	r2, pc, #4	@ (adr r2, 8001448 <main+0x84>)
 8001442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001446:	bf00      	nop
 8001448:	08001465 	.word	0x08001465
 800144c:	0800146b 	.word	0x0800146b
 8001450:	08001471 	.word	0x08001471
 8001454:	08001477 	.word	0x08001477
 8001458:	0800147d 	.word	0x0800147d
 800145c:	08001483 	.word	0x08001483
 8001460:	08001489 	.word	0x08001489
		{
			case STATE_READY:
				ready_state();
 8001464:	f7ff fe00 	bl	8001068 <ready_state>
				break;
 8001468:	e012      	b.n	8001490 <main+0xcc>
			case STATE_READING:
				reading_state();
 800146a:	f7ff fe0f 	bl	800108c <reading_state>
				break;
 800146e:	e00f      	b.n	8001490 <main+0xcc>
			case STATE_OPEN:
				open_state();
 8001470:	f7ff fe70 	bl	8001154 <open_state>
				break;
 8001474:	e00c      	b.n	8001490 <main+0xcc>
			case STATE_CLOSED:
				closed_state();
 8001476:	f7ff fecd 	bl	8001214 <closed_state>
				break;
 800147a:	e009      	b.n	8001490 <main+0xcc>
			// Leave other states empty for now
			case STATE_OVERCAPACITY:
				overcapacity_state();
 800147c:	f7ff ff14 	bl	80012a8 <overcapacity_state>
				break;
 8001480:	e006      	b.n	8001490 <main+0xcc>
			case STATE_SLEEP:
				sleep_state();
 8001482:	f7ff fef1 	bl	8001268 <sleep_state>
				break;
 8001486:	e003      	b.n	8001490 <main+0xcc>
			case STATE_EMERGENCY:
				emergency_state();
 8001488:	f7ff ff44 	bl	8001314 <emergency_state>
				break;
 800148c:	e000      	b.n	8001490 <main+0xcc>
			default:
				break;
 800148e:	bf00      	nop
		switch (currentState)
 8001490:	e7d2      	b.n	8001438 <main+0x74>
 8001492:	bf00      	nop
 8001494:	20004208 	.word	0x20004208
 8001498:	200041c0 	.word	0x200041c0
 800149c:	20000408 	.word	0x20000408
 80014a0:	20004114 	.word	0x20004114
 80014a4:	200042d8 	.word	0x200042d8
 80014a8:	20004320 	.word	0x20004320
 80014ac:	20004144 	.word	0x20004144
 80014b0:	20004368 	.word	0x20004368
 80014b4:	20004110 	.word	0x20004110

080014b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b090      	sub	sp, #64	@ 0x40
 80014bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014be:	f107 0318 	add.w	r3, r7, #24
 80014c2:	2228      	movs	r2, #40	@ 0x28
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f004 f9a2 	bl	8005810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014da:	2301      	movs	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014de:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80014e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e8:	2301      	movs	r3, #1
 80014ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ec:	2302      	movs	r3, #2
 80014ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fc:	f107 0318 	add.w	r3, r7, #24
 8001500:	4618      	mov	r0, r3
 8001502:	f001 fc1b 	bl	8002d3c <HAL_RCC_OscConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800150c:	f000 f8c0 	bl	8001690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001510:	230f      	movs	r3, #15
 8001512:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001514:	2302      	movs	r3, #2
 8001516:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001520:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2102      	movs	r1, #2
 800152a:	4618      	mov	r0, r3
 800152c:	f001 fe88 	bl	8003240 <HAL_RCC_ClockConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001536:	f000 f8ab 	bl	8001690 <Error_Handler>
  }
}
 800153a:	bf00      	nop
 800153c:	3740      	adds	r7, #64	@ 0x40
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) { // Data received from USART1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a41      	ldr	r2, [pc, #260]	@ (8001658 <HAL_UART_RxCpltCallback+0x114>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d12c      	bne.n	80015b0 <HAL_UART_RxCpltCallback+0x6c>
        // Process the received data
        for (int i = 0; i < 12; i++) {
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	e00b      	b.n	8001574 <HAL_UART_RxCpltCallback+0x30>
            processedData[i] = rxData[i + 1]; // Skip the start byte
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	3301      	adds	r3, #1
 8001560:	4a3e      	ldr	r2, [pc, #248]	@ (800165c <HAL_UART_RxCpltCallback+0x118>)
 8001562:	5cd1      	ldrb	r1, [r2, r3]
 8001564:	4a3e      	ldr	r2, [pc, #248]	@ (8001660 <HAL_UART_RxCpltCallback+0x11c>)
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	4413      	add	r3, r2
 800156a:	460a      	mov	r2, r1
 800156c:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 12; i++) {
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3301      	adds	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	2b0b      	cmp	r3, #11
 8001578:	ddf0      	ble.n	800155c <HAL_UART_RxCpltCallback+0x18>
        }

        uart_source = 1;
 800157a:	4b3a      	ldr	r3, [pc, #232]	@ (8001664 <HAL_UART_RxCpltCallback+0x120>)
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
        processedData[12] = uart_source + '0';
 8001580:	4b38      	ldr	r3, [pc, #224]	@ (8001664 <HAL_UART_RxCpltCallback+0x120>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3330      	adds	r3, #48	@ 0x30
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4b35      	ldr	r3, [pc, #212]	@ (8001660 <HAL_UART_RxCpltCallback+0x11c>)
 800158c:	731a      	strb	r2, [r3, #12]
        processedData[13] = '\0'; // Null-terminate the string
 800158e:	4b34      	ldr	r3, [pc, #208]	@ (8001660 <HAL_UART_RxCpltCallback+0x11c>)
 8001590:	2200      	movs	r2, #0
 8001592:	735a      	strb	r2, [r3, #13]

        // Use sprintf to format usermsg with identification flag
        sprintf(usermsg, "%s", processedData);
 8001594:	4a32      	ldr	r2, [pc, #200]	@ (8001660 <HAL_UART_RxCpltCallback+0x11c>)
 8001596:	4934      	ldr	r1, [pc, #208]	@ (8001668 <HAL_UART_RxCpltCallback+0x124>)
 8001598:	4834      	ldr	r0, [pc, #208]	@ (800166c <HAL_UART_RxCpltCallback+0x128>)
 800159a:	f004 f919 	bl	80057d0 <siprintf>

        flag_rev = 1; // Set flag to indicate data has been received
 800159e:	4b34      	ldr	r3, [pc, #208]	@ (8001670 <HAL_UART_RxCpltCallback+0x12c>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]

        // Re-enable UART reception for USART1
        HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));
 80015a4:	220e      	movs	r2, #14
 80015a6:	492d      	ldr	r1, [pc, #180]	@ (800165c <HAL_UART_RxCpltCallback+0x118>)
 80015a8:	4832      	ldr	r0, [pc, #200]	@ (8001674 <HAL_UART_RxCpltCallback+0x130>)
 80015aa:	f003 f9a1 	bl	80048f0 <HAL_UART_Receive_IT>


        // Re-enable UART reception
        HAL_UART_Receive_IT(&huart3,  rxData, sizeof(rxData));
    }
}
 80015ae:	e04e      	b.n	800164e <HAL_UART_RxCpltCallback+0x10a>
    else if (huart->Instance == USART2) { // Data received from USART2
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a30      	ldr	r2, [pc, #192]	@ (8001678 <HAL_UART_RxCpltCallback+0x134>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d118      	bne.n	80015ec <HAL_UART_RxCpltCallback+0xa8>
        char receivedCommandChar = responseData[0];  // First character is the command
 80015ba:	4b30      	ldr	r3, [pc, #192]	@ (800167c <HAL_UART_RxCpltCallback+0x138>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	75fb      	strb	r3, [r7, #23]
        char receivedTurnstileIDChar = responseData[1];  // Second character is the Turnstile ID
 80015c0:	4b2e      	ldr	r3, [pc, #184]	@ (800167c <HAL_UART_RxCpltCallback+0x138>)
 80015c2:	785b      	ldrb	r3, [r3, #1]
 80015c4:	75bb      	strb	r3, [r7, #22]
        int receivedCommand = receivedCommandChar - '0';  // Convert Command to integer
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	3b30      	subs	r3, #48	@ 0x30
 80015ca:	613b      	str	r3, [r7, #16]
        int receivedTurnstileID = receivedTurnstileIDChar - '0';  // Convert ID to integer
 80015cc:	7dbb      	ldrb	r3, [r7, #22]
 80015ce:	3b30      	subs	r3, #48	@ 0x30
 80015d0:	60fb      	str	r3, [r7, #12]
        if (receivedTurnstileID == TURNSTILE_ID) {  // Process only if ID matches
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d103      	bne.n	80015e0 <HAL_UART_RxCpltCallback+0x9c>
            intresponseData = receivedCommand;  // Store the command
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b28      	ldr	r3, [pc, #160]	@ (8001680 <HAL_UART_RxCpltCallback+0x13c>)
 80015de:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, responseData, 2);
 80015e0:	2202      	movs	r2, #2
 80015e2:	4926      	ldr	r1, [pc, #152]	@ (800167c <HAL_UART_RxCpltCallback+0x138>)
 80015e4:	4827      	ldr	r0, [pc, #156]	@ (8001684 <HAL_UART_RxCpltCallback+0x140>)
 80015e6:	f003 f983 	bl	80048f0 <HAL_UART_Receive_IT>
}
 80015ea:	e030      	b.n	800164e <HAL_UART_RxCpltCallback+0x10a>
    else if (huart->Instance == USART3) {  // USART3 Interrupt
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a25      	ldr	r2, [pc, #148]	@ (8001688 <HAL_UART_RxCpltCallback+0x144>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12b      	bne.n	800164e <HAL_UART_RxCpltCallback+0x10a>
        for (int i = 0; i < 12; i++) {
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	e00b      	b.n	8001614 <HAL_UART_RxCpltCallback+0xd0>
            processedData[i] = rxData[i + 1]; // Skip the start byte
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	3301      	adds	r3, #1
 8001600:	4a16      	ldr	r2, [pc, #88]	@ (800165c <HAL_UART_RxCpltCallback+0x118>)
 8001602:	5cd1      	ldrb	r1, [r2, r3]
 8001604:	4a16      	ldr	r2, [pc, #88]	@ (8001660 <HAL_UART_RxCpltCallback+0x11c>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4413      	add	r3, r2
 800160a:	460a      	mov	r2, r1
 800160c:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 12; i++) {
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	3301      	adds	r3, #1
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2b0b      	cmp	r3, #11
 8001618:	ddf0      	ble.n	80015fc <HAL_UART_RxCpltCallback+0xb8>
        uart_source = 2;
 800161a:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_UART_RxCpltCallback+0x120>)
 800161c:	2202      	movs	r2, #2
 800161e:	701a      	strb	r2, [r3, #0]
		processedData[12] = uart_source + '0';
 8001620:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <HAL_UART_RxCpltCallback+0x120>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	3330      	adds	r3, #48	@ 0x30
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <HAL_UART_RxCpltCallback+0x11c>)
 800162c:	731a      	strb	r2, [r3, #12]
		processedData[13] = '\0'; // Null-terminate the string
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <HAL_UART_RxCpltCallback+0x11c>)
 8001630:	2200      	movs	r2, #0
 8001632:	735a      	strb	r2, [r3, #13]
        sprintf(usermsg, "%s", processedData);
 8001634:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <HAL_UART_RxCpltCallback+0x11c>)
 8001636:	490c      	ldr	r1, [pc, #48]	@ (8001668 <HAL_UART_RxCpltCallback+0x124>)
 8001638:	480c      	ldr	r0, [pc, #48]	@ (800166c <HAL_UART_RxCpltCallback+0x128>)
 800163a:	f004 f8c9 	bl	80057d0 <siprintf>
        flag_rev = 1; // Set flag to indicate data has been received
 800163e:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <HAL_UART_RxCpltCallback+0x12c>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart3,  rxData, sizeof(rxData));
 8001644:	220e      	movs	r2, #14
 8001646:	4905      	ldr	r1, [pc, #20]	@ (800165c <HAL_UART_RxCpltCallback+0x118>)
 8001648:	4810      	ldr	r0, [pc, #64]	@ (800168c <HAL_UART_RxCpltCallback+0x148>)
 800164a:	f003 f951 	bl	80048f0 <HAL_UART_Receive_IT>
}
 800164e:	bf00      	nop
 8001650:	3720      	adds	r7, #32
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40013800 	.word	0x40013800
 800165c:	20004114 	.word	0x20004114
 8001660:	20004124 	.word	0x20004124
 8001664:	20004143 	.word	0x20004143
 8001668:	08006160 	.word	0x08006160
 800166c:	20004134 	.word	0x20004134
 8001670:	20004142 	.word	0x20004142
 8001674:	200042d8 	.word	0x200042d8
 8001678:	40004400 	.word	0x40004400
 800167c:	20004144 	.word	0x20004144
 8001680:	20004146 	.word	0x20004146
 8001684:	20004320 	.word	0x20004320
 8001688:	40004800 	.word	0x40004800
 800168c:	20004368 	.word	0x20004368

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b0a5      	sub	sp, #148	@ 0x94
 8001694:	af02      	add	r7, sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001696:	b672      	cpsid	i
}
 8001698:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    uint32_t error_start_time = HAL_GetTick();
 800169a:	f000 fd6d 	bl	8002178 <HAL_GetTick>
 800169e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

    while (1) {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Indicate error
 80016a2:	2180      	movs	r1, #128	@ 0x80
 80016a4:	4816      	ldr	r0, [pc, #88]	@ (8001700 <Error_Handler+0x70>)
 80016a6:	f001 fafb 	bl	8002ca0 <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 80016aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016ae:	f000 fd6d 	bl	800218c <HAL_Delay>

        char error_msg[128];
        snprintf(error_msg, sizeof(error_msg), "Error in state: %d, time: %lu\n", currentState, HAL_GetTick());
 80016b2:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <Error_Handler+0x74>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461c      	mov	r4, r3
 80016b8:	f000 fd5e 	bl	8002178 <HAL_GetTick>
 80016bc:	4603      	mov	r3, r0
 80016be:	1d38      	adds	r0, r7, #4
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	4623      	mov	r3, r4
 80016c4:	4a10      	ldr	r2, [pc, #64]	@ (8001708 <Error_Handler+0x78>)
 80016c6:	2180      	movs	r1, #128	@ 0x80
 80016c8:	f004 f84e 	bl	8005768 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fd3c 	bl	800014c <strlen>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	1d39      	adds	r1, r7, #4
 80016da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016de:	480b      	ldr	r0, [pc, #44]	@ (800170c <Error_Handler+0x7c>)
 80016e0:	f003 f846 	bl	8004770 <HAL_UART_Transmit>

        if (HAL_GetTick() - error_start_time > 10000) {  // Reset system after prolonged error
 80016e4:	f000 fd48 	bl	8002178 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d9d4      	bls.n	80016a2 <Error_Handler+0x12>
            HAL_NVIC_SystemReset();
 80016f8:	f000 fe83 	bl	8002402 <HAL_NVIC_SystemReset>
    while (1) {
 80016fc:	e7d1      	b.n	80016a2 <Error_Handler+0x12>
 80016fe:	bf00      	nop
 8001700:	40010c00 	.word	0x40010c00
 8001704:	20004110 	.word	0x20004110
 8001708:	08006164 	.word	0x08006164
 800170c:	20004368 	.word	0x20004368

08001710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001716:	4b15      	ldr	r3, [pc, #84]	@ (800176c <HAL_MspInit+0x5c>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	4a14      	ldr	r2, [pc, #80]	@ (800176c <HAL_MspInit+0x5c>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6193      	str	r3, [r2, #24]
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_MspInit+0x5c>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <HAL_MspInit+0x5c>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	4a0e      	ldr	r2, [pc, #56]	@ (800176c <HAL_MspInit+0x5c>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001738:	61d3      	str	r3, [r2, #28]
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <HAL_MspInit+0x5c>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <HAL_MspInit+0x60>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_MspInit+0x60>)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	40021000 	.word	0x40021000
 8001770:	40010000 	.word	0x40010000

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <NMI_Handler+0x4>

0800177c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <HardFault_Handler+0x4>

08001784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <MemManage_Handler+0x4>

0800178c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <UsageFault_Handler+0x4>

0800179c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c4:	f000 fcc6 	bl	8002154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Pin);
 80017d0:	2004      	movs	r0, #4
 80017d2:	f001 fa7f 	bl	8002cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <DMA1_Channel5_IRQHandler+0x10>)
 80017e2:	f000 ff8d 	bl	8002700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20004250 	.word	0x20004250

080017f0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <DMA1_Channel6_IRQHandler+0x10>)
 80017f6:	f000 ff83 	bl	8002700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20004294 	.word	0x20004294

08001804 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <USART1_IRQHandler+0x10>)
 800180a:	f003 f897 	bl	800493c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200042d8 	.word	0x200042d8

08001818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <USART2_IRQHandler+0x10>)
 800181e:	f003 f88d 	bl	800493c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20004320 	.word	0x20004320

0800182c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <USART3_IRQHandler+0x10>)
 8001832:	f003 f883 	bl	800493c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20004368 	.word	0x20004368

08001840 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_1A_Pin);
 8001844:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001848:	f001 fa44 	bl	8002cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_1B_Pin);
 800184c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001850:	f001 fa40 	bl	8002cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001854:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001858:	f001 fa3c 	bl	8002cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_2A_Pin);
 800185c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001860:	f001 fa38 	bl	8002cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_2B_Pin);
 8001864:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001868:	f001 fa34 	bl	8002cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	@ (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f003 ffbe 	bl	8005820 <__errno>
 80018a4:	4603      	mov	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <_sbrk+0x64>)
 80018c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20005000 	.word	0x20005000
 80018d0:	00000400 	.word	0x00000400
 80018d4:	20004174 	.word	0x20004174
 80018d8:	20004500 	.word	0x20004500

080018dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08e      	sub	sp, #56	@ 0x38
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	f107 0320 	add.w	r3, r7, #32
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
 8001914:	615a      	str	r2, [r3, #20]
 8001916:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001918:	4b2d      	ldr	r3, [pc, #180]	@ (80019d0 <MX_TIM2_Init+0xe8>)
 800191a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800191e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001920:	4b2b      	ldr	r3, [pc, #172]	@ (80019d0 <MX_TIM2_Init+0xe8>)
 8001922:	2200      	movs	r2, #0
 8001924:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001926:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <MX_TIM2_Init+0xe8>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800192c:	4b28      	ldr	r3, [pc, #160]	@ (80019d0 <MX_TIM2_Init+0xe8>)
 800192e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001932:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001934:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <MX_TIM2_Init+0xe8>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b25      	ldr	r3, [pc, #148]	@ (80019d0 <MX_TIM2_Init+0xe8>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001940:	4823      	ldr	r0, [pc, #140]	@ (80019d0 <MX_TIM2_Init+0xe8>)
 8001942:	f001 fe0b 	bl	800355c <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800194c:	f7ff fea0 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001956:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800195a:	4619      	mov	r1, r3
 800195c:	481c      	ldr	r0, [pc, #112]	@ (80019d0 <MX_TIM2_Init+0xe8>)
 800195e:	f002 f9f5 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001968:	f7ff fe92 	bl	8001690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800196c:	4818      	ldr	r0, [pc, #96]	@ (80019d0 <MX_TIM2_Init+0xe8>)
 800196e:	f001 fe8f 	bl	8003690 <HAL_TIM_PWM_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001978:	f7ff fe8a 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001984:	f107 0320 	add.w	r3, r7, #32
 8001988:	4619      	mov	r1, r3
 800198a:	4811      	ldr	r0, [pc, #68]	@ (80019d0 <MX_TIM2_Init+0xe8>)
 800198c:	f002 fe42 	bl	8004614 <HAL_TIMEx_MasterConfigSynchronization>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001996:	f7ff fe7b 	bl	8001690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800199a:	2360      	movs	r3, #96	@ 0x60
 800199c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2200      	movs	r2, #0
 80019ae:	4619      	mov	r1, r3
 80019b0:	4807      	ldr	r0, [pc, #28]	@ (80019d0 <MX_TIM2_Init+0xe8>)
 80019b2:	f002 f909 	bl	8003bc8 <HAL_TIM_PWM_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019bc:	f7ff fe68 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019c0:	4803      	ldr	r0, [pc, #12]	@ (80019d0 <MX_TIM2_Init+0xe8>)
 80019c2:	f000 f99f 	bl	8001d04 <HAL_TIM_MspPostInit>

}
 80019c6:	bf00      	nop
 80019c8:	3738      	adds	r7, #56	@ 0x38
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20004178 	.word	0x20004178

080019d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08e      	sub	sp, #56	@ 0x38
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	f107 0320 	add.w	r3, r7, #32
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
 8001a00:	615a      	str	r2, [r3, #20]
 8001a02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a04:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab8 <MX_TIM3_Init+0xe4>)
 8001a06:	4a2d      	ldr	r2, [pc, #180]	@ (8001abc <MX_TIM3_Init+0xe8>)
 8001a08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab8 <MX_TIM3_Init+0xe4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a10:	4b29      	ldr	r3, [pc, #164]	@ (8001ab8 <MX_TIM3_Init+0xe4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a16:	4b28      	ldr	r3, [pc, #160]	@ (8001ab8 <MX_TIM3_Init+0xe4>)
 8001a18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1e:	4b26      	ldr	r3, [pc, #152]	@ (8001ab8 <MX_TIM3_Init+0xe4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a24:	4b24      	ldr	r3, [pc, #144]	@ (8001ab8 <MX_TIM3_Init+0xe4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a2a:	4823      	ldr	r0, [pc, #140]	@ (8001ab8 <MX_TIM3_Init+0xe4>)
 8001a2c:	f001 fd96 	bl	800355c <HAL_TIM_Base_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a36:	f7ff fe2b 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a44:	4619      	mov	r1, r3
 8001a46:	481c      	ldr	r0, [pc, #112]	@ (8001ab8 <MX_TIM3_Init+0xe4>)
 8001a48:	f002 f980 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a52:	f7ff fe1d 	bl	8001690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a56:	4818      	ldr	r0, [pc, #96]	@ (8001ab8 <MX_TIM3_Init+0xe4>)
 8001a58:	f001 fe1a 	bl	8003690 <HAL_TIM_PWM_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a62:	f7ff fe15 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a6e:	f107 0320 	add.w	r3, r7, #32
 8001a72:	4619      	mov	r1, r3
 8001a74:	4810      	ldr	r0, [pc, #64]	@ (8001ab8 <MX_TIM3_Init+0xe4>)
 8001a76:	f002 fdcd 	bl	8004614 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a80:	f7ff fe06 	bl	8001690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a84:	2360      	movs	r3, #96	@ 0x60
 8001a86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2200      	movs	r2, #0
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4807      	ldr	r0, [pc, #28]	@ (8001ab8 <MX_TIM3_Init+0xe4>)
 8001a9c:	f002 f894 	bl	8003bc8 <HAL_TIM_PWM_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001aa6:	f7ff fdf3 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001aaa:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <MX_TIM3_Init+0xe4>)
 8001aac:	f000 f92a 	bl	8001d04 <HAL_TIM_MspPostInit>

}
 8001ab0:	bf00      	nop
 8001ab2:	3738      	adds	r7, #56	@ 0x38
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200041c0 	.word	0x200041c0
 8001abc:	40000400 	.word	0x40000400

08001ac0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08e      	sub	sp, #56	@ 0x38
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
 8001aec:	615a      	str	r2, [r3, #20]
 8001aee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001af0:	4b32      	ldr	r3, [pc, #200]	@ (8001bbc <MX_TIM4_Init+0xfc>)
 8001af2:	4a33      	ldr	r2, [pc, #204]	@ (8001bc0 <MX_TIM4_Init+0x100>)
 8001af4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001af6:	4b31      	ldr	r3, [pc, #196]	@ (8001bbc <MX_TIM4_Init+0xfc>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afc:	4b2f      	ldr	r3, [pc, #188]	@ (8001bbc <MX_TIM4_Init+0xfc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001b02:	4b2e      	ldr	r3, [pc, #184]	@ (8001bbc <MX_TIM4_Init+0xfc>)
 8001b04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bbc <MX_TIM4_Init+0xfc>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b10:	4b2a      	ldr	r3, [pc, #168]	@ (8001bbc <MX_TIM4_Init+0xfc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b16:	4829      	ldr	r0, [pc, #164]	@ (8001bbc <MX_TIM4_Init+0xfc>)
 8001b18:	f001 fd20 	bl	800355c <HAL_TIM_Base_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b22:	f7ff fdb5 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b30:	4619      	mov	r1, r3
 8001b32:	4822      	ldr	r0, [pc, #136]	@ (8001bbc <MX_TIM4_Init+0xfc>)
 8001b34:	f002 f90a 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001b3e:	f7ff fda7 	bl	8001690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b42:	481e      	ldr	r0, [pc, #120]	@ (8001bbc <MX_TIM4_Init+0xfc>)
 8001b44:	f001 fda4 	bl	8003690 <HAL_TIM_PWM_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b4e:	f7ff fd9f 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b5a:	f107 0320 	add.w	r3, r7, #32
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4816      	ldr	r0, [pc, #88]	@ (8001bbc <MX_TIM4_Init+0xfc>)
 8001b62:	f002 fd57 	bl	8004614 <HAL_TIMEx_MasterConfigSynchronization>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b6c:	f7ff fd90 	bl	8001690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b70:	2360      	movs	r3, #96	@ 0x60
 8001b72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	4619      	mov	r1, r3
 8001b86:	480d      	ldr	r0, [pc, #52]	@ (8001bbc <MX_TIM4_Init+0xfc>)
 8001b88:	f002 f81e 	bl	8003bc8 <HAL_TIM_PWM_ConfigChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001b92:	f7ff fd7d 	bl	8001690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2204      	movs	r2, #4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4807      	ldr	r0, [pc, #28]	@ (8001bbc <MX_TIM4_Init+0xfc>)
 8001b9e:	f002 f813 	bl	8003bc8 <HAL_TIM_PWM_ConfigChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001ba8:	f7ff fd72 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001bac:	4803      	ldr	r0, [pc, #12]	@ (8001bbc <MX_TIM4_Init+0xfc>)
 8001bae:	f000 f8a9 	bl	8001d04 <HAL_TIM_MspPostInit>

}
 8001bb2:	bf00      	nop
 8001bb4:	3738      	adds	r7, #56	@ 0x38
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20004208 	.word	0x20004208
 8001bc0:	40000800 	.word	0x40000800

08001bc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bd4:	d133      	bne.n	8001c3e <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd6:	4b44      	ldr	r3, [pc, #272]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x124>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a43      	ldr	r2, [pc, #268]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x124>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b41      	ldr	r3, [pc, #260]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x124>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001bee:	4b3f      	ldr	r3, [pc, #252]	@ (8001cec <HAL_TIM_Base_MspInit+0x128>)
 8001bf0:	4a3f      	ldr	r2, [pc, #252]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x12c>)
 8001bf2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bf4:	4b3d      	ldr	r3, [pc, #244]	@ (8001cec <HAL_TIM_Base_MspInit+0x128>)
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfa:	4b3c      	ldr	r3, [pc, #240]	@ (8001cec <HAL_TIM_Base_MspInit+0x128>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c00:	4b3a      	ldr	r3, [pc, #232]	@ (8001cec <HAL_TIM_Base_MspInit+0x128>)
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c06:	4b39      	ldr	r3, [pc, #228]	@ (8001cec <HAL_TIM_Base_MspInit+0x128>)
 8001c08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c0c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c0e:	4b37      	ldr	r3, [pc, #220]	@ (8001cec <HAL_TIM_Base_MspInit+0x128>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001c14:	4b35      	ldr	r3, [pc, #212]	@ (8001cec <HAL_TIM_Base_MspInit+0x128>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c1a:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <HAL_TIM_Base_MspInit+0x128>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001c20:	4832      	ldr	r0, [pc, #200]	@ (8001cec <HAL_TIM_Base_MspInit+0x128>)
 8001c22:	f000 fbff 	bl	8002424 <HAL_DMA_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8001c2c:	f7ff fd30 	bl	8001690 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a2e      	ldr	r2, [pc, #184]	@ (8001cec <HAL_TIM_Base_MspInit+0x128>)
 8001c34:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c36:	4a2d      	ldr	r2, [pc, #180]	@ (8001cec <HAL_TIM_Base_MspInit+0x128>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c3c:	e04f      	b.n	8001cde <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM3)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a2c      	ldr	r2, [pc, #176]	@ (8001cf4 <HAL_TIM_Base_MspInit+0x130>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d139      	bne.n	8001cbc <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c48:	4b27      	ldr	r3, [pc, #156]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x124>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	4a26      	ldr	r2, [pc, #152]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x124>)
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	61d3      	str	r3, [r2, #28]
 8001c54:	4b24      	ldr	r3, [pc, #144]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x124>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001c60:	4b25      	ldr	r3, [pc, #148]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x134>)
 8001c62:	4a26      	ldr	r2, [pc, #152]	@ (8001cfc <HAL_TIM_Base_MspInit+0x138>)
 8001c64:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c66:	4b24      	ldr	r3, [pc, #144]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x134>)
 8001c68:	2210      	movs	r2, #16
 8001c6a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c6c:	4b22      	ldr	r3, [pc, #136]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x134>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001c72:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x134>)
 8001c74:	2280      	movs	r2, #128	@ 0x80
 8001c76:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c78:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x134>)
 8001c7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c7e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x134>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001c86:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x134>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x134>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001c92:	4819      	ldr	r0, [pc, #100]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x134>)
 8001c94:	f000 fbc6 	bl	8002424 <HAL_DMA_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_TIM_Base_MspInit+0xde>
      Error_Handler();
 8001c9e:	f7ff fcf7 	bl	8001690 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a14      	ldr	r2, [pc, #80]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x134>)
 8001ca6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ca8:	4a13      	ldr	r2, [pc, #76]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x134>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a11      	ldr	r2, [pc, #68]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x134>)
 8001cb2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cb4:	4a10      	ldr	r2, [pc, #64]	@ (8001cf8 <HAL_TIM_Base_MspInit+0x134>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001cba:	e010      	b.n	8001cde <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM4)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d00 <HAL_TIM_Base_MspInit+0x13c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d10b      	bne.n	8001cde <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cc6:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x124>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	4a07      	ldr	r2, [pc, #28]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x124>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	61d3      	str	r3, [r2, #28]
 8001cd2:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x124>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	20004250 	.word	0x20004250
 8001cf0:	40020058 	.word	0x40020058
 8001cf4:	40000400 	.word	0x40000400
 8001cf8:	20004294 	.word	0x20004294
 8001cfc:	4002006c 	.word	0x4002006c
 8001d00:	40000800 	.word	0x40000800

08001d04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	@ 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0318 	add.w	r3, r7, #24
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d22:	d118      	bne.n	8001d56 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d24:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd4 <HAL_TIM_MspPostInit+0xd0>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a2a      	ldr	r2, [pc, #168]	@ (8001dd4 <HAL_TIM_MspPostInit+0xd0>)
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b28      	ldr	r3, [pc, #160]	@ (8001dd4 <HAL_TIM_MspPostInit+0xd0>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2302      	movs	r3, #2
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	f107 0318 	add.w	r3, r7, #24
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4822      	ldr	r0, [pc, #136]	@ (8001dd8 <HAL_TIM_MspPostInit+0xd4>)
 8001d50:	f000 fe0a 	bl	8002968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d54:	e03a      	b.n	8001dcc <HAL_TIM_MspPostInit+0xc8>
  else if(timHandle->Instance==TIM3)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a20      	ldr	r2, [pc, #128]	@ (8001ddc <HAL_TIM_MspPostInit+0xd8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d118      	bne.n	8001d92 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d60:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd4 <HAL_TIM_MspPostInit+0xd0>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd4 <HAL_TIM_MspPostInit+0xd0>)
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <HAL_TIM_MspPostInit+0xd0>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d78:	2340      	movs	r3, #64	@ 0x40
 8001d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2302      	movs	r3, #2
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 0318 	add.w	r3, r7, #24
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4813      	ldr	r0, [pc, #76]	@ (8001dd8 <HAL_TIM_MspPostInit+0xd4>)
 8001d8c:	f000 fdec 	bl	8002968 <HAL_GPIO_Init>
}
 8001d90:	e01c      	b.n	8001dcc <HAL_TIM_MspPostInit+0xc8>
  else if(timHandle->Instance==TIM4)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a12      	ldr	r2, [pc, #72]	@ (8001de0 <HAL_TIM_MspPostInit+0xdc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d117      	bne.n	8001dcc <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <HAL_TIM_MspPostInit+0xd0>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd4 <HAL_TIM_MspPostInit+0xd0>)
 8001da2:	f043 0308 	orr.w	r3, r3, #8
 8001da6:	6193      	str	r3, [r2, #24]
 8001da8:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <HAL_TIM_MspPostInit+0xd0>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001db4:	23c0      	movs	r3, #192	@ 0xc0
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	f107 0318 	add.w	r3, r7, #24
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4807      	ldr	r0, [pc, #28]	@ (8001de4 <HAL_TIM_MspPostInit+0xe0>)
 8001dc8:	f000 fdce 	bl	8002968 <HAL_GPIO_Init>
}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	@ 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40010800 	.word	0x40010800
 8001ddc:	40000400 	.word	0x40000400
 8001de0:	40000800 	.word	0x40000800
 8001de4:	40010c00 	.word	0x40010c00

08001de8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	@ (8001e38 <MX_USART1_UART_Init+0x50>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001df4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001df8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e20:	f002 fc56 	bl	80046d0 <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e2a:	f7ff fc31 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200042d8 	.word	0x200042d8
 8001e38:	40013800 	.word	0x40013800

08001e3c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <MX_USART2_UART_Init+0x50>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e48:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e74:	f002 fc2c 	bl	80046d0 <HAL_UART_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e7e:	f7ff fc07 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20004320 	.word	0x20004320
 8001e8c:	40004400 	.word	0x40004400

08001e90 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e94:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001e96:	4a12      	ldr	r2, [pc, #72]	@ (8001ee0 <MX_USART3_UART_Init+0x50>)
 8001e98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e9a:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001e9c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ea0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ec6:	4805      	ldr	r0, [pc, #20]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001ec8:	f002 fc02 	bl	80046d0 <HAL_UART_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ed2:	f7ff fbdd 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20004368 	.word	0x20004368
 8001ee0:	40004800 	.word	0x40004800

08001ee4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	@ 0x30
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0320 	add.w	r3, r7, #32
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a59      	ldr	r2, [pc, #356]	@ (8002064 <HAL_UART_MspInit+0x180>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d13a      	bne.n	8001f7a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f04:	4b58      	ldr	r3, [pc, #352]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4a57      	ldr	r2, [pc, #348]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8001f0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f0e:	6193      	str	r3, [r2, #24]
 8001f10:	4b55      	ldr	r3, [pc, #340]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1c:	4b52      	ldr	r3, [pc, #328]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a51      	ldr	r2, [pc, #324]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b4f      	ldr	r3, [pc, #316]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 0320 	add.w	r3, r7, #32
 8001f46:	4619      	mov	r1, r3
 8001f48:	4848      	ldr	r0, [pc, #288]	@ (800206c <HAL_UART_MspInit+0x188>)
 8001f4a:	f000 fd0d 	bl	8002968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 0320 	add.w	r3, r7, #32
 8001f60:	4619      	mov	r1, r3
 8001f62:	4842      	ldr	r0, [pc, #264]	@ (800206c <HAL_UART_MspInit+0x188>)
 8001f64:	f000 fd00 	bl	8002968 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2025      	movs	r0, #37	@ 0x25
 8001f6e:	f000 fa1e 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f72:	2025      	movs	r0, #37	@ 0x25
 8001f74:	f000 fa37 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f78:	e070      	b.n	800205c <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a3c      	ldr	r2, [pc, #240]	@ (8002070 <HAL_UART_MspInit+0x18c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d12c      	bne.n	8001fde <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f84:	4b38      	ldr	r3, [pc, #224]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	4a37      	ldr	r2, [pc, #220]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8001f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f8e:	61d3      	str	r3, [r2, #28]
 8001f90:	4b35      	ldr	r3, [pc, #212]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9c:	4b32      	ldr	r3, [pc, #200]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a31      	ldr	r2, [pc, #196]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fb4:	230c      	movs	r3, #12
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc0:	f107 0320 	add.w	r3, r7, #32
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4829      	ldr	r0, [pc, #164]	@ (800206c <HAL_UART_MspInit+0x188>)
 8001fc8:	f000 fcce 	bl	8002968 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2026      	movs	r0, #38	@ 0x26
 8001fd2:	f000 f9ec 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fd6:	2026      	movs	r0, #38	@ 0x26
 8001fd8:	f000 fa05 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 8001fdc:	e03e      	b.n	800205c <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART3)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a24      	ldr	r2, [pc, #144]	@ (8002074 <HAL_UART_MspInit+0x190>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d139      	bne.n	800205c <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	4a1e      	ldr	r2, [pc, #120]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8001fee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ff2:	61d3      	str	r3, [r2, #28]
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002000:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <HAL_UART_MspInit+0x184>)
 8002006:	f043 0308 	orr.w	r3, r3, #8
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <HAL_UART_MspInit+0x184>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800201c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002022:	2303      	movs	r3, #3
 8002024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 0320 	add.w	r3, r7, #32
 800202a:	4619      	mov	r1, r3
 800202c:	4812      	ldr	r0, [pc, #72]	@ (8002078 <HAL_UART_MspInit+0x194>)
 800202e:	f000 fc9b 	bl	8002968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002032:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002038:	2300      	movs	r3, #0
 800203a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 0320 	add.w	r3, r7, #32
 8002044:	4619      	mov	r1, r3
 8002046:	480c      	ldr	r0, [pc, #48]	@ (8002078 <HAL_UART_MspInit+0x194>)
 8002048:	f000 fc8e 	bl	8002968 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2100      	movs	r1, #0
 8002050:	2027      	movs	r0, #39	@ 0x27
 8002052:	f000 f9ac 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002056:	2027      	movs	r0, #39	@ 0x27
 8002058:	f000 f9c5 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 800205c:	bf00      	nop
 800205e:	3730      	adds	r7, #48	@ 0x30
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40013800 	.word	0x40013800
 8002068:	40021000 	.word	0x40021000
 800206c:	40010800 	.word	0x40010800
 8002070:	40004400 	.word	0x40004400
 8002074:	40004800 	.word	0x40004800
 8002078:	40010c00 	.word	0x40010c00

0800207c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800207c:	f7ff fc2e 	bl	80018dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002080:	480b      	ldr	r0, [pc, #44]	@ (80020b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002082:	490c      	ldr	r1, [pc, #48]	@ (80020b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002084:	4a0c      	ldr	r2, [pc, #48]	@ (80020b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002088:	e002      	b.n	8002090 <LoopCopyDataInit>

0800208a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800208c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208e:	3304      	adds	r3, #4

08002090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002094:	d3f9      	bcc.n	800208a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002096:	4a09      	ldr	r2, [pc, #36]	@ (80020bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002098:	4c09      	ldr	r4, [pc, #36]	@ (80020c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800209c:	e001      	b.n	80020a2 <LoopFillZerobss>

0800209e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a0:	3204      	adds	r2, #4

080020a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a4:	d3fb      	bcc.n	800209e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020a6:	f003 fbc1 	bl	800582c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020aa:	f7ff f98b 	bl	80013c4 <main>
  bx lr
 80020ae:	4770      	bx	lr
  ldr r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b4:	200003ec 	.word	0x200003ec
  ldr r2, =_sidata
 80020b8:	080062f4 	.word	0x080062f4
  ldr r2, =_sbss
 80020bc:	200003ec 	.word	0x200003ec
  ldr r4, =_ebss
 80020c0:	200044fc 	.word	0x200044fc

080020c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c4:	e7fe      	b.n	80020c4 <ADC1_2_IRQHandler>
	...

080020c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <HAL_Init+0x28>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a07      	ldr	r2, [pc, #28]	@ (80020f0 <HAL_Init+0x28>)
 80020d2:	f043 0310 	orr.w	r3, r3, #16
 80020d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d8:	2003      	movs	r0, #3
 80020da:	f000 f95d 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020de:	2000      	movs	r0, #0
 80020e0:	f000 f808 	bl	80020f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e4:	f7ff fb14 	bl	8001710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40022000 	.word	0x40022000

080020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020fc:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <HAL_InitTick+0x54>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_InitTick+0x58>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210a:	fbb3 f3f1 	udiv	r3, r3, r1
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f979 	bl	800240a <HAL_SYSTICK_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e00e      	b.n	8002140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b0f      	cmp	r3, #15
 8002126:	d80a      	bhi.n	800213e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002128:	2200      	movs	r2, #0
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002130:	f000 f93d 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002134:	4a06      	ldr	r2, [pc, #24]	@ (8002150 <HAL_InitTick+0x5c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000390 	.word	0x20000390
 800214c:	20000398 	.word	0x20000398
 8002150:	20000394 	.word	0x20000394

08002154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002158:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <HAL_IncTick+0x1c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <HAL_IncTick+0x20>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4413      	add	r3, r2
 8002164:	4a03      	ldr	r2, [pc, #12]	@ (8002174 <HAL_IncTick+0x20>)
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	20000398 	.word	0x20000398
 8002174:	200043b0 	.word	0x200043b0

08002178 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return uwTick;
 800217c:	4b02      	ldr	r3, [pc, #8]	@ (8002188 <HAL_GetTick+0x10>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	200043b0 	.word	0x200043b0

0800218c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002194:	f7ff fff0 	bl	8002178 <HAL_GetTick>
 8002198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021a4:	d005      	beq.n	80021b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a6:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <HAL_Delay+0x44>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021b2:	bf00      	nop
 80021b4:	f7ff ffe0 	bl	8002178 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d8f7      	bhi.n	80021b4 <HAL_Delay+0x28>
  {
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000398 	.word	0x20000398

080021d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021f0:	4013      	ands	r3, r2
 80021f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002206:	4a04      	ldr	r2, [pc, #16]	@ (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	60d3      	str	r3, [r2, #12]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002220:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <__NVIC_GetPriorityGrouping+0x18>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	f003 0307 	and.w	r3, r3, #7
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	2b00      	cmp	r3, #0
 8002248:	db0b      	blt.n	8002262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	f003 021f 	and.w	r2, r3, #31
 8002250:	4906      	ldr	r1, [pc, #24]	@ (800226c <__NVIC_EnableIRQ+0x34>)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	2001      	movs	r0, #1
 800225a:	fa00 f202 	lsl.w	r2, r0, r2
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	e000e100 	.word	0xe000e100

08002270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	db0a      	blt.n	800229a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	490c      	ldr	r1, [pc, #48]	@ (80022bc <__NVIC_SetPriority+0x4c>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	440b      	add	r3, r1
 8002294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002298:	e00a      	b.n	80022b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4908      	ldr	r1, [pc, #32]	@ (80022c0 <__NVIC_SetPriority+0x50>)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	3b04      	subs	r3, #4
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	440b      	add	r3, r1
 80022ae:	761a      	strb	r2, [r3, #24]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000e100 	.word	0xe000e100
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	@ 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f1c3 0307 	rsb	r3, r3, #7
 80022de:	2b04      	cmp	r3, #4
 80022e0:	bf28      	it	cs
 80022e2:	2304      	movcs	r3, #4
 80022e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d902      	bls.n	80022f4 <NVIC_EncodePriority+0x30>
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3b03      	subs	r3, #3
 80022f2:	e000      	b.n	80022f6 <NVIC_EncodePriority+0x32>
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	401a      	ands	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800230c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43d9      	mvns	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	4313      	orrs	r3, r2
         );
}
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	@ 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800232c:	f3bf 8f4f 	dsb	sy
}
 8002330:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <__NVIC_SystemReset+0x24>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800233a:	4904      	ldr	r1, [pc, #16]	@ (800234c <__NVIC_SystemReset+0x24>)
 800233c:	4b04      	ldr	r3, [pc, #16]	@ (8002350 <__NVIC_SystemReset+0x28>)
 800233e:	4313      	orrs	r3, r2
 8002340:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002342:	f3bf 8f4f 	dsb	sy
}
 8002346:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <__NVIC_SystemReset+0x20>
 800234c:	e000ed00 	.word	0xe000ed00
 8002350:	05fa0004 	.word	0x05fa0004

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	@ (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002378:	f7ff ff7a 	bl	8002270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	@ (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff17 	bl	80021d4 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff2c 	bl	800221c <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff7a 	bl	80022c4 <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff49 	bl	8002270 <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff1f 	bl	8002238 <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002406:	f7ff ff8f 	bl	8002328 <__NVIC_SystemReset>

0800240a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff9e 	bl	8002354 <SysTick_Config>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e043      	b.n	80024c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	4b22      	ldr	r3, [pc, #136]	@ (80024cc <HAL_DMA_Init+0xa8>)
 8002442:	4413      	add	r3, r2
 8002444:	4a22      	ldr	r2, [pc, #136]	@ (80024d0 <HAL_DMA_Init+0xac>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	009a      	lsls	r2, r3, #2
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a1f      	ldr	r2, [pc, #124]	@ (80024d4 <HAL_DMA_Init+0xb0>)
 8002456:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800246e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002472:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800247c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	bffdfff8 	.word	0xbffdfff8
 80024d0:	cccccccd 	.word	0xcccccccd
 80024d4:	40020000 	.word	0x40020000

080024d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_DMA_Start_IT+0x20>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e04b      	b.n	8002590 <HAL_DMA_Start_IT+0xb8>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d13a      	bne.n	8002582 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f9eb 	bl	800290c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 020e 	orr.w	r2, r2, #14
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e00f      	b.n	8002570 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0204 	bic.w	r2, r2, #4
 800255e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 020a 	orr.w	r2, r2, #10
 800256e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e005      	b.n	800258e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800258a:	2302      	movs	r3, #2
 800258c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800258e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d008      	beq.n	80025c2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2204      	movs	r2, #4
 80025b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e020      	b.n	8002604 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 020e 	bic.w	r2, r2, #14
 80025d0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f202 	lsl.w	r2, r1, r2
 80025f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002602:	7bfb      	ldrb	r3, [r7, #15]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
	...

08002610 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d005      	beq.n	8002634 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2204      	movs	r2, #4
 800262c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
 8002632:	e051      	b.n	80026d8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 020e 	bic.w	r2, r2, #14
 8002642:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a22      	ldr	r2, [pc, #136]	@ (80026e4 <HAL_DMA_Abort_IT+0xd4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d029      	beq.n	80026b2 <HAL_DMA_Abort_IT+0xa2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a21      	ldr	r2, [pc, #132]	@ (80026e8 <HAL_DMA_Abort_IT+0xd8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d022      	beq.n	80026ae <HAL_DMA_Abort_IT+0x9e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1f      	ldr	r2, [pc, #124]	@ (80026ec <HAL_DMA_Abort_IT+0xdc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01a      	beq.n	80026a8 <HAL_DMA_Abort_IT+0x98>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1e      	ldr	r2, [pc, #120]	@ (80026f0 <HAL_DMA_Abort_IT+0xe0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d012      	beq.n	80026a2 <HAL_DMA_Abort_IT+0x92>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1c      	ldr	r2, [pc, #112]	@ (80026f4 <HAL_DMA_Abort_IT+0xe4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00a      	beq.n	800269c <HAL_DMA_Abort_IT+0x8c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1b      	ldr	r2, [pc, #108]	@ (80026f8 <HAL_DMA_Abort_IT+0xe8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d102      	bne.n	8002696 <HAL_DMA_Abort_IT+0x86>
 8002690:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002694:	e00e      	b.n	80026b4 <HAL_DMA_Abort_IT+0xa4>
 8002696:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800269a:	e00b      	b.n	80026b4 <HAL_DMA_Abort_IT+0xa4>
 800269c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026a0:	e008      	b.n	80026b4 <HAL_DMA_Abort_IT+0xa4>
 80026a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026a6:	e005      	b.n	80026b4 <HAL_DMA_Abort_IT+0xa4>
 80026a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026ac:	e002      	b.n	80026b4 <HAL_DMA_Abort_IT+0xa4>
 80026ae:	2310      	movs	r3, #16
 80026b0:	e000      	b.n	80026b4 <HAL_DMA_Abort_IT+0xa4>
 80026b2:	2301      	movs	r3, #1
 80026b4:	4a11      	ldr	r2, [pc, #68]	@ (80026fc <HAL_DMA_Abort_IT+0xec>)
 80026b6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
    } 
  }
  return status;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40020008 	.word	0x40020008
 80026e8:	4002001c 	.word	0x4002001c
 80026ec:	40020030 	.word	0x40020030
 80026f0:	40020044 	.word	0x40020044
 80026f4:	40020058 	.word	0x40020058
 80026f8:	4002006c 	.word	0x4002006c
 80026fc:	40020000 	.word	0x40020000

08002700 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	2204      	movs	r2, #4
 800271e:	409a      	lsls	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d04f      	beq.n	80027c8 <HAL_DMA_IRQHandler+0xc8>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d04a      	beq.n	80027c8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d107      	bne.n	8002750 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0204 	bic.w	r2, r2, #4
 800274e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a66      	ldr	r2, [pc, #408]	@ (80028f0 <HAL_DMA_IRQHandler+0x1f0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d029      	beq.n	80027ae <HAL_DMA_IRQHandler+0xae>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a65      	ldr	r2, [pc, #404]	@ (80028f4 <HAL_DMA_IRQHandler+0x1f4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d022      	beq.n	80027aa <HAL_DMA_IRQHandler+0xaa>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a63      	ldr	r2, [pc, #396]	@ (80028f8 <HAL_DMA_IRQHandler+0x1f8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d01a      	beq.n	80027a4 <HAL_DMA_IRQHandler+0xa4>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a62      	ldr	r2, [pc, #392]	@ (80028fc <HAL_DMA_IRQHandler+0x1fc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d012      	beq.n	800279e <HAL_DMA_IRQHandler+0x9e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a60      	ldr	r2, [pc, #384]	@ (8002900 <HAL_DMA_IRQHandler+0x200>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00a      	beq.n	8002798 <HAL_DMA_IRQHandler+0x98>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a5f      	ldr	r2, [pc, #380]	@ (8002904 <HAL_DMA_IRQHandler+0x204>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d102      	bne.n	8002792 <HAL_DMA_IRQHandler+0x92>
 800278c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002790:	e00e      	b.n	80027b0 <HAL_DMA_IRQHandler+0xb0>
 8002792:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002796:	e00b      	b.n	80027b0 <HAL_DMA_IRQHandler+0xb0>
 8002798:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800279c:	e008      	b.n	80027b0 <HAL_DMA_IRQHandler+0xb0>
 800279e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027a2:	e005      	b.n	80027b0 <HAL_DMA_IRQHandler+0xb0>
 80027a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027a8:	e002      	b.n	80027b0 <HAL_DMA_IRQHandler+0xb0>
 80027aa:	2340      	movs	r3, #64	@ 0x40
 80027ac:	e000      	b.n	80027b0 <HAL_DMA_IRQHandler+0xb0>
 80027ae:	2304      	movs	r3, #4
 80027b0:	4a55      	ldr	r2, [pc, #340]	@ (8002908 <HAL_DMA_IRQHandler+0x208>)
 80027b2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8094 	beq.w	80028e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80027c6:	e08e      	b.n	80028e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	2202      	movs	r2, #2
 80027ce:	409a      	lsls	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d056      	beq.n	8002886 <HAL_DMA_IRQHandler+0x186>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d051      	beq.n	8002886 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10b      	bne.n	8002808 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 020a 	bic.w	r2, r2, #10
 80027fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a38      	ldr	r2, [pc, #224]	@ (80028f0 <HAL_DMA_IRQHandler+0x1f0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d029      	beq.n	8002866 <HAL_DMA_IRQHandler+0x166>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a37      	ldr	r2, [pc, #220]	@ (80028f4 <HAL_DMA_IRQHandler+0x1f4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d022      	beq.n	8002862 <HAL_DMA_IRQHandler+0x162>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a35      	ldr	r2, [pc, #212]	@ (80028f8 <HAL_DMA_IRQHandler+0x1f8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01a      	beq.n	800285c <HAL_DMA_IRQHandler+0x15c>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a34      	ldr	r2, [pc, #208]	@ (80028fc <HAL_DMA_IRQHandler+0x1fc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d012      	beq.n	8002856 <HAL_DMA_IRQHandler+0x156>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a32      	ldr	r2, [pc, #200]	@ (8002900 <HAL_DMA_IRQHandler+0x200>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00a      	beq.n	8002850 <HAL_DMA_IRQHandler+0x150>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a31      	ldr	r2, [pc, #196]	@ (8002904 <HAL_DMA_IRQHandler+0x204>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d102      	bne.n	800284a <HAL_DMA_IRQHandler+0x14a>
 8002844:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002848:	e00e      	b.n	8002868 <HAL_DMA_IRQHandler+0x168>
 800284a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800284e:	e00b      	b.n	8002868 <HAL_DMA_IRQHandler+0x168>
 8002850:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002854:	e008      	b.n	8002868 <HAL_DMA_IRQHandler+0x168>
 8002856:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800285a:	e005      	b.n	8002868 <HAL_DMA_IRQHandler+0x168>
 800285c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002860:	e002      	b.n	8002868 <HAL_DMA_IRQHandler+0x168>
 8002862:	2320      	movs	r3, #32
 8002864:	e000      	b.n	8002868 <HAL_DMA_IRQHandler+0x168>
 8002866:	2302      	movs	r3, #2
 8002868:	4a27      	ldr	r2, [pc, #156]	@ (8002908 <HAL_DMA_IRQHandler+0x208>)
 800286a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	2b00      	cmp	r3, #0
 800287a:	d034      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002884:	e02f      	b.n	80028e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	2208      	movs	r2, #8
 800288c:	409a      	lsls	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d028      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x1e8>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d023      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 020e 	bic.w	r2, r2, #14
 80028ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b8:	2101      	movs	r1, #1
 80028ba:	fa01 f202 	lsl.w	r2, r1, r2
 80028be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
    }
  }
  return;
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
}
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40020008 	.word	0x40020008
 80028f4:	4002001c 	.word	0x4002001c
 80028f8:	40020030 	.word	0x40020030
 80028fc:	40020044 	.word	0x40020044
 8002900:	40020058 	.word	0x40020058
 8002904:	4002006c 	.word	0x4002006c
 8002908:	40020000 	.word	0x40020000

0800290c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002922:	2101      	movs	r1, #1
 8002924:	fa01 f202 	lsl.w	r2, r1, r2
 8002928:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b10      	cmp	r3, #16
 8002938:	d108      	bne.n	800294c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800294a:	e007      	b.n	800295c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	60da      	str	r2, [r3, #12]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
	...

08002968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002968:	b480      	push	{r7}
 800296a:	b08b      	sub	sp, #44	@ 0x2c
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002972:	2300      	movs	r3, #0
 8002974:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002976:	2300      	movs	r3, #0
 8002978:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297a:	e169      	b.n	8002c50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800297c:	2201      	movs	r2, #1
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	429a      	cmp	r2, r3
 8002996:	f040 8158 	bne.w	8002c4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4a9a      	ldr	r2, [pc, #616]	@ (8002c08 <HAL_GPIO_Init+0x2a0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d05e      	beq.n	8002a62 <HAL_GPIO_Init+0xfa>
 80029a4:	4a98      	ldr	r2, [pc, #608]	@ (8002c08 <HAL_GPIO_Init+0x2a0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d875      	bhi.n	8002a96 <HAL_GPIO_Init+0x12e>
 80029aa:	4a98      	ldr	r2, [pc, #608]	@ (8002c0c <HAL_GPIO_Init+0x2a4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d058      	beq.n	8002a62 <HAL_GPIO_Init+0xfa>
 80029b0:	4a96      	ldr	r2, [pc, #600]	@ (8002c0c <HAL_GPIO_Init+0x2a4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d86f      	bhi.n	8002a96 <HAL_GPIO_Init+0x12e>
 80029b6:	4a96      	ldr	r2, [pc, #600]	@ (8002c10 <HAL_GPIO_Init+0x2a8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d052      	beq.n	8002a62 <HAL_GPIO_Init+0xfa>
 80029bc:	4a94      	ldr	r2, [pc, #592]	@ (8002c10 <HAL_GPIO_Init+0x2a8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d869      	bhi.n	8002a96 <HAL_GPIO_Init+0x12e>
 80029c2:	4a94      	ldr	r2, [pc, #592]	@ (8002c14 <HAL_GPIO_Init+0x2ac>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d04c      	beq.n	8002a62 <HAL_GPIO_Init+0xfa>
 80029c8:	4a92      	ldr	r2, [pc, #584]	@ (8002c14 <HAL_GPIO_Init+0x2ac>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d863      	bhi.n	8002a96 <HAL_GPIO_Init+0x12e>
 80029ce:	4a92      	ldr	r2, [pc, #584]	@ (8002c18 <HAL_GPIO_Init+0x2b0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d046      	beq.n	8002a62 <HAL_GPIO_Init+0xfa>
 80029d4:	4a90      	ldr	r2, [pc, #576]	@ (8002c18 <HAL_GPIO_Init+0x2b0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d85d      	bhi.n	8002a96 <HAL_GPIO_Init+0x12e>
 80029da:	2b12      	cmp	r3, #18
 80029dc:	d82a      	bhi.n	8002a34 <HAL_GPIO_Init+0xcc>
 80029de:	2b12      	cmp	r3, #18
 80029e0:	d859      	bhi.n	8002a96 <HAL_GPIO_Init+0x12e>
 80029e2:	a201      	add	r2, pc, #4	@ (adr r2, 80029e8 <HAL_GPIO_Init+0x80>)
 80029e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e8:	08002a63 	.word	0x08002a63
 80029ec:	08002a3d 	.word	0x08002a3d
 80029f0:	08002a4f 	.word	0x08002a4f
 80029f4:	08002a91 	.word	0x08002a91
 80029f8:	08002a97 	.word	0x08002a97
 80029fc:	08002a97 	.word	0x08002a97
 8002a00:	08002a97 	.word	0x08002a97
 8002a04:	08002a97 	.word	0x08002a97
 8002a08:	08002a97 	.word	0x08002a97
 8002a0c:	08002a97 	.word	0x08002a97
 8002a10:	08002a97 	.word	0x08002a97
 8002a14:	08002a97 	.word	0x08002a97
 8002a18:	08002a97 	.word	0x08002a97
 8002a1c:	08002a97 	.word	0x08002a97
 8002a20:	08002a97 	.word	0x08002a97
 8002a24:	08002a97 	.word	0x08002a97
 8002a28:	08002a97 	.word	0x08002a97
 8002a2c:	08002a45 	.word	0x08002a45
 8002a30:	08002a59 	.word	0x08002a59
 8002a34:	4a79      	ldr	r2, [pc, #484]	@ (8002c1c <HAL_GPIO_Init+0x2b4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a3a:	e02c      	b.n	8002a96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	623b      	str	r3, [r7, #32]
          break;
 8002a42:	e029      	b.n	8002a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	623b      	str	r3, [r7, #32]
          break;
 8002a4c:	e024      	b.n	8002a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	3308      	adds	r3, #8
 8002a54:	623b      	str	r3, [r7, #32]
          break;
 8002a56:	e01f      	b.n	8002a98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	330c      	adds	r3, #12
 8002a5e:	623b      	str	r3, [r7, #32]
          break;
 8002a60:	e01a      	b.n	8002a98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a6a:	2304      	movs	r3, #4
 8002a6c:	623b      	str	r3, [r7, #32]
          break;
 8002a6e:	e013      	b.n	8002a98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d105      	bne.n	8002a84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a78:	2308      	movs	r3, #8
 8002a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	611a      	str	r2, [r3, #16]
          break;
 8002a82:	e009      	b.n	8002a98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a84:	2308      	movs	r3, #8
 8002a86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	615a      	str	r2, [r3, #20]
          break;
 8002a8e:	e003      	b.n	8002a98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a90:	2300      	movs	r3, #0
 8002a92:	623b      	str	r3, [r7, #32]
          break;
 8002a94:	e000      	b.n	8002a98 <HAL_GPIO_Init+0x130>
          break;
 8002a96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2bff      	cmp	r3, #255	@ 0xff
 8002a9c:	d801      	bhi.n	8002aa2 <HAL_GPIO_Init+0x13a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	e001      	b.n	8002aa6 <HAL_GPIO_Init+0x13e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2bff      	cmp	r3, #255	@ 0xff
 8002aac:	d802      	bhi.n	8002ab4 <HAL_GPIO_Init+0x14c>
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	e002      	b.n	8002aba <HAL_GPIO_Init+0x152>
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	3b08      	subs	r3, #8
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	210f      	movs	r1, #15
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	401a      	ands	r2, r3
 8002acc:	6a39      	ldr	r1, [r7, #32]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80b1 	beq.w	8002c4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ae8:	4b4d      	ldr	r3, [pc, #308]	@ (8002c20 <HAL_GPIO_Init+0x2b8>)
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	4a4c      	ldr	r2, [pc, #304]	@ (8002c20 <HAL_GPIO_Init+0x2b8>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6193      	str	r3, [r2, #24]
 8002af4:	4b4a      	ldr	r3, [pc, #296]	@ (8002c20 <HAL_GPIO_Init+0x2b8>)
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b00:	4a48      	ldr	r2, [pc, #288]	@ (8002c24 <HAL_GPIO_Init+0x2bc>)
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	089b      	lsrs	r3, r3, #2
 8002b06:	3302      	adds	r3, #2
 8002b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	220f      	movs	r2, #15
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4013      	ands	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a40      	ldr	r2, [pc, #256]	@ (8002c28 <HAL_GPIO_Init+0x2c0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d013      	beq.n	8002b54 <HAL_GPIO_Init+0x1ec>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a3f      	ldr	r2, [pc, #252]	@ (8002c2c <HAL_GPIO_Init+0x2c4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00d      	beq.n	8002b50 <HAL_GPIO_Init+0x1e8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a3e      	ldr	r2, [pc, #248]	@ (8002c30 <HAL_GPIO_Init+0x2c8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d007      	beq.n	8002b4c <HAL_GPIO_Init+0x1e4>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a3d      	ldr	r2, [pc, #244]	@ (8002c34 <HAL_GPIO_Init+0x2cc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d101      	bne.n	8002b48 <HAL_GPIO_Init+0x1e0>
 8002b44:	2303      	movs	r3, #3
 8002b46:	e006      	b.n	8002b56 <HAL_GPIO_Init+0x1ee>
 8002b48:	2304      	movs	r3, #4
 8002b4a:	e004      	b.n	8002b56 <HAL_GPIO_Init+0x1ee>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e002      	b.n	8002b56 <HAL_GPIO_Init+0x1ee>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <HAL_GPIO_Init+0x1ee>
 8002b54:	2300      	movs	r3, #0
 8002b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b58:	f002 0203 	and.w	r2, r2, #3
 8002b5c:	0092      	lsls	r2, r2, #2
 8002b5e:	4093      	lsls	r3, r2
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b66:	492f      	ldr	r1, [pc, #188]	@ (8002c24 <HAL_GPIO_Init+0x2bc>)
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	089b      	lsrs	r3, r3, #2
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d006      	beq.n	8002b8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b80:	4b2d      	ldr	r3, [pc, #180]	@ (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	492c      	ldr	r1, [pc, #176]	@ (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	608b      	str	r3, [r1, #8]
 8002b8c:	e006      	b.n	8002b9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	4928      	ldr	r1, [pc, #160]	@ (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ba8:	4b23      	ldr	r3, [pc, #140]	@ (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	4922      	ldr	r1, [pc, #136]	@ (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60cb      	str	r3, [r1, #12]
 8002bb4:	e006      	b.n	8002bc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bb6:	4b20      	ldr	r3, [pc, #128]	@ (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	491e      	ldr	r1, [pc, #120]	@ (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d006      	beq.n	8002bde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bd0:	4b19      	ldr	r3, [pc, #100]	@ (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	4918      	ldr	r1, [pc, #96]	@ (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
 8002bdc:	e006      	b.n	8002bec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bde:	4b16      	ldr	r3, [pc, #88]	@ (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	4914      	ldr	r1, [pc, #80]	@ (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d021      	beq.n	8002c3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	490e      	ldr	r1, [pc, #56]	@ (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]
 8002c04:	e021      	b.n	8002c4a <HAL_GPIO_Init+0x2e2>
 8002c06:	bf00      	nop
 8002c08:	10320000 	.word	0x10320000
 8002c0c:	10310000 	.word	0x10310000
 8002c10:	10220000 	.word	0x10220000
 8002c14:	10210000 	.word	0x10210000
 8002c18:	10120000 	.word	0x10120000
 8002c1c:	10110000 	.word	0x10110000
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40010000 	.word	0x40010000
 8002c28:	40010800 	.word	0x40010800
 8002c2c:	40010c00 	.word	0x40010c00
 8002c30:	40011000 	.word	0x40011000
 8002c34:	40011400 	.word	0x40011400
 8002c38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c6c <HAL_GPIO_Init+0x304>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	4909      	ldr	r1, [pc, #36]	@ (8002c6c <HAL_GPIO_Init+0x304>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f47f ae8e 	bne.w	800297c <HAL_GPIO_Init+0x14>
  }
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	372c      	adds	r7, #44	@ 0x2c
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	40010400 	.word	0x40010400

08002c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c80:	787b      	ldrb	r3, [r7, #1]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c8c:	e003      	b.n	8002c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	041a      	lsls	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	611a      	str	r2, [r3, #16]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cb2:	887a      	ldrh	r2, [r7, #2]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	041a      	lsls	r2, r3, #16
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	43d9      	mvns	r1, r3
 8002cbe:	887b      	ldrh	r3, [r7, #2]
 8002cc0:	400b      	ands	r3, r1
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	611a      	str	r2, [r3, #16]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
	...

08002cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cde:	4b08      	ldr	r3, [pc, #32]	@ (8002d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cea:	4a05      	ldr	r2, [pc, #20]	@ (8002d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe f918 	bl	8000f28 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40010400 	.word	0x40010400

08002d04 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002d10:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	4a08      	ldr	r2, [pc, #32]	@ (8002d38 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002d16:	f023 0304 	bic.w	r3, r3, #4
 8002d1a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002d22:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002d24:	e002      	b.n	8002d2c <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8002d26:	bf40      	sev
    __WFE();
 8002d28:	bf20      	wfe
    __WFE();
 8002d2a:	bf20      	wfe
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e272      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8087 	beq.w	8002e6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d5c:	4b92      	ldr	r3, [pc, #584]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d00c      	beq.n	8002d82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d68:	4b8f      	ldr	r3, [pc, #572]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 030c 	and.w	r3, r3, #12
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d112      	bne.n	8002d9a <HAL_RCC_OscConfig+0x5e>
 8002d74:	4b8c      	ldr	r3, [pc, #560]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d80:	d10b      	bne.n	8002d9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d82:	4b89      	ldr	r3, [pc, #548]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d06c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x12c>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d168      	bne.n	8002e68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e24c      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x76>
 8002da4:	4b80      	ldr	r3, [pc, #512]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a7f      	ldr	r2, [pc, #508]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	e02e      	b.n	8002e10 <HAL_RCC_OscConfig+0xd4>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x98>
 8002dba:	4b7b      	ldr	r3, [pc, #492]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a7a      	ldr	r2, [pc, #488]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b78      	ldr	r3, [pc, #480]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a77      	ldr	r2, [pc, #476]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e01d      	b.n	8002e10 <HAL_RCC_OscConfig+0xd4>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0xbc>
 8002dde:	4b72      	ldr	r3, [pc, #456]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a71      	ldr	r2, [pc, #452]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a6e      	ldr	r2, [pc, #440]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e00b      	b.n	8002e10 <HAL_RCC_OscConfig+0xd4>
 8002df8:	4b6b      	ldr	r3, [pc, #428]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a6a      	ldr	r2, [pc, #424]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	4b68      	ldr	r3, [pc, #416]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a67      	ldr	r2, [pc, #412]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d013      	beq.n	8002e40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7ff f9ae 	bl	8002178 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e20:	f7ff f9aa 	bl	8002178 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	@ 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e200      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0xe4>
 8002e3e:	e014      	b.n	8002e6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7ff f99a 	bl	8002178 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e48:	f7ff f996 	bl	8002178 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	@ 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e1ec      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5a:	4b53      	ldr	r3, [pc, #332]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x10c>
 8002e66:	e000      	b.n	8002e6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d063      	beq.n	8002f3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e76:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00b      	beq.n	8002e9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e82:	4b49      	ldr	r3, [pc, #292]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d11c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x18c>
 8002e8e:	4b46      	ldr	r3, [pc, #280]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d116      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9a:	4b43      	ldr	r3, [pc, #268]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x176>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e1c0      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4939      	ldr	r1, [pc, #228]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec6:	e03a      	b.n	8002f3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d020      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed0:	4b36      	ldr	r3, [pc, #216]	@ (8002fac <HAL_RCC_OscConfig+0x270>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed6:	f7ff f94f 	bl	8002178 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ede:	f7ff f94b 	bl	8002178 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e1a1      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efc:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4927      	ldr	r1, [pc, #156]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
 8002f10:	e015      	b.n	8002f3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f12:	4b26      	ldr	r3, [pc, #152]	@ (8002fac <HAL_RCC_OscConfig+0x270>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7ff f92e 	bl	8002178 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f20:	f7ff f92a 	bl	8002178 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e180      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f32:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d03a      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d019      	beq.n	8002f86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f52:	4b17      	ldr	r3, [pc, #92]	@ (8002fb0 <HAL_RCC_OscConfig+0x274>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f58:	f7ff f90e 	bl	8002178 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f60:	f7ff f90a 	bl	8002178 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e160      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f72:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa8 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f000 face 	bl	8003520 <RCC_Delay>
 8002f84:	e01c      	b.n	8002fc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f86:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb0 <HAL_RCC_OscConfig+0x274>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8c:	f7ff f8f4 	bl	8002178 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f92:	e00f      	b.n	8002fb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f94:	f7ff f8f0 	bl	8002178 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d908      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e146      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	42420000 	.word	0x42420000
 8002fb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb4:	4b92      	ldr	r3, [pc, #584]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1e9      	bne.n	8002f94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80a6 	beq.w	800311a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd2:	4b8b      	ldr	r3, [pc, #556]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10d      	bne.n	8002ffa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	4b88      	ldr	r3, [pc, #544]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	4a87      	ldr	r2, [pc, #540]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe8:	61d3      	str	r3, [r2, #28]
 8002fea:	4b85      	ldr	r3, [pc, #532]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffa:	4b82      	ldr	r3, [pc, #520]	@ (8003204 <HAL_RCC_OscConfig+0x4c8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003002:	2b00      	cmp	r3, #0
 8003004:	d118      	bne.n	8003038 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003006:	4b7f      	ldr	r3, [pc, #508]	@ (8003204 <HAL_RCC_OscConfig+0x4c8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a7e      	ldr	r2, [pc, #504]	@ (8003204 <HAL_RCC_OscConfig+0x4c8>)
 800300c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003012:	f7ff f8b1 	bl	8002178 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301a:	f7ff f8ad 	bl	8002178 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b64      	cmp	r3, #100	@ 0x64
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e103      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	4b75      	ldr	r3, [pc, #468]	@ (8003204 <HAL_RCC_OscConfig+0x4c8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d106      	bne.n	800304e <HAL_RCC_OscConfig+0x312>
 8003040:	4b6f      	ldr	r3, [pc, #444]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4a6e      	ldr	r2, [pc, #440]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6213      	str	r3, [r2, #32]
 800304c:	e02d      	b.n	80030aa <HAL_RCC_OscConfig+0x36e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10c      	bne.n	8003070 <HAL_RCC_OscConfig+0x334>
 8003056:	4b6a      	ldr	r3, [pc, #424]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	4a69      	ldr	r2, [pc, #420]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 800305c:	f023 0301 	bic.w	r3, r3, #1
 8003060:	6213      	str	r3, [r2, #32]
 8003062:	4b67      	ldr	r3, [pc, #412]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	4a66      	ldr	r2, [pc, #408]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	f023 0304 	bic.w	r3, r3, #4
 800306c:	6213      	str	r3, [r2, #32]
 800306e:	e01c      	b.n	80030aa <HAL_RCC_OscConfig+0x36e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b05      	cmp	r3, #5
 8003076:	d10c      	bne.n	8003092 <HAL_RCC_OscConfig+0x356>
 8003078:	4b61      	ldr	r3, [pc, #388]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4a60      	ldr	r2, [pc, #384]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 800307e:	f043 0304 	orr.w	r3, r3, #4
 8003082:	6213      	str	r3, [r2, #32]
 8003084:	4b5e      	ldr	r3, [pc, #376]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	4a5d      	ldr	r2, [pc, #372]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6213      	str	r3, [r2, #32]
 8003090:	e00b      	b.n	80030aa <HAL_RCC_OscConfig+0x36e>
 8003092:	4b5b      	ldr	r3, [pc, #364]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	4a5a      	ldr	r2, [pc, #360]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	6213      	str	r3, [r2, #32]
 800309e:	4b58      	ldr	r3, [pc, #352]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	4a57      	ldr	r2, [pc, #348]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	f023 0304 	bic.w	r3, r3, #4
 80030a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d015      	beq.n	80030de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b2:	f7ff f861 	bl	8002178 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b8:	e00a      	b.n	80030d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ba:	f7ff f85d 	bl	8002178 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e0b1      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0ee      	beq.n	80030ba <HAL_RCC_OscConfig+0x37e>
 80030dc:	e014      	b.n	8003108 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030de:	f7ff f84b 	bl	8002178 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7ff f847 	bl	8002178 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e09b      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fc:	4b40      	ldr	r3, [pc, #256]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1ee      	bne.n	80030e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003108:	7dfb      	ldrb	r3, [r7, #23]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d105      	bne.n	800311a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310e:	4b3c      	ldr	r3, [pc, #240]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4a3b      	ldr	r2, [pc, #236]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003118:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8087 	beq.w	8003232 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003124:	4b36      	ldr	r3, [pc, #216]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d061      	beq.n	80031f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d146      	bne.n	80031c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003138:	4b33      	ldr	r3, [pc, #204]	@ (8003208 <HAL_RCC_OscConfig+0x4cc>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7ff f81b 	bl	8002178 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003146:	f7ff f817 	bl	8002178 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e06d      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003158:	4b29      	ldr	r3, [pc, #164]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f0      	bne.n	8003146 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800316c:	d108      	bne.n	8003180 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800316e:	4b24      	ldr	r3, [pc, #144]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	4921      	ldr	r1, [pc, #132]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	4313      	orrs	r3, r2
 800317e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003180:	4b1f      	ldr	r3, [pc, #124]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a19      	ldr	r1, [r3, #32]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	430b      	orrs	r3, r1
 8003192:	491b      	ldr	r1, [pc, #108]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003198:	4b1b      	ldr	r3, [pc, #108]	@ (8003208 <HAL_RCC_OscConfig+0x4cc>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319e:	f7fe ffeb 	bl	8002178 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a6:	f7fe ffe7 	bl	8002178 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e03d      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031b8:	4b11      	ldr	r3, [pc, #68]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x46a>
 80031c4:	e035      	b.n	8003232 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c6:	4b10      	ldr	r3, [pc, #64]	@ (8003208 <HAL_RCC_OscConfig+0x4cc>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7fe ffd4 	bl	8002178 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d4:	f7fe ffd0 	bl	8002178 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e026      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e6:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x498>
 80031f2:	e01e      	b.n	8003232 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d107      	bne.n	800320c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e019      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
 8003200:	40021000 	.word	0x40021000
 8003204:	40007000 	.word	0x40007000
 8003208:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800320c:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <HAL_RCC_OscConfig+0x500>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	429a      	cmp	r2, r3
 800321e:	d106      	bne.n	800322e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d001      	beq.n	8003232 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40021000 	.word	0x40021000

08003240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0d0      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003254:	4b6a      	ldr	r3, [pc, #424]	@ (8003400 <HAL_RCC_ClockConfig+0x1c0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d910      	bls.n	8003284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b67      	ldr	r3, [pc, #412]	@ (8003400 <HAL_RCC_ClockConfig+0x1c0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 0207 	bic.w	r2, r3, #7
 800326a:	4965      	ldr	r1, [pc, #404]	@ (8003400 <HAL_RCC_ClockConfig+0x1c0>)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b63      	ldr	r3, [pc, #396]	@ (8003400 <HAL_RCC_ClockConfig+0x1c0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0b8      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d020      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800329c:	4b59      	ldr	r3, [pc, #356]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4a58      	ldr	r2, [pc, #352]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b4:	4b53      	ldr	r3, [pc, #332]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4a52      	ldr	r2, [pc, #328]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80032be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c0:	4b50      	ldr	r3, [pc, #320]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	494d      	ldr	r1, [pc, #308]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d040      	beq.n	8003360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d107      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	4b47      	ldr	r3, [pc, #284]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d115      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e07f      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fe:	4b41      	ldr	r3, [pc, #260]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e073      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330e:	4b3d      	ldr	r3, [pc, #244]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e06b      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331e:	4b39      	ldr	r3, [pc, #228]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f023 0203 	bic.w	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4936      	ldr	r1, [pc, #216]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003330:	f7fe ff22 	bl	8002178 <HAL_GetTick>
 8003334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003336:	e00a      	b.n	800334e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003338:	f7fe ff1e 	bl	8002178 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e053      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	4b2d      	ldr	r3, [pc, #180]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 020c 	and.w	r2, r3, #12
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	429a      	cmp	r2, r3
 800335e:	d1eb      	bne.n	8003338 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003360:	4b27      	ldr	r3, [pc, #156]	@ (8003400 <HAL_RCC_ClockConfig+0x1c0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d210      	bcs.n	8003390 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b24      	ldr	r3, [pc, #144]	@ (8003400 <HAL_RCC_ClockConfig+0x1c0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 0207 	bic.w	r2, r3, #7
 8003376:	4922      	ldr	r1, [pc, #136]	@ (8003400 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	4313      	orrs	r3, r2
 800337c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337e:	4b20      	ldr	r3, [pc, #128]	@ (8003400 <HAL_RCC_ClockConfig+0x1c0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e032      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800339c:	4b19      	ldr	r3, [pc, #100]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4916      	ldr	r1, [pc, #88]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033ba:	4b12      	ldr	r3, [pc, #72]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	490e      	ldr	r1, [pc, #56]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ce:	f000 f821 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 80033d2:	4602      	mov	r2, r0
 80033d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	490a      	ldr	r1, [pc, #40]	@ (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033e0:	5ccb      	ldrb	r3, [r1, r3]
 80033e2:	fa22 f303 	lsr.w	r3, r2, r3
 80033e6:	4a09      	ldr	r2, [pc, #36]	@ (800340c <HAL_RCC_ClockConfig+0x1cc>)
 80033e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ea:	4b09      	ldr	r3, [pc, #36]	@ (8003410 <HAL_RCC_ClockConfig+0x1d0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe fe80 	bl	80020f4 <HAL_InitTick>

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40022000 	.word	0x40022000
 8003404:	40021000 	.word	0x40021000
 8003408:	08006184 	.word	0x08006184
 800340c:	20000390 	.word	0x20000390
 8003410:	20000394 	.word	0x20000394

08003414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	2300      	movs	r3, #0
 8003428:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800342e:	4b1e      	ldr	r3, [pc, #120]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	2b04      	cmp	r3, #4
 800343c:	d002      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x30>
 800343e:	2b08      	cmp	r3, #8
 8003440:	d003      	beq.n	800344a <HAL_RCC_GetSysClockFreq+0x36>
 8003442:	e027      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003444:	4b19      	ldr	r3, [pc, #100]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003446:	613b      	str	r3, [r7, #16]
      break;
 8003448:	e027      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	0c9b      	lsrs	r3, r3, #18
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	4a17      	ldr	r2, [pc, #92]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003454:	5cd3      	ldrb	r3, [r2, r3]
 8003456:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d010      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003462:	4b11      	ldr	r3, [pc, #68]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	0c5b      	lsrs	r3, r3, #17
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	4a11      	ldr	r2, [pc, #68]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800346e:	5cd3      	ldrb	r3, [r2, r3]
 8003470:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a0d      	ldr	r2, [pc, #52]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003476:	fb03 f202 	mul.w	r2, r3, r2
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	e004      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a0c      	ldr	r2, [pc, #48]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003488:	fb02 f303 	mul.w	r3, r2, r3
 800348c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	613b      	str	r3, [r7, #16]
      break;
 8003492:	e002      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003494:	4b05      	ldr	r3, [pc, #20]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003496:	613b      	str	r3, [r7, #16]
      break;
 8003498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349a:	693b      	ldr	r3, [r7, #16]
}
 800349c:	4618      	mov	r0, r3
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000
 80034ac:	007a1200 	.word	0x007a1200
 80034b0:	0800619c 	.word	0x0800619c
 80034b4:	080061ac 	.word	0x080061ac
 80034b8:	003d0900 	.word	0x003d0900

080034bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b02      	ldr	r3, [pc, #8]	@ (80034cc <HAL_RCC_GetHCLKFreq+0x10>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr
 80034cc:	20000390 	.word	0x20000390

080034d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034d4:	f7ff fff2 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	0a1b      	lsrs	r3, r3, #8
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4903      	ldr	r1, [pc, #12]	@ (80034f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	08006194 	.word	0x08006194

080034f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034fc:	f7ff ffde 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	0adb      	lsrs	r3, r3, #11
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4903      	ldr	r1, [pc, #12]	@ (800351c <HAL_RCC_GetPCLK2Freq+0x24>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	08006194 	.word	0x08006194

08003520 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003528:	4b0a      	ldr	r3, [pc, #40]	@ (8003554 <RCC_Delay+0x34>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0a      	ldr	r2, [pc, #40]	@ (8003558 <RCC_Delay+0x38>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	0a5b      	lsrs	r3, r3, #9
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	fb02 f303 	mul.w	r3, r2, r3
 800353a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800353c:	bf00      	nop
  }
  while (Delay --);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1e5a      	subs	r2, r3, #1
 8003542:	60fa      	str	r2, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f9      	bne.n	800353c <RCC_Delay+0x1c>
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	20000390 	.word	0x20000390
 8003558:	10624dd3 	.word	0x10624dd3

0800355c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e041      	b.n	80035f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fe fb1e 	bl	8001bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	4619      	mov	r1, r3
 800359a:	4610      	mov	r0, r2
 800359c:	f000 fd8a 	bl	80040b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d001      	beq.n	8003614 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e032      	b.n	800367a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a18      	ldr	r2, [pc, #96]	@ (8003684 <HAL_TIM_Base_Start+0x88>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00e      	beq.n	8003644 <HAL_TIM_Base_Start+0x48>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362e:	d009      	beq.n	8003644 <HAL_TIM_Base_Start+0x48>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a14      	ldr	r2, [pc, #80]	@ (8003688 <HAL_TIM_Base_Start+0x8c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_TIM_Base_Start+0x48>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a13      	ldr	r2, [pc, #76]	@ (800368c <HAL_TIM_Base_Start+0x90>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d111      	bne.n	8003668 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b06      	cmp	r3, #6
 8003654:	d010      	beq.n	8003678 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003666:	e007      	b.n	8003678 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	40012c00 	.word	0x40012c00
 8003688:	40000400 	.word	0x40000400
 800368c:	40000800 	.word	0x40000800

08003690 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e041      	b.n	8003726 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f839 	bl	800372e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f000 fcf0 	bl	80040b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d109      	bne.n	8003764 <HAL_TIM_PWM_Start+0x24>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	bf14      	ite	ne
 800375c:	2301      	movne	r3, #1
 800375e:	2300      	moveq	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	e022      	b.n	80037aa <HAL_TIM_PWM_Start+0x6a>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b04      	cmp	r3, #4
 8003768:	d109      	bne.n	800377e <HAL_TIM_PWM_Start+0x3e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b01      	cmp	r3, #1
 8003774:	bf14      	ite	ne
 8003776:	2301      	movne	r3, #1
 8003778:	2300      	moveq	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	e015      	b.n	80037aa <HAL_TIM_PWM_Start+0x6a>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b08      	cmp	r3, #8
 8003782:	d109      	bne.n	8003798 <HAL_TIM_PWM_Start+0x58>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b01      	cmp	r3, #1
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e008      	b.n	80037aa <HAL_TIM_PWM_Start+0x6a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e05e      	b.n	8003870 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d104      	bne.n	80037c2 <HAL_TIM_PWM_Start+0x82>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037c0:	e013      	b.n	80037ea <HAL_TIM_PWM_Start+0xaa>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d104      	bne.n	80037d2 <HAL_TIM_PWM_Start+0x92>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037d0:	e00b      	b.n	80037ea <HAL_TIM_PWM_Start+0xaa>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d104      	bne.n	80037e2 <HAL_TIM_PWM_Start+0xa2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037e0:	e003      	b.n	80037ea <HAL_TIM_PWM_Start+0xaa>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2201      	movs	r2, #1
 80037f0:	6839      	ldr	r1, [r7, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 feea 	bl	80045cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003878 <HAL_TIM_PWM_Start+0x138>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d107      	bne.n	8003812 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003810:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a18      	ldr	r2, [pc, #96]	@ (8003878 <HAL_TIM_PWM_Start+0x138>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00e      	beq.n	800383a <HAL_TIM_PWM_Start+0xfa>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003824:	d009      	beq.n	800383a <HAL_TIM_PWM_Start+0xfa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a14      	ldr	r2, [pc, #80]	@ (800387c <HAL_TIM_PWM_Start+0x13c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d004      	beq.n	800383a <HAL_TIM_PWM_Start+0xfa>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a12      	ldr	r2, [pc, #72]	@ (8003880 <HAL_TIM_PWM_Start+0x140>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d111      	bne.n	800385e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b06      	cmp	r3, #6
 800384a:	d010      	beq.n	800386e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385c:	e007      	b.n	800386e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40012c00 	.word	0x40012c00
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800

08003884 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <HAL_TIM_PWM_Start_DMA+0x2c>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	bf0c      	ite	eq
 80038a8:	2301      	moveq	r3, #1
 80038aa:	2300      	movne	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	e022      	b.n	80038f6 <HAL_TIM_PWM_Start_DMA+0x72>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d109      	bne.n	80038ca <HAL_TIM_PWM_Start_DMA+0x46>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	bf0c      	ite	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	2300      	movne	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	e015      	b.n	80038f6 <HAL_TIM_PWM_Start_DMA+0x72>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d109      	bne.n	80038e4 <HAL_TIM_PWM_Start_DMA+0x60>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	bf0c      	ite	eq
 80038dc:	2301      	moveq	r3, #1
 80038de:	2300      	movne	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	e008      	b.n	80038f6 <HAL_TIM_PWM_Start_DMA+0x72>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80038fa:	2302      	movs	r3, #2
 80038fc:	e153      	b.n	8003ba6 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <HAL_TIM_PWM_Start_DMA+0x94>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e022      	b.n	800395e <HAL_TIM_PWM_Start_DMA+0xda>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b04      	cmp	r3, #4
 800391c:	d109      	bne.n	8003932 <HAL_TIM_PWM_Start_DMA+0xae>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	bf0c      	ite	eq
 800392a:	2301      	moveq	r3, #1
 800392c:	2300      	movne	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	e015      	b.n	800395e <HAL_TIM_PWM_Start_DMA+0xda>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d109      	bne.n	800394c <HAL_TIM_PWM_Start_DMA+0xc8>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e008      	b.n	800395e <HAL_TIM_PWM_Start_DMA+0xda>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b01      	cmp	r3, #1
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d024      	beq.n	80039ac <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_TIM_PWM_Start_DMA+0xea>
 8003968:	887b      	ldrh	r3, [r7, #2]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e119      	b.n	8003ba6 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003980:	e016      	b.n	80039b0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d104      	bne.n	8003992 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003990:	e00e      	b.n	80039b0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039a0:	e006      	b.n	80039b0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039aa:	e001      	b.n	80039b0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0fa      	b.n	8003ba6 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	f200 80ae 	bhi.w	8003b14 <HAL_TIM_PWM_Start_DMA+0x290>
 80039b8:	a201      	add	r2, pc, #4	@ (adr r2, 80039c0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	080039f5 	.word	0x080039f5
 80039c4:	08003b15 	.word	0x08003b15
 80039c8:	08003b15 	.word	0x08003b15
 80039cc:	08003b15 	.word	0x08003b15
 80039d0:	08003a3d 	.word	0x08003a3d
 80039d4:	08003b15 	.word	0x08003b15
 80039d8:	08003b15 	.word	0x08003b15
 80039dc:	08003b15 	.word	0x08003b15
 80039e0:	08003a85 	.word	0x08003a85
 80039e4:	08003b15 	.word	0x08003b15
 80039e8:	08003b15 	.word	0x08003b15
 80039ec:	08003b15 	.word	0x08003b15
 80039f0:	08003acd 	.word	0x08003acd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	4a6d      	ldr	r2, [pc, #436]	@ (8003bb0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80039fa:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	4a6c      	ldr	r2, [pc, #432]	@ (8003bb4 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003a02:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	4a6b      	ldr	r2, [pc, #428]	@ (8003bb8 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003a0a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3334      	adds	r3, #52	@ 0x34
 8003a18:	461a      	mov	r2, r3
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	f7fe fd5c 	bl	80024d8 <HAL_DMA_Start_IT>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0bd      	b.n	8003ba6 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a38:	60da      	str	r2, [r3, #12]
      break;
 8003a3a:	e06e      	b.n	8003b1a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a40:	4a5b      	ldr	r2, [pc, #364]	@ (8003bb0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003a42:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a48:	4a5a      	ldr	r2, [pc, #360]	@ (8003bb4 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	4a59      	ldr	r2, [pc, #356]	@ (8003bb8 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003a52:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3338      	adds	r3, #56	@ 0x38
 8003a60:	461a      	mov	r2, r3
 8003a62:	887b      	ldrh	r3, [r7, #2]
 8003a64:	f7fe fd38 	bl	80024d8 <HAL_DMA_Start_IT>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e099      	b.n	8003ba6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a80:	60da      	str	r2, [r3, #12]
      break;
 8003a82:	e04a      	b.n	8003b1a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	4a49      	ldr	r2, [pc, #292]	@ (8003bb0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003a8a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	4a48      	ldr	r2, [pc, #288]	@ (8003bb4 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003a92:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a98:	4a47      	ldr	r2, [pc, #284]	@ (8003bb8 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003a9a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	333c      	adds	r3, #60	@ 0x3c
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	f7fe fd14 	bl	80024d8 <HAL_DMA_Start_IT>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e075      	b.n	8003ba6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ac8:	60da      	str	r2, [r3, #12]
      break;
 8003aca:	e026      	b.n	8003b1a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad0:	4a37      	ldr	r2, [pc, #220]	@ (8003bb0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003ad2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad8:	4a36      	ldr	r2, [pc, #216]	@ (8003bb4 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003ada:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae0:	4a35      	ldr	r2, [pc, #212]	@ (8003bb8 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003ae2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3340      	adds	r3, #64	@ 0x40
 8003af0:	461a      	mov	r2, r3
 8003af2:	887b      	ldrh	r3, [r7, #2]
 8003af4:	f7fe fcf0 	bl	80024d8 <HAL_DMA_Start_IT>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e051      	b.n	8003ba6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b10:	60da      	str	r2, [r3, #12]
      break;
 8003b12:	e002      	b.n	8003b1a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	75fb      	strb	r3, [r7, #23]
      break;
 8003b18:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b1a:	7dfb      	ldrb	r3, [r7, #23]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d141      	bne.n	8003ba4 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2201      	movs	r2, #1
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fd4f 	bl	80045cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a22      	ldr	r2, [pc, #136]	@ (8003bbc <HAL_TIM_PWM_Start_DMA+0x338>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d107      	bne.n	8003b48 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b46:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bbc <HAL_TIM_PWM_Start_DMA+0x338>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00e      	beq.n	8003b70 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5a:	d009      	beq.n	8003b70 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a17      	ldr	r2, [pc, #92]	@ (8003bc0 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d004      	beq.n	8003b70 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a16      	ldr	r2, [pc, #88]	@ (8003bc4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d111      	bne.n	8003b94 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d010      	beq.n	8003ba4 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b92:	e007      	b.n	8003ba4 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	08003fa3 	.word	0x08003fa3
 8003bb4:	0800404b 	.word	0x0800404b
 8003bb8:	08003f11 	.word	0x08003f11
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	40000800 	.word	0x40000800

08003bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0ae      	b.n	8003d44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b0c      	cmp	r3, #12
 8003bf2:	f200 809f 	bhi.w	8003d34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfc:	08003c31 	.word	0x08003c31
 8003c00:	08003d35 	.word	0x08003d35
 8003c04:	08003d35 	.word	0x08003d35
 8003c08:	08003d35 	.word	0x08003d35
 8003c0c:	08003c71 	.word	0x08003c71
 8003c10:	08003d35 	.word	0x08003d35
 8003c14:	08003d35 	.word	0x08003d35
 8003c18:	08003d35 	.word	0x08003d35
 8003c1c:	08003cb3 	.word	0x08003cb3
 8003c20:	08003d35 	.word	0x08003d35
 8003c24:	08003d35 	.word	0x08003d35
 8003c28:	08003d35 	.word	0x08003d35
 8003c2c:	08003cf3 	.word	0x08003cf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 faaa 	bl	8004190 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0208 	orr.w	r2, r2, #8
 8003c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0204 	bic.w	r2, r2, #4
 8003c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6999      	ldr	r1, [r3, #24]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	619a      	str	r2, [r3, #24]
      break;
 8003c6e:	e064      	b.n	8003d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 faf0 	bl	800425c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6999      	ldr	r1, [r3, #24]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	021a      	lsls	r2, r3, #8
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	619a      	str	r2, [r3, #24]
      break;
 8003cb0:	e043      	b.n	8003d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fb39 	bl	8004330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0208 	orr.w	r2, r2, #8
 8003ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0204 	bic.w	r2, r2, #4
 8003cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69d9      	ldr	r1, [r3, #28]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	61da      	str	r2, [r3, #28]
      break;
 8003cf0:	e023      	b.n	8003d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fb83 	bl	8004404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69d9      	ldr	r1, [r3, #28]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	021a      	lsls	r2, r3, #8
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	61da      	str	r2, [r3, #28]
      break;
 8003d32:	e002      	b.n	8003d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	75fb      	strb	r3, [r7, #23]
      break;
 8003d38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIM_ConfigClockSource+0x1c>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e0b4      	b.n	8003ed2 <HAL_TIM_ConfigClockSource+0x186>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da0:	d03e      	beq.n	8003e20 <HAL_TIM_ConfigClockSource+0xd4>
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da6:	f200 8087 	bhi.w	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dae:	f000 8086 	beq.w	8003ebe <HAL_TIM_ConfigClockSource+0x172>
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db6:	d87f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003db8:	2b70      	cmp	r3, #112	@ 0x70
 8003dba:	d01a      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0xa6>
 8003dbc:	2b70      	cmp	r3, #112	@ 0x70
 8003dbe:	d87b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc0:	2b60      	cmp	r3, #96	@ 0x60
 8003dc2:	d050      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x11a>
 8003dc4:	2b60      	cmp	r3, #96	@ 0x60
 8003dc6:	d877      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc8:	2b50      	cmp	r3, #80	@ 0x50
 8003dca:	d03c      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0xfa>
 8003dcc:	2b50      	cmp	r3, #80	@ 0x50
 8003dce:	d873      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd0:	2b40      	cmp	r3, #64	@ 0x40
 8003dd2:	d058      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x13a>
 8003dd4:	2b40      	cmp	r3, #64	@ 0x40
 8003dd6:	d86f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd8:	2b30      	cmp	r3, #48	@ 0x30
 8003dda:	d064      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ddc:	2b30      	cmp	r3, #48	@ 0x30
 8003dde:	d86b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d060      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d867      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05c      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d05a      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003df0:	e062      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e02:	f000 fbc4 	bl	800458e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	609a      	str	r2, [r3, #8]
      break;
 8003e1e:	e04f      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e30:	f000 fbad 	bl	800458e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e42:	609a      	str	r2, [r3, #8]
      break;
 8003e44:	e03c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 fb24 	bl	80044a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2150      	movs	r1, #80	@ 0x50
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fb7b 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8003e64:	e02c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e72:	461a      	mov	r2, r3
 8003e74:	f000 fb42 	bl	80044fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2160      	movs	r1, #96	@ 0x60
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fb6b 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8003e84:	e01c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e92:	461a      	mov	r2, r3
 8003e94:	f000 fb04 	bl	80044a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2140      	movs	r1, #64	@ 0x40
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fb5b 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8003ea4:	e00c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f000 fb52 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8003eb6:	e003      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
      break;
 8003ebc:	e000      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr

08003efe <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d107      	bne.n	8003f38 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f36:	e02a      	b.n	8003f8e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d107      	bne.n	8003f52 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2202      	movs	r2, #2
 8003f46:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f50:	e01d      	b.n	8003f8e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d107      	bne.n	8003f6c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2204      	movs	r2, #4
 8003f60:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f6a:	e010      	b.n	8003f8e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d107      	bne.n	8003f86 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2208      	movs	r2, #8
 8003f7a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f84:	e003      	b.n	8003f8e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7ff ffb5 	bl	8003efe <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	771a      	strb	r2, [r3, #28]
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d10b      	bne.n	8003fd2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d136      	bne.n	8004036 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fd0:	e031      	b.n	8004036 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d10b      	bne.n	8003ff4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d125      	bne.n	8004036 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ff2:	e020      	b.n	8004036 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d10b      	bne.n	8004016 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2204      	movs	r2, #4
 8004002:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d114      	bne.n	8004036 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004014:	e00f      	b.n	8004036 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	429a      	cmp	r2, r3
 800401e:	d10a      	bne.n	8004036 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2208      	movs	r2, #8
 8004024:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7ff ff4f 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	771a      	strb	r2, [r3, #28]
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	429a      	cmp	r2, r3
 8004060:	d103      	bne.n	800406a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	771a      	strb	r2, [r3, #28]
 8004068:	e019      	b.n	800409e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	d103      	bne.n	800407c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2202      	movs	r2, #2
 8004078:	771a      	strb	r2, [r3, #28]
 800407a:	e010      	b.n	800409e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	429a      	cmp	r2, r3
 8004084:	d103      	bne.n	800408e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2204      	movs	r2, #4
 800408a:	771a      	strb	r2, [r3, #28]
 800408c:	e007      	b.n	800409e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	429a      	cmp	r2, r3
 8004096:	d102      	bne.n	800409e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2208      	movs	r2, #8
 800409c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f7ff ff24 	bl	8003eec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	771a      	strb	r2, [r3, #28]
}
 80040aa:	bf00      	nop
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004184 <TIM_Base_SetConfig+0xd0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00b      	beq.n	80040e4 <TIM_Base_SetConfig+0x30>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d2:	d007      	beq.n	80040e4 <TIM_Base_SetConfig+0x30>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004188 <TIM_Base_SetConfig+0xd4>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d003      	beq.n	80040e4 <TIM_Base_SetConfig+0x30>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a2b      	ldr	r2, [pc, #172]	@ (800418c <TIM_Base_SetConfig+0xd8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d108      	bne.n	80040f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a22      	ldr	r2, [pc, #136]	@ (8004184 <TIM_Base_SetConfig+0xd0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00b      	beq.n	8004116 <TIM_Base_SetConfig+0x62>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004104:	d007      	beq.n	8004116 <TIM_Base_SetConfig+0x62>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a1f      	ldr	r2, [pc, #124]	@ (8004188 <TIM_Base_SetConfig+0xd4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d003      	beq.n	8004116 <TIM_Base_SetConfig+0x62>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a1e      	ldr	r2, [pc, #120]	@ (800418c <TIM_Base_SetConfig+0xd8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d108      	bne.n	8004128 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800411c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a0d      	ldr	r2, [pc, #52]	@ (8004184 <TIM_Base_SetConfig+0xd0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d103      	bne.n	800415c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f023 0201 	bic.w	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	611a      	str	r2, [r3, #16]
  }
}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr
 8004184:	40012c00 	.word	0x40012c00
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800

08004190 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f023 0201 	bic.w	r2, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0303 	bic.w	r3, r3, #3
 80041c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f023 0302 	bic.w	r3, r3, #2
 80041d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004258 <TIM_OC1_SetConfig+0xc8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d10c      	bne.n	8004206 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f023 0308 	bic.w	r3, r3, #8
 80041f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f023 0304 	bic.w	r3, r3, #4
 8004204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a13      	ldr	r2, [pc, #76]	@ (8004258 <TIM_OC1_SetConfig+0xc8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d111      	bne.n	8004232 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800421c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	621a      	str	r2, [r3, #32]
}
 800424c:	bf00      	nop
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40012c00 	.word	0x40012c00

0800425c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f023 0210 	bic.w	r2, r3, #16
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800428a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f023 0320 	bic.w	r3, r3, #32
 80042a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a1d      	ldr	r2, [pc, #116]	@ (800432c <TIM_OC2_SetConfig+0xd0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d10d      	bne.n	80042d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a14      	ldr	r2, [pc, #80]	@ (800432c <TIM_OC2_SetConfig+0xd0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d113      	bne.n	8004308 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr
 800432c:	40012c00 	.word	0x40012c00

08004330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800435e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0303 	bic.w	r3, r3, #3
 8004366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a1d      	ldr	r2, [pc, #116]	@ (8004400 <TIM_OC3_SetConfig+0xd0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d10d      	bne.n	80043aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	4313      	orrs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a14      	ldr	r2, [pc, #80]	@ (8004400 <TIM_OC3_SetConfig+0xd0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d113      	bne.n	80043da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	621a      	str	r2, [r3, #32]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40012c00 	.word	0x40012c00

08004404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800443a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800444e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	031b      	lsls	r3, r3, #12
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a0f      	ldr	r2, [pc, #60]	@ (800449c <TIM_OC4_SetConfig+0x98>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d109      	bne.n	8004478 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800446a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	019b      	lsls	r3, r3, #6
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr
 800449c:	40012c00 	.word	0x40012c00

080044a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f023 0201 	bic.w	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 030a 	bic.w	r3, r3, #10
 80044dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f023 0210 	bic.w	r2, r3, #16
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	031b      	lsls	r3, r3, #12
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004538:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	621a      	str	r2, [r3, #32]
}
 8004550:	bf00      	nop
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	f043 0307 	orr.w	r3, r3, #7
 800457c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	609a      	str	r2, [r3, #8]
}
 8004584:	bf00      	nop
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr

0800458e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800458e:	b480      	push	{r7}
 8004590:	b087      	sub	sp, #28
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	021a      	lsls	r2, r3, #8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	609a      	str	r2, [r3, #8]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr

080045cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	2201      	movs	r2, #1
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1a      	ldr	r2, [r3, #32]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	43db      	mvns	r3, r3
 80045ee:	401a      	ands	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a1a      	ldr	r2, [r3, #32]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	fa01 f303 	lsl.w	r3, r1, r3
 8004604:	431a      	orrs	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	621a      	str	r2, [r3, #32]
}
 800460a:	bf00      	nop
 800460c:	371c      	adds	r7, #28
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr

08004614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004628:	2302      	movs	r3, #2
 800462a:	e046      	b.n	80046ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a16      	ldr	r2, [pc, #88]	@ (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00e      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004678:	d009      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a12      	ldr	r2, [pc, #72]	@ (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a10      	ldr	r2, [pc, #64]	@ (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d10c      	bne.n	80046a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	4313      	orrs	r3, r2
 800469e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr
 80046c4:	40012c00 	.word	0x40012c00
 80046c8:	40000400 	.word	0x40000400
 80046cc:	40000800 	.word	0x40000800

080046d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e042      	b.n	8004768 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fd fbf4 	bl	8001ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2224      	movs	r2, #36	@ 0x24
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004712:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fded 	bl	80052f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695a      	ldr	r2, [r3, #20]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004738:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004748:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08a      	sub	sp, #40	@ 0x28
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b20      	cmp	r3, #32
 800478e:	d175      	bne.n	800487c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_UART_Transmit+0x2c>
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e06e      	b.n	800487e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2221      	movs	r2, #33	@ 0x21
 80047aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ae:	f7fd fce3 	bl	8002178 <HAL_GetTick>
 80047b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	88fa      	ldrh	r2, [r7, #6]
 80047b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	88fa      	ldrh	r2, [r7, #6]
 80047be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c8:	d108      	bne.n	80047dc <HAL_UART_Transmit+0x6c>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d104      	bne.n	80047dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	e003      	b.n	80047e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047e4:	e02e      	b.n	8004844 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2200      	movs	r2, #0
 80047ee:	2180      	movs	r1, #128	@ 0x80
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fb52 	bl	8004e9a <UART_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e03a      	b.n	800487e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800481c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	3302      	adds	r3, #2
 8004822:	61bb      	str	r3, [r7, #24]
 8004824:	e007      	b.n	8004836 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	3301      	adds	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800483a:	b29b      	uxth	r3, r3
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1cb      	bne.n	80047e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2200      	movs	r2, #0
 8004856:	2140      	movs	r1, #64	@ 0x40
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fb1e 	bl	8004e9a <UART_WaitOnFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e006      	b.n	800487e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	e000      	b.n	800487e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800487c:	2302      	movs	r3, #2
  }
}
 800487e:	4618      	mov	r0, r3
 8004880:	3720      	adds	r7, #32
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	4613      	mov	r3, r2
 8004892:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b20      	cmp	r3, #32
 800489e:	d121      	bne.n	80048e4 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_UART_Transmit_IT+0x26>
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e01a      	b.n	80048e6 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	88fa      	ldrh	r2, [r7, #6]
 80048ba:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	88fa      	ldrh	r2, [r7, #6]
 80048c0:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2221      	movs	r2, #33	@ 0x21
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80048de:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e000      	b.n	80048e6 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b20      	cmp	r3, #32
 8004908:	d112      	bne.n	8004930 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <HAL_UART_Receive_IT+0x26>
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e00b      	b.n	8004932 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	461a      	mov	r2, r3
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fb10 	bl	8004f4c <UART_Start_Receive_IT>
 800492c:	4603      	mov	r3, r0
 800492e:	e000      	b.n	8004932 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004930:	2302      	movs	r3, #2
  }
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b0ba      	sub	sp, #232	@ 0xe8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004962:	2300      	movs	r3, #0
 8004964:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004968:	2300      	movs	r3, #0
 800496a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800496e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800497a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10f      	bne.n	80049a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <HAL_UART_IRQHandler+0x66>
 800498e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fbec 	bl	8005178 <UART_Receive_IT>
      return;
 80049a0:	e25b      	b.n	8004e5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 80de 	beq.w	8004b68 <HAL_UART_IRQHandler+0x22c>
 80049ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d106      	bne.n	80049c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80d1 	beq.w	8004b68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <HAL_UART_IRQHandler+0xae>
 80049d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e2:	f043 0201 	orr.w	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <HAL_UART_IRQHandler+0xd2>
 80049f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a06:	f043 0202 	orr.w	r2, r3, #2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00b      	beq.n	8004a32 <HAL_UART_IRQHandler+0xf6>
 8004a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2a:	f043 0204 	orr.w	r2, r3, #4
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d011      	beq.n	8004a62 <HAL_UART_IRQHandler+0x126>
 8004a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d105      	bne.n	8004a56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5a:	f043 0208 	orr.w	r2, r3, #8
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 81f2 	beq.w	8004e50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_UART_IRQHandler+0x14e>
 8004a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fb77 	bl	8005178 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf14      	ite	ne
 8004a98:	2301      	movne	r3, #1
 8004a9a:	2300      	moveq	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d103      	bne.n	8004ab6 <HAL_UART_IRQHandler+0x17a>
 8004aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d04f      	beq.n	8004b56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fa81 	bl	8004fbe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d041      	beq.n	8004b4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3314      	adds	r3, #20
 8004ad0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ad8:	e853 3f00 	ldrex	r3, [r3]
 8004adc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ae4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3314      	adds	r3, #20
 8004af2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004af6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004afa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1d9      	bne.n	8004aca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d013      	beq.n	8004b46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b22:	4a7e      	ldr	r2, [pc, #504]	@ (8004d1c <HAL_UART_IRQHandler+0x3e0>)
 8004b24:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fd fd70 	bl	8002610 <HAL_DMA_Abort_IT>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d016      	beq.n	8004b64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b40:	4610      	mov	r0, r2
 8004b42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b44:	e00e      	b.n	8004b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f993 	bl	8004e72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b4c:	e00a      	b.n	8004b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f98f 	bl	8004e72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b54:	e006      	b.n	8004b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f98b 	bl	8004e72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004b62:	e175      	b.n	8004e50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b64:	bf00      	nop
    return;
 8004b66:	e173      	b.n	8004e50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	f040 814f 	bne.w	8004e10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b76:	f003 0310 	and.w	r3, r3, #16
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 8148 	beq.w	8004e10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8141 	beq.w	8004e10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	60bb      	str	r3, [r7, #8]
 8004ba2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 80b6 	beq.w	8004d20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 8145 	beq.w	8004e54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	f080 813e 	bcs.w	8004e54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bde:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	f000 8088 	beq.w	8004cfc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	330c      	adds	r3, #12
 8004bf2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c18:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c24:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1d9      	bne.n	8004bec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3314      	adds	r3, #20
 8004c3e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c4a:	f023 0301 	bic.w	r3, r3, #1
 8004c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3314      	adds	r3, #20
 8004c58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c5c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c60:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c64:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c68:	e841 2300 	strex	r3, r2, [r1]
 8004c6c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e1      	bne.n	8004c38 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3314      	adds	r3, #20
 8004c7a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3314      	adds	r3, #20
 8004c94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c98:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c9e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ca6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e3      	bne.n	8004c74 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ccc:	f023 0310 	bic.w	r3, r3, #16
 8004cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004cde:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ce0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ce4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ce6:	e841 2300 	strex	r3, r2, [r1]
 8004cea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004cec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1e3      	bne.n	8004cba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fd fc4e 	bl	8002598 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	4619      	mov	r1, r3
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8b6 	bl	8004e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d18:	e09c      	b.n	8004e54 <HAL_UART_IRQHandler+0x518>
 8004d1a:	bf00      	nop
 8004d1c:	08005083 	.word	0x08005083
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 808e 	beq.w	8004e58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8089 	beq.w	8004e58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004d6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e3      	bne.n	8004d46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3314      	adds	r3, #20
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	f023 0301 	bic.w	r3, r3, #1
 8004d94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3314      	adds	r3, #20
 8004d9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004da2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e3      	bne.n	8004d7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0310 	bic.w	r3, r3, #16
 8004dda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	330c      	adds	r3, #12
 8004de4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004de8:	61fa      	str	r2, [r7, #28]
 8004dea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	69b9      	ldr	r1, [r7, #24]
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	617b      	str	r3, [r7, #20]
   return(result);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e3      	bne.n	8004dc4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e06:	4619      	mov	r1, r3
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f83b 	bl	8004e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e0e:	e023      	b.n	8004e58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d009      	beq.n	8004e30 <HAL_UART_IRQHandler+0x4f4>
 8004e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f93e 	bl	80050aa <UART_Transmit_IT>
    return;
 8004e2e:	e014      	b.n	8004e5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00e      	beq.n	8004e5a <HAL_UART_IRQHandler+0x51e>
 8004e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f97d 	bl	8005148 <UART_EndTransmit_IT>
    return;
 8004e4e:	e004      	b.n	8004e5a <HAL_UART_IRQHandler+0x51e>
    return;
 8004e50:	bf00      	nop
 8004e52:	e002      	b.n	8004e5a <HAL_UART_IRQHandler+0x51e>
      return;
 8004e54:	bf00      	nop
 8004e56:	e000      	b.n	8004e5a <HAL_UART_IRQHandler+0x51e>
      return;
 8004e58:	bf00      	nop
  }
}
 8004e5a:	37e8      	adds	r7, #232	@ 0xe8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr

08004e72 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr

08004e84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bc80      	pop	{r7}
 8004e98:	4770      	bx	lr

08004e9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b086      	sub	sp, #24
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eaa:	e03b      	b.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eb2:	d037      	beq.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb4:	f7fd f960 	bl	8002178 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	6a3a      	ldr	r2, [r7, #32]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d302      	bcc.n	8004eca <UART_WaitOnFlagUntilTimeout+0x30>
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e03a      	b.n	8004f44 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d023      	beq.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b80      	cmp	r3, #128	@ 0x80
 8004ee0:	d020      	beq.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b40      	cmp	r3, #64	@ 0x40
 8004ee6:	d01d      	beq.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d116      	bne.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f856 	bl	8004fbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2208      	movs	r2, #8
 8004f16:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e00f      	b.n	8004f44 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	bf0c      	ite	eq
 8004f34:	2301      	moveq	r3, #1
 8004f36:	2300      	movne	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d0b4      	beq.n	8004eac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	4613      	mov	r3, r2
 8004f58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	88fa      	ldrh	r2, [r7, #6]
 8004f64:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	88fa      	ldrh	r2, [r7, #6]
 8004f6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2222      	movs	r2, #34	@ 0x22
 8004f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f90:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695a      	ldr	r2, [r3, #20]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0201 	orr.w	r2, r2, #1
 8004fa0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0220 	orr.w	r2, r2, #32
 8004fb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bc80      	pop	{r7}
 8004fbc:	4770      	bx	lr

08004fbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b095      	sub	sp, #84	@ 0x54
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	330c      	adds	r3, #12
 8004fcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	330c      	adds	r3, #12
 8004fe4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fe6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e5      	bne.n	8004fc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3314      	adds	r3, #20
 8005000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	61fb      	str	r3, [r7, #28]
   return(result);
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	f023 0301 	bic.w	r3, r3, #1
 8005010:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3314      	adds	r3, #20
 8005018:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800501a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800501c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005022:	e841 2300 	strex	r3, r2, [r1]
 8005026:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e5      	bne.n	8004ffa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005032:	2b01      	cmp	r3, #1
 8005034:	d119      	bne.n	800506a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	330c      	adds	r3, #12
 800503c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	60bb      	str	r3, [r7, #8]
   return(result);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f023 0310 	bic.w	r3, r3, #16
 800504c:	647b      	str	r3, [r7, #68]	@ 0x44
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	330c      	adds	r3, #12
 8005054:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005056:	61ba      	str	r2, [r7, #24]
 8005058:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	6979      	ldr	r1, [r7, #20]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	613b      	str	r3, [r7, #16]
   return(result);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e5      	bne.n	8005036 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005078:	bf00      	nop
 800507a:	3754      	adds	r7, #84	@ 0x54
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr

08005082 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff fee8 	bl	8004e72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b21      	cmp	r3, #33	@ 0x21
 80050bc:	d13e      	bne.n	800513c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050c6:	d114      	bne.n	80050f2 <UART_Transmit_IT+0x48>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d110      	bne.n	80050f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	1c9a      	adds	r2, r3, #2
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	621a      	str	r2, [r3, #32]
 80050f0:	e008      	b.n	8005104 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	1c59      	adds	r1, r3, #1
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6211      	str	r1, [r2, #32]
 80050fc:	781a      	ldrb	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29b      	uxth	r3, r3
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	4619      	mov	r1, r3
 8005112:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10f      	bne.n	8005138 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005126:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005136:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	e000      	b.n	800513e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800513c:	2302      	movs	r3, #2
  }
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr

08005148 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800515e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff fe79 	bl	8004e60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08c      	sub	sp, #48	@ 0x30
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b22      	cmp	r3, #34	@ 0x22
 800518a:	f040 80ae 	bne.w	80052ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005196:	d117      	bne.n	80051c8 <UART_Receive_IT+0x50>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d113      	bne.n	80051c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051a0:	2300      	movs	r3, #0
 80051a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c0:	1c9a      	adds	r2, r3, #2
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80051c6:	e026      	b.n	8005216 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051da:	d007      	beq.n	80051ec <UART_Receive_IT+0x74>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <UART_Receive_IT+0x82>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d106      	bne.n	80051fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	e008      	b.n	800520c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005206:	b2da      	uxtb	r2, r3
 8005208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800520a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29b      	uxth	r3, r3
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	4619      	mov	r1, r3
 8005224:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005226:	2b00      	cmp	r3, #0
 8005228:	d15d      	bne.n	80052e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0220 	bic.w	r2, r2, #32
 8005238:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005248:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0201 	bic.w	r2, r2, #1
 8005258:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526c:	2b01      	cmp	r3, #1
 800526e:	d135      	bne.n	80052dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	613b      	str	r3, [r7, #16]
   return(result);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f023 0310 	bic.w	r3, r3, #16
 800528c:	627b      	str	r3, [r7, #36]	@ 0x24
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	330c      	adds	r3, #12
 8005294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005296:	623a      	str	r2, [r7, #32]
 8005298:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	69f9      	ldr	r1, [r7, #28]
 800529c:	6a3a      	ldr	r2, [r7, #32]
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e5      	bne.n	8005276 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d10a      	bne.n	80052ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff fdd5 	bl	8004e84 <HAL_UARTEx_RxEventCallback>
 80052da:	e002      	b.n	80052e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7fc f931 	bl	8001544 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e002      	b.n	80052ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e000      	b.n	80052ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80052ea:	2302      	movs	r3, #2
  }
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3730      	adds	r7, #48	@ 0x30
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800532e:	f023 030c 	bic.w	r3, r3, #12
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	68b9      	ldr	r1, [r7, #8]
 8005338:	430b      	orrs	r3, r1
 800533a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699a      	ldr	r2, [r3, #24]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a2c      	ldr	r2, [pc, #176]	@ (8005408 <UART_SetConfig+0x114>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d103      	bne.n	8005364 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800535c:	f7fe f8cc 	bl	80034f8 <HAL_RCC_GetPCLK2Freq>
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	e002      	b.n	800536a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005364:	f7fe f8b4 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8005368:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009a      	lsls	r2, r3, #2
 8005374:	441a      	add	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	4a22      	ldr	r2, [pc, #136]	@ (800540c <UART_SetConfig+0x118>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	0119      	lsls	r1, r3, #4
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	009a      	lsls	r2, r3, #2
 8005394:	441a      	add	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	fbb2 f2f3 	udiv	r2, r2, r3
 80053a0:	4b1a      	ldr	r3, [pc, #104]	@ (800540c <UART_SetConfig+0x118>)
 80053a2:	fba3 0302 	umull	r0, r3, r3, r2
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	2064      	movs	r0, #100	@ 0x64
 80053aa:	fb00 f303 	mul.w	r3, r0, r3
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	3332      	adds	r3, #50	@ 0x32
 80053b4:	4a15      	ldr	r2, [pc, #84]	@ (800540c <UART_SetConfig+0x118>)
 80053b6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053c0:	4419      	add	r1, r3
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009a      	lsls	r2, r3, #2
 80053cc:	441a      	add	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80053d8:	4b0c      	ldr	r3, [pc, #48]	@ (800540c <UART_SetConfig+0x118>)
 80053da:	fba3 0302 	umull	r0, r3, r3, r2
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	2064      	movs	r0, #100	@ 0x64
 80053e2:	fb00 f303 	mul.w	r3, r0, r3
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	3332      	adds	r3, #50	@ 0x32
 80053ec:	4a07      	ldr	r2, [pc, #28]	@ (800540c <UART_SetConfig+0x118>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	f003 020f 	and.w	r2, r3, #15
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	440a      	add	r2, r1
 80053fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005400:	bf00      	nop
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40013800 	.word	0x40013800
 800540c:	51eb851f 	.word	0x51eb851f

08005410 <WS28XX_Delay>:
void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed);

/***********************************************************************************************************/

void WS28XX_Delay(uint32_t Delay)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
#if WS28XX_RTOS == WS28XX_RTOS_DISABLE
  HAL_Delay(Delay);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7fc feb7 	bl	800218c <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <WS28XX_Lock>:

/***********************************************************************************************************/

void WS28XX_Lock(WS28XX_HandleTypeDef *hLed)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  while (hLed->Lock)
 800542e:	e002      	b.n	8005436 <WS28XX_Lock+0x10>
  {
    WS28XX_Delay(1);
 8005430:	2001      	movs	r0, #1
 8005432:	f7ff ffed 	bl	8005410 <WS28XX_Delay>
  while (hLed->Lock)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	795b      	ldrb	r3, [r3, #5]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f8      	bne.n	8005430 <WS28XX_Lock+0xa>
  }
  hLed->Lock = 1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	715a      	strb	r2, [r3, #5]
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <WS28XX_UnLock>:

/***********************************************************************************************************/

void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  hLed->Lock = 0;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	715a      	strb	r2, [r3, #5]
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr

08005464 <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *hLed, TIM_HandleTypeDef *hTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	4611      	mov	r1, r2
 8005470:	461a      	mov	r2, r3
 8005472:	460b      	mov	r3, r1
 8005474:	80fb      	strh	r3, [r7, #6]
 8005476:	4613      	mov	r3, r2
 8005478:	717b      	strb	r3, [r7, #5]
  bool answer = false;
 800547a:	2300      	movs	r3, #0
 800547c:	75fb      	strb	r3, [r7, #23]
  uint32_t aar_value;
  do
  {
    if (hLed == NULL || hTim == NULL)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d07d      	beq.n	8005580 <WS28XX_Init+0x11c>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d07a      	beq.n	8005580 <WS28XX_Init+0x11c>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 800548a:	8c3b      	ldrh	r3, [r7, #32]
 800548c:	f240 2242 	movw	r2, #578	@ 0x242
 8005490:	4293      	cmp	r3, r2
 8005492:	d874      	bhi.n	800557e <WS28XX_Init+0x11a>
    {
      break;
    }
    hLed->Channel = Channel;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	797a      	ldrb	r2, [r7, #5]
 8005498:	711a      	strb	r2, [r3, #4]
    hLed->MaxPixel = Pixel;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8c3a      	ldrh	r2, [r7, #32]
 800549e:	815a      	strh	r2, [r3, #10]
    hLed->hTim = hTim;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fa ff1b 	bl	80002e4 <__aeabi_i2f>
 80054ae:	4603      	mov	r3, r0
 80054b0:	4936      	ldr	r1, [pc, #216]	@ (800558c <WS28XX_Init+0x128>)
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fb f81e 	bl	80004f4 <__aeabi_fdiv>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fa fe5a 	bl	8000178 <__aeabi_fsub>
 80054c4:	4603      	mov	r3, r0
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fb f8b0 	bl	800062c <__aeabi_f2uiz>
 80054cc:	4603      	mov	r3, r0
 80054ce:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(hLed->hTim ,aar_value);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(hLed->hTim, 0);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2200      	movs	r2, #0
 80054ea:	629a      	str	r2, [r3, #40]	@ 0x28
    hLed->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 80054ec:	6938      	ldr	r0, [r7, #16]
 80054ee:	f7fa fef5 	bl	80002dc <__aeabi_ui2f>
 80054f2:	4603      	mov	r3, r0
 80054f4:	4926      	ldr	r1, [pc, #152]	@ (8005590 <WS28XX_Init+0x12c>)
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fa ff48 	bl	800038c <__aeabi_fmul>
 80054fc:	4603      	mov	r3, r0
 80054fe:	4925      	ldr	r1, [pc, #148]	@ (8005594 <WS28XX_Init+0x130>)
 8005500:	4618      	mov	r0, r3
 8005502:	f7fa fff7 	bl	80004f4 <__aeabi_fdiv>
 8005506:	4603      	mov	r3, r0
 8005508:	4618      	mov	r0, r3
 800550a:	f7fb f88f 	bl	800062c <__aeabi_f2uiz>
 800550e:	4603      	mov	r3, r0
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	80da      	strh	r2, [r3, #6]
    hLed->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8005516:	6938      	ldr	r0, [r7, #16]
 8005518:	f7fa fee0 	bl	80002dc <__aeabi_ui2f>
 800551c:	4603      	mov	r3, r0
 800551e:	491b      	ldr	r1, [pc, #108]	@ (800558c <WS28XX_Init+0x128>)
 8005520:	4618      	mov	r0, r3
 8005522:	f7fa ff33 	bl	800038c <__aeabi_fmul>
 8005526:	4603      	mov	r3, r0
 8005528:	491a      	ldr	r1, [pc, #104]	@ (8005594 <WS28XX_Init+0x130>)
 800552a:	4618      	mov	r0, r3
 800552c:	f7fa ffe2 	bl	80004f4 <__aeabi_fdiv>
 8005530:	4603      	mov	r3, r0
 8005532:	4618      	mov	r0, r3
 8005534:	f7fb f87a 	bl	800062c <__aeabi_f2uiz>
 8005538:	4603      	mov	r3, r0
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	811a      	strh	r2, [r3, #8]
    memset(hLed->Pixel, 0, sizeof(hLed->Pixel));
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	330c      	adds	r3, #12
 8005544:	f240 62c6 	movw	r2, #1734	@ 0x6c6
 8005548:	2100      	movs	r1, #0
 800554a:	4618      	mov	r0, r3
 800554c:	f000 f960 	bl	8005810 <memset>
    memset(hLed->Buffer, 0, sizeof(hLed->Buffer));
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f203 63d2 	addw	r3, r3, #1746	@ 0x6d2
 8005556:	f243 6234 	movw	r2, #13876	@ 0x3634
 800555a:	2100      	movs	r1, #0
 800555c:	4618      	mov	r0, r3
 800555e:	f000 f957 	bl	8005810 <memset>
    HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, Pixel);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	791b      	ldrb	r3, [r3, #4]
 800556a:	4619      	mov	r1, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f203 62d2 	addw	r2, r3, #1746	@ 0x6d2
 8005572:	8c3b      	ldrh	r3, [r7, #32]
 8005574:	f7fe f986 	bl	8003884 <HAL_TIM_PWM_Start_DMA>
    answer = true;
 8005578:	2301      	movs	r3, #1
 800557a:	75fb      	strb	r3, [r7, #23]
 800557c:	e000      	b.n	8005580 <WS28XX_Init+0x11c>
      break;
 800557e:	bf00      	nop
  }
  while (0);

  return answer;
 8005580:	7dfb      	ldrb	r3, [r7, #23]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	3f4ccccd 	.word	0x3f4ccccd
 8005590:	3ecccccd 	.word	0x3ecccccd
 8005594:	3fa00000 	.word	0x3fa00000

08005598 <WS28XX_SetPixel_RGBW_565>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_565(WS28XX_HandleTypeDef *hLed, uint16_t Pixel, uint16_t Color, uint8_t Brightness)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	4608      	mov	r0, r1
 80055a2:	4611      	mov	r1, r2
 80055a4:	461a      	mov	r2, r3
 80055a6:	4603      	mov	r3, r0
 80055a8:	817b      	strh	r3, [r7, #10]
 80055aa:	460b      	mov	r3, r1
 80055ac:	813b      	strh	r3, [r7, #8]
 80055ae:	4613      	mov	r3, r2
 80055b0:	71fb      	strb	r3, [r7, #7]
  bool answer = true;
 80055b2:	2301      	movs	r3, #1
 80055b4:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= hLed->MaxPixel)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	895b      	ldrh	r3, [r3, #10]
 80055ba:	897a      	ldrh	r2, [r7, #10]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d302      	bcc.n	80055c6 <WS28XX_SetPixel_RGBW_565+0x2e>
    {
      answer = false;
 80055c0:	2300      	movs	r3, #0
 80055c2:	75fb      	strb	r3, [r7, #23]
      break;
 80055c4:	e051      	b.n	800566a <WS28XX_SetPixel_RGBW_565+0xd2>
    }
    Red = ((Color >> 8) & 0xF8) * Brightness / 255;
 80055c6:	893b      	ldrh	r3, [r7, #8]
 80055c8:	0a1b      	lsrs	r3, r3, #8
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80055d0:	79fa      	ldrb	r2, [r7, #7]
 80055d2:	fb02 f303 	mul.w	r3, r2, r3
 80055d6:	4a28      	ldr	r2, [pc, #160]	@ (8005678 <WS28XX_SetPixel_RGBW_565+0xe0>)
 80055d8:	fb82 1203 	smull	r1, r2, r2, r3
 80055dc:	441a      	add	r2, r3
 80055de:	11d2      	asrs	r2, r2, #7
 80055e0:	17db      	asrs	r3, r3, #31
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	75bb      	strb	r3, [r7, #22]
    Green = ((Color >> 3) & 0xFC)* Brightness / 255;
 80055e6:	893b      	ldrh	r3, [r7, #8]
 80055e8:	08db      	lsrs	r3, r3, #3
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80055f0:	79fa      	ldrb	r2, [r7, #7]
 80055f2:	fb02 f303 	mul.w	r3, r2, r3
 80055f6:	4a20      	ldr	r2, [pc, #128]	@ (8005678 <WS28XX_SetPixel_RGBW_565+0xe0>)
 80055f8:	fb82 1203 	smull	r1, r2, r2, r3
 80055fc:	441a      	add	r2, r3
 80055fe:	11d2      	asrs	r2, r2, #7
 8005600:	17db      	asrs	r3, r3, #31
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	757b      	strb	r3, [r7, #21]
    Blue = ((Color << 3) & 0xF8) * Brightness / 255;
 8005606:	893b      	ldrh	r3, [r7, #8]
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	b2db      	uxtb	r3, r3
 800560c:	79fa      	ldrb	r2, [r7, #7]
 800560e:	fb02 f303 	mul.w	r3, r2, r3
 8005612:	4a19      	ldr	r2, [pc, #100]	@ (8005678 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8005614:	fb82 1203 	smull	r1, r2, r2, r3
 8005618:	441a      	add	r2, r3
 800561a:	11d2      	asrs	r2, r2, #7
 800561c:	17db      	asrs	r3, r3, #31
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 8005622:	7d7b      	ldrb	r3, [r7, #21]
 8005624:	897a      	ldrh	r2, [r7, #10]
 8005626:	4915      	ldr	r1, [pc, #84]	@ (800567c <WS28XX_SetPixel_RGBW_565+0xe4>)
 8005628:	5cc8      	ldrb	r0, [r1, r3]
 800562a:	68f9      	ldr	r1, [r7, #12]
 800562c:	4613      	mov	r3, r2
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	4413      	add	r3, r2
 8005632:	440b      	add	r3, r1
 8005634:	330c      	adds	r3, #12
 8005636:	4602      	mov	r2, r0
 8005638:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 800563a:	7dbb      	ldrb	r3, [r7, #22]
 800563c:	897a      	ldrh	r2, [r7, #10]
 800563e:	490f      	ldr	r1, [pc, #60]	@ (800567c <WS28XX_SetPixel_RGBW_565+0xe4>)
 8005640:	5cc8      	ldrb	r0, [r1, r3]
 8005642:	68f9      	ldr	r1, [r7, #12]
 8005644:	4613      	mov	r3, r2
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	4413      	add	r3, r2
 800564a:	440b      	add	r3, r1
 800564c:	330d      	adds	r3, #13
 800564e:	4602      	mov	r2, r0
 8005650:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 8005652:	7d3b      	ldrb	r3, [r7, #20]
 8005654:	897a      	ldrh	r2, [r7, #10]
 8005656:	4909      	ldr	r1, [pc, #36]	@ (800567c <WS28XX_SetPixel_RGBW_565+0xe4>)
 8005658:	5cc8      	ldrb	r0, [r1, r3]
 800565a:	68f9      	ldr	r1, [r7, #12]
 800565c:	4613      	mov	r3, r2
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	4413      	add	r3, r2
 8005662:	440b      	add	r3, r1
 8005664:	330e      	adds	r3, #14
 8005666:	4602      	mov	r2, r0
 8005668:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 800566a:	7dfb      	ldrb	r3, [r7, #23]
}
 800566c:	4618      	mov	r0, r3
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	80808081 	.word	0x80808081
 800567c:	080061b0 	.word	0x080061b0

08005680 <WS28XX_Update>:
  * @param  *hLed: Pointer to WS28XX_hLedTypeDef structure
  *
  * @retval bool: true or false
  */
bool WS28XX_Update(WS28XX_HandleTypeDef *hLed)
{
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b089      	sub	sp, #36	@ 0x24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  bool answer = true;
 8005688:	2301      	movs	r3, #1
 800568a:	77fb      	strb	r3, [r7, #31]
  uint32_t i = 2;
 800568c:	2302      	movs	r3, #2
 800568e:	61bb      	str	r3, [r7, #24]
  WS28XX_Lock(hLed);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fec8 	bl	8005426 <WS28XX_Lock>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 8005696:	2300      	movs	r3, #0
 8005698:	82fb      	strh	r3, [r7, #22]
 800569a:	e03e      	b.n	800571a <WS28XX_Update+0x9a>
  {
    for (int rgb = 0; rgb < 3; rgb ++)
 800569c:	2300      	movs	r3, #0
 800569e:	613b      	str	r3, [r7, #16]
 80056a0:	e035      	b.n	800570e <WS28XX_Update+0x8e>
    {
      for (int b = 7; b >= 0 ; b--)
 80056a2:	2307      	movs	r3, #7
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	e02c      	b.n	8005702 <WS28XX_Update+0x82>
      {
        if ((hLed->Pixel[pixel][rgb] & (1 << b)) == 0)
 80056a8:	8afa      	ldrh	r2, [r7, #22]
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	4413      	add	r3, r2
 80056b2:	18ca      	adds	r2, r1, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4413      	add	r3, r2
 80056b8:	330c      	adds	r3, #12
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	fa42 f303 	asr.w	r3, r2, r3
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <WS28XX_Update+0x62>
        {
          hLed->Buffer[i] = hLed->Pulse0;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	88db      	ldrh	r3, [r3, #6]
 80056d0:	b2d9      	uxtb	r1, r3
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	4413      	add	r3, r2
 80056d8:	f203 63d2 	addw	r3, r3, #1746	@ 0x6d2
 80056dc:	460a      	mov	r2, r1
 80056de:	701a      	strb	r2, [r3, #0]
 80056e0:	e009      	b.n	80056f6 <WS28XX_Update+0x76>
        }
        else
        {
          hLed->Buffer[i] = hLed->Pulse1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	891b      	ldrh	r3, [r3, #8]
 80056e6:	b2d9      	uxtb	r1, r3
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	4413      	add	r3, r2
 80056ee:	f203 63d2 	addw	r3, r3, #1746	@ 0x6d2
 80056f2:	460a      	mov	r2, r1
 80056f4:	701a      	strb	r2, [r3, #0]
        }
        i++;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	3301      	adds	r3, #1
 80056fa:	61bb      	str	r3, [r7, #24]
      for (int b = 7; b >= 0 ; b--)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3b01      	subs	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	dacf      	bge.n	80056a8 <WS28XX_Update+0x28>
    for (int rgb = 0; rgb < 3; rgb ++)
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	3301      	adds	r3, #1
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2b02      	cmp	r3, #2
 8005712:	ddc6      	ble.n	80056a2 <WS28XX_Update+0x22>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 8005714:	8afb      	ldrh	r3, [r7, #22]
 8005716:	3301      	adds	r3, #1
 8005718:	82fb      	strh	r3, [r7, #22]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	895b      	ldrh	r3, [r3, #10]
 800571e:	8afa      	ldrh	r2, [r7, #22]
 8005720:	429a      	cmp	r2, r3
 8005722:	d3bb      	bcc.n	800569c <WS28XX_Update+0x1c>
      }
    }
  }
  if (HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, (hLed->MaxPixel * 24) + 4) != HAL_OK)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	791b      	ldrb	r3, [r3, #4]
 800572c:	461c      	mov	r4, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f203 62d2 	addw	r2, r3, #1746	@ 0x6d2
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	895b      	ldrh	r3, [r3, #10]
 8005738:	4619      	mov	r1, r3
 800573a:	0049      	lsls	r1, r1, #1
 800573c:	440b      	add	r3, r1
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	b29b      	uxth	r3, r3
 8005742:	3304      	adds	r3, #4
 8005744:	b29b      	uxth	r3, r3
 8005746:	4621      	mov	r1, r4
 8005748:	f7fe f89c 	bl	8003884 <HAL_TIM_PWM_Start_DMA>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <WS28XX_Update+0xd6>
  {
    answer = false;
 8005752:	2300      	movs	r3, #0
 8005754:	77fb      	strb	r3, [r7, #31]
  }
  WS28XX_UnLock(hLed);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff fe78 	bl	800544c <WS28XX_UnLock>
  return answer;
 800575c:	7ffb      	ldrb	r3, [r7, #31]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3724      	adds	r7, #36	@ 0x24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd90      	pop	{r4, r7, pc}
	...

08005768 <sniprintf>:
 8005768:	b40c      	push	{r2, r3}
 800576a:	b530      	push	{r4, r5, lr}
 800576c:	4b17      	ldr	r3, [pc, #92]	@ (80057cc <sniprintf+0x64>)
 800576e:	1e0c      	subs	r4, r1, #0
 8005770:	681d      	ldr	r5, [r3, #0]
 8005772:	b09d      	sub	sp, #116	@ 0x74
 8005774:	da08      	bge.n	8005788 <sniprintf+0x20>
 8005776:	238b      	movs	r3, #139	@ 0x8b
 8005778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800577c:	602b      	str	r3, [r5, #0]
 800577e:	b01d      	add	sp, #116	@ 0x74
 8005780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005784:	b002      	add	sp, #8
 8005786:	4770      	bx	lr
 8005788:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800578c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005790:	bf0c      	ite	eq
 8005792:	4623      	moveq	r3, r4
 8005794:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005798:	9304      	str	r3, [sp, #16]
 800579a:	9307      	str	r3, [sp, #28]
 800579c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80057a0:	9002      	str	r0, [sp, #8]
 80057a2:	9006      	str	r0, [sp, #24]
 80057a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80057a8:	4628      	mov	r0, r5
 80057aa:	ab21      	add	r3, sp, #132	@ 0x84
 80057ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80057ae:	a902      	add	r1, sp, #8
 80057b0:	9301      	str	r3, [sp, #4]
 80057b2:	f000 f8bd 	bl	8005930 <_svfiprintf_r>
 80057b6:	1c43      	adds	r3, r0, #1
 80057b8:	bfbc      	itt	lt
 80057ba:	238b      	movlt	r3, #139	@ 0x8b
 80057bc:	602b      	strlt	r3, [r5, #0]
 80057be:	2c00      	cmp	r4, #0
 80057c0:	d0dd      	beq.n	800577e <sniprintf+0x16>
 80057c2:	2200      	movs	r2, #0
 80057c4:	9b02      	ldr	r3, [sp, #8]
 80057c6:	701a      	strb	r2, [r3, #0]
 80057c8:	e7d9      	b.n	800577e <sniprintf+0x16>
 80057ca:	bf00      	nop
 80057cc:	2000039c 	.word	0x2000039c

080057d0 <siprintf>:
 80057d0:	b40e      	push	{r1, r2, r3}
 80057d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80057d6:	b500      	push	{lr}
 80057d8:	b09c      	sub	sp, #112	@ 0x70
 80057da:	ab1d      	add	r3, sp, #116	@ 0x74
 80057dc:	9002      	str	r0, [sp, #8]
 80057de:	9006      	str	r0, [sp, #24]
 80057e0:	9107      	str	r1, [sp, #28]
 80057e2:	9104      	str	r1, [sp, #16]
 80057e4:	4808      	ldr	r0, [pc, #32]	@ (8005808 <siprintf+0x38>)
 80057e6:	4909      	ldr	r1, [pc, #36]	@ (800580c <siprintf+0x3c>)
 80057e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80057ec:	9105      	str	r1, [sp, #20]
 80057ee:	6800      	ldr	r0, [r0, #0]
 80057f0:	a902      	add	r1, sp, #8
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	f000 f89c 	bl	8005930 <_svfiprintf_r>
 80057f8:	2200      	movs	r2, #0
 80057fa:	9b02      	ldr	r3, [sp, #8]
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	b01c      	add	sp, #112	@ 0x70
 8005800:	f85d eb04 	ldr.w	lr, [sp], #4
 8005804:	b003      	add	sp, #12
 8005806:	4770      	bx	lr
 8005808:	2000039c 	.word	0x2000039c
 800580c:	ffff0208 	.word	0xffff0208

08005810 <memset>:
 8005810:	4603      	mov	r3, r0
 8005812:	4402      	add	r2, r0
 8005814:	4293      	cmp	r3, r2
 8005816:	d100      	bne.n	800581a <memset+0xa>
 8005818:	4770      	bx	lr
 800581a:	f803 1b01 	strb.w	r1, [r3], #1
 800581e:	e7f9      	b.n	8005814 <memset+0x4>

08005820 <__errno>:
 8005820:	4b01      	ldr	r3, [pc, #4]	@ (8005828 <__errno+0x8>)
 8005822:	6818      	ldr	r0, [r3, #0]
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	2000039c 	.word	0x2000039c

0800582c <__libc_init_array>:
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	2600      	movs	r6, #0
 8005830:	4d0c      	ldr	r5, [pc, #48]	@ (8005864 <__libc_init_array+0x38>)
 8005832:	4c0d      	ldr	r4, [pc, #52]	@ (8005868 <__libc_init_array+0x3c>)
 8005834:	1b64      	subs	r4, r4, r5
 8005836:	10a4      	asrs	r4, r4, #2
 8005838:	42a6      	cmp	r6, r4
 800583a:	d109      	bne.n	8005850 <__libc_init_array+0x24>
 800583c:	f000 fc78 	bl	8006130 <_init>
 8005840:	2600      	movs	r6, #0
 8005842:	4d0a      	ldr	r5, [pc, #40]	@ (800586c <__libc_init_array+0x40>)
 8005844:	4c0a      	ldr	r4, [pc, #40]	@ (8005870 <__libc_init_array+0x44>)
 8005846:	1b64      	subs	r4, r4, r5
 8005848:	10a4      	asrs	r4, r4, #2
 800584a:	42a6      	cmp	r6, r4
 800584c:	d105      	bne.n	800585a <__libc_init_array+0x2e>
 800584e:	bd70      	pop	{r4, r5, r6, pc}
 8005850:	f855 3b04 	ldr.w	r3, [r5], #4
 8005854:	4798      	blx	r3
 8005856:	3601      	adds	r6, #1
 8005858:	e7ee      	b.n	8005838 <__libc_init_array+0xc>
 800585a:	f855 3b04 	ldr.w	r3, [r5], #4
 800585e:	4798      	blx	r3
 8005860:	3601      	adds	r6, #1
 8005862:	e7f2      	b.n	800584a <__libc_init_array+0x1e>
 8005864:	080062ec 	.word	0x080062ec
 8005868:	080062ec 	.word	0x080062ec
 800586c:	080062ec 	.word	0x080062ec
 8005870:	080062f0 	.word	0x080062f0

08005874 <__retarget_lock_acquire_recursive>:
 8005874:	4770      	bx	lr

08005876 <__retarget_lock_release_recursive>:
 8005876:	4770      	bx	lr

08005878 <__ssputs_r>:
 8005878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800587c:	461f      	mov	r7, r3
 800587e:	688e      	ldr	r6, [r1, #8]
 8005880:	4682      	mov	sl, r0
 8005882:	42be      	cmp	r6, r7
 8005884:	460c      	mov	r4, r1
 8005886:	4690      	mov	r8, r2
 8005888:	680b      	ldr	r3, [r1, #0]
 800588a:	d82d      	bhi.n	80058e8 <__ssputs_r+0x70>
 800588c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005890:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005894:	d026      	beq.n	80058e4 <__ssputs_r+0x6c>
 8005896:	6965      	ldr	r5, [r4, #20]
 8005898:	6909      	ldr	r1, [r1, #16]
 800589a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800589e:	eba3 0901 	sub.w	r9, r3, r1
 80058a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058a6:	1c7b      	adds	r3, r7, #1
 80058a8:	444b      	add	r3, r9
 80058aa:	106d      	asrs	r5, r5, #1
 80058ac:	429d      	cmp	r5, r3
 80058ae:	bf38      	it	cc
 80058b0:	461d      	movcc	r5, r3
 80058b2:	0553      	lsls	r3, r2, #21
 80058b4:	d527      	bpl.n	8005906 <__ssputs_r+0x8e>
 80058b6:	4629      	mov	r1, r5
 80058b8:	f000 f958 	bl	8005b6c <_malloc_r>
 80058bc:	4606      	mov	r6, r0
 80058be:	b360      	cbz	r0, 800591a <__ssputs_r+0xa2>
 80058c0:	464a      	mov	r2, r9
 80058c2:	6921      	ldr	r1, [r4, #16]
 80058c4:	f000 fbd6 	bl	8006074 <memcpy>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80058ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	6126      	str	r6, [r4, #16]
 80058d6:	444e      	add	r6, r9
 80058d8:	6026      	str	r6, [r4, #0]
 80058da:	463e      	mov	r6, r7
 80058dc:	6165      	str	r5, [r4, #20]
 80058de:	eba5 0509 	sub.w	r5, r5, r9
 80058e2:	60a5      	str	r5, [r4, #8]
 80058e4:	42be      	cmp	r6, r7
 80058e6:	d900      	bls.n	80058ea <__ssputs_r+0x72>
 80058e8:	463e      	mov	r6, r7
 80058ea:	4632      	mov	r2, r6
 80058ec:	4641      	mov	r1, r8
 80058ee:	6820      	ldr	r0, [r4, #0]
 80058f0:	f000 fb88 	bl	8006004 <memmove>
 80058f4:	2000      	movs	r0, #0
 80058f6:	68a3      	ldr	r3, [r4, #8]
 80058f8:	1b9b      	subs	r3, r3, r6
 80058fa:	60a3      	str	r3, [r4, #8]
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	4433      	add	r3, r6
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005906:	462a      	mov	r2, r5
 8005908:	f000 fb4e 	bl	8005fa8 <_realloc_r>
 800590c:	4606      	mov	r6, r0
 800590e:	2800      	cmp	r0, #0
 8005910:	d1e0      	bne.n	80058d4 <__ssputs_r+0x5c>
 8005912:	4650      	mov	r0, sl
 8005914:	6921      	ldr	r1, [r4, #16]
 8005916:	f000 fbbb 	bl	8006090 <_free_r>
 800591a:	230c      	movs	r3, #12
 800591c:	f8ca 3000 	str.w	r3, [sl]
 8005920:	89a3      	ldrh	r3, [r4, #12]
 8005922:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800592a:	81a3      	strh	r3, [r4, #12]
 800592c:	e7e9      	b.n	8005902 <__ssputs_r+0x8a>
	...

08005930 <_svfiprintf_r>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	4698      	mov	r8, r3
 8005936:	898b      	ldrh	r3, [r1, #12]
 8005938:	4607      	mov	r7, r0
 800593a:	061b      	lsls	r3, r3, #24
 800593c:	460d      	mov	r5, r1
 800593e:	4614      	mov	r4, r2
 8005940:	b09d      	sub	sp, #116	@ 0x74
 8005942:	d510      	bpl.n	8005966 <_svfiprintf_r+0x36>
 8005944:	690b      	ldr	r3, [r1, #16]
 8005946:	b973      	cbnz	r3, 8005966 <_svfiprintf_r+0x36>
 8005948:	2140      	movs	r1, #64	@ 0x40
 800594a:	f000 f90f 	bl	8005b6c <_malloc_r>
 800594e:	6028      	str	r0, [r5, #0]
 8005950:	6128      	str	r0, [r5, #16]
 8005952:	b930      	cbnz	r0, 8005962 <_svfiprintf_r+0x32>
 8005954:	230c      	movs	r3, #12
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800595c:	b01d      	add	sp, #116	@ 0x74
 800595e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005962:	2340      	movs	r3, #64	@ 0x40
 8005964:	616b      	str	r3, [r5, #20]
 8005966:	2300      	movs	r3, #0
 8005968:	9309      	str	r3, [sp, #36]	@ 0x24
 800596a:	2320      	movs	r3, #32
 800596c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005970:	2330      	movs	r3, #48	@ 0x30
 8005972:	f04f 0901 	mov.w	r9, #1
 8005976:	f8cd 800c 	str.w	r8, [sp, #12]
 800597a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005b14 <_svfiprintf_r+0x1e4>
 800597e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005982:	4623      	mov	r3, r4
 8005984:	469a      	mov	sl, r3
 8005986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800598a:	b10a      	cbz	r2, 8005990 <_svfiprintf_r+0x60>
 800598c:	2a25      	cmp	r2, #37	@ 0x25
 800598e:	d1f9      	bne.n	8005984 <_svfiprintf_r+0x54>
 8005990:	ebba 0b04 	subs.w	fp, sl, r4
 8005994:	d00b      	beq.n	80059ae <_svfiprintf_r+0x7e>
 8005996:	465b      	mov	r3, fp
 8005998:	4622      	mov	r2, r4
 800599a:	4629      	mov	r1, r5
 800599c:	4638      	mov	r0, r7
 800599e:	f7ff ff6b 	bl	8005878 <__ssputs_r>
 80059a2:	3001      	adds	r0, #1
 80059a4:	f000 80a7 	beq.w	8005af6 <_svfiprintf_r+0x1c6>
 80059a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059aa:	445a      	add	r2, fp
 80059ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80059ae:	f89a 3000 	ldrb.w	r3, [sl]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 809f 	beq.w	8005af6 <_svfiprintf_r+0x1c6>
 80059b8:	2300      	movs	r3, #0
 80059ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059c2:	f10a 0a01 	add.w	sl, sl, #1
 80059c6:	9304      	str	r3, [sp, #16]
 80059c8:	9307      	str	r3, [sp, #28]
 80059ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80059ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80059d0:	4654      	mov	r4, sl
 80059d2:	2205      	movs	r2, #5
 80059d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059d8:	484e      	ldr	r0, [pc, #312]	@ (8005b14 <_svfiprintf_r+0x1e4>)
 80059da:	f000 fb3d 	bl	8006058 <memchr>
 80059de:	9a04      	ldr	r2, [sp, #16]
 80059e0:	b9d8      	cbnz	r0, 8005a1a <_svfiprintf_r+0xea>
 80059e2:	06d0      	lsls	r0, r2, #27
 80059e4:	bf44      	itt	mi
 80059e6:	2320      	movmi	r3, #32
 80059e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059ec:	0711      	lsls	r1, r2, #28
 80059ee:	bf44      	itt	mi
 80059f0:	232b      	movmi	r3, #43	@ 0x2b
 80059f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059f6:	f89a 3000 	ldrb.w	r3, [sl]
 80059fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80059fc:	d015      	beq.n	8005a2a <_svfiprintf_r+0xfa>
 80059fe:	4654      	mov	r4, sl
 8005a00:	2000      	movs	r0, #0
 8005a02:	f04f 0c0a 	mov.w	ip, #10
 8005a06:	9a07      	ldr	r2, [sp, #28]
 8005a08:	4621      	mov	r1, r4
 8005a0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a0e:	3b30      	subs	r3, #48	@ 0x30
 8005a10:	2b09      	cmp	r3, #9
 8005a12:	d94b      	bls.n	8005aac <_svfiprintf_r+0x17c>
 8005a14:	b1b0      	cbz	r0, 8005a44 <_svfiprintf_r+0x114>
 8005a16:	9207      	str	r2, [sp, #28]
 8005a18:	e014      	b.n	8005a44 <_svfiprintf_r+0x114>
 8005a1a:	eba0 0308 	sub.w	r3, r0, r8
 8005a1e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a22:	4313      	orrs	r3, r2
 8005a24:	46a2      	mov	sl, r4
 8005a26:	9304      	str	r3, [sp, #16]
 8005a28:	e7d2      	b.n	80059d0 <_svfiprintf_r+0xa0>
 8005a2a:	9b03      	ldr	r3, [sp, #12]
 8005a2c:	1d19      	adds	r1, r3, #4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	9103      	str	r1, [sp, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bfbb      	ittet	lt
 8005a36:	425b      	neglt	r3, r3
 8005a38:	f042 0202 	orrlt.w	r2, r2, #2
 8005a3c:	9307      	strge	r3, [sp, #28]
 8005a3e:	9307      	strlt	r3, [sp, #28]
 8005a40:	bfb8      	it	lt
 8005a42:	9204      	strlt	r2, [sp, #16]
 8005a44:	7823      	ldrb	r3, [r4, #0]
 8005a46:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a48:	d10a      	bne.n	8005a60 <_svfiprintf_r+0x130>
 8005a4a:	7863      	ldrb	r3, [r4, #1]
 8005a4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a4e:	d132      	bne.n	8005ab6 <_svfiprintf_r+0x186>
 8005a50:	9b03      	ldr	r3, [sp, #12]
 8005a52:	3402      	adds	r4, #2
 8005a54:	1d1a      	adds	r2, r3, #4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	9203      	str	r2, [sp, #12]
 8005a5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a5e:	9305      	str	r3, [sp, #20]
 8005a60:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005b18 <_svfiprintf_r+0x1e8>
 8005a64:	2203      	movs	r2, #3
 8005a66:	4650      	mov	r0, sl
 8005a68:	7821      	ldrb	r1, [r4, #0]
 8005a6a:	f000 faf5 	bl	8006058 <memchr>
 8005a6e:	b138      	cbz	r0, 8005a80 <_svfiprintf_r+0x150>
 8005a70:	2240      	movs	r2, #64	@ 0x40
 8005a72:	9b04      	ldr	r3, [sp, #16]
 8005a74:	eba0 000a 	sub.w	r0, r0, sl
 8005a78:	4082      	lsls	r2, r0
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	3401      	adds	r4, #1
 8005a7e:	9304      	str	r3, [sp, #16]
 8005a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a84:	2206      	movs	r2, #6
 8005a86:	4825      	ldr	r0, [pc, #148]	@ (8005b1c <_svfiprintf_r+0x1ec>)
 8005a88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a8c:	f000 fae4 	bl	8006058 <memchr>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	d036      	beq.n	8005b02 <_svfiprintf_r+0x1d2>
 8005a94:	4b22      	ldr	r3, [pc, #136]	@ (8005b20 <_svfiprintf_r+0x1f0>)
 8005a96:	bb1b      	cbnz	r3, 8005ae0 <_svfiprintf_r+0x1b0>
 8005a98:	9b03      	ldr	r3, [sp, #12]
 8005a9a:	3307      	adds	r3, #7
 8005a9c:	f023 0307 	bic.w	r3, r3, #7
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	9303      	str	r3, [sp, #12]
 8005aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa6:	4433      	add	r3, r6
 8005aa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aaa:	e76a      	b.n	8005982 <_svfiprintf_r+0x52>
 8005aac:	460c      	mov	r4, r1
 8005aae:	2001      	movs	r0, #1
 8005ab0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ab4:	e7a8      	b.n	8005a08 <_svfiprintf_r+0xd8>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f04f 0c0a 	mov.w	ip, #10
 8005abc:	4619      	mov	r1, r3
 8005abe:	3401      	adds	r4, #1
 8005ac0:	9305      	str	r3, [sp, #20]
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ac8:	3a30      	subs	r2, #48	@ 0x30
 8005aca:	2a09      	cmp	r2, #9
 8005acc:	d903      	bls.n	8005ad6 <_svfiprintf_r+0x1a6>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0c6      	beq.n	8005a60 <_svfiprintf_r+0x130>
 8005ad2:	9105      	str	r1, [sp, #20]
 8005ad4:	e7c4      	b.n	8005a60 <_svfiprintf_r+0x130>
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	2301      	movs	r3, #1
 8005ada:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ade:	e7f0      	b.n	8005ac2 <_svfiprintf_r+0x192>
 8005ae0:	ab03      	add	r3, sp, #12
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	462a      	mov	r2, r5
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b24 <_svfiprintf_r+0x1f4>)
 8005aea:	a904      	add	r1, sp, #16
 8005aec:	f3af 8000 	nop.w
 8005af0:	1c42      	adds	r2, r0, #1
 8005af2:	4606      	mov	r6, r0
 8005af4:	d1d6      	bne.n	8005aa4 <_svfiprintf_r+0x174>
 8005af6:	89ab      	ldrh	r3, [r5, #12]
 8005af8:	065b      	lsls	r3, r3, #25
 8005afa:	f53f af2d 	bmi.w	8005958 <_svfiprintf_r+0x28>
 8005afe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b00:	e72c      	b.n	800595c <_svfiprintf_r+0x2c>
 8005b02:	ab03      	add	r3, sp, #12
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	462a      	mov	r2, r5
 8005b08:	4638      	mov	r0, r7
 8005b0a:	4b06      	ldr	r3, [pc, #24]	@ (8005b24 <_svfiprintf_r+0x1f4>)
 8005b0c:	a904      	add	r1, sp, #16
 8005b0e:	f000 f91f 	bl	8005d50 <_printf_i>
 8005b12:	e7ed      	b.n	8005af0 <_svfiprintf_r+0x1c0>
 8005b14:	080062b0 	.word	0x080062b0
 8005b18:	080062b6 	.word	0x080062b6
 8005b1c:	080062ba 	.word	0x080062ba
 8005b20:	00000000 	.word	0x00000000
 8005b24:	08005879 	.word	0x08005879

08005b28 <sbrk_aligned>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	4e0f      	ldr	r6, [pc, #60]	@ (8005b68 <sbrk_aligned+0x40>)
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	6831      	ldr	r1, [r6, #0]
 8005b30:	4605      	mov	r5, r0
 8005b32:	b911      	cbnz	r1, 8005b3a <sbrk_aligned+0x12>
 8005b34:	f000 fa80 	bl	8006038 <_sbrk_r>
 8005b38:	6030      	str	r0, [r6, #0]
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f000 fa7b 	bl	8006038 <_sbrk_r>
 8005b42:	1c43      	adds	r3, r0, #1
 8005b44:	d103      	bne.n	8005b4e <sbrk_aligned+0x26>
 8005b46:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	bd70      	pop	{r4, r5, r6, pc}
 8005b4e:	1cc4      	adds	r4, r0, #3
 8005b50:	f024 0403 	bic.w	r4, r4, #3
 8005b54:	42a0      	cmp	r0, r4
 8005b56:	d0f8      	beq.n	8005b4a <sbrk_aligned+0x22>
 8005b58:	1a21      	subs	r1, r4, r0
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f000 fa6c 	bl	8006038 <_sbrk_r>
 8005b60:	3001      	adds	r0, #1
 8005b62:	d1f2      	bne.n	8005b4a <sbrk_aligned+0x22>
 8005b64:	e7ef      	b.n	8005b46 <sbrk_aligned+0x1e>
 8005b66:	bf00      	nop
 8005b68:	200044f0 	.word	0x200044f0

08005b6c <_malloc_r>:
 8005b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b70:	1ccd      	adds	r5, r1, #3
 8005b72:	f025 0503 	bic.w	r5, r5, #3
 8005b76:	3508      	adds	r5, #8
 8005b78:	2d0c      	cmp	r5, #12
 8005b7a:	bf38      	it	cc
 8005b7c:	250c      	movcc	r5, #12
 8005b7e:	2d00      	cmp	r5, #0
 8005b80:	4606      	mov	r6, r0
 8005b82:	db01      	blt.n	8005b88 <_malloc_r+0x1c>
 8005b84:	42a9      	cmp	r1, r5
 8005b86:	d904      	bls.n	8005b92 <_malloc_r+0x26>
 8005b88:	230c      	movs	r3, #12
 8005b8a:	6033      	str	r3, [r6, #0]
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c68 <_malloc_r+0xfc>
 8005b96:	f000 f9fb 	bl	8005f90 <__malloc_lock>
 8005b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b9e:	461c      	mov	r4, r3
 8005ba0:	bb44      	cbnz	r4, 8005bf4 <_malloc_r+0x88>
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	f7ff ffbf 	bl	8005b28 <sbrk_aligned>
 8005baa:	1c43      	adds	r3, r0, #1
 8005bac:	4604      	mov	r4, r0
 8005bae:	d158      	bne.n	8005c62 <_malloc_r+0xf6>
 8005bb0:	f8d8 4000 	ldr.w	r4, [r8]
 8005bb4:	4627      	mov	r7, r4
 8005bb6:	2f00      	cmp	r7, #0
 8005bb8:	d143      	bne.n	8005c42 <_malloc_r+0xd6>
 8005bba:	2c00      	cmp	r4, #0
 8005bbc:	d04b      	beq.n	8005c56 <_malloc_r+0xea>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	eb04 0903 	add.w	r9, r4, r3
 8005bc8:	f000 fa36 	bl	8006038 <_sbrk_r>
 8005bcc:	4581      	cmp	r9, r0
 8005bce:	d142      	bne.n	8005c56 <_malloc_r+0xea>
 8005bd0:	6821      	ldr	r1, [r4, #0]
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	1a6d      	subs	r5, r5, r1
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	f7ff ffa6 	bl	8005b28 <sbrk_aligned>
 8005bdc:	3001      	adds	r0, #1
 8005bde:	d03a      	beq.n	8005c56 <_malloc_r+0xea>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	442b      	add	r3, r5
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	f8d8 3000 	ldr.w	r3, [r8]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	bb62      	cbnz	r2, 8005c48 <_malloc_r+0xdc>
 8005bee:	f8c8 7000 	str.w	r7, [r8]
 8005bf2:	e00f      	b.n	8005c14 <_malloc_r+0xa8>
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	1b52      	subs	r2, r2, r5
 8005bf8:	d420      	bmi.n	8005c3c <_malloc_r+0xd0>
 8005bfa:	2a0b      	cmp	r2, #11
 8005bfc:	d917      	bls.n	8005c2e <_malloc_r+0xc2>
 8005bfe:	1961      	adds	r1, r4, r5
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	6025      	str	r5, [r4, #0]
 8005c04:	bf18      	it	ne
 8005c06:	6059      	strne	r1, [r3, #4]
 8005c08:	6863      	ldr	r3, [r4, #4]
 8005c0a:	bf08      	it	eq
 8005c0c:	f8c8 1000 	streq.w	r1, [r8]
 8005c10:	5162      	str	r2, [r4, r5]
 8005c12:	604b      	str	r3, [r1, #4]
 8005c14:	4630      	mov	r0, r6
 8005c16:	f000 f9c1 	bl	8005f9c <__malloc_unlock>
 8005c1a:	f104 000b 	add.w	r0, r4, #11
 8005c1e:	1d23      	adds	r3, r4, #4
 8005c20:	f020 0007 	bic.w	r0, r0, #7
 8005c24:	1ac2      	subs	r2, r0, r3
 8005c26:	bf1c      	itt	ne
 8005c28:	1a1b      	subne	r3, r3, r0
 8005c2a:	50a3      	strne	r3, [r4, r2]
 8005c2c:	e7af      	b.n	8005b8e <_malloc_r+0x22>
 8005c2e:	6862      	ldr	r2, [r4, #4]
 8005c30:	42a3      	cmp	r3, r4
 8005c32:	bf0c      	ite	eq
 8005c34:	f8c8 2000 	streq.w	r2, [r8]
 8005c38:	605a      	strne	r2, [r3, #4]
 8005c3a:	e7eb      	b.n	8005c14 <_malloc_r+0xa8>
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	6864      	ldr	r4, [r4, #4]
 8005c40:	e7ae      	b.n	8005ba0 <_malloc_r+0x34>
 8005c42:	463c      	mov	r4, r7
 8005c44:	687f      	ldr	r7, [r7, #4]
 8005c46:	e7b6      	b.n	8005bb6 <_malloc_r+0x4a>
 8005c48:	461a      	mov	r2, r3
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	42a3      	cmp	r3, r4
 8005c4e:	d1fb      	bne.n	8005c48 <_malloc_r+0xdc>
 8005c50:	2300      	movs	r3, #0
 8005c52:	6053      	str	r3, [r2, #4]
 8005c54:	e7de      	b.n	8005c14 <_malloc_r+0xa8>
 8005c56:	230c      	movs	r3, #12
 8005c58:	4630      	mov	r0, r6
 8005c5a:	6033      	str	r3, [r6, #0]
 8005c5c:	f000 f99e 	bl	8005f9c <__malloc_unlock>
 8005c60:	e794      	b.n	8005b8c <_malloc_r+0x20>
 8005c62:	6005      	str	r5, [r0, #0]
 8005c64:	e7d6      	b.n	8005c14 <_malloc_r+0xa8>
 8005c66:	bf00      	nop
 8005c68:	200044f4 	.word	0x200044f4

08005c6c <_printf_common>:
 8005c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c70:	4616      	mov	r6, r2
 8005c72:	4698      	mov	r8, r3
 8005c74:	688a      	ldr	r2, [r1, #8]
 8005c76:	690b      	ldr	r3, [r1, #16]
 8005c78:	4607      	mov	r7, r0
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	bfb8      	it	lt
 8005c7e:	4613      	movlt	r3, r2
 8005c80:	6033      	str	r3, [r6, #0]
 8005c82:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c86:	460c      	mov	r4, r1
 8005c88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c8c:	b10a      	cbz	r2, 8005c92 <_printf_common+0x26>
 8005c8e:	3301      	adds	r3, #1
 8005c90:	6033      	str	r3, [r6, #0]
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	0699      	lsls	r1, r3, #26
 8005c96:	bf42      	ittt	mi
 8005c98:	6833      	ldrmi	r3, [r6, #0]
 8005c9a:	3302      	addmi	r3, #2
 8005c9c:	6033      	strmi	r3, [r6, #0]
 8005c9e:	6825      	ldr	r5, [r4, #0]
 8005ca0:	f015 0506 	ands.w	r5, r5, #6
 8005ca4:	d106      	bne.n	8005cb4 <_printf_common+0x48>
 8005ca6:	f104 0a19 	add.w	sl, r4, #25
 8005caa:	68e3      	ldr	r3, [r4, #12]
 8005cac:	6832      	ldr	r2, [r6, #0]
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	42ab      	cmp	r3, r5
 8005cb2:	dc2b      	bgt.n	8005d0c <_printf_common+0xa0>
 8005cb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cb8:	6822      	ldr	r2, [r4, #0]
 8005cba:	3b00      	subs	r3, #0
 8005cbc:	bf18      	it	ne
 8005cbe:	2301      	movne	r3, #1
 8005cc0:	0692      	lsls	r2, r2, #26
 8005cc2:	d430      	bmi.n	8005d26 <_printf_common+0xba>
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ccc:	47c8      	blx	r9
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d023      	beq.n	8005d1a <_printf_common+0xae>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	6922      	ldr	r2, [r4, #16]
 8005cd6:	f003 0306 	and.w	r3, r3, #6
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	bf14      	ite	ne
 8005cde:	2500      	movne	r5, #0
 8005ce0:	6833      	ldreq	r3, [r6, #0]
 8005ce2:	f04f 0600 	mov.w	r6, #0
 8005ce6:	bf08      	it	eq
 8005ce8:	68e5      	ldreq	r5, [r4, #12]
 8005cea:	f104 041a 	add.w	r4, r4, #26
 8005cee:	bf08      	it	eq
 8005cf0:	1aed      	subeq	r5, r5, r3
 8005cf2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005cf6:	bf08      	it	eq
 8005cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	bfc4      	itt	gt
 8005d00:	1a9b      	subgt	r3, r3, r2
 8005d02:	18ed      	addgt	r5, r5, r3
 8005d04:	42b5      	cmp	r5, r6
 8005d06:	d11a      	bne.n	8005d3e <_printf_common+0xd2>
 8005d08:	2000      	movs	r0, #0
 8005d0a:	e008      	b.n	8005d1e <_printf_common+0xb2>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	4652      	mov	r2, sl
 8005d10:	4641      	mov	r1, r8
 8005d12:	4638      	mov	r0, r7
 8005d14:	47c8      	blx	r9
 8005d16:	3001      	adds	r0, #1
 8005d18:	d103      	bne.n	8005d22 <_printf_common+0xb6>
 8005d1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d22:	3501      	adds	r5, #1
 8005d24:	e7c1      	b.n	8005caa <_printf_common+0x3e>
 8005d26:	2030      	movs	r0, #48	@ 0x30
 8005d28:	18e1      	adds	r1, r4, r3
 8005d2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d34:	4422      	add	r2, r4
 8005d36:	3302      	adds	r3, #2
 8005d38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d3c:	e7c2      	b.n	8005cc4 <_printf_common+0x58>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4622      	mov	r2, r4
 8005d42:	4641      	mov	r1, r8
 8005d44:	4638      	mov	r0, r7
 8005d46:	47c8      	blx	r9
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d0e6      	beq.n	8005d1a <_printf_common+0xae>
 8005d4c:	3601      	adds	r6, #1
 8005d4e:	e7d9      	b.n	8005d04 <_printf_common+0x98>

08005d50 <_printf_i>:
 8005d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d54:	7e0f      	ldrb	r7, [r1, #24]
 8005d56:	4691      	mov	r9, r2
 8005d58:	2f78      	cmp	r7, #120	@ 0x78
 8005d5a:	4680      	mov	r8, r0
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	469a      	mov	sl, r3
 8005d60:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d66:	d807      	bhi.n	8005d78 <_printf_i+0x28>
 8005d68:	2f62      	cmp	r7, #98	@ 0x62
 8005d6a:	d80a      	bhi.n	8005d82 <_printf_i+0x32>
 8005d6c:	2f00      	cmp	r7, #0
 8005d6e:	f000 80d3 	beq.w	8005f18 <_printf_i+0x1c8>
 8005d72:	2f58      	cmp	r7, #88	@ 0x58
 8005d74:	f000 80ba 	beq.w	8005eec <_printf_i+0x19c>
 8005d78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d80:	e03a      	b.n	8005df8 <_printf_i+0xa8>
 8005d82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d86:	2b15      	cmp	r3, #21
 8005d88:	d8f6      	bhi.n	8005d78 <_printf_i+0x28>
 8005d8a:	a101      	add	r1, pc, #4	@ (adr r1, 8005d90 <_printf_i+0x40>)
 8005d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d90:	08005de9 	.word	0x08005de9
 8005d94:	08005dfd 	.word	0x08005dfd
 8005d98:	08005d79 	.word	0x08005d79
 8005d9c:	08005d79 	.word	0x08005d79
 8005da0:	08005d79 	.word	0x08005d79
 8005da4:	08005d79 	.word	0x08005d79
 8005da8:	08005dfd 	.word	0x08005dfd
 8005dac:	08005d79 	.word	0x08005d79
 8005db0:	08005d79 	.word	0x08005d79
 8005db4:	08005d79 	.word	0x08005d79
 8005db8:	08005d79 	.word	0x08005d79
 8005dbc:	08005eff 	.word	0x08005eff
 8005dc0:	08005e27 	.word	0x08005e27
 8005dc4:	08005eb9 	.word	0x08005eb9
 8005dc8:	08005d79 	.word	0x08005d79
 8005dcc:	08005d79 	.word	0x08005d79
 8005dd0:	08005f21 	.word	0x08005f21
 8005dd4:	08005d79 	.word	0x08005d79
 8005dd8:	08005e27 	.word	0x08005e27
 8005ddc:	08005d79 	.word	0x08005d79
 8005de0:	08005d79 	.word	0x08005d79
 8005de4:	08005ec1 	.word	0x08005ec1
 8005de8:	6833      	ldr	r3, [r6, #0]
 8005dea:	1d1a      	adds	r2, r3, #4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6032      	str	r2, [r6, #0]
 8005df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005df4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e09e      	b.n	8005f3a <_printf_i+0x1ea>
 8005dfc:	6833      	ldr	r3, [r6, #0]
 8005dfe:	6820      	ldr	r0, [r4, #0]
 8005e00:	1d19      	adds	r1, r3, #4
 8005e02:	6031      	str	r1, [r6, #0]
 8005e04:	0606      	lsls	r6, r0, #24
 8005e06:	d501      	bpl.n	8005e0c <_printf_i+0xbc>
 8005e08:	681d      	ldr	r5, [r3, #0]
 8005e0a:	e003      	b.n	8005e14 <_printf_i+0xc4>
 8005e0c:	0645      	lsls	r5, r0, #25
 8005e0e:	d5fb      	bpl.n	8005e08 <_printf_i+0xb8>
 8005e10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e14:	2d00      	cmp	r5, #0
 8005e16:	da03      	bge.n	8005e20 <_printf_i+0xd0>
 8005e18:	232d      	movs	r3, #45	@ 0x2d
 8005e1a:	426d      	negs	r5, r5
 8005e1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e20:	230a      	movs	r3, #10
 8005e22:	4859      	ldr	r0, [pc, #356]	@ (8005f88 <_printf_i+0x238>)
 8005e24:	e011      	b.n	8005e4a <_printf_i+0xfa>
 8005e26:	6821      	ldr	r1, [r4, #0]
 8005e28:	6833      	ldr	r3, [r6, #0]
 8005e2a:	0608      	lsls	r0, r1, #24
 8005e2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e30:	d402      	bmi.n	8005e38 <_printf_i+0xe8>
 8005e32:	0649      	lsls	r1, r1, #25
 8005e34:	bf48      	it	mi
 8005e36:	b2ad      	uxthmi	r5, r5
 8005e38:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e3a:	6033      	str	r3, [r6, #0]
 8005e3c:	bf14      	ite	ne
 8005e3e:	230a      	movne	r3, #10
 8005e40:	2308      	moveq	r3, #8
 8005e42:	4851      	ldr	r0, [pc, #324]	@ (8005f88 <_printf_i+0x238>)
 8005e44:	2100      	movs	r1, #0
 8005e46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e4a:	6866      	ldr	r6, [r4, #4]
 8005e4c:	2e00      	cmp	r6, #0
 8005e4e:	bfa8      	it	ge
 8005e50:	6821      	ldrge	r1, [r4, #0]
 8005e52:	60a6      	str	r6, [r4, #8]
 8005e54:	bfa4      	itt	ge
 8005e56:	f021 0104 	bicge.w	r1, r1, #4
 8005e5a:	6021      	strge	r1, [r4, #0]
 8005e5c:	b90d      	cbnz	r5, 8005e62 <_printf_i+0x112>
 8005e5e:	2e00      	cmp	r6, #0
 8005e60:	d04b      	beq.n	8005efa <_printf_i+0x1aa>
 8005e62:	4616      	mov	r6, r2
 8005e64:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e68:	fb03 5711 	mls	r7, r3, r1, r5
 8005e6c:	5dc7      	ldrb	r7, [r0, r7]
 8005e6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e72:	462f      	mov	r7, r5
 8005e74:	42bb      	cmp	r3, r7
 8005e76:	460d      	mov	r5, r1
 8005e78:	d9f4      	bls.n	8005e64 <_printf_i+0x114>
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d10b      	bne.n	8005e96 <_printf_i+0x146>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	07df      	lsls	r7, r3, #31
 8005e82:	d508      	bpl.n	8005e96 <_printf_i+0x146>
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	6861      	ldr	r1, [r4, #4]
 8005e88:	4299      	cmp	r1, r3
 8005e8a:	bfde      	ittt	le
 8005e8c:	2330      	movle	r3, #48	@ 0x30
 8005e8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e92:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005e96:	1b92      	subs	r2, r2, r6
 8005e98:	6122      	str	r2, [r4, #16]
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	f8cd a000 	str.w	sl, [sp]
 8005ea4:	aa03      	add	r2, sp, #12
 8005ea6:	f7ff fee1 	bl	8005c6c <_printf_common>
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d14a      	bne.n	8005f44 <_printf_i+0x1f4>
 8005eae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005eb2:	b004      	add	sp, #16
 8005eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	f043 0320 	orr.w	r3, r3, #32
 8005ebe:	6023      	str	r3, [r4, #0]
 8005ec0:	2778      	movs	r7, #120	@ 0x78
 8005ec2:	4832      	ldr	r0, [pc, #200]	@ (8005f8c <_printf_i+0x23c>)
 8005ec4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	6831      	ldr	r1, [r6, #0]
 8005ecc:	061f      	lsls	r7, r3, #24
 8005ece:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ed2:	d402      	bmi.n	8005eda <_printf_i+0x18a>
 8005ed4:	065f      	lsls	r7, r3, #25
 8005ed6:	bf48      	it	mi
 8005ed8:	b2ad      	uxthmi	r5, r5
 8005eda:	6031      	str	r1, [r6, #0]
 8005edc:	07d9      	lsls	r1, r3, #31
 8005ede:	bf44      	itt	mi
 8005ee0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ee4:	6023      	strmi	r3, [r4, #0]
 8005ee6:	b11d      	cbz	r5, 8005ef0 <_printf_i+0x1a0>
 8005ee8:	2310      	movs	r3, #16
 8005eea:	e7ab      	b.n	8005e44 <_printf_i+0xf4>
 8005eec:	4826      	ldr	r0, [pc, #152]	@ (8005f88 <_printf_i+0x238>)
 8005eee:	e7e9      	b.n	8005ec4 <_printf_i+0x174>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	f023 0320 	bic.w	r3, r3, #32
 8005ef6:	6023      	str	r3, [r4, #0]
 8005ef8:	e7f6      	b.n	8005ee8 <_printf_i+0x198>
 8005efa:	4616      	mov	r6, r2
 8005efc:	e7bd      	b.n	8005e7a <_printf_i+0x12a>
 8005efe:	6833      	ldr	r3, [r6, #0]
 8005f00:	6825      	ldr	r5, [r4, #0]
 8005f02:	1d18      	adds	r0, r3, #4
 8005f04:	6961      	ldr	r1, [r4, #20]
 8005f06:	6030      	str	r0, [r6, #0]
 8005f08:	062e      	lsls	r6, r5, #24
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	d501      	bpl.n	8005f12 <_printf_i+0x1c2>
 8005f0e:	6019      	str	r1, [r3, #0]
 8005f10:	e002      	b.n	8005f18 <_printf_i+0x1c8>
 8005f12:	0668      	lsls	r0, r5, #25
 8005f14:	d5fb      	bpl.n	8005f0e <_printf_i+0x1be>
 8005f16:	8019      	strh	r1, [r3, #0]
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4616      	mov	r6, r2
 8005f1c:	6123      	str	r3, [r4, #16]
 8005f1e:	e7bc      	b.n	8005e9a <_printf_i+0x14a>
 8005f20:	6833      	ldr	r3, [r6, #0]
 8005f22:	2100      	movs	r1, #0
 8005f24:	1d1a      	adds	r2, r3, #4
 8005f26:	6032      	str	r2, [r6, #0]
 8005f28:	681e      	ldr	r6, [r3, #0]
 8005f2a:	6862      	ldr	r2, [r4, #4]
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	f000 f893 	bl	8006058 <memchr>
 8005f32:	b108      	cbz	r0, 8005f38 <_printf_i+0x1e8>
 8005f34:	1b80      	subs	r0, r0, r6
 8005f36:	6060      	str	r0, [r4, #4]
 8005f38:	6863      	ldr	r3, [r4, #4]
 8005f3a:	6123      	str	r3, [r4, #16]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f42:	e7aa      	b.n	8005e9a <_printf_i+0x14a>
 8005f44:	4632      	mov	r2, r6
 8005f46:	4649      	mov	r1, r9
 8005f48:	4640      	mov	r0, r8
 8005f4a:	6923      	ldr	r3, [r4, #16]
 8005f4c:	47d0      	blx	sl
 8005f4e:	3001      	adds	r0, #1
 8005f50:	d0ad      	beq.n	8005eae <_printf_i+0x15e>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	079b      	lsls	r3, r3, #30
 8005f56:	d413      	bmi.n	8005f80 <_printf_i+0x230>
 8005f58:	68e0      	ldr	r0, [r4, #12]
 8005f5a:	9b03      	ldr	r3, [sp, #12]
 8005f5c:	4298      	cmp	r0, r3
 8005f5e:	bfb8      	it	lt
 8005f60:	4618      	movlt	r0, r3
 8005f62:	e7a6      	b.n	8005eb2 <_printf_i+0x162>
 8005f64:	2301      	movs	r3, #1
 8005f66:	4632      	mov	r2, r6
 8005f68:	4649      	mov	r1, r9
 8005f6a:	4640      	mov	r0, r8
 8005f6c:	47d0      	blx	sl
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d09d      	beq.n	8005eae <_printf_i+0x15e>
 8005f72:	3501      	adds	r5, #1
 8005f74:	68e3      	ldr	r3, [r4, #12]
 8005f76:	9903      	ldr	r1, [sp, #12]
 8005f78:	1a5b      	subs	r3, r3, r1
 8005f7a:	42ab      	cmp	r3, r5
 8005f7c:	dcf2      	bgt.n	8005f64 <_printf_i+0x214>
 8005f7e:	e7eb      	b.n	8005f58 <_printf_i+0x208>
 8005f80:	2500      	movs	r5, #0
 8005f82:	f104 0619 	add.w	r6, r4, #25
 8005f86:	e7f5      	b.n	8005f74 <_printf_i+0x224>
 8005f88:	080062c1 	.word	0x080062c1
 8005f8c:	080062d2 	.word	0x080062d2

08005f90 <__malloc_lock>:
 8005f90:	4801      	ldr	r0, [pc, #4]	@ (8005f98 <__malloc_lock+0x8>)
 8005f92:	f7ff bc6f 	b.w	8005874 <__retarget_lock_acquire_recursive>
 8005f96:	bf00      	nop
 8005f98:	200044ec 	.word	0x200044ec

08005f9c <__malloc_unlock>:
 8005f9c:	4801      	ldr	r0, [pc, #4]	@ (8005fa4 <__malloc_unlock+0x8>)
 8005f9e:	f7ff bc6a 	b.w	8005876 <__retarget_lock_release_recursive>
 8005fa2:	bf00      	nop
 8005fa4:	200044ec 	.word	0x200044ec

08005fa8 <_realloc_r>:
 8005fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fac:	4680      	mov	r8, r0
 8005fae:	4615      	mov	r5, r2
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	b921      	cbnz	r1, 8005fbe <_realloc_r+0x16>
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fba:	f7ff bdd7 	b.w	8005b6c <_malloc_r>
 8005fbe:	b92a      	cbnz	r2, 8005fcc <_realloc_r+0x24>
 8005fc0:	f000 f866 	bl	8006090 <_free_r>
 8005fc4:	2400      	movs	r4, #0
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fcc:	f000 f8a8 	bl	8006120 <_malloc_usable_size_r>
 8005fd0:	4285      	cmp	r5, r0
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	d802      	bhi.n	8005fdc <_realloc_r+0x34>
 8005fd6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005fda:	d8f4      	bhi.n	8005fc6 <_realloc_r+0x1e>
 8005fdc:	4629      	mov	r1, r5
 8005fde:	4640      	mov	r0, r8
 8005fe0:	f7ff fdc4 	bl	8005b6c <_malloc_r>
 8005fe4:	4607      	mov	r7, r0
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	d0ec      	beq.n	8005fc4 <_realloc_r+0x1c>
 8005fea:	42b5      	cmp	r5, r6
 8005fec:	462a      	mov	r2, r5
 8005fee:	4621      	mov	r1, r4
 8005ff0:	bf28      	it	cs
 8005ff2:	4632      	movcs	r2, r6
 8005ff4:	f000 f83e 	bl	8006074 <memcpy>
 8005ff8:	4621      	mov	r1, r4
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	f000 f848 	bl	8006090 <_free_r>
 8006000:	463c      	mov	r4, r7
 8006002:	e7e0      	b.n	8005fc6 <_realloc_r+0x1e>

08006004 <memmove>:
 8006004:	4288      	cmp	r0, r1
 8006006:	b510      	push	{r4, lr}
 8006008:	eb01 0402 	add.w	r4, r1, r2
 800600c:	d902      	bls.n	8006014 <memmove+0x10>
 800600e:	4284      	cmp	r4, r0
 8006010:	4623      	mov	r3, r4
 8006012:	d807      	bhi.n	8006024 <memmove+0x20>
 8006014:	1e43      	subs	r3, r0, #1
 8006016:	42a1      	cmp	r1, r4
 8006018:	d008      	beq.n	800602c <memmove+0x28>
 800601a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800601e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006022:	e7f8      	b.n	8006016 <memmove+0x12>
 8006024:	4601      	mov	r1, r0
 8006026:	4402      	add	r2, r0
 8006028:	428a      	cmp	r2, r1
 800602a:	d100      	bne.n	800602e <memmove+0x2a>
 800602c:	bd10      	pop	{r4, pc}
 800602e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006036:	e7f7      	b.n	8006028 <memmove+0x24>

08006038 <_sbrk_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	2300      	movs	r3, #0
 800603c:	4d05      	ldr	r5, [pc, #20]	@ (8006054 <_sbrk_r+0x1c>)
 800603e:	4604      	mov	r4, r0
 8006040:	4608      	mov	r0, r1
 8006042:	602b      	str	r3, [r5, #0]
 8006044:	f7fb fc14 	bl	8001870 <_sbrk>
 8006048:	1c43      	adds	r3, r0, #1
 800604a:	d102      	bne.n	8006052 <_sbrk_r+0x1a>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	b103      	cbz	r3, 8006052 <_sbrk_r+0x1a>
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	bd38      	pop	{r3, r4, r5, pc}
 8006054:	200044f8 	.word	0x200044f8

08006058 <memchr>:
 8006058:	4603      	mov	r3, r0
 800605a:	b510      	push	{r4, lr}
 800605c:	b2c9      	uxtb	r1, r1
 800605e:	4402      	add	r2, r0
 8006060:	4293      	cmp	r3, r2
 8006062:	4618      	mov	r0, r3
 8006064:	d101      	bne.n	800606a <memchr+0x12>
 8006066:	2000      	movs	r0, #0
 8006068:	e003      	b.n	8006072 <memchr+0x1a>
 800606a:	7804      	ldrb	r4, [r0, #0]
 800606c:	3301      	adds	r3, #1
 800606e:	428c      	cmp	r4, r1
 8006070:	d1f6      	bne.n	8006060 <memchr+0x8>
 8006072:	bd10      	pop	{r4, pc}

08006074 <memcpy>:
 8006074:	440a      	add	r2, r1
 8006076:	4291      	cmp	r1, r2
 8006078:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800607c:	d100      	bne.n	8006080 <memcpy+0xc>
 800607e:	4770      	bx	lr
 8006080:	b510      	push	{r4, lr}
 8006082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006086:	4291      	cmp	r1, r2
 8006088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800608c:	d1f9      	bne.n	8006082 <memcpy+0xe>
 800608e:	bd10      	pop	{r4, pc}

08006090 <_free_r>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	4605      	mov	r5, r0
 8006094:	2900      	cmp	r1, #0
 8006096:	d040      	beq.n	800611a <_free_r+0x8a>
 8006098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800609c:	1f0c      	subs	r4, r1, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bfb8      	it	lt
 80060a2:	18e4      	addlt	r4, r4, r3
 80060a4:	f7ff ff74 	bl	8005f90 <__malloc_lock>
 80060a8:	4a1c      	ldr	r2, [pc, #112]	@ (800611c <_free_r+0x8c>)
 80060aa:	6813      	ldr	r3, [r2, #0]
 80060ac:	b933      	cbnz	r3, 80060bc <_free_r+0x2c>
 80060ae:	6063      	str	r3, [r4, #4]
 80060b0:	6014      	str	r4, [r2, #0]
 80060b2:	4628      	mov	r0, r5
 80060b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060b8:	f7ff bf70 	b.w	8005f9c <__malloc_unlock>
 80060bc:	42a3      	cmp	r3, r4
 80060be:	d908      	bls.n	80060d2 <_free_r+0x42>
 80060c0:	6820      	ldr	r0, [r4, #0]
 80060c2:	1821      	adds	r1, r4, r0
 80060c4:	428b      	cmp	r3, r1
 80060c6:	bf01      	itttt	eq
 80060c8:	6819      	ldreq	r1, [r3, #0]
 80060ca:	685b      	ldreq	r3, [r3, #4]
 80060cc:	1809      	addeq	r1, r1, r0
 80060ce:	6021      	streq	r1, [r4, #0]
 80060d0:	e7ed      	b.n	80060ae <_free_r+0x1e>
 80060d2:	461a      	mov	r2, r3
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	b10b      	cbz	r3, 80060dc <_free_r+0x4c>
 80060d8:	42a3      	cmp	r3, r4
 80060da:	d9fa      	bls.n	80060d2 <_free_r+0x42>
 80060dc:	6811      	ldr	r1, [r2, #0]
 80060de:	1850      	adds	r0, r2, r1
 80060e0:	42a0      	cmp	r0, r4
 80060e2:	d10b      	bne.n	80060fc <_free_r+0x6c>
 80060e4:	6820      	ldr	r0, [r4, #0]
 80060e6:	4401      	add	r1, r0
 80060e8:	1850      	adds	r0, r2, r1
 80060ea:	4283      	cmp	r3, r0
 80060ec:	6011      	str	r1, [r2, #0]
 80060ee:	d1e0      	bne.n	80060b2 <_free_r+0x22>
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	4408      	add	r0, r1
 80060f6:	6010      	str	r0, [r2, #0]
 80060f8:	6053      	str	r3, [r2, #4]
 80060fa:	e7da      	b.n	80060b2 <_free_r+0x22>
 80060fc:	d902      	bls.n	8006104 <_free_r+0x74>
 80060fe:	230c      	movs	r3, #12
 8006100:	602b      	str	r3, [r5, #0]
 8006102:	e7d6      	b.n	80060b2 <_free_r+0x22>
 8006104:	6820      	ldr	r0, [r4, #0]
 8006106:	1821      	adds	r1, r4, r0
 8006108:	428b      	cmp	r3, r1
 800610a:	bf01      	itttt	eq
 800610c:	6819      	ldreq	r1, [r3, #0]
 800610e:	685b      	ldreq	r3, [r3, #4]
 8006110:	1809      	addeq	r1, r1, r0
 8006112:	6021      	streq	r1, [r4, #0]
 8006114:	6063      	str	r3, [r4, #4]
 8006116:	6054      	str	r4, [r2, #4]
 8006118:	e7cb      	b.n	80060b2 <_free_r+0x22>
 800611a:	bd38      	pop	{r3, r4, r5, pc}
 800611c:	200044f4 	.word	0x200044f4

08006120 <_malloc_usable_size_r>:
 8006120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006124:	1f18      	subs	r0, r3, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	bfbc      	itt	lt
 800612a:	580b      	ldrlt	r3, [r1, r0]
 800612c:	18c0      	addlt	r0, r0, r3
 800612e:	4770      	bx	lr

08006130 <_init>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	bf00      	nop
 8006134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006136:	bc08      	pop	{r3}
 8006138:	469e      	mov	lr, r3
 800613a:	4770      	bx	lr

0800613c <_fini>:
 800613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613e:	bf00      	nop
 8006140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006142:	bc08      	pop	{r3}
 8006144:	469e      	mov	lr, r3
 8006146:	4770      	bx	lr
