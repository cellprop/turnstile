
turnstile_stm_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005118  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005224  08005224  00006224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005388  08005388  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005388  08005388  00006388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005390  08005390  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005390  08005390  00006390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005394  08005394  00006394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005398  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e64  2000005c  080053f4  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ec0  080053f4  00007ec0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d698  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002543  00000000  00000000  0001471d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00016c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a72  00000000  00000000  000179d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018720  00000000  00000000  00018442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe9a  00000000  00000000  00030b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b5f3  00000000  00000000  000409fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbfef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cf8  00000000  00000000  000cc034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000cfd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800520c 	.word	0x0800520c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800520c 	.word	0x0800520c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_DMA_Init+0x38>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a0b      	ldr	r2, [pc, #44]	@ (8000690 <MX_DMA_Init+0x38>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6153      	str	r3, [r2, #20]
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_DMA_Init+0x38>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	2010      	movs	r0, #16
 800067c:	f001 f8c9 	bl	8001812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000680:	2010      	movs	r0, #16
 8000682:	f001 f8e2 	bl	800184a <HAL_NVIC_EnableIRQ>

}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a8:	4b52      	ldr	r3, [pc, #328]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a51      	ldr	r2, [pc, #324]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b4f      	ldr	r3, [pc, #316]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0310 	and.w	r3, r3, #16
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c0:	4b4c      	ldr	r3, [pc, #304]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a4b      	ldr	r2, [pc, #300]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006c6:	f043 0320 	orr.w	r3, r3, #32
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b49      	ldr	r3, [pc, #292]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0320 	and.w	r3, r3, #32
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b46      	ldr	r3, [pc, #280]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a45      	ldr	r2, [pc, #276]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b43      	ldr	r3, [pc, #268]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	4b40      	ldr	r3, [pc, #256]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a3f      	ldr	r2, [pc, #252]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006f6:	f043 0308 	orr.w	r3, r3, #8
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b3d      	ldr	r3, [pc, #244]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2120      	movs	r1, #32
 800070c:	483a      	ldr	r0, [pc, #232]	@ (80007f8 <MX_GPIO_Init+0x164>)
 800070e:	f001 fcdd 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direction2_Pin|Direction1_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000718:	4838      	ldr	r0, [pc, #224]	@ (80007fc <MX_GPIO_Init+0x168>)
 800071a:	f001 fcd7 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2180      	movs	r1, #128	@ 0x80
 8000722:	4837      	ldr	r0, [pc, #220]	@ (8000800 <MX_GPIO_Init+0x16c>)
 8000724:	f001 fcd2 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|Encoder_Pin;
 8000728:	f242 0304 	movw	r3, #8196	@ 0x2004
 800072c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800072e:	4b35      	ldr	r3, [pc, #212]	@ (8000804 <MX_GPIO_Init+0x170>)
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	482f      	ldr	r0, [pc, #188]	@ (80007fc <MX_GPIO_Init+0x168>)
 800073e:	f001 fb41 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000742:	2320      	movs	r3, #32
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2302      	movs	r3, #2
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	4619      	mov	r1, r3
 8000758:	4827      	ldr	r0, [pc, #156]	@ (80007f8 <MX_GPIO_Init+0x164>)
 800075a:	f001 fb33 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Limit_2A_Pin|Limit_2B_Pin;
 800075e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000764:	4b27      	ldr	r3, [pc, #156]	@ (8000804 <MX_GPIO_Init+0x170>)
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4619      	mov	r1, r3
 8000772:	4823      	ldr	r0, [pc, #140]	@ (8000800 <MX_GPIO_Init+0x16c>)
 8000774:	f001 fb26 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Direction2_Pin|Direction1_Pin;
 8000778:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2302      	movs	r3, #2
 8000788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4619      	mov	r1, r3
 8000790:	481a      	ldr	r0, [pc, #104]	@ (80007fc <MX_GPIO_Init+0x168>)
 8000792:	f001 fb17 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Limit_1A_Pin|Limit_1B_Pin;
 8000796:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <MX_GPIO_Init+0x170>)
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4619      	mov	r1, r3
 80007aa:	4814      	ldr	r0, [pc, #80]	@ (80007fc <MX_GPIO_Init+0x168>)
 80007ac:	f001 fb0a 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007b0:	2380      	movs	r3, #128	@ 0x80
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2302      	movs	r3, #2
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	480e      	ldr	r0, [pc, #56]	@ (8000800 <MX_GPIO_Init+0x16c>)
 80007c8:	f001 fafc 	bl	8001dc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2100      	movs	r1, #0
 80007d0:	2008      	movs	r0, #8
 80007d2:	f001 f81e 	bl	8001812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007d6:	2008      	movs	r0, #8
 80007d8:	f001 f837 	bl	800184a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2028      	movs	r0, #40	@ 0x28
 80007e2:	f001 f816 	bl	8001812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007e6:	2028      	movs	r0, #40	@ 0x28
 80007e8:	f001 f82f 	bl	800184a <HAL_NVIC_EnableIRQ>

}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010800 	.word	0x40010800
 80007fc:	40011000 	.word	0x40011000
 8000800:	40010c00 	.word	0x40010c00
 8000804:	10110000 	.word	0x10110000

08000808 <Speed_Control>:
/* USER CODE BEGIN 0 */


//MOTOR CONTROL FUNCTIONS
void Speed_Control(int a)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, a);
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <Speed_Control+0x1c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20001c10 	.word	0x20001c10

08000828 <Direction>:

void Direction(int a)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	if(a==1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d10b      	bne.n	800084e <Direction+0x26>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800083c:	480d      	ldr	r0, [pc, #52]	@ (8000874 <Direction+0x4c>)
 800083e:	f001 fc45 	bl	80020cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000848:	480a      	ldr	r0, [pc, #40]	@ (8000874 <Direction+0x4c>)
 800084a:	f001 fc3f 	bl	80020cc <HAL_GPIO_WritePin>

	}
	if(a==0)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d10b      	bne.n	800086c <Direction+0x44>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800085a:	4806      	ldr	r0, [pc, #24]	@ (8000874 <Direction+0x4c>)
 800085c:	f001 fc36 	bl	80020cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000866:	4803      	ldr	r0, [pc, #12]	@ (8000874 <Direction+0x4c>)
 8000868:	f001 fc30 	bl	80020cc <HAL_GPIO_WritePin>
	}
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40011000 	.word	0x40011000

08000878 <encoder>:

void encoder(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    counter++;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <encoder+0x2c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <encoder+0x2c>)
 8000884:	6013      	str	r3, [r2, #0]
    if(counter == 570)
 8000886:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <encoder+0x2c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f240 223a 	movw	r2, #570	@ 0x23a
 800088e:	4293      	cmp	r3, r2
 8000890:	d105      	bne.n	800089e <encoder+0x26>
    {
        Speed_Control(0); // Stop the motor
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff ffb8 	bl	8000808 <Speed_Control>
        counter = 0;      // Reset counter for next operation
 8000898:	4b02      	ldr	r3, [pc, #8]	@ (80008a4 <encoder+0x2c>)
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
    }
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20001bc0 	.word	0x20001bc0

080008a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_2)
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d105      	bne.n	80008c4 <HAL_GPIO_EXTI_Callback+0x1c>
    {
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // Toggle an LED on PB7 for visual feedback
 80008b8:	2180      	movs	r1, #128	@ 0x80
 80008ba:	4818      	ldr	r0, [pc, #96]	@ (800091c <HAL_GPIO_EXTI_Callback+0x74>)
 80008bc:	f001 fc1e 	bl	80020fc <HAL_GPIO_TogglePin>
    	encoder();
 80008c0:	f7ff ffda 	bl	8000878 <encoder>
    }
    if(GPIO_Pin == GPIO_PIN_10)
 80008c4:	88fb      	ldrh	r3, [r7, #6]
 80008c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008ca:	d105      	bne.n	80008d8 <HAL_GPIO_EXTI_Callback+0x30>
	{
		Speed_Control(0);
 80008cc:	2000      	movs	r0, #0
 80008ce:	f7ff ff9b 	bl	8000808 <Speed_Control>
		counter = 0;
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x78>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
    if(GPIO_Pin == GPIO_PIN_11)
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80008de:	d105      	bne.n	80008ec <HAL_GPIO_EXTI_Callback+0x44>
	{
		Speed_Control(0);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff ff91 	bl	8000808 <Speed_Control>
		counter = 0;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x78>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
    if(GPIO_Pin == GPIO_PIN_14)
 80008ec:	88fb      	ldrh	r3, [r7, #6]
 80008ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80008f2:	d105      	bne.n	8000900 <HAL_GPIO_EXTI_Callback+0x58>
	{
		Speed_Control(0);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff ff87 	bl	8000808 <Speed_Control>
		counter = 0;
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x78>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
    if(GPIO_Pin == GPIO_PIN_15)
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000906:	d105      	bne.n	8000914 <HAL_GPIO_EXTI_Callback+0x6c>
	{
		Speed_Control(0);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff ff7d 	bl	8000808 <Speed_Control>
		counter = 0;
 800090e:	4b04      	ldr	r3, [pc, #16]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x78>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40010c00 	.word	0x40010c00
 8000920:	20001bc0 	.word	0x20001bc0

08000924 <quarter_cycle_open>:

void quarter_cycle_open(int source)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    if(source == 1){
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d103      	bne.n	800093a <quarter_cycle_open+0x16>
        Direction(0);
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff ff78 	bl	8000828 <Direction>
 8000938:	e005      	b.n	8000946 <quarter_cycle_open+0x22>
    }
    else if(source == 2){
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d102      	bne.n	8000946 <quarter_cycle_open+0x22>
        Direction(1);
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff ff71 	bl	8000828 <Direction>
    }
    Speed_Control(1000); // Start motor
 8000946:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800094a:	f7ff ff5d 	bl	8000808 <Speed_Control>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <quarter_cycle_closed>:

void quarter_cycle_closed(int source)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
    if(source == 1){
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d103      	bne.n	800096c <quarter_cycle_closed+0x16>
        Direction(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff ff5f 	bl	8000828 <Direction>
 800096a:	e005      	b.n	8000978 <quarter_cycle_closed+0x22>
    }
    else if(source == 2){
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b02      	cmp	r3, #2
 8000970:	d102      	bne.n	8000978 <quarter_cycle_closed+0x22>
        Direction(0);
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff ff58 	bl	8000828 <Direction>
    }
    Speed_Control(1000); // Start motor
 8000978:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800097c:	f7ff ff44 	bl	8000808 <Speed_Control>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <ready_state>:



//STATE FUNCTIONS

void ready_state(void){
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
	//Display Code
    // Check if data has been received
    if(flag_rev == 1){
 800098c:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <ready_state+0x1c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d102      	bne.n	800099a <ready_state+0x12>
        currentState = STATE_READING; // Transition to Reading State
 8000994:	4b04      	ldr	r3, [pc, #16]	@ (80009a8 <ready_state+0x20>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
    }
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20001bba 	.word	0x20001bba
 80009a8:	20001b88 	.word	0x20001b88

080009ac <reading_state>:

void reading_state(void){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	//Display Code
    if(flag_rev == 1){
 80009b0:	4b20      	ldr	r3, [pc, #128]	@ (8000a34 <reading_state+0x88>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d10c      	bne.n	80009d2 <reading_state+0x26>
        HAL_UART_Transmit_IT(&huart3, (uint8_t *)usermsg, strlen(usermsg));
 80009b8:	481f      	ldr	r0, [pc, #124]	@ (8000a38 <reading_state+0x8c>)
 80009ba:	f7ff fbc7 	bl	800014c <strlen>
 80009be:	4603      	mov	r3, r0
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	461a      	mov	r2, r3
 80009c4:	491c      	ldr	r1, [pc, #112]	@ (8000a38 <reading_state+0x8c>)
 80009c6:	481d      	ldr	r0, [pc, #116]	@ (8000a3c <reading_state+0x90>)
 80009c8:	f003 f8e4 	bl	8003b94 <HAL_UART_Transmit_IT>
        flag_rev = 0;
 80009cc:	4b19      	ldr	r3, [pc, #100]	@ (8000a34 <reading_state+0x88>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(1000); // Delay as needed
 80009d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d6:	f000 fe21 	bl	800161c <HAL_Delay>

    //NOS Potential Responses Setup
    switch(intresponseData){
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <reading_state+0x94>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b05      	cmp	r3, #5
 80009e0:	d826      	bhi.n	8000a30 <reading_state+0x84>
 80009e2:	a201      	add	r2, pc, #4	@ (adr r2, 80009e8 <reading_state+0x3c>)
 80009e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e8:	08000a01 	.word	0x08000a01
 80009ec:	08000a09 	.word	0x08000a09
 80009f0:	08000a11 	.word	0x08000a11
 80009f4:	08000a19 	.word	0x08000a19
 80009f8:	08000a21 	.word	0x08000a21
 80009fc:	08000a29 	.word	0x08000a29

    case 0:
    	currentState = STATE_READY;
 8000a00:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <reading_state+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
    	break;
 8000a06:	e013      	b.n	8000a30 <reading_state+0x84>
    case 1:
    	currentState = STATE_OPEN;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <reading_state+0x98>)
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	701a      	strb	r2, [r3, #0]
    	break;
 8000a0e:	e00f      	b.n	8000a30 <reading_state+0x84>
    case 2:
    	currentState = STATE_CLOSED;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <reading_state+0x98>)
 8000a12:	2203      	movs	r2, #3
 8000a14:	701a      	strb	r2, [r3, #0]
    	break;
 8000a16:	e00b      	b.n	8000a30 <reading_state+0x84>
    case 3:
    	currentState = STATE_EMERGENCY;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <reading_state+0x98>)
 8000a1a:	2206      	movs	r2, #6
 8000a1c:	701a      	strb	r2, [r3, #0]
    	break;
 8000a1e:	e007      	b.n	8000a30 <reading_state+0x84>
    case 4:
    	currentState = STATE_SLEEP;
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <reading_state+0x98>)
 8000a22:	2205      	movs	r2, #5
 8000a24:	701a      	strb	r2, [r3, #0]
    	break;
 8000a26:	e003      	b.n	8000a30 <reading_state+0x84>
    case 5:
    	currentState = STATE_OVERCAPACITY;
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <reading_state+0x98>)
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	701a      	strb	r2, [r3, #0]
		break;
 8000a2e:	bf00      	nop
    }
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20001bba 	.word	0x20001bba
 8000a38:	20001bac 	.word	0x20001bac
 8000a3c:	20001d2c 	.word	0x20001d2c
 8000a40:	20001bbd 	.word	0x20001bbd
 8000a44:	20001b88 	.word	0x20001b88

08000a48 <open_state>:

void open_state(void){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	quarter_cycle_open(uart_source);
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <open_state+0x34>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff67 	bl	8000924 <quarter_cycle_open>
	HAL_Delay(5000);
 8000a56:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a5a:	f000 fddf 	bl	800161c <HAL_Delay>
	quarter_cycle_closed(uart_source);
 8000a5e:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <open_state+0x34>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ff77 	bl	8000956 <quarter_cycle_closed>
	HAL_Delay(1000);
 8000a68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a6c:	f000 fdd6 	bl	800161c <HAL_Delay>
	currentState = STATE_READY;
 8000a70:	4b03      	ldr	r3, [pc, #12]	@ (8000a80 <open_state+0x38>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20001bbb 	.word	0x20001bbb
 8000a80:	20001b88 	.word	0x20001b88

08000a84 <closed_state>:

void closed_state(void){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	//Display Code
	HAL_Delay(3000);
 8000a88:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000a8c:	f000 fdc6 	bl	800161c <HAL_Delay>
	currentState = STATE_READY;
 8000a90:	4b02      	ldr	r3, [pc, #8]	@ (8000a9c <closed_state+0x18>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20001b88 	.word	0x20001b88

08000aa0 <overcapacity_state>:

void overcapacity_state(void){
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <sleep_state>:

void sleep_state(void){
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <emergency_state>:

void emergency_state(void){
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aca:	f000 fd45 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ace:	f000 f86b 	bl	8000ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad2:	f7ff fddf 	bl	8000694 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ad6:	f7ff fdbf 	bl	8000658 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ada:	f000 fbf7 	bl	80012cc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000ade:	f000 fa29 	bl	8000f34 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ae2:	f000 fa9d 	bl	8001020 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000ae6:	f000 fbc7 	bl	8001278 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000aea:	f000 fc19 	bl	8001320 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8000aee:	4825      	ldr	r0, [pc, #148]	@ (8000b84 <main+0xc0>)
 8000af0:	f001 ff96 	bl	8002a20 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000af4:	2100      	movs	r1, #0
 8000af6:	4823      	ldr	r0, [pc, #140]	@ (8000b84 <main+0xc0>)
 8000af8:	f002 f834 	bl	8002b64 <HAL_TIM_PWM_Start>
  WS28XX_Init(&ws, &htim3, 72, TIM_CHANNEL_1, 256);
 8000afc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2300      	movs	r3, #0
 8000b04:	2248      	movs	r2, #72	@ 0x48
 8000b06:	4920      	ldr	r1, [pc, #128]	@ (8000b88 <main+0xc4>)
 8000b08:	4820      	ldr	r0, [pc, #128]	@ (8000b8c <main+0xc8>)
 8000b0a:	f003 fdaf 	bl	800466c <WS28XX_Init>


  // Start UART reception for RFID Reader (USART1)
  HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));
 8000b0e:	220e      	movs	r2, #14
 8000b10:	491f      	ldr	r1, [pc, #124]	@ (8000b90 <main+0xcc>)
 8000b12:	4820      	ldr	r0, [pc, #128]	@ (8000b94 <main+0xd0>)
 8000b14:	f003 f873 	bl	8003bfe <HAL_UART_Receive_IT>

  // Start UART reception for Additional UART (USART2)
  HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));
 8000b18:	220e      	movs	r2, #14
 8000b1a:	491d      	ldr	r1, [pc, #116]	@ (8000b90 <main+0xcc>)
 8000b1c:	481e      	ldr	r0, [pc, #120]	@ (8000b98 <main+0xd4>)
 8000b1e:	f003 f86e 	bl	8003bfe <HAL_UART_Receive_IT>

  // Start UART reception for NOS response (USART3)
  HAL_UART_Receive_IT(&huart3, &responseData, 1);
 8000b22:	2201      	movs	r2, #1
 8000b24:	491d      	ldr	r1, [pc, #116]	@ (8000b9c <main+0xd8>)
 8000b26:	481e      	ldr	r0, [pc, #120]	@ (8000ba0 <main+0xdc>)
 8000b28:	f003 f869 	bl	8003bfe <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		switch (currentState)
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <main+0xe0>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b06      	cmp	r3, #6
 8000b32:	d825      	bhi.n	8000b80 <main+0xbc>
 8000b34:	a201      	add	r2, pc, #4	@ (adr r2, 8000b3c <main+0x78>)
 8000b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3a:	bf00      	nop
 8000b3c:	08000b59 	.word	0x08000b59
 8000b40:	08000b5f 	.word	0x08000b5f
 8000b44:	08000b65 	.word	0x08000b65
 8000b48:	08000b6b 	.word	0x08000b6b
 8000b4c:	08000b71 	.word	0x08000b71
 8000b50:	08000b77 	.word	0x08000b77
 8000b54:	08000b7b 	.word	0x08000b7b
		{
			case STATE_READY:
				ready_state();
 8000b58:	f7ff ff16 	bl	8000988 <ready_state>
				break;
 8000b5c:	e011      	b.n	8000b82 <main+0xbe>
			case STATE_READING:
				reading_state();
 8000b5e:	f7ff ff25 	bl	80009ac <reading_state>
				break;
 8000b62:	e00e      	b.n	8000b82 <main+0xbe>
			case STATE_OPEN:
				open_state();
 8000b64:	f7ff ff70 	bl	8000a48 <open_state>
				break;
 8000b68:	e00b      	b.n	8000b82 <main+0xbe>
			case STATE_CLOSED:
				closed_state();
 8000b6a:	f7ff ff8b 	bl	8000a84 <closed_state>
				break;
 8000b6e:	e008      	b.n	8000b82 <main+0xbe>
			// Leave other states empty for now
			case STATE_OVERCAPACITY:
				overcapacity_state();
 8000b70:	f7ff ff96 	bl	8000aa0 <overcapacity_state>
				break;
 8000b74:	e005      	b.n	8000b82 <main+0xbe>
			case STATE_SLEEP:
				sleep_state();
 8000b76:	f7ff ff99 	bl	8000aac <sleep_state>
				//break;
			case STATE_EMERGENCY:
				emergency_state();
 8000b7a:	f7ff ff9d 	bl	8000ab8 <emergency_state>
				break;
 8000b7e:	e000      	b.n	8000b82 <main+0xbe>
			default:
				break;
 8000b80:	bf00      	nop
		switch (currentState)
 8000b82:	e7d3      	b.n	8000b2c <main+0x68>
 8000b84:	20001c10 	.word	0x20001c10
 8000b88:	20001bc8 	.word	0x20001bc8
 8000b8c:	20000078 	.word	0x20000078
 8000b90:	20001b8c 	.word	0x20001b8c
 8000b94:	20001c9c 	.word	0x20001c9c
 8000b98:	20001ce4 	.word	0x20001ce4
 8000b9c:	20001bbc 	.word	0x20001bbc
 8000ba0:	20001d2c 	.word	0x20001d2c
 8000ba4:	20001b88 	.word	0x20001b88

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b090      	sub	sp, #64	@ 0x40
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 0318 	add.w	r3, r7, #24
 8000bb2:	2228      	movs	r2, #40	@ 0x28
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f003 fe98 	bl	80048ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bce:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000be4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000be6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 0318 	add.w	r3, r7, #24
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 fab5 	bl	8002160 <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bfc:	f000 f8b2 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c00:	230f      	movs	r3, #15
 8000c02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c04:	2302      	movs	r3, #2
 8000c06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 fd22 	bl	8002664 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c26:	f000 f89d 	bl	8000d64 <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3740      	adds	r7, #64	@ 0x40
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) { // Data received from USART1
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a3a      	ldr	r2, [pc, #232]	@ (8000d2c <HAL_UART_RxCpltCallback+0xf8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12b      	bne.n	8000c9e <HAL_UART_RxCpltCallback+0x6a>
        // Process the received data
        for (int i = 0; i < 12; i++) {
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	e00b      	b.n	8000c64 <HAL_UART_RxCpltCallback+0x30>
            processedData[i] = rxData[i + 1]; // Skip the start byte
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	4a37      	ldr	r2, [pc, #220]	@ (8000d30 <HAL_UART_RxCpltCallback+0xfc>)
 8000c52:	5cd1      	ldrb	r1, [r2, r3]
 8000c54:	4a37      	ldr	r2, [pc, #220]	@ (8000d34 <HAL_UART_RxCpltCallback+0x100>)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4413      	add	r3, r2
 8000c5a:	460a      	mov	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 12; i++) {
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3301      	adds	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2b0b      	cmp	r3, #11
 8000c68:	ddf0      	ble.n	8000c4c <HAL_UART_RxCpltCallback+0x18>
        }

        uart_source = 1;
 8000c6a:	4b33      	ldr	r3, [pc, #204]	@ (8000d38 <HAL_UART_RxCpltCallback+0x104>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
        processedData[12] = uart_source + '0';
 8000c70:	4b31      	ldr	r3, [pc, #196]	@ (8000d38 <HAL_UART_RxCpltCallback+0x104>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	3330      	adds	r3, #48	@ 0x30
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b2e      	ldr	r3, [pc, #184]	@ (8000d34 <HAL_UART_RxCpltCallback+0x100>)
 8000c7a:	731a      	strb	r2, [r3, #12]
        processedData[13] = '\0'; // Null-terminate the string
 8000c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d34 <HAL_UART_RxCpltCallback+0x100>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	735a      	strb	r2, [r3, #13]

        // Use sprintf to format usermsg with identification flag
        sprintf(usermsg, "%s", processedData);
 8000c82:	4a2c      	ldr	r2, [pc, #176]	@ (8000d34 <HAL_UART_RxCpltCallback+0x100>)
 8000c84:	492d      	ldr	r1, [pc, #180]	@ (8000d3c <HAL_UART_RxCpltCallback+0x108>)
 8000c86:	482e      	ldr	r0, [pc, #184]	@ (8000d40 <HAL_UART_RxCpltCallback+0x10c>)
 8000c88:	f003 fd8c 	bl	80047a4 <siprintf>

        flag_rev = 1; // Set flag to indicate data has been received
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d44 <HAL_UART_RxCpltCallback+0x110>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]

        // Re-enable UART reception for USART1
        HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));
 8000c92:	220e      	movs	r2, #14
 8000c94:	4926      	ldr	r1, [pc, #152]	@ (8000d30 <HAL_UART_RxCpltCallback+0xfc>)
 8000c96:	482c      	ldr	r0, [pc, #176]	@ (8000d48 <HAL_UART_RxCpltCallback+0x114>)
 8000c98:	f002 ffb1 	bl	8003bfe <HAL_UART_Receive_IT>


        // Re-enable UART reception for USART3
        HAL_UART_Receive_IT(&huart3, &responseData, 1);
    }
}
 8000c9c:	e041      	b.n	8000d22 <HAL_UART_RxCpltCallback+0xee>
    else if (huart->Instance == USART2) { // Data received from USART2
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8000d4c <HAL_UART_RxCpltCallback+0x118>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d12b      	bne.n	8000d00 <HAL_UART_RxCpltCallback+0xcc>
        for (int i = 0; i < 12; i++) {
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	e00b      	b.n	8000cc6 <HAL_UART_RxCpltCallback+0x92>
            processedData[i] = rxData[i + 1]; // Skip the start byte
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8000d30 <HAL_UART_RxCpltCallback+0xfc>)
 8000cb4:	5cd1      	ldrb	r1, [r2, r3]
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d34 <HAL_UART_RxCpltCallback+0x100>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4413      	add	r3, r2
 8000cbc:	460a      	mov	r2, r1
 8000cbe:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 12; i++) {
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	2b0b      	cmp	r3, #11
 8000cca:	ddf0      	ble.n	8000cae <HAL_UART_RxCpltCallback+0x7a>
        uart_source = 2;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <HAL_UART_RxCpltCallback+0x104>)
 8000cce:	2202      	movs	r2, #2
 8000cd0:	701a      	strb	r2, [r3, #0]
		processedData[12] = uart_source + '0';
 8000cd2:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <HAL_UART_RxCpltCallback+0x104>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	3330      	adds	r3, #48	@ 0x30
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <HAL_UART_RxCpltCallback+0x100>)
 8000cdc:	731a      	strb	r2, [r3, #12]
		processedData[13] = '\0'; // Null-terminate the string
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_UART_RxCpltCallback+0x100>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	735a      	strb	r2, [r3, #13]
        sprintf(usermsg, "%s", processedData);
 8000ce4:	4a13      	ldr	r2, [pc, #76]	@ (8000d34 <HAL_UART_RxCpltCallback+0x100>)
 8000ce6:	4915      	ldr	r1, [pc, #84]	@ (8000d3c <HAL_UART_RxCpltCallback+0x108>)
 8000ce8:	4815      	ldr	r0, [pc, #84]	@ (8000d40 <HAL_UART_RxCpltCallback+0x10c>)
 8000cea:	f003 fd5b 	bl	80047a4 <siprintf>
        flag_rev = 1; // Set flag to indicate data has been received
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <HAL_UART_RxCpltCallback+0x110>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));
 8000cf4:	220e      	movs	r2, #14
 8000cf6:	490e      	ldr	r1, [pc, #56]	@ (8000d30 <HAL_UART_RxCpltCallback+0xfc>)
 8000cf8:	4815      	ldr	r0, [pc, #84]	@ (8000d50 <HAL_UART_RxCpltCallback+0x11c>)
 8000cfa:	f002 ff80 	bl	8003bfe <HAL_UART_Receive_IT>
}
 8000cfe:	e010      	b.n	8000d22 <HAL_UART_RxCpltCallback+0xee>
    else if (huart->Instance == USART3) { // NOS Response (USART3)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a13      	ldr	r2, [pc, #76]	@ (8000d54 <HAL_UART_RxCpltCallback+0x120>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d10b      	bne.n	8000d22 <HAL_UART_RxCpltCallback+0xee>
        intresponseData = atoi(&responseData);
 8000d0a:	4813      	ldr	r0, [pc, #76]	@ (8000d58 <HAL_UART_RxCpltCallback+0x124>)
 8000d0c:	f003 fd46 	bl	800479c <atoi>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <HAL_UART_RxCpltCallback+0x128>)
 8000d16:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart3, &responseData, 1);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	490f      	ldr	r1, [pc, #60]	@ (8000d58 <HAL_UART_RxCpltCallback+0x124>)
 8000d1c:	4810      	ldr	r0, [pc, #64]	@ (8000d60 <HAL_UART_RxCpltCallback+0x12c>)
 8000d1e:	f002 ff6e 	bl	8003bfe <HAL_UART_Receive_IT>
}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40013800 	.word	0x40013800
 8000d30:	20001b8c 	.word	0x20001b8c
 8000d34:	20001b9c 	.word	0x20001b9c
 8000d38:	20001bbb 	.word	0x20001bbb
 8000d3c:	08005224 	.word	0x08005224
 8000d40:	20001bac 	.word	0x20001bac
 8000d44:	20001bba 	.word	0x20001bba
 8000d48:	20001c9c 	.word	0x20001c9c
 8000d4c:	40004400 	.word	0x40004400
 8000d50:	20001ce4 	.word	0x20001ce4
 8000d54:	40004800 	.word	0x40004800
 8000d58:	20001bbc 	.word	0x20001bbc
 8000d5c:	20001bbd 	.word	0x20001bbd
 8000d60:	20001d2c 	.word	0x20001d2c

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <Error_Handler+0x8>

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <HAL_MspInit+0x5c>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a14      	ldr	r2, [pc, #80]	@ (8000dcc <HAL_MspInit+0x5c>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6193      	str	r3, [r2, #24]
 8000d82:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <HAL_MspInit+0x5c>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <HAL_MspInit+0x5c>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a0e      	ldr	r2, [pc, #56]	@ (8000dcc <HAL_MspInit+0x5c>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <HAL_MspInit+0x5c>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <HAL_MspInit+0x60>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4a04      	ldr	r2, [pc, #16]	@ (8000dd0 <HAL_MspInit+0x60>)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <NMI_Handler+0x4>

08000ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <MemManage_Handler+0x4>

08000dec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 fbde 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Pin);
 8000e30:	2004      	movs	r0, #4
 8000e32:	f001 f97d 	bl	8002130 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000e40:	4802      	ldr	r0, [pc, #8]	@ (8000e4c <DMA1_Channel6_IRQHandler+0x10>)
 8000e42:	f000 fe8b 	bl	8001b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20001c58 	.word	0x20001c58

08000e50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <USART1_IRQHandler+0x10>)
 8000e56:	f002 fef7 	bl	8003c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20001c9c 	.word	0x20001c9c

08000e64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <USART2_IRQHandler+0x10>)
 8000e6a:	f002 feed 	bl	8003c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20001ce4 	.word	0x20001ce4

08000e78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <USART3_IRQHandler+0x10>)
 8000e7e:	f002 fee3 	bl	8003c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20001d2c 	.word	0x20001d2c

08000e8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_1A_Pin);
 8000e90:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000e94:	f001 f94c 	bl	8002130 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_1B_Pin);
 8000e98:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000e9c:	f001 f948 	bl	8002130 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ea0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ea4:	f001 f944 	bl	8002130 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_2A_Pin);
 8000ea8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000eac:	f001 f940 	bl	8002130 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_2B_Pin);
 8000eb0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000eb4:	f001 f93c 	bl	8002130 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	@ (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f003 fd06 	bl	80048fc <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20005000 	.word	0x20005000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	20001bc4 	.word	0x20001bc4
 8000f24:	20001ec0 	.word	0x20001ec0

08000f28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08e      	sub	sp, #56	@ 0x38
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f64:	4b2c      	ldr	r3, [pc, #176]	@ (8001018 <MX_TIM3_Init+0xe4>)
 8000f66:	4a2d      	ldr	r2, [pc, #180]	@ (800101c <MX_TIM3_Init+0xe8>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001018 <MX_TIM3_Init+0xe4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b29      	ldr	r3, [pc, #164]	@ (8001018 <MX_TIM3_Init+0xe4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f76:	4b28      	ldr	r3, [pc, #160]	@ (8001018 <MX_TIM3_Init+0xe4>)
 8000f78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	4b26      	ldr	r3, [pc, #152]	@ (8001018 <MX_TIM3_Init+0xe4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <MX_TIM3_Init+0xe4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f8a:	4823      	ldr	r0, [pc, #140]	@ (8001018 <MX_TIM3_Init+0xe4>)
 8000f8c:	f001 fcf8 	bl	8002980 <HAL_TIM_Base_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f96:	f7ff fee5 	bl	8000d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fa0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	481c      	ldr	r0, [pc, #112]	@ (8001018 <MX_TIM3_Init+0xe4>)
 8000fa8:	f002 f8e2 	bl	8003170 <HAL_TIM_ConfigClockSource>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fb2:	f7ff fed7 	bl	8000d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fb6:	4818      	ldr	r0, [pc, #96]	@ (8001018 <MX_TIM3_Init+0xe4>)
 8000fb8:	f001 fd7c 	bl	8002ab4 <HAL_TIM_PWM_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fc2:	f7ff fecf 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4810      	ldr	r0, [pc, #64]	@ (8001018 <MX_TIM3_Init+0xe4>)
 8000fd6:	f002 fd2f 	bl	8003a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fe0:	f7ff fec0 	bl	8000d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe4:	2360      	movs	r3, #96	@ 0x60
 8000fe6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4807      	ldr	r0, [pc, #28]	@ (8001018 <MX_TIM3_Init+0xe4>)
 8000ffc:	f001 fff6 	bl	8002fec <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001006:	f7ff fead 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800100a:	4803      	ldr	r0, [pc, #12]	@ (8001018 <MX_TIM3_Init+0xe4>)
 800100c:	f000 f8e0 	bl	80011d0 <HAL_TIM_MspPostInit>

}
 8001010:	bf00      	nop
 8001012:	3738      	adds	r7, #56	@ 0x38
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20001bc8 	.word	0x20001bc8
 800101c:	40000400 	.word	0x40000400

08001020 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	@ 0x38
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001026:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001034:	f107 0320 	add.w	r3, r7, #32
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001050:	4b2c      	ldr	r3, [pc, #176]	@ (8001104 <MX_TIM4_Init+0xe4>)
 8001052:	4a2d      	ldr	r2, [pc, #180]	@ (8001108 <MX_TIM4_Init+0xe8>)
 8001054:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001056:	4b2b      	ldr	r3, [pc, #172]	@ (8001104 <MX_TIM4_Init+0xe4>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b29      	ldr	r3, [pc, #164]	@ (8001104 <MX_TIM4_Init+0xe4>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001062:	4b28      	ldr	r3, [pc, #160]	@ (8001104 <MX_TIM4_Init+0xe4>)
 8001064:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001068:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <MX_TIM4_Init+0xe4>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001070:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <MX_TIM4_Init+0xe4>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001076:	4823      	ldr	r0, [pc, #140]	@ (8001104 <MX_TIM4_Init+0xe4>)
 8001078:	f001 fc82 	bl	8002980 <HAL_TIM_Base_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001082:	f7ff fe6f 	bl	8000d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800108c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001090:	4619      	mov	r1, r3
 8001092:	481c      	ldr	r0, [pc, #112]	@ (8001104 <MX_TIM4_Init+0xe4>)
 8001094:	f002 f86c 	bl	8003170 <HAL_TIM_ConfigClockSource>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800109e:	f7ff fe61 	bl	8000d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010a2:	4818      	ldr	r0, [pc, #96]	@ (8001104 <MX_TIM4_Init+0xe4>)
 80010a4:	f001 fd06 	bl	8002ab4 <HAL_TIM_PWM_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80010ae:	f7ff fe59 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	4619      	mov	r1, r3
 80010c0:	4810      	ldr	r0, [pc, #64]	@ (8001104 <MX_TIM4_Init+0xe4>)
 80010c2:	f002 fcb9 	bl	8003a38 <HAL_TIMEx_MasterConfigSynchronization>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80010cc:	f7ff fe4a 	bl	8000d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d0:	2360      	movs	r3, #96	@ 0x60
 80010d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	4807      	ldr	r0, [pc, #28]	@ (8001104 <MX_TIM4_Init+0xe4>)
 80010e8:	f001 ff80 	bl	8002fec <HAL_TIM_PWM_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80010f2:	f7ff fe37 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010f6:	4803      	ldr	r0, [pc, #12]	@ (8001104 <MX_TIM4_Init+0xe4>)
 80010f8:	f000 f86a 	bl	80011d0 <HAL_TIM_MspPostInit>

}
 80010fc:	bf00      	nop
 80010fe:	3738      	adds	r7, #56	@ 0x38
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20001c10 	.word	0x20001c10
 8001108:	40000800 	.word	0x40000800

0800110c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a28      	ldr	r2, [pc, #160]	@ (80011bc <HAL_TIM_Base_MspInit+0xb0>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d139      	bne.n	8001192 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800111e:	4b28      	ldr	r3, [pc, #160]	@ (80011c0 <HAL_TIM_Base_MspInit+0xb4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a27      	ldr	r2, [pc, #156]	@ (80011c0 <HAL_TIM_Base_MspInit+0xb4>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <HAL_TIM_Base_MspInit+0xb4>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001136:	4b23      	ldr	r3, [pc, #140]	@ (80011c4 <HAL_TIM_Base_MspInit+0xb8>)
 8001138:	4a23      	ldr	r2, [pc, #140]	@ (80011c8 <HAL_TIM_Base_MspInit+0xbc>)
 800113a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800113c:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <HAL_TIM_Base_MspInit+0xb8>)
 800113e:	2210      	movs	r2, #16
 8001140:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001142:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <HAL_TIM_Base_MspInit+0xb8>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001148:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <HAL_TIM_Base_MspInit+0xb8>)
 800114a:	2280      	movs	r2, #128	@ 0x80
 800114c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800114e:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <HAL_TIM_Base_MspInit+0xb8>)
 8001150:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001154:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001156:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <HAL_TIM_Base_MspInit+0xb8>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800115c:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <HAL_TIM_Base_MspInit+0xb8>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001162:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <HAL_TIM_Base_MspInit+0xb8>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001168:	4816      	ldr	r0, [pc, #88]	@ (80011c4 <HAL_TIM_Base_MspInit+0xb8>)
 800116a:	f000 fb89 	bl	8001880 <HAL_DMA_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8001174:	f7ff fdf6 	bl	8000d64 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <HAL_TIM_Base_MspInit+0xb8>)
 800117c:	625a      	str	r2, [r3, #36]	@ 0x24
 800117e:	4a11      	ldr	r2, [pc, #68]	@ (80011c4 <HAL_TIM_Base_MspInit+0xb8>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a0f      	ldr	r2, [pc, #60]	@ (80011c4 <HAL_TIM_Base_MspInit+0xb8>)
 8001188:	639a      	str	r2, [r3, #56]	@ 0x38
 800118a:	4a0e      	ldr	r2, [pc, #56]	@ (80011c4 <HAL_TIM_Base_MspInit+0xb8>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001190:	e010      	b.n	80011b4 <HAL_TIM_Base_MspInit+0xa8>
  else if(tim_baseHandle->Instance==TIM4)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <HAL_TIM_Base_MspInit+0xc0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d10b      	bne.n	80011b4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <HAL_TIM_Base_MspInit+0xb4>)
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	4a07      	ldr	r2, [pc, #28]	@ (80011c0 <HAL_TIM_Base_MspInit+0xb4>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	61d3      	str	r3, [r2, #28]
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <HAL_TIM_Base_MspInit+0xb4>)
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40000400 	.word	0x40000400
 80011c0:	40021000 	.word	0x40021000
 80011c4:	20001c58 	.word	0x20001c58
 80011c8:	4002006c 	.word	0x4002006c
 80011cc:	40000800 	.word	0x40000800

080011d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001264 <HAL_TIM_MspPostInit+0x94>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d118      	bne.n	8001222 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <HAL_TIM_MspPostInit+0x98>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001268 <HAL_TIM_MspPostInit+0x98>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <HAL_TIM_MspPostInit+0x98>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001208:	2340      	movs	r3, #64	@ 0x40
 800120a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2302      	movs	r3, #2
 8001212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	4814      	ldr	r0, [pc, #80]	@ (800126c <HAL_TIM_MspPostInit+0x9c>)
 800121c:	f000 fdd2 	bl	8001dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001220:	e01c      	b.n	800125c <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM4)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a12      	ldr	r2, [pc, #72]	@ (8001270 <HAL_TIM_MspPostInit+0xa0>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d117      	bne.n	800125c <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <HAL_TIM_MspPostInit+0x98>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <HAL_TIM_MspPostInit+0x98>)
 8001232:	f043 0308 	orr.w	r3, r3, #8
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_TIM_MspPostInit+0x98>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001244:	2340      	movs	r3, #64	@ 0x40
 8001246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2302      	movs	r3, #2
 800124e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4619      	mov	r1, r3
 8001256:	4807      	ldr	r0, [pc, #28]	@ (8001274 <HAL_TIM_MspPostInit+0xa4>)
 8001258:	f000 fdb4 	bl	8001dc4 <HAL_GPIO_Init>
}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40000400 	.word	0x40000400
 8001268:	40021000 	.word	0x40021000
 800126c:	40010800 	.word	0x40010800
 8001270:	40000800 	.word	0x40000800
 8001274:	40010c00 	.word	0x40010c00

08001278 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <MX_USART1_UART_Init+0x4c>)
 800127e:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <MX_USART1_UART_Init+0x50>)
 8001280:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001282:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <MX_USART1_UART_Init+0x4c>)
 8001284:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001288:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <MX_USART1_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <MX_USART1_UART_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <MX_USART1_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <MX_USART1_UART_Init+0x4c>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <MX_USART1_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <MX_USART1_UART_Init+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_USART1_UART_Init+0x4c>)
 80012b0:	f002 fc20 	bl	8003af4 <HAL_UART_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012ba:	f7ff fd53 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20001c9c 	.word	0x20001c9c
 80012c8:	40013800 	.word	0x40013800

080012cc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	@ (800131c <MX_USART2_UART_Init+0x50>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 8001304:	f002 fbf6 	bl	8003af4 <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800130e:	f7ff fd29 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20001ce4 	.word	0x20001ce4
 800131c:	40004400 	.word	0x40004400

08001320 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <MX_USART3_UART_Init+0x4c>)
 8001326:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <MX_USART3_UART_Init+0x50>)
 8001328:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <MX_USART3_UART_Init+0x4c>)
 800132c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001330:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <MX_USART3_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <MX_USART3_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <MX_USART3_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <MX_USART3_UART_Init+0x4c>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b08      	ldr	r3, [pc, #32]	@ (800136c <MX_USART3_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <MX_USART3_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_USART3_UART_Init+0x4c>)
 8001358:	f002 fbcc 	bl	8003af4 <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001362:	f7ff fcff 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20001d2c 	.word	0x20001d2c
 8001370:	40004800 	.word	0x40004800

08001374 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	@ 0x30
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0320 	add.w	r3, r7, #32
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a59      	ldr	r2, [pc, #356]	@ (80014f4 <HAL_UART_MspInit+0x180>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d13a      	bne.n	800140a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001394:	4b58      	ldr	r3, [pc, #352]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a57      	ldr	r2, [pc, #348]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 800139a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b55      	ldr	r3, [pc, #340]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ac:	4b52      	ldr	r3, [pc, #328]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a51      	ldr	r2, [pc, #324]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b4f      	ldr	r3, [pc, #316]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0320 	add.w	r3, r7, #32
 80013d6:	4619      	mov	r1, r3
 80013d8:	4848      	ldr	r0, [pc, #288]	@ (80014fc <HAL_UART_MspInit+0x188>)
 80013da:	f000 fcf3 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0320 	add.w	r3, r7, #32
 80013f0:	4619      	mov	r1, r3
 80013f2:	4842      	ldr	r0, [pc, #264]	@ (80014fc <HAL_UART_MspInit+0x188>)
 80013f4:	f000 fce6 	bl	8001dc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	2025      	movs	r0, #37	@ 0x25
 80013fe:	f000 fa08 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001402:	2025      	movs	r0, #37	@ 0x25
 8001404:	f000 fa21 	bl	800184a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001408:	e070      	b.n	80014ec <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART2)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a3c      	ldr	r2, [pc, #240]	@ (8001500 <HAL_UART_MspInit+0x18c>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d12c      	bne.n	800146e <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001414:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	4a37      	ldr	r2, [pc, #220]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 800141a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800141e:	61d3      	str	r3, [r2, #28]
 8001420:	4b35      	ldr	r3, [pc, #212]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4b32      	ldr	r3, [pc, #200]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a31      	ldr	r2, [pc, #196]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b2f      	ldr	r3, [pc, #188]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001444:	230c      	movs	r3, #12
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2302      	movs	r3, #2
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0320 	add.w	r3, r7, #32
 8001454:	4619      	mov	r1, r3
 8001456:	4829      	ldr	r0, [pc, #164]	@ (80014fc <HAL_UART_MspInit+0x188>)
 8001458:	f000 fcb4 	bl	8001dc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	2026      	movs	r0, #38	@ 0x26
 8001462:	f000 f9d6 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001466:	2026      	movs	r0, #38	@ 0x26
 8001468:	f000 f9ef 	bl	800184a <HAL_NVIC_EnableIRQ>
}
 800146c:	e03e      	b.n	80014ec <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART3)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a24      	ldr	r2, [pc, #144]	@ (8001504 <HAL_UART_MspInit+0x190>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d139      	bne.n	80014ec <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001478:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	4a1e      	ldr	r2, [pc, #120]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 800147e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001482:	61d3      	str	r3, [r2, #28]
 8001484:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001490:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a18      	ldr	r2, [pc, #96]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 8001496:	f043 0308 	orr.w	r3, r3, #8
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <HAL_UART_MspInit+0x184>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	4619      	mov	r1, r3
 80014bc:	4812      	ldr	r0, [pc, #72]	@ (8001508 <HAL_UART_MspInit+0x194>)
 80014be:	f000 fc81 	bl	8001dc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	4619      	mov	r1, r3
 80014d6:	480c      	ldr	r0, [pc, #48]	@ (8001508 <HAL_UART_MspInit+0x194>)
 80014d8:	f000 fc74 	bl	8001dc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	2027      	movs	r0, #39	@ 0x27
 80014e2:	f000 f996 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014e6:	2027      	movs	r0, #39	@ 0x27
 80014e8:	f000 f9af 	bl	800184a <HAL_NVIC_EnableIRQ>
}
 80014ec:	bf00      	nop
 80014ee:	3730      	adds	r7, #48	@ 0x30
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40013800 	.word	0x40013800
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010800 	.word	0x40010800
 8001500:	40004400 	.word	0x40004400
 8001504:	40004800 	.word	0x40004800
 8001508:	40010c00 	.word	0x40010c00

0800150c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800150c:	f7ff fd0c 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480b      	ldr	r0, [pc, #44]	@ (8001540 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001512:	490c      	ldr	r1, [pc, #48]	@ (8001544 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001514:	4a0c      	ldr	r2, [pc, #48]	@ (8001548 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a09      	ldr	r2, [pc, #36]	@ (800154c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001528:	4c09      	ldr	r4, [pc, #36]	@ (8001550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001536:	f003 f9e7 	bl	8004908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800153a:	f7ff fac3 	bl	8000ac4 <main>
  bx lr
 800153e:	4770      	bx	lr
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001548:	08005398 	.word	0x08005398
  ldr r2, =_sbss
 800154c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001550:	20001ec0 	.word	0x20001ec0

08001554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC1_2_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <HAL_Init+0x28>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a07      	ldr	r2, [pc, #28]	@ (8001580 <HAL_Init+0x28>)
 8001562:	f043 0310 	orr.w	r3, r3, #16
 8001566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 f947 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	2000      	movs	r0, #0
 8001570:	f000 f808 	bl	8001584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f7ff fbfc 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40022000 	.word	0x40022000

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_InitTick+0x54>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <HAL_InitTick+0x58>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f95f 	bl	8001866 <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00e      	b.n	80015d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d80a      	bhi.n	80015ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015c0:	f000 f927 	bl	8001812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c4:	4a06      	ldr	r2, [pc, #24]	@ (80015e0 <HAL_InitTick+0x5c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000008 	.word	0x20000008
 80015e0:	20000004 	.word	0x20000004

080015e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <HAL_IncTick+0x1c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <HAL_IncTick+0x20>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a03      	ldr	r2, [pc, #12]	@ (8001604 <HAL_IncTick+0x20>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	20000008 	.word	0x20000008
 8001604:	20001d74 	.word	0x20001d74

08001608 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b02      	ldr	r3, [pc, #8]	@ (8001618 <HAL_GetTick+0x10>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	20001d74 	.word	0x20001d74

0800161c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff fff0 	bl	8001608 <HAL_GetTick>
 8001628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001634:	d005      	beq.n	8001642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <HAL_Delay+0x44>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001642:	bf00      	nop
 8001644:	f7ff ffe0 	bl	8001608 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f7      	bhi.n	8001644 <HAL_Delay+0x28>
  {
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000008 	.word	0x20000008

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0b      	blt.n	80016f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	4906      	ldr	r1, [pc, #24]	@ (80016fc <__NVIC_EnableIRQ+0x34>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	2001      	movs	r0, #1
 80016ea:	fa00 f202 	lsl.w	r2, r0, r2
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	e000e100 	.word	0xe000e100

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	@ (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	@ (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	@ 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f1c3 0307 	rsb	r3, r3, #7
 800176e:	2b04      	cmp	r3, #4
 8001770:	bf28      	it	cs
 8001772:	2304      	movcs	r3, #4
 8001774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3304      	adds	r3, #4
 800177a:	2b06      	cmp	r3, #6
 800177c:	d902      	bls.n	8001784 <NVIC_EncodePriority+0x30>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b03      	subs	r3, #3
 8001782:	e000      	b.n	8001786 <NVIC_EncodePriority+0x32>
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800179c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	4313      	orrs	r3, r2
         );
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	@ 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017c8:	d301      	bcc.n	80017ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00f      	b.n	80017ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <SysTick_Config+0x40>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d6:	210f      	movs	r1, #15
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017dc:	f7ff ff90 	bl	8001700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <SysTick_Config+0x40>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e6:	4b04      	ldr	r3, [pc, #16]	@ (80017f8 <SysTick_Config+0x40>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	e000e010 	.word	0xe000e010

080017fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff2d 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff42 	bl	80016ac <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ff90 	bl	8001754 <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff5f 	bl	8001700 <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff35 	bl	80016c8 <__NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffa2 	bl	80017b8 <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e043      	b.n	800191e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <HAL_DMA_Init+0xa8>)
 800189e:	4413      	add	r3, r2
 80018a0:	4a22      	ldr	r2, [pc, #136]	@ (800192c <HAL_DMA_Init+0xac>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	009a      	lsls	r2, r3, #2
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001930 <HAL_DMA_Init+0xb0>)
 80018b2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018ca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80018ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	bffdfff8 	.word	0xbffdfff8
 800192c:	cccccccd 	.word	0xcccccccd
 8001930:	40020000 	.word	0x40020000

08001934 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_DMA_Start_IT+0x20>
 8001950:	2302      	movs	r3, #2
 8001952:	e04b      	b.n	80019ec <HAL_DMA_Start_IT+0xb8>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d13a      	bne.n	80019de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2202      	movs	r2, #2
 800196c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0201 	bic.w	r2, r2, #1
 8001984:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 f9eb 	bl	8001d68 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001996:	2b00      	cmp	r3, #0
 8001998:	d008      	beq.n	80019ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 020e 	orr.w	r2, r2, #14
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e00f      	b.n	80019cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0204 	bic.w	r2, r2, #4
 80019ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 020a 	orr.w	r2, r2, #10
 80019ca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e005      	b.n	80019ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80019e6:	2302      	movs	r3, #2
 80019e8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d008      	beq.n	8001a1e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2204      	movs	r2, #4
 8001a10:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e020      	b.n	8001a60 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 020e 	bic.w	r2, r2, #14
 8001a2c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0201 	bic.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
	...

08001a6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d005      	beq.n	8001a90 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2204      	movs	r2, #4
 8001a88:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]
 8001a8e:	e051      	b.n	8001b34 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 020e 	bic.w	r2, r2, #14
 8001a9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0201 	bic.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a22      	ldr	r2, [pc, #136]	@ (8001b40 <HAL_DMA_Abort_IT+0xd4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d029      	beq.n	8001b0e <HAL_DMA_Abort_IT+0xa2>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a21      	ldr	r2, [pc, #132]	@ (8001b44 <HAL_DMA_Abort_IT+0xd8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d022      	beq.n	8001b0a <HAL_DMA_Abort_IT+0x9e>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b48 <HAL_DMA_Abort_IT+0xdc>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d01a      	beq.n	8001b04 <HAL_DMA_Abort_IT+0x98>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b4c <HAL_DMA_Abort_IT+0xe0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d012      	beq.n	8001afe <HAL_DMA_Abort_IT+0x92>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1c      	ldr	r2, [pc, #112]	@ (8001b50 <HAL_DMA_Abort_IT+0xe4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00a      	beq.n	8001af8 <HAL_DMA_Abort_IT+0x8c>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b54 <HAL_DMA_Abort_IT+0xe8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d102      	bne.n	8001af2 <HAL_DMA_Abort_IT+0x86>
 8001aec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001af0:	e00e      	b.n	8001b10 <HAL_DMA_Abort_IT+0xa4>
 8001af2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001af6:	e00b      	b.n	8001b10 <HAL_DMA_Abort_IT+0xa4>
 8001af8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001afc:	e008      	b.n	8001b10 <HAL_DMA_Abort_IT+0xa4>
 8001afe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b02:	e005      	b.n	8001b10 <HAL_DMA_Abort_IT+0xa4>
 8001b04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b08:	e002      	b.n	8001b10 <HAL_DMA_Abort_IT+0xa4>
 8001b0a:	2310      	movs	r3, #16
 8001b0c:	e000      	b.n	8001b10 <HAL_DMA_Abort_IT+0xa4>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	4a11      	ldr	r2, [pc, #68]	@ (8001b58 <HAL_DMA_Abort_IT+0xec>)
 8001b12:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
    } 
  }
  return status;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40020008 	.word	0x40020008
 8001b44:	4002001c 	.word	0x4002001c
 8001b48:	40020030 	.word	0x40020030
 8001b4c:	40020044 	.word	0x40020044
 8001b50:	40020058 	.word	0x40020058
 8001b54:	4002006c 	.word	0x4002006c
 8001b58:	40020000 	.word	0x40020000

08001b5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b78:	2204      	movs	r2, #4
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d04f      	beq.n	8001c24 <HAL_DMA_IRQHandler+0xc8>
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d04a      	beq.n	8001c24 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d107      	bne.n	8001bac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0204 	bic.w	r2, r2, #4
 8001baa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a66      	ldr	r2, [pc, #408]	@ (8001d4c <HAL_DMA_IRQHandler+0x1f0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d029      	beq.n	8001c0a <HAL_DMA_IRQHandler+0xae>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a65      	ldr	r2, [pc, #404]	@ (8001d50 <HAL_DMA_IRQHandler+0x1f4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d022      	beq.n	8001c06 <HAL_DMA_IRQHandler+0xaa>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a63      	ldr	r2, [pc, #396]	@ (8001d54 <HAL_DMA_IRQHandler+0x1f8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d01a      	beq.n	8001c00 <HAL_DMA_IRQHandler+0xa4>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a62      	ldr	r2, [pc, #392]	@ (8001d58 <HAL_DMA_IRQHandler+0x1fc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d012      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x9e>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a60      	ldr	r2, [pc, #384]	@ (8001d5c <HAL_DMA_IRQHandler+0x200>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00a      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x98>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a5f      	ldr	r2, [pc, #380]	@ (8001d60 <HAL_DMA_IRQHandler+0x204>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d102      	bne.n	8001bee <HAL_DMA_IRQHandler+0x92>
 8001be8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bec:	e00e      	b.n	8001c0c <HAL_DMA_IRQHandler+0xb0>
 8001bee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001bf2:	e00b      	b.n	8001c0c <HAL_DMA_IRQHandler+0xb0>
 8001bf4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001bf8:	e008      	b.n	8001c0c <HAL_DMA_IRQHandler+0xb0>
 8001bfa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bfe:	e005      	b.n	8001c0c <HAL_DMA_IRQHandler+0xb0>
 8001c00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c04:	e002      	b.n	8001c0c <HAL_DMA_IRQHandler+0xb0>
 8001c06:	2340      	movs	r3, #64	@ 0x40
 8001c08:	e000      	b.n	8001c0c <HAL_DMA_IRQHandler+0xb0>
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	4a55      	ldr	r2, [pc, #340]	@ (8001d64 <HAL_DMA_IRQHandler+0x208>)
 8001c0e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 8094 	beq.w	8001d42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c22:	e08e      	b.n	8001d42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	2202      	movs	r2, #2
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d056      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x186>
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d051      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10b      	bne.n	8001c64 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 020a 	bic.w	r2, r2, #10
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a38      	ldr	r2, [pc, #224]	@ (8001d4c <HAL_DMA_IRQHandler+0x1f0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d029      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x166>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a37      	ldr	r2, [pc, #220]	@ (8001d50 <HAL_DMA_IRQHandler+0x1f4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d022      	beq.n	8001cbe <HAL_DMA_IRQHandler+0x162>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a35      	ldr	r2, [pc, #212]	@ (8001d54 <HAL_DMA_IRQHandler+0x1f8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01a      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x15c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a34      	ldr	r2, [pc, #208]	@ (8001d58 <HAL_DMA_IRQHandler+0x1fc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d012      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x156>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a32      	ldr	r2, [pc, #200]	@ (8001d5c <HAL_DMA_IRQHandler+0x200>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00a      	beq.n	8001cac <HAL_DMA_IRQHandler+0x150>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a31      	ldr	r2, [pc, #196]	@ (8001d60 <HAL_DMA_IRQHandler+0x204>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d102      	bne.n	8001ca6 <HAL_DMA_IRQHandler+0x14a>
 8001ca0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ca4:	e00e      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x168>
 8001ca6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001caa:	e00b      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x168>
 8001cac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cb0:	e008      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x168>
 8001cb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cb6:	e005      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x168>
 8001cb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cbc:	e002      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x168>
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	e000      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x168>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	4a27      	ldr	r2, [pc, #156]	@ (8001d64 <HAL_DMA_IRQHandler+0x208>)
 8001cc6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d034      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ce0:	e02f      	b.n	8001d42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d028      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x1e8>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d023      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 020e 	bic.w	r2, r2, #14
 8001d0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d14:	2101      	movs	r1, #1
 8001d16:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d004      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	4798      	blx	r3
    }
  }
  return;
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
}
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40020008 	.word	0x40020008
 8001d50:	4002001c 	.word	0x4002001c
 8001d54:	40020030 	.word	0x40020030
 8001d58:	40020044 	.word	0x40020044
 8001d5c:	40020058 	.word	0x40020058
 8001d60:	4002006c 	.word	0x4002006c
 8001d64:	40020000 	.word	0x40020000

08001d68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d7e:	2101      	movs	r1, #1
 8001d80:	fa01 f202 	lsl.w	r2, r1, r2
 8001d84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d108      	bne.n	8001da8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001da6:	e007      	b.n	8001db8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	60da      	str	r2, [r3, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b08b      	sub	sp, #44	@ 0x2c
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd6:	e169      	b.n	80020ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	f040 8158 	bne.w	80020a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4a9a      	ldr	r2, [pc, #616]	@ (8002064 <HAL_GPIO_Init+0x2a0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d05e      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
 8001e00:	4a98      	ldr	r2, [pc, #608]	@ (8002064 <HAL_GPIO_Init+0x2a0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d875      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e06:	4a98      	ldr	r2, [pc, #608]	@ (8002068 <HAL_GPIO_Init+0x2a4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d058      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
 8001e0c:	4a96      	ldr	r2, [pc, #600]	@ (8002068 <HAL_GPIO_Init+0x2a4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d86f      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e12:	4a96      	ldr	r2, [pc, #600]	@ (800206c <HAL_GPIO_Init+0x2a8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d052      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
 8001e18:	4a94      	ldr	r2, [pc, #592]	@ (800206c <HAL_GPIO_Init+0x2a8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d869      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e1e:	4a94      	ldr	r2, [pc, #592]	@ (8002070 <HAL_GPIO_Init+0x2ac>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d04c      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
 8001e24:	4a92      	ldr	r2, [pc, #584]	@ (8002070 <HAL_GPIO_Init+0x2ac>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d863      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e2a:	4a92      	ldr	r2, [pc, #584]	@ (8002074 <HAL_GPIO_Init+0x2b0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d046      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
 8001e30:	4a90      	ldr	r2, [pc, #576]	@ (8002074 <HAL_GPIO_Init+0x2b0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d85d      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e36:	2b12      	cmp	r3, #18
 8001e38:	d82a      	bhi.n	8001e90 <HAL_GPIO_Init+0xcc>
 8001e3a:	2b12      	cmp	r3, #18
 8001e3c:	d859      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e44 <HAL_GPIO_Init+0x80>)
 8001e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e44:	08001ebf 	.word	0x08001ebf
 8001e48:	08001e99 	.word	0x08001e99
 8001e4c:	08001eab 	.word	0x08001eab
 8001e50:	08001eed 	.word	0x08001eed
 8001e54:	08001ef3 	.word	0x08001ef3
 8001e58:	08001ef3 	.word	0x08001ef3
 8001e5c:	08001ef3 	.word	0x08001ef3
 8001e60:	08001ef3 	.word	0x08001ef3
 8001e64:	08001ef3 	.word	0x08001ef3
 8001e68:	08001ef3 	.word	0x08001ef3
 8001e6c:	08001ef3 	.word	0x08001ef3
 8001e70:	08001ef3 	.word	0x08001ef3
 8001e74:	08001ef3 	.word	0x08001ef3
 8001e78:	08001ef3 	.word	0x08001ef3
 8001e7c:	08001ef3 	.word	0x08001ef3
 8001e80:	08001ef3 	.word	0x08001ef3
 8001e84:	08001ef3 	.word	0x08001ef3
 8001e88:	08001ea1 	.word	0x08001ea1
 8001e8c:	08001eb5 	.word	0x08001eb5
 8001e90:	4a79      	ldr	r2, [pc, #484]	@ (8002078 <HAL_GPIO_Init+0x2b4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d013      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e96:	e02c      	b.n	8001ef2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e029      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	e024      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	3308      	adds	r3, #8
 8001eb0:	623b      	str	r3, [r7, #32]
          break;
 8001eb2:	e01f      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	330c      	adds	r3, #12
 8001eba:	623b      	str	r3, [r7, #32]
          break;
 8001ebc:	e01a      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	623b      	str	r3, [r7, #32]
          break;
 8001eca:	e013      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d105      	bne.n	8001ee0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed4:	2308      	movs	r3, #8
 8001ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	611a      	str	r2, [r3, #16]
          break;
 8001ede:	e009      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	615a      	str	r2, [r3, #20]
          break;
 8001eea:	e003      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001eec:	2300      	movs	r3, #0
 8001eee:	623b      	str	r3, [r7, #32]
          break;
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          break;
 8001ef2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2bff      	cmp	r3, #255	@ 0xff
 8001ef8:	d801      	bhi.n	8001efe <HAL_GPIO_Init+0x13a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	e001      	b.n	8001f02 <HAL_GPIO_Init+0x13e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3304      	adds	r3, #4
 8001f02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2bff      	cmp	r3, #255	@ 0xff
 8001f08:	d802      	bhi.n	8001f10 <HAL_GPIO_Init+0x14c>
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	e002      	b.n	8001f16 <HAL_GPIO_Init+0x152>
 8001f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f12:	3b08      	subs	r3, #8
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	210f      	movs	r1, #15
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	401a      	ands	r2, r3
 8001f28:	6a39      	ldr	r1, [r7, #32]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	431a      	orrs	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80b1 	beq.w	80020a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f44:	4b4d      	ldr	r3, [pc, #308]	@ (800207c <HAL_GPIO_Init+0x2b8>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a4c      	ldr	r2, [pc, #304]	@ (800207c <HAL_GPIO_Init+0x2b8>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b4a      	ldr	r3, [pc, #296]	@ (800207c <HAL_GPIO_Init+0x2b8>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f5c:	4a48      	ldr	r2, [pc, #288]	@ (8002080 <HAL_GPIO_Init+0x2bc>)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	3302      	adds	r3, #2
 8001f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a40      	ldr	r2, [pc, #256]	@ (8002084 <HAL_GPIO_Init+0x2c0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d013      	beq.n	8001fb0 <HAL_GPIO_Init+0x1ec>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a3f      	ldr	r2, [pc, #252]	@ (8002088 <HAL_GPIO_Init+0x2c4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00d      	beq.n	8001fac <HAL_GPIO_Init+0x1e8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a3e      	ldr	r2, [pc, #248]	@ (800208c <HAL_GPIO_Init+0x2c8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d007      	beq.n	8001fa8 <HAL_GPIO_Init+0x1e4>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a3d      	ldr	r2, [pc, #244]	@ (8002090 <HAL_GPIO_Init+0x2cc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d101      	bne.n	8001fa4 <HAL_GPIO_Init+0x1e0>
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e006      	b.n	8001fb2 <HAL_GPIO_Init+0x1ee>
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	e004      	b.n	8001fb2 <HAL_GPIO_Init+0x1ee>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e002      	b.n	8001fb2 <HAL_GPIO_Init+0x1ee>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_GPIO_Init+0x1ee>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4093      	lsls	r3, r2
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fc2:	492f      	ldr	r1, [pc, #188]	@ (8002080 <HAL_GPIO_Init+0x2bc>)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	492c      	ldr	r1, [pc, #176]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fea:	4b2a      	ldr	r3, [pc, #168]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	4928      	ldr	r1, [pc, #160]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002004:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	4922      	ldr	r1, [pc, #136]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	60cb      	str	r3, [r1, #12]
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002012:	4b20      	ldr	r3, [pc, #128]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	43db      	mvns	r3, r3
 800201a:	491e      	ldr	r1, [pc, #120]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 800201c:	4013      	ands	r3, r2
 800201e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800202c:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	4918      	ldr	r1, [pc, #96]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800203a:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	43db      	mvns	r3, r3
 8002042:	4914      	ldr	r1, [pc, #80]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8002044:	4013      	ands	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d021      	beq.n	8002098 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	490e      	ldr	r1, [pc, #56]	@ (8002094 <HAL_GPIO_Init+0x2d0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]
 8002060:	e021      	b.n	80020a6 <HAL_GPIO_Init+0x2e2>
 8002062:	bf00      	nop
 8002064:	10320000 	.word	0x10320000
 8002068:	10310000 	.word	0x10310000
 800206c:	10220000 	.word	0x10220000
 8002070:	10210000 	.word	0x10210000
 8002074:	10120000 	.word	0x10120000
 8002078:	10110000 	.word	0x10110000
 800207c:	40021000 	.word	0x40021000
 8002080:	40010000 	.word	0x40010000
 8002084:	40010800 	.word	0x40010800
 8002088:	40010c00 	.word	0x40010c00
 800208c:	40011000 	.word	0x40011000
 8002090:	40011400 	.word	0x40011400
 8002094:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002098:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <HAL_GPIO_Init+0x304>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	43db      	mvns	r3, r3
 80020a0:	4909      	ldr	r1, [pc, #36]	@ (80020c8 <HAL_GPIO_Init+0x304>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	3301      	adds	r3, #1
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	fa22 f303 	lsr.w	r3, r2, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f47f ae8e 	bne.w	8001dd8 <HAL_GPIO_Init+0x14>
  }
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	372c      	adds	r7, #44	@ 0x2c
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	40010400 	.word	0x40010400

080020cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
 80020d8:	4613      	mov	r3, r2
 80020da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020dc:	787b      	ldrb	r3, [r7, #1]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020e8:	e003      	b.n	80020f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	041a      	lsls	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	611a      	str	r2, [r3, #16]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4013      	ands	r3, r2
 8002114:	041a      	lsls	r2, r3, #16
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43d9      	mvns	r1, r3
 800211a:	887b      	ldrh	r3, [r7, #2]
 800211c:	400b      	ands	r3, r1
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	611a      	str	r2, [r3, #16]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
	...

08002130 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800213a:	4b08      	ldr	r3, [pc, #32]	@ (800215c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d006      	beq.n	8002154 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002146:	4a05      	ldr	r2, [pc, #20]	@ (800215c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fbaa 	bl	80008a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40010400 	.word	0x40010400

08002160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e272      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8087 	beq.w	800228e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002180:	4b92      	ldr	r3, [pc, #584]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b04      	cmp	r3, #4
 800218a:	d00c      	beq.n	80021a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800218c:	4b8f      	ldr	r3, [pc, #572]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d112      	bne.n	80021be <HAL_RCC_OscConfig+0x5e>
 8002198:	4b8c      	ldr	r3, [pc, #560]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a4:	d10b      	bne.n	80021be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a6:	4b89      	ldr	r3, [pc, #548]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d06c      	beq.n	800228c <HAL_RCC_OscConfig+0x12c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d168      	bne.n	800228c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e24c      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x76>
 80021c8:	4b80      	ldr	r3, [pc, #512]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a7f      	ldr	r2, [pc, #508]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	e02e      	b.n	8002234 <HAL_RCC_OscConfig+0xd4>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x98>
 80021de:	4b7b      	ldr	r3, [pc, #492]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a7a      	ldr	r2, [pc, #488]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b78      	ldr	r3, [pc, #480]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a77      	ldr	r2, [pc, #476]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e01d      	b.n	8002234 <HAL_RCC_OscConfig+0xd4>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0xbc>
 8002202:	4b72      	ldr	r3, [pc, #456]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a71      	ldr	r2, [pc, #452]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b6f      	ldr	r3, [pc, #444]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6e      	ldr	r2, [pc, #440]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0xd4>
 800221c:	4b6b      	ldr	r3, [pc, #428]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a6a      	ldr	r2, [pc, #424]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b68      	ldr	r3, [pc, #416]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a67      	ldr	r2, [pc, #412]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002232:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff f9e4 	bl	8001608 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002244:	f7ff f9e0 	bl	8001608 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	@ 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e200      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b5d      	ldr	r3, [pc, #372]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0xe4>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7ff f9d0 	bl	8001608 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7ff f9cc 	bl	8001608 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	@ 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1ec      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	4b53      	ldr	r3, [pc, #332]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x10c>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d063      	beq.n	8002362 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800229a:	4b4c      	ldr	r3, [pc, #304]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022a6:	4b49      	ldr	r3, [pc, #292]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d11c      	bne.n	80022ec <HAL_RCC_OscConfig+0x18c>
 80022b2:	4b46      	ldr	r3, [pc, #280]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	4b43      	ldr	r3, [pc, #268]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x176>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e1c0      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	4b3d      	ldr	r3, [pc, #244]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4939      	ldr	r1, [pc, #228]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	e03a      	b.n	8002362 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f4:	4b36      	ldr	r3, [pc, #216]	@ (80023d0 <HAL_RCC_OscConfig+0x270>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7ff f985 	bl	8001608 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002302:	f7ff f981 	bl	8001608 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1a1      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002314:	4b2d      	ldr	r3, [pc, #180]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002320:	4b2a      	ldr	r3, [pc, #168]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4927      	ldr	r1, [pc, #156]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
 8002334:	e015      	b.n	8002362 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002336:	4b26      	ldr	r3, [pc, #152]	@ (80023d0 <HAL_RCC_OscConfig+0x270>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7ff f964 	bl	8001608 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002344:	f7ff f960 	bl	8001608 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e180      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002356:	4b1d      	ldr	r3, [pc, #116]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d03a      	beq.n	80023e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d019      	beq.n	80023aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002376:	4b17      	ldr	r3, [pc, #92]	@ (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237c:	f7ff f944 	bl	8001608 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002384:	f7ff f940 	bl	8001608 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e160      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002396:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023a2:	2001      	movs	r0, #1
 80023a4:	f000 face 	bl	8002944 <RCC_Delay>
 80023a8:	e01c      	b.n	80023e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023aa:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <HAL_RCC_OscConfig+0x274>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b0:	f7ff f92a 	bl	8001608 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b6:	e00f      	b.n	80023d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b8:	f7ff f926 	bl	8001608 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d908      	bls.n	80023d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e146      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	42420000 	.word	0x42420000
 80023d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d8:	4b92      	ldr	r3, [pc, #584]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1e9      	bne.n	80023b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80a6 	beq.w	800253e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10d      	bne.n	800241e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	4b88      	ldr	r3, [pc, #544]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	4a87      	ldr	r2, [pc, #540]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800240c:	61d3      	str	r3, [r2, #28]
 800240e:	4b85      	ldr	r3, [pc, #532]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241a:	2301      	movs	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241e:	4b82      	ldr	r3, [pc, #520]	@ (8002628 <HAL_RCC_OscConfig+0x4c8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d118      	bne.n	800245c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242a:	4b7f      	ldr	r3, [pc, #508]	@ (8002628 <HAL_RCC_OscConfig+0x4c8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a7e      	ldr	r2, [pc, #504]	@ (8002628 <HAL_RCC_OscConfig+0x4c8>)
 8002430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002436:	f7ff f8e7 	bl	8001608 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243e:	f7ff f8e3 	bl	8001608 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b64      	cmp	r3, #100	@ 0x64
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e103      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002450:	4b75      	ldr	r3, [pc, #468]	@ (8002628 <HAL_RCC_OscConfig+0x4c8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d106      	bne.n	8002472 <HAL_RCC_OscConfig+0x312>
 8002464:	4b6f      	ldr	r3, [pc, #444]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a6e      	ldr	r2, [pc, #440]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6213      	str	r3, [r2, #32]
 8002470:	e02d      	b.n	80024ce <HAL_RCC_OscConfig+0x36e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x334>
 800247a:	4b6a      	ldr	r3, [pc, #424]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4a69      	ldr	r2, [pc, #420]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	6213      	str	r3, [r2, #32]
 8002486:	4b67      	ldr	r3, [pc, #412]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4a66      	ldr	r2, [pc, #408]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	f023 0304 	bic.w	r3, r3, #4
 8002490:	6213      	str	r3, [r2, #32]
 8002492:	e01c      	b.n	80024ce <HAL_RCC_OscConfig+0x36e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2b05      	cmp	r3, #5
 800249a:	d10c      	bne.n	80024b6 <HAL_RCC_OscConfig+0x356>
 800249c:	4b61      	ldr	r3, [pc, #388]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4a60      	ldr	r2, [pc, #384]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	6213      	str	r3, [r2, #32]
 80024a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6213      	str	r3, [r2, #32]
 80024b4:	e00b      	b.n	80024ce <HAL_RCC_OscConfig+0x36e>
 80024b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a5a      	ldr	r2, [pc, #360]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	6213      	str	r3, [r2, #32]
 80024c2:	4b58      	ldr	r3, [pc, #352]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4a57      	ldr	r2, [pc, #348]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	f023 0304 	bic.w	r3, r3, #4
 80024cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d015      	beq.n	8002502 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7ff f897 	bl	8001608 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7ff f893 	bl	8001608 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e0b1      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ee      	beq.n	80024de <HAL_RCC_OscConfig+0x37e>
 8002500:	e014      	b.n	800252c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002502:	f7ff f881 	bl	8001608 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250a:	f7ff f87d 	bl	8001608 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002518:	4293      	cmp	r3, r2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e09b      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002520:	4b40      	ldr	r3, [pc, #256]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ee      	bne.n	800250a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800252c:	7dfb      	ldrb	r3, [r7, #23]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d105      	bne.n	800253e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002532:	4b3c      	ldr	r3, [pc, #240]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	4a3b      	ldr	r2, [pc, #236]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800253c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 8087 	beq.w	8002656 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002548:	4b36      	ldr	r3, [pc, #216]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b08      	cmp	r3, #8
 8002552:	d061      	beq.n	8002618 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d146      	bne.n	80025ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255c:	4b33      	ldr	r3, [pc, #204]	@ (800262c <HAL_RCC_OscConfig+0x4cc>)
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7ff f851 	bl	8001608 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256a:	f7ff f84d 	bl	8001608 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e06d      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257c:	4b29      	ldr	r3, [pc, #164]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f0      	bne.n	800256a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002590:	d108      	bne.n	80025a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002592:	4b24      	ldr	r3, [pc, #144]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	4921      	ldr	r1, [pc, #132]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a19      	ldr	r1, [r3, #32]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	430b      	orrs	r3, r1
 80025b6:	491b      	ldr	r1, [pc, #108]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025bc:	4b1b      	ldr	r3, [pc, #108]	@ (800262c <HAL_RCC_OscConfig+0x4cc>)
 80025be:	2201      	movs	r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c2:	f7ff f821 	bl	8001608 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ca:	f7ff f81d 	bl	8001608 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e03d      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025dc:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x46a>
 80025e8:	e035      	b.n	8002656 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ea:	4b10      	ldr	r3, [pc, #64]	@ (800262c <HAL_RCC_OscConfig+0x4cc>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7ff f80a 	bl	8001608 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f8:	f7ff f806 	bl	8001608 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e026      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260a:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x498>
 8002616:	e01e      	b.n	8002656 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d107      	bne.n	8002630 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e019      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
 8002624:	40021000 	.word	0x40021000
 8002628:	40007000 	.word	0x40007000
 800262c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002630:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <HAL_RCC_OscConfig+0x500>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	429a      	cmp	r2, r3
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000

08002664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0d0      	b.n	800281a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002678:	4b6a      	ldr	r3, [pc, #424]	@ (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d910      	bls.n	80026a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b67      	ldr	r3, [pc, #412]	@ (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 0207 	bic.w	r2, r3, #7
 800268e:	4965      	ldr	r1, [pc, #404]	@ (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b63      	ldr	r3, [pc, #396]	@ (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0b8      	b.n	800281a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d020      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c0:	4b59      	ldr	r3, [pc, #356]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a58      	ldr	r2, [pc, #352]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d8:	4b53      	ldr	r3, [pc, #332]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a52      	ldr	r2, [pc, #328]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e4:	4b50      	ldr	r3, [pc, #320]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	494d      	ldr	r1, [pc, #308]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d040      	beq.n	8002784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	4b47      	ldr	r3, [pc, #284]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d115      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e07f      	b.n	800281a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002722:	4b41      	ldr	r3, [pc, #260]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e073      	b.n	800281a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002732:	4b3d      	ldr	r3, [pc, #244]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e06b      	b.n	800281a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002742:	4b39      	ldr	r3, [pc, #228]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f023 0203 	bic.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4936      	ldr	r1, [pc, #216]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002754:	f7fe ff58 	bl	8001608 <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	e00a      	b.n	8002772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800275c:	f7fe ff54 	bl	8001608 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e053      	b.n	800281a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	4b2d      	ldr	r3, [pc, #180]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 020c 	and.w	r2, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	429a      	cmp	r2, r3
 8002782:	d1eb      	bne.n	800275c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002784:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d210      	bcs.n	80027b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b24      	ldr	r3, [pc, #144]	@ (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 0207 	bic.w	r2, r3, #7
 800279a:	4922      	ldr	r1, [pc, #136]	@ (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e032      	b.n	800281a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c0:	4b19      	ldr	r3, [pc, #100]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4916      	ldr	r1, [pc, #88]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027de:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	490e      	ldr	r1, [pc, #56]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027f2:	f000 f821 	bl	8002838 <HAL_RCC_GetSysClockFreq>
 80027f6:	4602      	mov	r2, r0
 80027f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	490a      	ldr	r1, [pc, #40]	@ (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002804:	5ccb      	ldrb	r3, [r1, r3]
 8002806:	fa22 f303 	lsr.w	r3, r2, r3
 800280a:	4a09      	ldr	r2, [pc, #36]	@ (8002830 <HAL_RCC_ClockConfig+0x1cc>)
 800280c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800280e:	4b09      	ldr	r3, [pc, #36]	@ (8002834 <HAL_RCC_ClockConfig+0x1d0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe feb6 	bl	8001584 <HAL_InitTick>

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40022000 	.word	0x40022000
 8002828:	40021000 	.word	0x40021000
 800282c:	08005228 	.word	0x08005228
 8002830:	20000000 	.word	0x20000000
 8002834:	20000004 	.word	0x20000004

08002838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002852:	4b1e      	ldr	r3, [pc, #120]	@ (80028cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b04      	cmp	r3, #4
 8002860:	d002      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x30>
 8002862:	2b08      	cmp	r3, #8
 8002864:	d003      	beq.n	800286e <HAL_RCC_GetSysClockFreq+0x36>
 8002866:	e027      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002868:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800286a:	613b      	str	r3, [r7, #16]
      break;
 800286c:	e027      	b.n	80028be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	0c9b      	lsrs	r3, r3, #18
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	4a17      	ldr	r2, [pc, #92]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002878:	5cd3      	ldrb	r3, [r2, r3]
 800287a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d010      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002886:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	0c5b      	lsrs	r3, r3, #17
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	4a11      	ldr	r2, [pc, #68]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002892:	5cd3      	ldrb	r3, [r2, r3]
 8002894:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a0d      	ldr	r2, [pc, #52]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800289a:	fb03 f202 	mul.w	r2, r3, r2
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	e004      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a0c      	ldr	r2, [pc, #48]	@ (80028dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80028ac:	fb02 f303 	mul.w	r3, r2, r3
 80028b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	613b      	str	r3, [r7, #16]
      break;
 80028b6:	e002      	b.n	80028be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028b8:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ba:	613b      	str	r3, [r7, #16]
      break;
 80028bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028be:	693b      	ldr	r3, [r7, #16]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	007a1200 	.word	0x007a1200
 80028d4:	08005240 	.word	0x08005240
 80028d8:	08005250 	.word	0x08005250
 80028dc:	003d0900 	.word	0x003d0900

080028e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e4:	4b02      	ldr	r3, [pc, #8]	@ (80028f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	20000000 	.word	0x20000000

080028f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028f8:	f7ff fff2 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 80028fc:	4602      	mov	r2, r0
 80028fe:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	4903      	ldr	r1, [pc, #12]	@ (8002918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800290a:	5ccb      	ldrb	r3, [r1, r3]
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002910:	4618      	mov	r0, r3
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000
 8002918:	08005238 	.word	0x08005238

0800291c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002920:	f7ff ffde 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b05      	ldr	r3, [pc, #20]	@ (800293c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	0adb      	lsrs	r3, r3, #11
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	4903      	ldr	r1, [pc, #12]	@ (8002940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002932:	5ccb      	ldrb	r3, [r1, r3]
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	08005238 	.word	0x08005238

08002944 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800294c:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <RCC_Delay+0x34>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0a      	ldr	r2, [pc, #40]	@ (800297c <RCC_Delay+0x38>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	0a5b      	lsrs	r3, r3, #9
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002960:	bf00      	nop
  }
  while (Delay --);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1e5a      	subs	r2, r3, #1
 8002966:	60fa      	str	r2, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f9      	bne.n	8002960 <RCC_Delay+0x1c>
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	20000000 	.word	0x20000000
 800297c:	10624dd3 	.word	0x10624dd3

08002980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e041      	b.n	8002a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fbb0 	bl	800110c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f000 fd8a 	bl	80034d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d001      	beq.n	8002a38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e032      	b.n	8002a9e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a18      	ldr	r2, [pc, #96]	@ (8002aa8 <HAL_TIM_Base_Start+0x88>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00e      	beq.n	8002a68 <HAL_TIM_Base_Start+0x48>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a52:	d009      	beq.n	8002a68 <HAL_TIM_Base_Start+0x48>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a14      	ldr	r2, [pc, #80]	@ (8002aac <HAL_TIM_Base_Start+0x8c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d004      	beq.n	8002a68 <HAL_TIM_Base_Start+0x48>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a13      	ldr	r2, [pc, #76]	@ (8002ab0 <HAL_TIM_Base_Start+0x90>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d111      	bne.n	8002a8c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	d010      	beq.n	8002a9c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8a:	e007      	b.n	8002a9c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	40012c00 	.word	0x40012c00
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800

08002ab4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e041      	b.n	8002b4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f839 	bl	8002b52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3304      	adds	r3, #4
 8002af0:	4619      	mov	r1, r3
 8002af2:	4610      	mov	r0, r2
 8002af4:	f000 fcf0 	bl	80034d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d109      	bne.n	8002b88 <HAL_TIM_PWM_Start+0x24>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	e022      	b.n	8002bce <HAL_TIM_PWM_Start+0x6a>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d109      	bne.n	8002ba2 <HAL_TIM_PWM_Start+0x3e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	e015      	b.n	8002bce <HAL_TIM_PWM_Start+0x6a>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d109      	bne.n	8002bbc <HAL_TIM_PWM_Start+0x58>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	e008      	b.n	8002bce <HAL_TIM_PWM_Start+0x6a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	bf14      	ite	ne
 8002bc8:	2301      	movne	r3, #1
 8002bca:	2300      	moveq	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e05e      	b.n	8002c94 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d104      	bne.n	8002be6 <HAL_TIM_PWM_Start+0x82>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002be4:	e013      	b.n	8002c0e <HAL_TIM_PWM_Start+0xaa>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d104      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0x92>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bf4:	e00b      	b.n	8002c0e <HAL_TIM_PWM_Start+0xaa>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d104      	bne.n	8002c06 <HAL_TIM_PWM_Start+0xa2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c04:	e003      	b.n	8002c0e <HAL_TIM_PWM_Start+0xaa>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2201      	movs	r2, #1
 8002c14:	6839      	ldr	r1, [r7, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 feea 	bl	80039f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1e      	ldr	r2, [pc, #120]	@ (8002c9c <HAL_TIM_PWM_Start+0x138>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d107      	bne.n	8002c36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a18      	ldr	r2, [pc, #96]	@ (8002c9c <HAL_TIM_PWM_Start+0x138>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00e      	beq.n	8002c5e <HAL_TIM_PWM_Start+0xfa>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c48:	d009      	beq.n	8002c5e <HAL_TIM_PWM_Start+0xfa>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a14      	ldr	r2, [pc, #80]	@ (8002ca0 <HAL_TIM_PWM_Start+0x13c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_TIM_PWM_Start+0xfa>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a12      	ldr	r2, [pc, #72]	@ (8002ca4 <HAL_TIM_PWM_Start+0x140>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d111      	bne.n	8002c82 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b06      	cmp	r3, #6
 8002c6e:	d010      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c80:	e007      	b.n	8002c92 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0201 	orr.w	r2, r2, #1
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40012c00 	.word	0x40012c00
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	40000800 	.word	0x40000800

08002ca8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e022      	b.n	8002d1a <HAL_TIM_PWM_Start_DMA+0x72>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d109      	bne.n	8002cee <HAL_TIM_PWM_Start_DMA+0x46>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	bf0c      	ite	eq
 8002ce6:	2301      	moveq	r3, #1
 8002ce8:	2300      	movne	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	e015      	b.n	8002d1a <HAL_TIM_PWM_Start_DMA+0x72>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d109      	bne.n	8002d08 <HAL_TIM_PWM_Start_DMA+0x60>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e008      	b.n	8002d1a <HAL_TIM_PWM_Start_DMA+0x72>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e153      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HAL_TIM_PWM_Start_DMA+0x94>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e022      	b.n	8002d82 <HAL_TIM_PWM_Start_DMA+0xda>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d109      	bne.n	8002d56 <HAL_TIM_PWM_Start_DMA+0xae>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	bf0c      	ite	eq
 8002d4e:	2301      	moveq	r3, #1
 8002d50:	2300      	movne	r3, #0
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	e015      	b.n	8002d82 <HAL_TIM_PWM_Start_DMA+0xda>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d109      	bne.n	8002d70 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e008      	b.n	8002d82 <HAL_TIM_PWM_Start_DMA+0xda>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d024      	beq.n	8002dd0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_TIM_PWM_Start_DMA+0xea>
 8002d8c:	887b      	ldrh	r3, [r7, #2]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e119      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d104      	bne.n	8002da6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002da4:	e016      	b.n	8002dd4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d104      	bne.n	8002db6 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002db4:	e00e      	b.n	8002dd4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d104      	bne.n	8002dc6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dc4:	e006      	b.n	8002dd4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002dce:	e001      	b.n	8002dd4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0fa      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	f200 80ae 	bhi.w	8002f38 <HAL_TIM_PWM_Start_DMA+0x290>
 8002ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8002de4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de2:	bf00      	nop
 8002de4:	08002e19 	.word	0x08002e19
 8002de8:	08002f39 	.word	0x08002f39
 8002dec:	08002f39 	.word	0x08002f39
 8002df0:	08002f39 	.word	0x08002f39
 8002df4:	08002e61 	.word	0x08002e61
 8002df8:	08002f39 	.word	0x08002f39
 8002dfc:	08002f39 	.word	0x08002f39
 8002e00:	08002f39 	.word	0x08002f39
 8002e04:	08002ea9 	.word	0x08002ea9
 8002e08:	08002f39 	.word	0x08002f39
 8002e0c:	08002f39 	.word	0x08002f39
 8002e10:	08002f39 	.word	0x08002f39
 8002e14:	08002ef1 	.word	0x08002ef1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	4a6d      	ldr	r2, [pc, #436]	@ (8002fd4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002e1e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	4a6c      	ldr	r2, [pc, #432]	@ (8002fd8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002e26:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	4a6b      	ldr	r2, [pc, #428]	@ (8002fdc <HAL_TIM_PWM_Start_DMA+0x334>)
 8002e2e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	3334      	adds	r3, #52	@ 0x34
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	887b      	ldrh	r3, [r7, #2]
 8002e40:	f7fe fd78 	bl	8001934 <HAL_DMA_Start_IT>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0bd      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5c:	60da      	str	r2, [r3, #12]
      break;
 8002e5e:	e06e      	b.n	8002f3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e64:	4a5b      	ldr	r2, [pc, #364]	@ (8002fd4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002e66:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	4a5a      	ldr	r2, [pc, #360]	@ (8002fd8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002e6e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	4a59      	ldr	r2, [pc, #356]	@ (8002fdc <HAL_TIM_PWM_Start_DMA+0x334>)
 8002e76:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3338      	adds	r3, #56	@ 0x38
 8002e84:	461a      	mov	r2, r3
 8002e86:	887b      	ldrh	r3, [r7, #2]
 8002e88:	f7fe fd54 	bl	8001934 <HAL_DMA_Start_IT>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e099      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ea4:	60da      	str	r2, [r3, #12]
      break;
 8002ea6:	e04a      	b.n	8002f3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	4a49      	ldr	r2, [pc, #292]	@ (8002fd4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002eae:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb4:	4a48      	ldr	r2, [pc, #288]	@ (8002fd8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002eb6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	4a47      	ldr	r2, [pc, #284]	@ (8002fdc <HAL_TIM_PWM_Start_DMA+0x334>)
 8002ebe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	333c      	adds	r3, #60	@ 0x3c
 8002ecc:	461a      	mov	r2, r3
 8002ece:	887b      	ldrh	r3, [r7, #2]
 8002ed0:	f7fe fd30 	bl	8001934 <HAL_DMA_Start_IT>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e075      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eec:	60da      	str	r2, [r3, #12]
      break;
 8002eee:	e026      	b.n	8002f3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	4a37      	ldr	r2, [pc, #220]	@ (8002fd4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002ef6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	4a36      	ldr	r2, [pc, #216]	@ (8002fd8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002efe:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f04:	4a35      	ldr	r2, [pc, #212]	@ (8002fdc <HAL_TIM_PWM_Start_DMA+0x334>)
 8002f06:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3340      	adds	r3, #64	@ 0x40
 8002f14:	461a      	mov	r2, r3
 8002f16:	887b      	ldrh	r3, [r7, #2]
 8002f18:	f7fe fd0c 	bl	8001934 <HAL_DMA_Start_IT>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e051      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f34:	60da      	str	r2, [r3, #12]
      break;
 8002f36:	e002      	b.n	8002f3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f3e:	7dfb      	ldrb	r3, [r7, #23]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d141      	bne.n	8002fc8 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fd4f 	bl	80039f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a22      	ldr	r2, [pc, #136]	@ (8002fe0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d107      	bne.n	8002f6c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f6a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00e      	beq.n	8002f94 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f7e:	d009      	beq.n	8002f94 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a17      	ldr	r2, [pc, #92]	@ (8002fe4 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a16      	ldr	r2, [pc, #88]	@ (8002fe8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d111      	bne.n	8002fb8 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d010      	beq.n	8002fc8 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb6:	e007      	b.n	8002fc8 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	080033c7 	.word	0x080033c7
 8002fd8:	0800346f 	.word	0x0800346f
 8002fdc:	08003335 	.word	0x08003335
 8002fe0:	40012c00 	.word	0x40012c00
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	40000800 	.word	0x40000800

08002fec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003006:	2302      	movs	r3, #2
 8003008:	e0ae      	b.n	8003168 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b0c      	cmp	r3, #12
 8003016:	f200 809f 	bhi.w	8003158 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800301a:	a201      	add	r2, pc, #4	@ (adr r2, 8003020 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800301c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003020:	08003055 	.word	0x08003055
 8003024:	08003159 	.word	0x08003159
 8003028:	08003159 	.word	0x08003159
 800302c:	08003159 	.word	0x08003159
 8003030:	08003095 	.word	0x08003095
 8003034:	08003159 	.word	0x08003159
 8003038:	08003159 	.word	0x08003159
 800303c:	08003159 	.word	0x08003159
 8003040:	080030d7 	.word	0x080030d7
 8003044:	08003159 	.word	0x08003159
 8003048:	08003159 	.word	0x08003159
 800304c:	08003159 	.word	0x08003159
 8003050:	08003117 	.word	0x08003117
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 faaa 	bl	80035b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0208 	orr.w	r2, r2, #8
 800306e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0204 	bic.w	r2, r2, #4
 800307e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6999      	ldr	r1, [r3, #24]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	619a      	str	r2, [r3, #24]
      break;
 8003092:	e064      	b.n	800315e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 faf0 	bl	8003680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6999      	ldr	r1, [r3, #24]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	021a      	lsls	r2, r3, #8
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	619a      	str	r2, [r3, #24]
      break;
 80030d4:	e043      	b.n	800315e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fb39 	bl	8003754 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0208 	orr.w	r2, r2, #8
 80030f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0204 	bic.w	r2, r2, #4
 8003100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69d9      	ldr	r1, [r3, #28]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	61da      	str	r2, [r3, #28]
      break;
 8003114:	e023      	b.n	800315e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fb83 	bl	8003828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69da      	ldr	r2, [r3, #28]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69d9      	ldr	r1, [r3, #28]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	021a      	lsls	r2, r3, #8
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	61da      	str	r2, [r3, #28]
      break;
 8003156:	e002      	b.n	800315e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	75fb      	strb	r3, [r7, #23]
      break;
 800315c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003166:	7dfb      	ldrb	r3, [r7, #23]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_TIM_ConfigClockSource+0x1c>
 8003188:	2302      	movs	r3, #2
 800318a:	e0b4      	b.n	80032f6 <HAL_TIM_ConfigClockSource+0x186>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031c4:	d03e      	beq.n	8003244 <HAL_TIM_ConfigClockSource+0xd4>
 80031c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ca:	f200 8087 	bhi.w	80032dc <HAL_TIM_ConfigClockSource+0x16c>
 80031ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031d2:	f000 8086 	beq.w	80032e2 <HAL_TIM_ConfigClockSource+0x172>
 80031d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031da:	d87f      	bhi.n	80032dc <HAL_TIM_ConfigClockSource+0x16c>
 80031dc:	2b70      	cmp	r3, #112	@ 0x70
 80031de:	d01a      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0xa6>
 80031e0:	2b70      	cmp	r3, #112	@ 0x70
 80031e2:	d87b      	bhi.n	80032dc <HAL_TIM_ConfigClockSource+0x16c>
 80031e4:	2b60      	cmp	r3, #96	@ 0x60
 80031e6:	d050      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x11a>
 80031e8:	2b60      	cmp	r3, #96	@ 0x60
 80031ea:	d877      	bhi.n	80032dc <HAL_TIM_ConfigClockSource+0x16c>
 80031ec:	2b50      	cmp	r3, #80	@ 0x50
 80031ee:	d03c      	beq.n	800326a <HAL_TIM_ConfigClockSource+0xfa>
 80031f0:	2b50      	cmp	r3, #80	@ 0x50
 80031f2:	d873      	bhi.n	80032dc <HAL_TIM_ConfigClockSource+0x16c>
 80031f4:	2b40      	cmp	r3, #64	@ 0x40
 80031f6:	d058      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x13a>
 80031f8:	2b40      	cmp	r3, #64	@ 0x40
 80031fa:	d86f      	bhi.n	80032dc <HAL_TIM_ConfigClockSource+0x16c>
 80031fc:	2b30      	cmp	r3, #48	@ 0x30
 80031fe:	d064      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0x15a>
 8003200:	2b30      	cmp	r3, #48	@ 0x30
 8003202:	d86b      	bhi.n	80032dc <HAL_TIM_ConfigClockSource+0x16c>
 8003204:	2b20      	cmp	r3, #32
 8003206:	d060      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0x15a>
 8003208:	2b20      	cmp	r3, #32
 800320a:	d867      	bhi.n	80032dc <HAL_TIM_ConfigClockSource+0x16c>
 800320c:	2b00      	cmp	r3, #0
 800320e:	d05c      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0x15a>
 8003210:	2b10      	cmp	r3, #16
 8003212:	d05a      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0x15a>
 8003214:	e062      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003226:	f000 fbc4 	bl	80039b2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003238:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	609a      	str	r2, [r3, #8]
      break;
 8003242:	e04f      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003254:	f000 fbad 	bl	80039b2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003266:	609a      	str	r2, [r3, #8]
      break;
 8003268:	e03c      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003276:	461a      	mov	r2, r3
 8003278:	f000 fb24 	bl	80038c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2150      	movs	r1, #80	@ 0x50
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fb7b 	bl	800397e <TIM_ITRx_SetConfig>
      break;
 8003288:	e02c      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003296:	461a      	mov	r2, r3
 8003298:	f000 fb42 	bl	8003920 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2160      	movs	r1, #96	@ 0x60
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fb6b 	bl	800397e <TIM_ITRx_SetConfig>
      break;
 80032a8:	e01c      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b6:	461a      	mov	r2, r3
 80032b8:	f000 fb04 	bl	80038c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2140      	movs	r1, #64	@ 0x40
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fb5b 	bl	800397e <TIM_ITRx_SetConfig>
      break;
 80032c8:	e00c      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4619      	mov	r1, r3
 80032d4:	4610      	mov	r0, r2
 80032d6:	f000 fb52 	bl	800397e <TIM_ITRx_SetConfig>
      break;
 80032da:	e003      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
      break;
 80032e0:	e000      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	429a      	cmp	r2, r3
 800334a:	d107      	bne.n	800335c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800335a:	e02a      	b.n	80033b2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	429a      	cmp	r2, r3
 8003364:	d107      	bne.n	8003376 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2202      	movs	r2, #2
 800336a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003374:	e01d      	b.n	80033b2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	429a      	cmp	r2, r3
 800337e:	d107      	bne.n	8003390 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2204      	movs	r2, #4
 8003384:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800338e:	e010      	b.n	80033b2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	429a      	cmp	r2, r3
 8003398:	d107      	bne.n	80033aa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2208      	movs	r2, #8
 800339e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033a8:	e003      	b.n	80033b2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f7ff ffb5 	bl	8003322 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	771a      	strb	r2, [r3, #28]
}
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d10b      	bne.n	80033f6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d136      	bne.n	800345a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033f4:	e031      	b.n	800345a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d10b      	bne.n	8003418 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2202      	movs	r2, #2
 8003404:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d125      	bne.n	800345a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003416:	e020      	b.n	800345a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	429a      	cmp	r2, r3
 8003420:	d10b      	bne.n	800343a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2204      	movs	r2, #4
 8003426:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d114      	bne.n	800345a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003438:	e00f      	b.n	800345a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	429a      	cmp	r2, r3
 8003442:	d10a      	bne.n	800345a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2208      	movs	r2, #8
 8003448:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d103      	bne.n	800345a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7ff ff4f 	bl	80032fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	771a      	strb	r2, [r3, #28]
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	d103      	bne.n	800348e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	771a      	strb	r2, [r3, #28]
 800348c:	e019      	b.n	80034c2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	429a      	cmp	r2, r3
 8003496:	d103      	bne.n	80034a0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2202      	movs	r2, #2
 800349c:	771a      	strb	r2, [r3, #28]
 800349e:	e010      	b.n	80034c2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d103      	bne.n	80034b2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2204      	movs	r2, #4
 80034ae:	771a      	strb	r2, [r3, #28]
 80034b0:	e007      	b.n	80034c2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d102      	bne.n	80034c2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2208      	movs	r2, #8
 80034c0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f7ff ff24 	bl	8003310 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	771a      	strb	r2, [r3, #28]
}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a2f      	ldr	r2, [pc, #188]	@ (80035a8 <TIM_Base_SetConfig+0xd0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00b      	beq.n	8003508 <TIM_Base_SetConfig+0x30>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f6:	d007      	beq.n	8003508 <TIM_Base_SetConfig+0x30>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a2c      	ldr	r2, [pc, #176]	@ (80035ac <TIM_Base_SetConfig+0xd4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_Base_SetConfig+0x30>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a2b      	ldr	r2, [pc, #172]	@ (80035b0 <TIM_Base_SetConfig+0xd8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d108      	bne.n	800351a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800350e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a22      	ldr	r2, [pc, #136]	@ (80035a8 <TIM_Base_SetConfig+0xd0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00b      	beq.n	800353a <TIM_Base_SetConfig+0x62>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003528:	d007      	beq.n	800353a <TIM_Base_SetConfig+0x62>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a1f      	ldr	r2, [pc, #124]	@ (80035ac <TIM_Base_SetConfig+0xd4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_Base_SetConfig+0x62>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a1e      	ldr	r2, [pc, #120]	@ (80035b0 <TIM_Base_SetConfig+0xd8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d108      	bne.n	800354c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a0d      	ldr	r2, [pc, #52]	@ (80035a8 <TIM_Base_SetConfig+0xd0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d103      	bne.n	8003580 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f023 0201 	bic.w	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	611a      	str	r2, [r3, #16]
  }
}
 800359e:	bf00      	nop
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800

080035b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f023 0201 	bic.w	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0303 	bic.w	r3, r3, #3
 80035ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f023 0302 	bic.w	r3, r3, #2
 80035fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a1c      	ldr	r2, [pc, #112]	@ (800367c <TIM_OC1_SetConfig+0xc8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d10c      	bne.n	800362a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f023 0308 	bic.w	r3, r3, #8
 8003616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f023 0304 	bic.w	r3, r3, #4
 8003628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a13      	ldr	r2, [pc, #76]	@ (800367c <TIM_OC1_SetConfig+0xc8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d111      	bne.n	8003656 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	621a      	str	r2, [r3, #32]
}
 8003670:	bf00      	nop
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40012c00 	.word	0x40012c00

08003680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f023 0210 	bic.w	r2, r3, #16
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f023 0320 	bic.w	r3, r3, #32
 80036ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a1d      	ldr	r2, [pc, #116]	@ (8003750 <TIM_OC2_SetConfig+0xd0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d10d      	bne.n	80036fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a14      	ldr	r2, [pc, #80]	@ (8003750 <TIM_OC2_SetConfig+0xd0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d113      	bne.n	800372c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800370a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	621a      	str	r2, [r3, #32]
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr
 8003750:	40012c00 	.word	0x40012c00

08003754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800379c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003824 <TIM_OC3_SetConfig+0xd0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10d      	bne.n	80037ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a14      	ldr	r2, [pc, #80]	@ (8003824 <TIM_OC3_SetConfig+0xd0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d113      	bne.n	80037fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	621a      	str	r2, [r3, #32]
}
 8003818:	bf00      	nop
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40012c00 	.word	0x40012c00

08003828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800385e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	031b      	lsls	r3, r3, #12
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a0f      	ldr	r2, [pc, #60]	@ (80038c0 <TIM_OC4_SetConfig+0x98>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d109      	bne.n	800389c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800388e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	019b      	lsls	r3, r3, #6
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr
 80038c0:	40012c00 	.word	0x40012c00

080038c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f023 0201 	bic.w	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f023 030a 	bic.w	r3, r3, #10
 8003900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	621a      	str	r2, [r3, #32]
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0210 	bic.w	r2, r3, #16
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800394a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	031b      	lsls	r3, r3, #12
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800395c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	621a      	str	r2, [r3, #32]
}
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800397e:	b480      	push	{r7}
 8003980:	b085      	sub	sp, #20
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	f043 0307 	orr.w	r3, r3, #7
 80039a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	609a      	str	r2, [r3, #8]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr

080039b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b087      	sub	sp, #28
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
 80039be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	021a      	lsls	r2, r3, #8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4313      	orrs	r3, r2
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	609a      	str	r2, [r3, #8]
}
 80039e6:	bf00      	nop
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	2201      	movs	r2, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1a      	ldr	r2, [r3, #32]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	43db      	mvns	r3, r3
 8003a12:	401a      	ands	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e046      	b.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a16      	ldr	r2, [pc, #88]	@ (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00e      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9c:	d009      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a12      	ldr	r2, [pc, #72]	@ (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d004      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a10      	ldr	r2, [pc, #64]	@ (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d10c      	bne.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	40000400 	.word	0x40000400
 8003af0:	40000800 	.word	0x40000800

08003af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e042      	b.n	8003b8c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd fc2a 	bl	8001374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2224      	movs	r2, #36	@ 0x24
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fd09 	bl	8004550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d121      	bne.n	8003bf2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_UART_Transmit_IT+0x26>
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e01a      	b.n	8003bf4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	88fa      	ldrh	r2, [r7, #6]
 8003bce:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2221      	movs	r2, #33	@ 0x21
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e000      	b.n	8003bf4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
  }
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d112      	bne.n	8003c3e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_UART_Receive_IT+0x26>
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e00b      	b.n	8003c40 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	461a      	mov	r2, r3
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fab6 	bl	80041a6 <UART_Start_Receive_IT>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	e000      	b.n	8003c40 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003c3e:	2302      	movs	r3, #2
  }
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b0ba      	sub	sp, #232	@ 0xe8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10f      	bne.n	8003cae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_UART_IRQHandler+0x66>
 8003c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fb93 	bl	80043d2 <UART_Receive_IT>
      return;
 8003cac:	e25b      	b.n	8004166 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 80de 	beq.w	8003e74 <HAL_UART_IRQHandler+0x22c>
 8003cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80d1 	beq.w	8003e74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00b      	beq.n	8003cf6 <HAL_UART_IRQHandler+0xae>
 8003cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	f043 0201 	orr.w	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00b      	beq.n	8003d1a <HAL_UART_IRQHandler+0xd2>
 8003d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d12:	f043 0202 	orr.w	r2, r3, #2
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00b      	beq.n	8003d3e <HAL_UART_IRQHandler+0xf6>
 8003d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d36:	f043 0204 	orr.w	r2, r3, #4
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d011      	beq.n	8003d6e <HAL_UART_IRQHandler+0x126>
 8003d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d105      	bne.n	8003d62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d66:	f043 0208 	orr.w	r2, r3, #8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 81f2 	beq.w	800415c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_UART_IRQHandler+0x14e>
 8003d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fb1e 	bl	80043d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bf14      	ite	ne
 8003da4:	2301      	movne	r3, #1
 8003da6:	2300      	moveq	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d103      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x17a>
 8003dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d04f      	beq.n	8003e62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fa28 	bl	8004218 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d041      	beq.n	8003e5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3314      	adds	r3, #20
 8003ddc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003df4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3314      	adds	r3, #20
 8003dfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1d9      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d013      	beq.n	8003e52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004028 <HAL_UART_IRQHandler+0x3e0>)
 8003e30:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fd fe18 	bl	8001a6c <HAL_DMA_Abort_IT>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d016      	beq.n	8003e70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e50:	e00e      	b.n	8003e70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f993 	bl	800417e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e58:	e00a      	b.n	8003e70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f98f 	bl	800417e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e60:	e006      	b.n	8003e70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f98b 	bl	800417e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e6e:	e175      	b.n	800415c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e70:	bf00      	nop
    return;
 8003e72:	e173      	b.n	800415c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	f040 814f 	bne.w	800411c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 8148 	beq.w	800411c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8141 	beq.w	800411c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80b6 	beq.w	800402c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ecc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 8145 	beq.w	8004160 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	f080 813e 	bcs.w	8004160 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003eea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	f000 8088 	beq.w	8004008 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	330c      	adds	r3, #12
 8003efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f24:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1d9      	bne.n	8003ef8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3314      	adds	r3, #20
 8003f4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3314      	adds	r3, #20
 8003f64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f68:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e1      	bne.n	8003f44 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3314      	adds	r3, #20
 8003f86:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3314      	adds	r3, #20
 8003fa0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003fa4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fa6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003faa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003fb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e3      	bne.n	8003f80 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fd8:	f023 0310 	bic.w	r3, r3, #16
 8003fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003fea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003fec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ff0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e3      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004002:	4618      	mov	r0, r3
 8004004:	f7fd fcf6 	bl	80019f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004016:	b29b      	uxth	r3, r3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	b29b      	uxth	r3, r3
 800401c:	4619      	mov	r1, r3
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f8b6 	bl	8004190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004024:	e09c      	b.n	8004160 <HAL_UART_IRQHandler+0x518>
 8004026:	bf00      	nop
 8004028:	080042dd 	.word	0x080042dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004034:	b29b      	uxth	r3, r3
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 808e 	beq.w	8004164 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004048:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8089 	beq.w	8004164 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	330c      	adds	r3, #12
 8004058:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004064:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004068:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004076:	647a      	str	r2, [r7, #68]	@ 0x44
 8004078:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800407c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e3      	bne.n	8004052 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3314      	adds	r3, #20
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	623b      	str	r3, [r7, #32]
   return(result);
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3314      	adds	r3, #20
 80040aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80040b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b6:	e841 2300 	strex	r3, r2, [r1]
 80040ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e3      	bne.n	800408a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	60fb      	str	r3, [r7, #12]
   return(result);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0310 	bic.w	r3, r3, #16
 80040e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	330c      	adds	r3, #12
 80040f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80040f4:	61fa      	str	r2, [r7, #28]
 80040f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	69b9      	ldr	r1, [r7, #24]
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	617b      	str	r3, [r7, #20]
   return(result);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e3      	bne.n	80040d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800410e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f83b 	bl	8004190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800411a:	e023      	b.n	8004164 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800411c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004124:	2b00      	cmp	r3, #0
 8004126:	d009      	beq.n	800413c <HAL_UART_IRQHandler+0x4f4>
 8004128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800412c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f8e5 	bl	8004304 <UART_Transmit_IT>
    return;
 800413a:	e014      	b.n	8004166 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800413c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00e      	beq.n	8004166 <HAL_UART_IRQHandler+0x51e>
 8004148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800414c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f924 	bl	80043a2 <UART_EndTransmit_IT>
    return;
 800415a:	e004      	b.n	8004166 <HAL_UART_IRQHandler+0x51e>
    return;
 800415c:	bf00      	nop
 800415e:	e002      	b.n	8004166 <HAL_UART_IRQHandler+0x51e>
      return;
 8004160:	bf00      	nop
 8004162:	e000      	b.n	8004166 <HAL_UART_IRQHandler+0x51e>
      return;
 8004164:	bf00      	nop
  }
}
 8004166:	37e8      	adds	r7, #232	@ 0xe8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	4613      	mov	r3, r2
 80041b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	88fa      	ldrh	r2, [r7, #6]
 80041be:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	88fa      	ldrh	r2, [r7, #6]
 80041c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2222      	movs	r2, #34	@ 0x22
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d007      	beq.n	80041ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0220 	orr.w	r2, r2, #32
 800420a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b095      	sub	sp, #84	@ 0x54
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	330c      	adds	r3, #12
 8004226:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004232:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	330c      	adds	r3, #12
 800423e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004240:	643a      	str	r2, [r7, #64]	@ 0x40
 8004242:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004246:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800424e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e5      	bne.n	8004220 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3314      	adds	r3, #20
 800425a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	61fb      	str	r3, [r7, #28]
   return(result);
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3314      	adds	r3, #20
 8004272:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004274:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004276:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800427a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e5      	bne.n	8004254 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428c:	2b01      	cmp	r3, #1
 800428e:	d119      	bne.n	80042c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f023 0310 	bic.w	r3, r3, #16
 80042a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042b0:	61ba      	str	r2, [r7, #24]
 80042b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6979      	ldr	r1, [r7, #20]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	613b      	str	r3, [r7, #16]
   return(result);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e5      	bne.n	8004290 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042d2:	bf00      	nop
 80042d4:	3754      	adds	r7, #84	@ 0x54
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f7ff ff41 	bl	800417e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b21      	cmp	r3, #33	@ 0x21
 8004316:	d13e      	bne.n	8004396 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004320:	d114      	bne.n	800434c <UART_Transmit_IT+0x48>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d110      	bne.n	800434c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800433e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	1c9a      	adds	r2, r3, #2
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	621a      	str	r2, [r3, #32]
 800434a:	e008      	b.n	800435e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	1c59      	adds	r1, r3, #1
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6211      	str	r1, [r2, #32]
 8004356:	781a      	ldrb	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29b      	uxth	r3, r3
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	4619      	mov	r1, r3
 800436c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10f      	bne.n	8004392 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004380:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004390:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e000      	b.n	8004398 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004396:	2302      	movs	r3, #2
  }
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr

080043a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff fed2 	bl	800416c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b08c      	sub	sp, #48	@ 0x30
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b22      	cmp	r3, #34	@ 0x22
 80043e4:	f040 80ae 	bne.w	8004544 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043f0:	d117      	bne.n	8004422 <UART_Receive_IT+0x50>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d113      	bne.n	8004422 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004402:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	b29b      	uxth	r3, r3
 800440c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004410:	b29a      	uxth	r2, r3
 8004412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004414:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441a:	1c9a      	adds	r2, r3, #2
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004420:	e026      	b.n	8004470 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004426:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004428:	2300      	movs	r3, #0
 800442a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004434:	d007      	beq.n	8004446 <UART_Receive_IT+0x74>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <UART_Receive_IT+0x82>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	e008      	b.n	8004466 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004460:	b2da      	uxtb	r2, r3
 8004462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004464:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29b      	uxth	r3, r3
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	4619      	mov	r1, r3
 800447e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004480:	2b00      	cmp	r3, #0
 8004482:	d15d      	bne.n	8004540 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0220 	bic.w	r2, r2, #32
 8004492:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695a      	ldr	r2, [r3, #20]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0201 	bic.w	r2, r2, #1
 80044b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d135      	bne.n	8004536 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	613b      	str	r3, [r7, #16]
   return(result);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f023 0310 	bic.w	r3, r3, #16
 80044e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f0:	623a      	str	r2, [r7, #32]
 80044f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	69f9      	ldr	r1, [r7, #28]
 80044f6:	6a3a      	ldr	r2, [r7, #32]
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e5      	bne.n	80044d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b10      	cmp	r3, #16
 8004510:	d10a      	bne.n	8004528 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff fe2e 	bl	8004190 <HAL_UARTEx_RxEventCallback>
 8004534:	e002      	b.n	800453c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fc fb7c 	bl	8000c34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	e002      	b.n	8004546 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	e000      	b.n	8004546 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004544:	2302      	movs	r3, #2
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	3730      	adds	r7, #48	@ 0x30
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800458a:	f023 030c 	bic.w	r3, r3, #12
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6812      	ldr	r2, [r2, #0]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	430b      	orrs	r3, r1
 8004596:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004664 <UART_SetConfig+0x114>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d103      	bne.n	80045c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045b8:	f7fe f9b0 	bl	800291c <HAL_RCC_GetPCLK2Freq>
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	e002      	b.n	80045c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045c0:	f7fe f998 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 80045c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009a      	lsls	r2, r3, #2
 80045d0:	441a      	add	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045dc:	4a22      	ldr	r2, [pc, #136]	@ (8004668 <UART_SetConfig+0x118>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	0119      	lsls	r1, r3, #4
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	009a      	lsls	r2, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004668 <UART_SetConfig+0x118>)
 80045fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	2064      	movs	r0, #100	@ 0x64
 8004606:	fb00 f303 	mul.w	r3, r0, r3
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	3332      	adds	r3, #50	@ 0x32
 8004610:	4a15      	ldr	r2, [pc, #84]	@ (8004668 <UART_SetConfig+0x118>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800461c:	4419      	add	r1, r3
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009a      	lsls	r2, r3, #2
 8004628:	441a      	add	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	fbb2 f2f3 	udiv	r2, r2, r3
 8004634:	4b0c      	ldr	r3, [pc, #48]	@ (8004668 <UART_SetConfig+0x118>)
 8004636:	fba3 0302 	umull	r0, r3, r3, r2
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	2064      	movs	r0, #100	@ 0x64
 800463e:	fb00 f303 	mul.w	r3, r0, r3
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	3332      	adds	r3, #50	@ 0x32
 8004648:	4a07      	ldr	r2, [pc, #28]	@ (8004668 <UART_SetConfig+0x118>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	f003 020f 	and.w	r2, r3, #15
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	440a      	add	r2, r1
 800465a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800465c:	bf00      	nop
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40013800 	.word	0x40013800
 8004668:	51eb851f 	.word	0x51eb851f

0800466c <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *hLed, TIM_HandleTypeDef *hTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	4611      	mov	r1, r2
 8004678:	461a      	mov	r2, r3
 800467a:	460b      	mov	r3, r1
 800467c:	80fb      	strh	r3, [r7, #6]
 800467e:	4613      	mov	r3, r2
 8004680:	717b      	strb	r3, [r7, #5]
  bool answer = false;
 8004682:	2300      	movs	r3, #0
 8004684:	75fb      	strb	r3, [r7, #23]
  uint32_t aar_value;
  do
  {
    if (hLed == NULL || hTim == NULL)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d07c      	beq.n	8004786 <WS28XX_Init+0x11a>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d079      	beq.n	8004786 <WS28XX_Init+0x11a>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 8004692:	8c3b      	ldrh	r3, [r7, #32]
 8004694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004698:	d874      	bhi.n	8004784 <WS28XX_Init+0x118>
    {
      break;
    }
    hLed->Channel = Channel;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	797a      	ldrb	r2, [r7, #5]
 800469e:	711a      	strb	r2, [r3, #4]
    hLed->MaxPixel = Pixel;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8c3a      	ldrh	r2, [r7, #32]
 80046a4:	815a      	strh	r2, [r3, #10]
    hLed->hTim = hTim;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fb fe0e 	bl	80002d0 <__aeabi_i2f>
 80046b4:	4603      	mov	r3, r0
 80046b6:	4936      	ldr	r1, [pc, #216]	@ (8004790 <WS28XX_Init+0x124>)
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fb ff11 	bl	80004e0 <__aeabi_fdiv>
 80046be:	4603      	mov	r3, r0
 80046c0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fb fd4d 	bl	8000164 <__aeabi_fsub>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fb ffa3 	bl	8000618 <__aeabi_f2uiz>
 80046d2:	4603      	mov	r3, r0
 80046d4:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(hLed->hTim ,aar_value);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(hLed->hTim, 0);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2200      	movs	r2, #0
 80046f0:	629a      	str	r2, [r3, #40]	@ 0x28
    hLed->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 80046f2:	6938      	ldr	r0, [r7, #16]
 80046f4:	f7fb fde8 	bl	80002c8 <__aeabi_ui2f>
 80046f8:	4603      	mov	r3, r0
 80046fa:	4926      	ldr	r1, [pc, #152]	@ (8004794 <WS28XX_Init+0x128>)
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fb fe3b 	bl	8000378 <__aeabi_fmul>
 8004702:	4603      	mov	r3, r0
 8004704:	4924      	ldr	r1, [pc, #144]	@ (8004798 <WS28XX_Init+0x12c>)
 8004706:	4618      	mov	r0, r3
 8004708:	f7fb feea 	bl	80004e0 <__aeabi_fdiv>
 800470c:	4603      	mov	r3, r0
 800470e:	4618      	mov	r0, r3
 8004710:	f7fb ff82 	bl	8000618 <__aeabi_f2uiz>
 8004714:	4603      	mov	r3, r0
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	80da      	strh	r2, [r3, #6]
    hLed->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 800471c:	6938      	ldr	r0, [r7, #16]
 800471e:	f7fb fdd3 	bl	80002c8 <__aeabi_ui2f>
 8004722:	4603      	mov	r3, r0
 8004724:	491a      	ldr	r1, [pc, #104]	@ (8004790 <WS28XX_Init+0x124>)
 8004726:	4618      	mov	r0, r3
 8004728:	f7fb fe26 	bl	8000378 <__aeabi_fmul>
 800472c:	4603      	mov	r3, r0
 800472e:	491a      	ldr	r1, [pc, #104]	@ (8004798 <WS28XX_Init+0x12c>)
 8004730:	4618      	mov	r0, r3
 8004732:	f7fb fed5 	bl	80004e0 <__aeabi_fdiv>
 8004736:	4603      	mov	r3, r0
 8004738:	4618      	mov	r0, r3
 800473a:	f7fb ff6d 	bl	8000618 <__aeabi_f2uiz>
 800473e:	4603      	mov	r3, r0
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	811a      	strh	r2, [r3, #8]
    memset(hLed->Pixel, 0, sizeof(hLed->Pixel));
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	330c      	adds	r3, #12
 800474a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800474e:	2100      	movs	r1, #0
 8004750:	4618      	mov	r0, r3
 8004752:	f000 f8cb 	bl	80048ec <memset>
    memset(hLed->Buffer, 0, sizeof(hLed->Buffer));
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 800475c:	f641 0204 	movw	r2, #6148	@ 0x1804
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f8c2 	bl	80048ec <memset>
    HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, Pixel);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6818      	ldr	r0, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	791b      	ldrb	r3, [r3, #4]
 8004770:	4619      	mov	r1, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f503 7243 	add.w	r2, r3, #780	@ 0x30c
 8004778:	8c3b      	ldrh	r3, [r7, #32]
 800477a:	f7fe fa95 	bl	8002ca8 <HAL_TIM_PWM_Start_DMA>
    answer = true;
 800477e:	2301      	movs	r3, #1
 8004780:	75fb      	strb	r3, [r7, #23]
 8004782:	e000      	b.n	8004786 <WS28XX_Init+0x11a>
      break;
 8004784:	bf00      	nop
  }
  while (0);

  return answer;
 8004786:	7dfb      	ldrb	r3, [r7, #23]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	3f4ccccd 	.word	0x3f4ccccd
 8004794:	3ecccccd 	.word	0x3ecccccd
 8004798:	3fa00000 	.word	0x3fa00000

0800479c <atoi>:
 800479c:	220a      	movs	r2, #10
 800479e:	2100      	movs	r1, #0
 80047a0:	f000 b89a 	b.w	80048d8 <strtol>

080047a4 <siprintf>:
 80047a4:	b40e      	push	{r1, r2, r3}
 80047a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80047aa:	b500      	push	{lr}
 80047ac:	b09c      	sub	sp, #112	@ 0x70
 80047ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80047b0:	9002      	str	r0, [sp, #8]
 80047b2:	9006      	str	r0, [sp, #24]
 80047b4:	9107      	str	r1, [sp, #28]
 80047b6:	9104      	str	r1, [sp, #16]
 80047b8:	4808      	ldr	r0, [pc, #32]	@ (80047dc <siprintf+0x38>)
 80047ba:	4909      	ldr	r1, [pc, #36]	@ (80047e0 <siprintf+0x3c>)
 80047bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80047c0:	9105      	str	r1, [sp, #20]
 80047c2:	6800      	ldr	r0, [r0, #0]
 80047c4:	a902      	add	r1, sp, #8
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	f000 f920 	bl	8004a0c <_svfiprintf_r>
 80047cc:	2200      	movs	r2, #0
 80047ce:	9b02      	ldr	r3, [sp, #8]
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	b01c      	add	sp, #112	@ 0x70
 80047d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047d8:	b003      	add	sp, #12
 80047da:	4770      	bx	lr
 80047dc:	2000000c 	.word	0x2000000c
 80047e0:	ffff0208 	.word	0xffff0208

080047e4 <_strtol_l.constprop.0>:
 80047e4:	2b24      	cmp	r3, #36	@ 0x24
 80047e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047ea:	4686      	mov	lr, r0
 80047ec:	4690      	mov	r8, r2
 80047ee:	d801      	bhi.n	80047f4 <_strtol_l.constprop.0+0x10>
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d106      	bne.n	8004802 <_strtol_l.constprop.0+0x1e>
 80047f4:	f000 f882 	bl	80048fc <__errno>
 80047f8:	2316      	movs	r3, #22
 80047fa:	6003      	str	r3, [r0, #0]
 80047fc:	2000      	movs	r0, #0
 80047fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004802:	460d      	mov	r5, r1
 8004804:	4833      	ldr	r0, [pc, #204]	@ (80048d4 <_strtol_l.constprop.0+0xf0>)
 8004806:	462a      	mov	r2, r5
 8004808:	f815 4b01 	ldrb.w	r4, [r5], #1
 800480c:	5d06      	ldrb	r6, [r0, r4]
 800480e:	f016 0608 	ands.w	r6, r6, #8
 8004812:	d1f8      	bne.n	8004806 <_strtol_l.constprop.0+0x22>
 8004814:	2c2d      	cmp	r4, #45	@ 0x2d
 8004816:	d12d      	bne.n	8004874 <_strtol_l.constprop.0+0x90>
 8004818:	2601      	movs	r6, #1
 800481a:	782c      	ldrb	r4, [r5, #0]
 800481c:	1c95      	adds	r5, r2, #2
 800481e:	f033 0210 	bics.w	r2, r3, #16
 8004822:	d109      	bne.n	8004838 <_strtol_l.constprop.0+0x54>
 8004824:	2c30      	cmp	r4, #48	@ 0x30
 8004826:	d12a      	bne.n	800487e <_strtol_l.constprop.0+0x9a>
 8004828:	782a      	ldrb	r2, [r5, #0]
 800482a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800482e:	2a58      	cmp	r2, #88	@ 0x58
 8004830:	d125      	bne.n	800487e <_strtol_l.constprop.0+0x9a>
 8004832:	2310      	movs	r3, #16
 8004834:	786c      	ldrb	r4, [r5, #1]
 8004836:	3502      	adds	r5, #2
 8004838:	2200      	movs	r2, #0
 800483a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800483e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8004842:	fbbc f9f3 	udiv	r9, ip, r3
 8004846:	4610      	mov	r0, r2
 8004848:	fb03 ca19 	mls	sl, r3, r9, ip
 800484c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004850:	2f09      	cmp	r7, #9
 8004852:	d81b      	bhi.n	800488c <_strtol_l.constprop.0+0xa8>
 8004854:	463c      	mov	r4, r7
 8004856:	42a3      	cmp	r3, r4
 8004858:	dd27      	ble.n	80048aa <_strtol_l.constprop.0+0xc6>
 800485a:	1c57      	adds	r7, r2, #1
 800485c:	d007      	beq.n	800486e <_strtol_l.constprop.0+0x8a>
 800485e:	4581      	cmp	r9, r0
 8004860:	d320      	bcc.n	80048a4 <_strtol_l.constprop.0+0xc0>
 8004862:	d101      	bne.n	8004868 <_strtol_l.constprop.0+0x84>
 8004864:	45a2      	cmp	sl, r4
 8004866:	db1d      	blt.n	80048a4 <_strtol_l.constprop.0+0xc0>
 8004868:	2201      	movs	r2, #1
 800486a:	fb00 4003 	mla	r0, r0, r3, r4
 800486e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004872:	e7eb      	b.n	800484c <_strtol_l.constprop.0+0x68>
 8004874:	2c2b      	cmp	r4, #43	@ 0x2b
 8004876:	bf04      	itt	eq
 8004878:	782c      	ldrbeq	r4, [r5, #0]
 800487a:	1c95      	addeq	r5, r2, #2
 800487c:	e7cf      	b.n	800481e <_strtol_l.constprop.0+0x3a>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1da      	bne.n	8004838 <_strtol_l.constprop.0+0x54>
 8004882:	2c30      	cmp	r4, #48	@ 0x30
 8004884:	bf0c      	ite	eq
 8004886:	2308      	moveq	r3, #8
 8004888:	230a      	movne	r3, #10
 800488a:	e7d5      	b.n	8004838 <_strtol_l.constprop.0+0x54>
 800488c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004890:	2f19      	cmp	r7, #25
 8004892:	d801      	bhi.n	8004898 <_strtol_l.constprop.0+0xb4>
 8004894:	3c37      	subs	r4, #55	@ 0x37
 8004896:	e7de      	b.n	8004856 <_strtol_l.constprop.0+0x72>
 8004898:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800489c:	2f19      	cmp	r7, #25
 800489e:	d804      	bhi.n	80048aa <_strtol_l.constprop.0+0xc6>
 80048a0:	3c57      	subs	r4, #87	@ 0x57
 80048a2:	e7d8      	b.n	8004856 <_strtol_l.constprop.0+0x72>
 80048a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048a8:	e7e1      	b.n	800486e <_strtol_l.constprop.0+0x8a>
 80048aa:	1c53      	adds	r3, r2, #1
 80048ac:	d108      	bne.n	80048c0 <_strtol_l.constprop.0+0xdc>
 80048ae:	2322      	movs	r3, #34	@ 0x22
 80048b0:	4660      	mov	r0, ip
 80048b2:	f8ce 3000 	str.w	r3, [lr]
 80048b6:	f1b8 0f00 	cmp.w	r8, #0
 80048ba:	d0a0      	beq.n	80047fe <_strtol_l.constprop.0+0x1a>
 80048bc:	1e69      	subs	r1, r5, #1
 80048be:	e006      	b.n	80048ce <_strtol_l.constprop.0+0xea>
 80048c0:	b106      	cbz	r6, 80048c4 <_strtol_l.constprop.0+0xe0>
 80048c2:	4240      	negs	r0, r0
 80048c4:	f1b8 0f00 	cmp.w	r8, #0
 80048c8:	d099      	beq.n	80047fe <_strtol_l.constprop.0+0x1a>
 80048ca:	2a00      	cmp	r2, #0
 80048cc:	d1f6      	bne.n	80048bc <_strtol_l.constprop.0+0xd8>
 80048ce:	f8c8 1000 	str.w	r1, [r8]
 80048d2:	e794      	b.n	80047fe <_strtol_l.constprop.0+0x1a>
 80048d4:	08005253 	.word	0x08005253

080048d8 <strtol>:
 80048d8:	4613      	mov	r3, r2
 80048da:	460a      	mov	r2, r1
 80048dc:	4601      	mov	r1, r0
 80048de:	4802      	ldr	r0, [pc, #8]	@ (80048e8 <strtol+0x10>)
 80048e0:	6800      	ldr	r0, [r0, #0]
 80048e2:	f7ff bf7f 	b.w	80047e4 <_strtol_l.constprop.0>
 80048e6:	bf00      	nop
 80048e8:	2000000c 	.word	0x2000000c

080048ec <memset>:
 80048ec:	4603      	mov	r3, r0
 80048ee:	4402      	add	r2, r0
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d100      	bne.n	80048f6 <memset+0xa>
 80048f4:	4770      	bx	lr
 80048f6:	f803 1b01 	strb.w	r1, [r3], #1
 80048fa:	e7f9      	b.n	80048f0 <memset+0x4>

080048fc <__errno>:
 80048fc:	4b01      	ldr	r3, [pc, #4]	@ (8004904 <__errno+0x8>)
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	2000000c 	.word	0x2000000c

08004908 <__libc_init_array>:
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	2600      	movs	r6, #0
 800490c:	4d0c      	ldr	r5, [pc, #48]	@ (8004940 <__libc_init_array+0x38>)
 800490e:	4c0d      	ldr	r4, [pc, #52]	@ (8004944 <__libc_init_array+0x3c>)
 8004910:	1b64      	subs	r4, r4, r5
 8004912:	10a4      	asrs	r4, r4, #2
 8004914:	42a6      	cmp	r6, r4
 8004916:	d109      	bne.n	800492c <__libc_init_array+0x24>
 8004918:	f000 fc78 	bl	800520c <_init>
 800491c:	2600      	movs	r6, #0
 800491e:	4d0a      	ldr	r5, [pc, #40]	@ (8004948 <__libc_init_array+0x40>)
 8004920:	4c0a      	ldr	r4, [pc, #40]	@ (800494c <__libc_init_array+0x44>)
 8004922:	1b64      	subs	r4, r4, r5
 8004924:	10a4      	asrs	r4, r4, #2
 8004926:	42a6      	cmp	r6, r4
 8004928:	d105      	bne.n	8004936 <__libc_init_array+0x2e>
 800492a:	bd70      	pop	{r4, r5, r6, pc}
 800492c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004930:	4798      	blx	r3
 8004932:	3601      	adds	r6, #1
 8004934:	e7ee      	b.n	8004914 <__libc_init_array+0xc>
 8004936:	f855 3b04 	ldr.w	r3, [r5], #4
 800493a:	4798      	blx	r3
 800493c:	3601      	adds	r6, #1
 800493e:	e7f2      	b.n	8004926 <__libc_init_array+0x1e>
 8004940:	08005390 	.word	0x08005390
 8004944:	08005390 	.word	0x08005390
 8004948:	08005390 	.word	0x08005390
 800494c:	08005394 	.word	0x08005394

08004950 <__retarget_lock_acquire_recursive>:
 8004950:	4770      	bx	lr

08004952 <__retarget_lock_release_recursive>:
 8004952:	4770      	bx	lr

08004954 <__ssputs_r>:
 8004954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004958:	461f      	mov	r7, r3
 800495a:	688e      	ldr	r6, [r1, #8]
 800495c:	4682      	mov	sl, r0
 800495e:	42be      	cmp	r6, r7
 8004960:	460c      	mov	r4, r1
 8004962:	4690      	mov	r8, r2
 8004964:	680b      	ldr	r3, [r1, #0]
 8004966:	d82d      	bhi.n	80049c4 <__ssputs_r+0x70>
 8004968:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800496c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004970:	d026      	beq.n	80049c0 <__ssputs_r+0x6c>
 8004972:	6965      	ldr	r5, [r4, #20]
 8004974:	6909      	ldr	r1, [r1, #16]
 8004976:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800497a:	eba3 0901 	sub.w	r9, r3, r1
 800497e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004982:	1c7b      	adds	r3, r7, #1
 8004984:	444b      	add	r3, r9
 8004986:	106d      	asrs	r5, r5, #1
 8004988:	429d      	cmp	r5, r3
 800498a:	bf38      	it	cc
 800498c:	461d      	movcc	r5, r3
 800498e:	0553      	lsls	r3, r2, #21
 8004990:	d527      	bpl.n	80049e2 <__ssputs_r+0x8e>
 8004992:	4629      	mov	r1, r5
 8004994:	f000 f958 	bl	8004c48 <_malloc_r>
 8004998:	4606      	mov	r6, r0
 800499a:	b360      	cbz	r0, 80049f6 <__ssputs_r+0xa2>
 800499c:	464a      	mov	r2, r9
 800499e:	6921      	ldr	r1, [r4, #16]
 80049a0:	f000 fbd6 	bl	8005150 <memcpy>
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80049aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ae:	81a3      	strh	r3, [r4, #12]
 80049b0:	6126      	str	r6, [r4, #16]
 80049b2:	444e      	add	r6, r9
 80049b4:	6026      	str	r6, [r4, #0]
 80049b6:	463e      	mov	r6, r7
 80049b8:	6165      	str	r5, [r4, #20]
 80049ba:	eba5 0509 	sub.w	r5, r5, r9
 80049be:	60a5      	str	r5, [r4, #8]
 80049c0:	42be      	cmp	r6, r7
 80049c2:	d900      	bls.n	80049c6 <__ssputs_r+0x72>
 80049c4:	463e      	mov	r6, r7
 80049c6:	4632      	mov	r2, r6
 80049c8:	4641      	mov	r1, r8
 80049ca:	6820      	ldr	r0, [r4, #0]
 80049cc:	f000 fb88 	bl	80050e0 <memmove>
 80049d0:	2000      	movs	r0, #0
 80049d2:	68a3      	ldr	r3, [r4, #8]
 80049d4:	1b9b      	subs	r3, r3, r6
 80049d6:	60a3      	str	r3, [r4, #8]
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	4433      	add	r3, r6
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e2:	462a      	mov	r2, r5
 80049e4:	f000 fb4e 	bl	8005084 <_realloc_r>
 80049e8:	4606      	mov	r6, r0
 80049ea:	2800      	cmp	r0, #0
 80049ec:	d1e0      	bne.n	80049b0 <__ssputs_r+0x5c>
 80049ee:	4650      	mov	r0, sl
 80049f0:	6921      	ldr	r1, [r4, #16]
 80049f2:	f000 fbbb 	bl	800516c <_free_r>
 80049f6:	230c      	movs	r3, #12
 80049f8:	f8ca 3000 	str.w	r3, [sl]
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	e7e9      	b.n	80049de <__ssputs_r+0x8a>
	...

08004a0c <_svfiprintf_r>:
 8004a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a10:	4698      	mov	r8, r3
 8004a12:	898b      	ldrh	r3, [r1, #12]
 8004a14:	4607      	mov	r7, r0
 8004a16:	061b      	lsls	r3, r3, #24
 8004a18:	460d      	mov	r5, r1
 8004a1a:	4614      	mov	r4, r2
 8004a1c:	b09d      	sub	sp, #116	@ 0x74
 8004a1e:	d510      	bpl.n	8004a42 <_svfiprintf_r+0x36>
 8004a20:	690b      	ldr	r3, [r1, #16]
 8004a22:	b973      	cbnz	r3, 8004a42 <_svfiprintf_r+0x36>
 8004a24:	2140      	movs	r1, #64	@ 0x40
 8004a26:	f000 f90f 	bl	8004c48 <_malloc_r>
 8004a2a:	6028      	str	r0, [r5, #0]
 8004a2c:	6128      	str	r0, [r5, #16]
 8004a2e:	b930      	cbnz	r0, 8004a3e <_svfiprintf_r+0x32>
 8004a30:	230c      	movs	r3, #12
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a38:	b01d      	add	sp, #116	@ 0x74
 8004a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a3e:	2340      	movs	r3, #64	@ 0x40
 8004a40:	616b      	str	r3, [r5, #20]
 8004a42:	2300      	movs	r3, #0
 8004a44:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a46:	2320      	movs	r3, #32
 8004a48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a4c:	2330      	movs	r3, #48	@ 0x30
 8004a4e:	f04f 0901 	mov.w	r9, #1
 8004a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a56:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004bf0 <_svfiprintf_r+0x1e4>
 8004a5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a5e:	4623      	mov	r3, r4
 8004a60:	469a      	mov	sl, r3
 8004a62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a66:	b10a      	cbz	r2, 8004a6c <_svfiprintf_r+0x60>
 8004a68:	2a25      	cmp	r2, #37	@ 0x25
 8004a6a:	d1f9      	bne.n	8004a60 <_svfiprintf_r+0x54>
 8004a6c:	ebba 0b04 	subs.w	fp, sl, r4
 8004a70:	d00b      	beq.n	8004a8a <_svfiprintf_r+0x7e>
 8004a72:	465b      	mov	r3, fp
 8004a74:	4622      	mov	r2, r4
 8004a76:	4629      	mov	r1, r5
 8004a78:	4638      	mov	r0, r7
 8004a7a:	f7ff ff6b 	bl	8004954 <__ssputs_r>
 8004a7e:	3001      	adds	r0, #1
 8004a80:	f000 80a7 	beq.w	8004bd2 <_svfiprintf_r+0x1c6>
 8004a84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a86:	445a      	add	r2, fp
 8004a88:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 809f 	beq.w	8004bd2 <_svfiprintf_r+0x1c6>
 8004a94:	2300      	movs	r3, #0
 8004a96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a9e:	f10a 0a01 	add.w	sl, sl, #1
 8004aa2:	9304      	str	r3, [sp, #16]
 8004aa4:	9307      	str	r3, [sp, #28]
 8004aa6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004aaa:	931a      	str	r3, [sp, #104]	@ 0x68
 8004aac:	4654      	mov	r4, sl
 8004aae:	2205      	movs	r2, #5
 8004ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ab4:	484e      	ldr	r0, [pc, #312]	@ (8004bf0 <_svfiprintf_r+0x1e4>)
 8004ab6:	f000 fb3d 	bl	8005134 <memchr>
 8004aba:	9a04      	ldr	r2, [sp, #16]
 8004abc:	b9d8      	cbnz	r0, 8004af6 <_svfiprintf_r+0xea>
 8004abe:	06d0      	lsls	r0, r2, #27
 8004ac0:	bf44      	itt	mi
 8004ac2:	2320      	movmi	r3, #32
 8004ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ac8:	0711      	lsls	r1, r2, #28
 8004aca:	bf44      	itt	mi
 8004acc:	232b      	movmi	r3, #43	@ 0x2b
 8004ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ad6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ad8:	d015      	beq.n	8004b06 <_svfiprintf_r+0xfa>
 8004ada:	4654      	mov	r4, sl
 8004adc:	2000      	movs	r0, #0
 8004ade:	f04f 0c0a 	mov.w	ip, #10
 8004ae2:	9a07      	ldr	r2, [sp, #28]
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aea:	3b30      	subs	r3, #48	@ 0x30
 8004aec:	2b09      	cmp	r3, #9
 8004aee:	d94b      	bls.n	8004b88 <_svfiprintf_r+0x17c>
 8004af0:	b1b0      	cbz	r0, 8004b20 <_svfiprintf_r+0x114>
 8004af2:	9207      	str	r2, [sp, #28]
 8004af4:	e014      	b.n	8004b20 <_svfiprintf_r+0x114>
 8004af6:	eba0 0308 	sub.w	r3, r0, r8
 8004afa:	fa09 f303 	lsl.w	r3, r9, r3
 8004afe:	4313      	orrs	r3, r2
 8004b00:	46a2      	mov	sl, r4
 8004b02:	9304      	str	r3, [sp, #16]
 8004b04:	e7d2      	b.n	8004aac <_svfiprintf_r+0xa0>
 8004b06:	9b03      	ldr	r3, [sp, #12]
 8004b08:	1d19      	adds	r1, r3, #4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	9103      	str	r1, [sp, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bfbb      	ittet	lt
 8004b12:	425b      	neglt	r3, r3
 8004b14:	f042 0202 	orrlt.w	r2, r2, #2
 8004b18:	9307      	strge	r3, [sp, #28]
 8004b1a:	9307      	strlt	r3, [sp, #28]
 8004b1c:	bfb8      	it	lt
 8004b1e:	9204      	strlt	r2, [sp, #16]
 8004b20:	7823      	ldrb	r3, [r4, #0]
 8004b22:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b24:	d10a      	bne.n	8004b3c <_svfiprintf_r+0x130>
 8004b26:	7863      	ldrb	r3, [r4, #1]
 8004b28:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b2a:	d132      	bne.n	8004b92 <_svfiprintf_r+0x186>
 8004b2c:	9b03      	ldr	r3, [sp, #12]
 8004b2e:	3402      	adds	r4, #2
 8004b30:	1d1a      	adds	r2, r3, #4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	9203      	str	r2, [sp, #12]
 8004b36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b3a:	9305      	str	r3, [sp, #20]
 8004b3c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004bf4 <_svfiprintf_r+0x1e8>
 8004b40:	2203      	movs	r2, #3
 8004b42:	4650      	mov	r0, sl
 8004b44:	7821      	ldrb	r1, [r4, #0]
 8004b46:	f000 faf5 	bl	8005134 <memchr>
 8004b4a:	b138      	cbz	r0, 8004b5c <_svfiprintf_r+0x150>
 8004b4c:	2240      	movs	r2, #64	@ 0x40
 8004b4e:	9b04      	ldr	r3, [sp, #16]
 8004b50:	eba0 000a 	sub.w	r0, r0, sl
 8004b54:	4082      	lsls	r2, r0
 8004b56:	4313      	orrs	r3, r2
 8004b58:	3401      	adds	r4, #1
 8004b5a:	9304      	str	r3, [sp, #16]
 8004b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b60:	2206      	movs	r2, #6
 8004b62:	4825      	ldr	r0, [pc, #148]	@ (8004bf8 <_svfiprintf_r+0x1ec>)
 8004b64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b68:	f000 fae4 	bl	8005134 <memchr>
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d036      	beq.n	8004bde <_svfiprintf_r+0x1d2>
 8004b70:	4b22      	ldr	r3, [pc, #136]	@ (8004bfc <_svfiprintf_r+0x1f0>)
 8004b72:	bb1b      	cbnz	r3, 8004bbc <_svfiprintf_r+0x1b0>
 8004b74:	9b03      	ldr	r3, [sp, #12]
 8004b76:	3307      	adds	r3, #7
 8004b78:	f023 0307 	bic.w	r3, r3, #7
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	9303      	str	r3, [sp, #12]
 8004b80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b82:	4433      	add	r3, r6
 8004b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b86:	e76a      	b.n	8004a5e <_svfiprintf_r+0x52>
 8004b88:	460c      	mov	r4, r1
 8004b8a:	2001      	movs	r0, #1
 8004b8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b90:	e7a8      	b.n	8004ae4 <_svfiprintf_r+0xd8>
 8004b92:	2300      	movs	r3, #0
 8004b94:	f04f 0c0a 	mov.w	ip, #10
 8004b98:	4619      	mov	r1, r3
 8004b9a:	3401      	adds	r4, #1
 8004b9c:	9305      	str	r3, [sp, #20]
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ba4:	3a30      	subs	r2, #48	@ 0x30
 8004ba6:	2a09      	cmp	r2, #9
 8004ba8:	d903      	bls.n	8004bb2 <_svfiprintf_r+0x1a6>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0c6      	beq.n	8004b3c <_svfiprintf_r+0x130>
 8004bae:	9105      	str	r1, [sp, #20]
 8004bb0:	e7c4      	b.n	8004b3c <_svfiprintf_r+0x130>
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bba:	e7f0      	b.n	8004b9e <_svfiprintf_r+0x192>
 8004bbc:	ab03      	add	r3, sp, #12
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	462a      	mov	r2, r5
 8004bc2:	4638      	mov	r0, r7
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004c00 <_svfiprintf_r+0x1f4>)
 8004bc6:	a904      	add	r1, sp, #16
 8004bc8:	f3af 8000 	nop.w
 8004bcc:	1c42      	adds	r2, r0, #1
 8004bce:	4606      	mov	r6, r0
 8004bd0:	d1d6      	bne.n	8004b80 <_svfiprintf_r+0x174>
 8004bd2:	89ab      	ldrh	r3, [r5, #12]
 8004bd4:	065b      	lsls	r3, r3, #25
 8004bd6:	f53f af2d 	bmi.w	8004a34 <_svfiprintf_r+0x28>
 8004bda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bdc:	e72c      	b.n	8004a38 <_svfiprintf_r+0x2c>
 8004bde:	ab03      	add	r3, sp, #12
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	462a      	mov	r2, r5
 8004be4:	4638      	mov	r0, r7
 8004be6:	4b06      	ldr	r3, [pc, #24]	@ (8004c00 <_svfiprintf_r+0x1f4>)
 8004be8:	a904      	add	r1, sp, #16
 8004bea:	f000 f91f 	bl	8004e2c <_printf_i>
 8004bee:	e7ed      	b.n	8004bcc <_svfiprintf_r+0x1c0>
 8004bf0:	08005353 	.word	0x08005353
 8004bf4:	08005359 	.word	0x08005359
 8004bf8:	0800535d 	.word	0x0800535d
 8004bfc:	00000000 	.word	0x00000000
 8004c00:	08004955 	.word	0x08004955

08004c04 <sbrk_aligned>:
 8004c04:	b570      	push	{r4, r5, r6, lr}
 8004c06:	4e0f      	ldr	r6, [pc, #60]	@ (8004c44 <sbrk_aligned+0x40>)
 8004c08:	460c      	mov	r4, r1
 8004c0a:	6831      	ldr	r1, [r6, #0]
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	b911      	cbnz	r1, 8004c16 <sbrk_aligned+0x12>
 8004c10:	f000 fa80 	bl	8005114 <_sbrk_r>
 8004c14:	6030      	str	r0, [r6, #0]
 8004c16:	4621      	mov	r1, r4
 8004c18:	4628      	mov	r0, r5
 8004c1a:	f000 fa7b 	bl	8005114 <_sbrk_r>
 8004c1e:	1c43      	adds	r3, r0, #1
 8004c20:	d103      	bne.n	8004c2a <sbrk_aligned+0x26>
 8004c22:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004c26:	4620      	mov	r0, r4
 8004c28:	bd70      	pop	{r4, r5, r6, pc}
 8004c2a:	1cc4      	adds	r4, r0, #3
 8004c2c:	f024 0403 	bic.w	r4, r4, #3
 8004c30:	42a0      	cmp	r0, r4
 8004c32:	d0f8      	beq.n	8004c26 <sbrk_aligned+0x22>
 8004c34:	1a21      	subs	r1, r4, r0
 8004c36:	4628      	mov	r0, r5
 8004c38:	f000 fa6c 	bl	8005114 <_sbrk_r>
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d1f2      	bne.n	8004c26 <sbrk_aligned+0x22>
 8004c40:	e7ef      	b.n	8004c22 <sbrk_aligned+0x1e>
 8004c42:	bf00      	nop
 8004c44:	20001eb4 	.word	0x20001eb4

08004c48 <_malloc_r>:
 8004c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c4c:	1ccd      	adds	r5, r1, #3
 8004c4e:	f025 0503 	bic.w	r5, r5, #3
 8004c52:	3508      	adds	r5, #8
 8004c54:	2d0c      	cmp	r5, #12
 8004c56:	bf38      	it	cc
 8004c58:	250c      	movcc	r5, #12
 8004c5a:	2d00      	cmp	r5, #0
 8004c5c:	4606      	mov	r6, r0
 8004c5e:	db01      	blt.n	8004c64 <_malloc_r+0x1c>
 8004c60:	42a9      	cmp	r1, r5
 8004c62:	d904      	bls.n	8004c6e <_malloc_r+0x26>
 8004c64:	230c      	movs	r3, #12
 8004c66:	6033      	str	r3, [r6, #0]
 8004c68:	2000      	movs	r0, #0
 8004c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d44 <_malloc_r+0xfc>
 8004c72:	f000 f9fb 	bl	800506c <__malloc_lock>
 8004c76:	f8d8 3000 	ldr.w	r3, [r8]
 8004c7a:	461c      	mov	r4, r3
 8004c7c:	bb44      	cbnz	r4, 8004cd0 <_malloc_r+0x88>
 8004c7e:	4629      	mov	r1, r5
 8004c80:	4630      	mov	r0, r6
 8004c82:	f7ff ffbf 	bl	8004c04 <sbrk_aligned>
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	4604      	mov	r4, r0
 8004c8a:	d158      	bne.n	8004d3e <_malloc_r+0xf6>
 8004c8c:	f8d8 4000 	ldr.w	r4, [r8]
 8004c90:	4627      	mov	r7, r4
 8004c92:	2f00      	cmp	r7, #0
 8004c94:	d143      	bne.n	8004d1e <_malloc_r+0xd6>
 8004c96:	2c00      	cmp	r4, #0
 8004c98:	d04b      	beq.n	8004d32 <_malloc_r+0xea>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	4639      	mov	r1, r7
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	eb04 0903 	add.w	r9, r4, r3
 8004ca4:	f000 fa36 	bl	8005114 <_sbrk_r>
 8004ca8:	4581      	cmp	r9, r0
 8004caa:	d142      	bne.n	8004d32 <_malloc_r+0xea>
 8004cac:	6821      	ldr	r1, [r4, #0]
 8004cae:	4630      	mov	r0, r6
 8004cb0:	1a6d      	subs	r5, r5, r1
 8004cb2:	4629      	mov	r1, r5
 8004cb4:	f7ff ffa6 	bl	8004c04 <sbrk_aligned>
 8004cb8:	3001      	adds	r0, #1
 8004cba:	d03a      	beq.n	8004d32 <_malloc_r+0xea>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	442b      	add	r3, r5
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	bb62      	cbnz	r2, 8004d24 <_malloc_r+0xdc>
 8004cca:	f8c8 7000 	str.w	r7, [r8]
 8004cce:	e00f      	b.n	8004cf0 <_malloc_r+0xa8>
 8004cd0:	6822      	ldr	r2, [r4, #0]
 8004cd2:	1b52      	subs	r2, r2, r5
 8004cd4:	d420      	bmi.n	8004d18 <_malloc_r+0xd0>
 8004cd6:	2a0b      	cmp	r2, #11
 8004cd8:	d917      	bls.n	8004d0a <_malloc_r+0xc2>
 8004cda:	1961      	adds	r1, r4, r5
 8004cdc:	42a3      	cmp	r3, r4
 8004cde:	6025      	str	r5, [r4, #0]
 8004ce0:	bf18      	it	ne
 8004ce2:	6059      	strne	r1, [r3, #4]
 8004ce4:	6863      	ldr	r3, [r4, #4]
 8004ce6:	bf08      	it	eq
 8004ce8:	f8c8 1000 	streq.w	r1, [r8]
 8004cec:	5162      	str	r2, [r4, r5]
 8004cee:	604b      	str	r3, [r1, #4]
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f000 f9c1 	bl	8005078 <__malloc_unlock>
 8004cf6:	f104 000b 	add.w	r0, r4, #11
 8004cfa:	1d23      	adds	r3, r4, #4
 8004cfc:	f020 0007 	bic.w	r0, r0, #7
 8004d00:	1ac2      	subs	r2, r0, r3
 8004d02:	bf1c      	itt	ne
 8004d04:	1a1b      	subne	r3, r3, r0
 8004d06:	50a3      	strne	r3, [r4, r2]
 8004d08:	e7af      	b.n	8004c6a <_malloc_r+0x22>
 8004d0a:	6862      	ldr	r2, [r4, #4]
 8004d0c:	42a3      	cmp	r3, r4
 8004d0e:	bf0c      	ite	eq
 8004d10:	f8c8 2000 	streq.w	r2, [r8]
 8004d14:	605a      	strne	r2, [r3, #4]
 8004d16:	e7eb      	b.n	8004cf0 <_malloc_r+0xa8>
 8004d18:	4623      	mov	r3, r4
 8004d1a:	6864      	ldr	r4, [r4, #4]
 8004d1c:	e7ae      	b.n	8004c7c <_malloc_r+0x34>
 8004d1e:	463c      	mov	r4, r7
 8004d20:	687f      	ldr	r7, [r7, #4]
 8004d22:	e7b6      	b.n	8004c92 <_malloc_r+0x4a>
 8004d24:	461a      	mov	r2, r3
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	d1fb      	bne.n	8004d24 <_malloc_r+0xdc>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	6053      	str	r3, [r2, #4]
 8004d30:	e7de      	b.n	8004cf0 <_malloc_r+0xa8>
 8004d32:	230c      	movs	r3, #12
 8004d34:	4630      	mov	r0, r6
 8004d36:	6033      	str	r3, [r6, #0]
 8004d38:	f000 f99e 	bl	8005078 <__malloc_unlock>
 8004d3c:	e794      	b.n	8004c68 <_malloc_r+0x20>
 8004d3e:	6005      	str	r5, [r0, #0]
 8004d40:	e7d6      	b.n	8004cf0 <_malloc_r+0xa8>
 8004d42:	bf00      	nop
 8004d44:	20001eb8 	.word	0x20001eb8

08004d48 <_printf_common>:
 8004d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d4c:	4616      	mov	r6, r2
 8004d4e:	4698      	mov	r8, r3
 8004d50:	688a      	ldr	r2, [r1, #8]
 8004d52:	690b      	ldr	r3, [r1, #16]
 8004d54:	4607      	mov	r7, r0
 8004d56:	4293      	cmp	r3, r2
 8004d58:	bfb8      	it	lt
 8004d5a:	4613      	movlt	r3, r2
 8004d5c:	6033      	str	r3, [r6, #0]
 8004d5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d62:	460c      	mov	r4, r1
 8004d64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d68:	b10a      	cbz	r2, 8004d6e <_printf_common+0x26>
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	6033      	str	r3, [r6, #0]
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	0699      	lsls	r1, r3, #26
 8004d72:	bf42      	ittt	mi
 8004d74:	6833      	ldrmi	r3, [r6, #0]
 8004d76:	3302      	addmi	r3, #2
 8004d78:	6033      	strmi	r3, [r6, #0]
 8004d7a:	6825      	ldr	r5, [r4, #0]
 8004d7c:	f015 0506 	ands.w	r5, r5, #6
 8004d80:	d106      	bne.n	8004d90 <_printf_common+0x48>
 8004d82:	f104 0a19 	add.w	sl, r4, #25
 8004d86:	68e3      	ldr	r3, [r4, #12]
 8004d88:	6832      	ldr	r2, [r6, #0]
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	42ab      	cmp	r3, r5
 8004d8e:	dc2b      	bgt.n	8004de8 <_printf_common+0xa0>
 8004d90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d94:	6822      	ldr	r2, [r4, #0]
 8004d96:	3b00      	subs	r3, #0
 8004d98:	bf18      	it	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	0692      	lsls	r2, r2, #26
 8004d9e:	d430      	bmi.n	8004e02 <_printf_common+0xba>
 8004da0:	4641      	mov	r1, r8
 8004da2:	4638      	mov	r0, r7
 8004da4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004da8:	47c8      	blx	r9
 8004daa:	3001      	adds	r0, #1
 8004dac:	d023      	beq.n	8004df6 <_printf_common+0xae>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	6922      	ldr	r2, [r4, #16]
 8004db2:	f003 0306 	and.w	r3, r3, #6
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	bf14      	ite	ne
 8004dba:	2500      	movne	r5, #0
 8004dbc:	6833      	ldreq	r3, [r6, #0]
 8004dbe:	f04f 0600 	mov.w	r6, #0
 8004dc2:	bf08      	it	eq
 8004dc4:	68e5      	ldreq	r5, [r4, #12]
 8004dc6:	f104 041a 	add.w	r4, r4, #26
 8004dca:	bf08      	it	eq
 8004dcc:	1aed      	subeq	r5, r5, r3
 8004dce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004dd2:	bf08      	it	eq
 8004dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	bfc4      	itt	gt
 8004ddc:	1a9b      	subgt	r3, r3, r2
 8004dde:	18ed      	addgt	r5, r5, r3
 8004de0:	42b5      	cmp	r5, r6
 8004de2:	d11a      	bne.n	8004e1a <_printf_common+0xd2>
 8004de4:	2000      	movs	r0, #0
 8004de6:	e008      	b.n	8004dfa <_printf_common+0xb2>
 8004de8:	2301      	movs	r3, #1
 8004dea:	4652      	mov	r2, sl
 8004dec:	4641      	mov	r1, r8
 8004dee:	4638      	mov	r0, r7
 8004df0:	47c8      	blx	r9
 8004df2:	3001      	adds	r0, #1
 8004df4:	d103      	bne.n	8004dfe <_printf_common+0xb6>
 8004df6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfe:	3501      	adds	r5, #1
 8004e00:	e7c1      	b.n	8004d86 <_printf_common+0x3e>
 8004e02:	2030      	movs	r0, #48	@ 0x30
 8004e04:	18e1      	adds	r1, r4, r3
 8004e06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e10:	4422      	add	r2, r4
 8004e12:	3302      	adds	r3, #2
 8004e14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e18:	e7c2      	b.n	8004da0 <_printf_common+0x58>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4622      	mov	r2, r4
 8004e1e:	4641      	mov	r1, r8
 8004e20:	4638      	mov	r0, r7
 8004e22:	47c8      	blx	r9
 8004e24:	3001      	adds	r0, #1
 8004e26:	d0e6      	beq.n	8004df6 <_printf_common+0xae>
 8004e28:	3601      	adds	r6, #1
 8004e2a:	e7d9      	b.n	8004de0 <_printf_common+0x98>

08004e2c <_printf_i>:
 8004e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e30:	7e0f      	ldrb	r7, [r1, #24]
 8004e32:	4691      	mov	r9, r2
 8004e34:	2f78      	cmp	r7, #120	@ 0x78
 8004e36:	4680      	mov	r8, r0
 8004e38:	460c      	mov	r4, r1
 8004e3a:	469a      	mov	sl, r3
 8004e3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e42:	d807      	bhi.n	8004e54 <_printf_i+0x28>
 8004e44:	2f62      	cmp	r7, #98	@ 0x62
 8004e46:	d80a      	bhi.n	8004e5e <_printf_i+0x32>
 8004e48:	2f00      	cmp	r7, #0
 8004e4a:	f000 80d3 	beq.w	8004ff4 <_printf_i+0x1c8>
 8004e4e:	2f58      	cmp	r7, #88	@ 0x58
 8004e50:	f000 80ba 	beq.w	8004fc8 <_printf_i+0x19c>
 8004e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e5c:	e03a      	b.n	8004ed4 <_printf_i+0xa8>
 8004e5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e62:	2b15      	cmp	r3, #21
 8004e64:	d8f6      	bhi.n	8004e54 <_printf_i+0x28>
 8004e66:	a101      	add	r1, pc, #4	@ (adr r1, 8004e6c <_printf_i+0x40>)
 8004e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e6c:	08004ec5 	.word	0x08004ec5
 8004e70:	08004ed9 	.word	0x08004ed9
 8004e74:	08004e55 	.word	0x08004e55
 8004e78:	08004e55 	.word	0x08004e55
 8004e7c:	08004e55 	.word	0x08004e55
 8004e80:	08004e55 	.word	0x08004e55
 8004e84:	08004ed9 	.word	0x08004ed9
 8004e88:	08004e55 	.word	0x08004e55
 8004e8c:	08004e55 	.word	0x08004e55
 8004e90:	08004e55 	.word	0x08004e55
 8004e94:	08004e55 	.word	0x08004e55
 8004e98:	08004fdb 	.word	0x08004fdb
 8004e9c:	08004f03 	.word	0x08004f03
 8004ea0:	08004f95 	.word	0x08004f95
 8004ea4:	08004e55 	.word	0x08004e55
 8004ea8:	08004e55 	.word	0x08004e55
 8004eac:	08004ffd 	.word	0x08004ffd
 8004eb0:	08004e55 	.word	0x08004e55
 8004eb4:	08004f03 	.word	0x08004f03
 8004eb8:	08004e55 	.word	0x08004e55
 8004ebc:	08004e55 	.word	0x08004e55
 8004ec0:	08004f9d 	.word	0x08004f9d
 8004ec4:	6833      	ldr	r3, [r6, #0]
 8004ec6:	1d1a      	adds	r2, r3, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6032      	str	r2, [r6, #0]
 8004ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ed0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e09e      	b.n	8005016 <_printf_i+0x1ea>
 8004ed8:	6833      	ldr	r3, [r6, #0]
 8004eda:	6820      	ldr	r0, [r4, #0]
 8004edc:	1d19      	adds	r1, r3, #4
 8004ede:	6031      	str	r1, [r6, #0]
 8004ee0:	0606      	lsls	r6, r0, #24
 8004ee2:	d501      	bpl.n	8004ee8 <_printf_i+0xbc>
 8004ee4:	681d      	ldr	r5, [r3, #0]
 8004ee6:	e003      	b.n	8004ef0 <_printf_i+0xc4>
 8004ee8:	0645      	lsls	r5, r0, #25
 8004eea:	d5fb      	bpl.n	8004ee4 <_printf_i+0xb8>
 8004eec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ef0:	2d00      	cmp	r5, #0
 8004ef2:	da03      	bge.n	8004efc <_printf_i+0xd0>
 8004ef4:	232d      	movs	r3, #45	@ 0x2d
 8004ef6:	426d      	negs	r5, r5
 8004ef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004efc:	230a      	movs	r3, #10
 8004efe:	4859      	ldr	r0, [pc, #356]	@ (8005064 <_printf_i+0x238>)
 8004f00:	e011      	b.n	8004f26 <_printf_i+0xfa>
 8004f02:	6821      	ldr	r1, [r4, #0]
 8004f04:	6833      	ldr	r3, [r6, #0]
 8004f06:	0608      	lsls	r0, r1, #24
 8004f08:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f0c:	d402      	bmi.n	8004f14 <_printf_i+0xe8>
 8004f0e:	0649      	lsls	r1, r1, #25
 8004f10:	bf48      	it	mi
 8004f12:	b2ad      	uxthmi	r5, r5
 8004f14:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f16:	6033      	str	r3, [r6, #0]
 8004f18:	bf14      	ite	ne
 8004f1a:	230a      	movne	r3, #10
 8004f1c:	2308      	moveq	r3, #8
 8004f1e:	4851      	ldr	r0, [pc, #324]	@ (8005064 <_printf_i+0x238>)
 8004f20:	2100      	movs	r1, #0
 8004f22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f26:	6866      	ldr	r6, [r4, #4]
 8004f28:	2e00      	cmp	r6, #0
 8004f2a:	bfa8      	it	ge
 8004f2c:	6821      	ldrge	r1, [r4, #0]
 8004f2e:	60a6      	str	r6, [r4, #8]
 8004f30:	bfa4      	itt	ge
 8004f32:	f021 0104 	bicge.w	r1, r1, #4
 8004f36:	6021      	strge	r1, [r4, #0]
 8004f38:	b90d      	cbnz	r5, 8004f3e <_printf_i+0x112>
 8004f3a:	2e00      	cmp	r6, #0
 8004f3c:	d04b      	beq.n	8004fd6 <_printf_i+0x1aa>
 8004f3e:	4616      	mov	r6, r2
 8004f40:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f44:	fb03 5711 	mls	r7, r3, r1, r5
 8004f48:	5dc7      	ldrb	r7, [r0, r7]
 8004f4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f4e:	462f      	mov	r7, r5
 8004f50:	42bb      	cmp	r3, r7
 8004f52:	460d      	mov	r5, r1
 8004f54:	d9f4      	bls.n	8004f40 <_printf_i+0x114>
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d10b      	bne.n	8004f72 <_printf_i+0x146>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	07df      	lsls	r7, r3, #31
 8004f5e:	d508      	bpl.n	8004f72 <_printf_i+0x146>
 8004f60:	6923      	ldr	r3, [r4, #16]
 8004f62:	6861      	ldr	r1, [r4, #4]
 8004f64:	4299      	cmp	r1, r3
 8004f66:	bfde      	ittt	le
 8004f68:	2330      	movle	r3, #48	@ 0x30
 8004f6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f6e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004f72:	1b92      	subs	r2, r2, r6
 8004f74:	6122      	str	r2, [r4, #16]
 8004f76:	464b      	mov	r3, r9
 8004f78:	4621      	mov	r1, r4
 8004f7a:	4640      	mov	r0, r8
 8004f7c:	f8cd a000 	str.w	sl, [sp]
 8004f80:	aa03      	add	r2, sp, #12
 8004f82:	f7ff fee1 	bl	8004d48 <_printf_common>
 8004f86:	3001      	adds	r0, #1
 8004f88:	d14a      	bne.n	8005020 <_printf_i+0x1f4>
 8004f8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f8e:	b004      	add	sp, #16
 8004f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	f043 0320 	orr.w	r3, r3, #32
 8004f9a:	6023      	str	r3, [r4, #0]
 8004f9c:	2778      	movs	r7, #120	@ 0x78
 8004f9e:	4832      	ldr	r0, [pc, #200]	@ (8005068 <_printf_i+0x23c>)
 8004fa0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	6831      	ldr	r1, [r6, #0]
 8004fa8:	061f      	lsls	r7, r3, #24
 8004faa:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fae:	d402      	bmi.n	8004fb6 <_printf_i+0x18a>
 8004fb0:	065f      	lsls	r7, r3, #25
 8004fb2:	bf48      	it	mi
 8004fb4:	b2ad      	uxthmi	r5, r5
 8004fb6:	6031      	str	r1, [r6, #0]
 8004fb8:	07d9      	lsls	r1, r3, #31
 8004fba:	bf44      	itt	mi
 8004fbc:	f043 0320 	orrmi.w	r3, r3, #32
 8004fc0:	6023      	strmi	r3, [r4, #0]
 8004fc2:	b11d      	cbz	r5, 8004fcc <_printf_i+0x1a0>
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	e7ab      	b.n	8004f20 <_printf_i+0xf4>
 8004fc8:	4826      	ldr	r0, [pc, #152]	@ (8005064 <_printf_i+0x238>)
 8004fca:	e7e9      	b.n	8004fa0 <_printf_i+0x174>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	f023 0320 	bic.w	r3, r3, #32
 8004fd2:	6023      	str	r3, [r4, #0]
 8004fd4:	e7f6      	b.n	8004fc4 <_printf_i+0x198>
 8004fd6:	4616      	mov	r6, r2
 8004fd8:	e7bd      	b.n	8004f56 <_printf_i+0x12a>
 8004fda:	6833      	ldr	r3, [r6, #0]
 8004fdc:	6825      	ldr	r5, [r4, #0]
 8004fde:	1d18      	adds	r0, r3, #4
 8004fe0:	6961      	ldr	r1, [r4, #20]
 8004fe2:	6030      	str	r0, [r6, #0]
 8004fe4:	062e      	lsls	r6, r5, #24
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	d501      	bpl.n	8004fee <_printf_i+0x1c2>
 8004fea:	6019      	str	r1, [r3, #0]
 8004fec:	e002      	b.n	8004ff4 <_printf_i+0x1c8>
 8004fee:	0668      	lsls	r0, r5, #25
 8004ff0:	d5fb      	bpl.n	8004fea <_printf_i+0x1be>
 8004ff2:	8019      	strh	r1, [r3, #0]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	4616      	mov	r6, r2
 8004ff8:	6123      	str	r3, [r4, #16]
 8004ffa:	e7bc      	b.n	8004f76 <_printf_i+0x14a>
 8004ffc:	6833      	ldr	r3, [r6, #0]
 8004ffe:	2100      	movs	r1, #0
 8005000:	1d1a      	adds	r2, r3, #4
 8005002:	6032      	str	r2, [r6, #0]
 8005004:	681e      	ldr	r6, [r3, #0]
 8005006:	6862      	ldr	r2, [r4, #4]
 8005008:	4630      	mov	r0, r6
 800500a:	f000 f893 	bl	8005134 <memchr>
 800500e:	b108      	cbz	r0, 8005014 <_printf_i+0x1e8>
 8005010:	1b80      	subs	r0, r0, r6
 8005012:	6060      	str	r0, [r4, #4]
 8005014:	6863      	ldr	r3, [r4, #4]
 8005016:	6123      	str	r3, [r4, #16]
 8005018:	2300      	movs	r3, #0
 800501a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800501e:	e7aa      	b.n	8004f76 <_printf_i+0x14a>
 8005020:	4632      	mov	r2, r6
 8005022:	4649      	mov	r1, r9
 8005024:	4640      	mov	r0, r8
 8005026:	6923      	ldr	r3, [r4, #16]
 8005028:	47d0      	blx	sl
 800502a:	3001      	adds	r0, #1
 800502c:	d0ad      	beq.n	8004f8a <_printf_i+0x15e>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	079b      	lsls	r3, r3, #30
 8005032:	d413      	bmi.n	800505c <_printf_i+0x230>
 8005034:	68e0      	ldr	r0, [r4, #12]
 8005036:	9b03      	ldr	r3, [sp, #12]
 8005038:	4298      	cmp	r0, r3
 800503a:	bfb8      	it	lt
 800503c:	4618      	movlt	r0, r3
 800503e:	e7a6      	b.n	8004f8e <_printf_i+0x162>
 8005040:	2301      	movs	r3, #1
 8005042:	4632      	mov	r2, r6
 8005044:	4649      	mov	r1, r9
 8005046:	4640      	mov	r0, r8
 8005048:	47d0      	blx	sl
 800504a:	3001      	adds	r0, #1
 800504c:	d09d      	beq.n	8004f8a <_printf_i+0x15e>
 800504e:	3501      	adds	r5, #1
 8005050:	68e3      	ldr	r3, [r4, #12]
 8005052:	9903      	ldr	r1, [sp, #12]
 8005054:	1a5b      	subs	r3, r3, r1
 8005056:	42ab      	cmp	r3, r5
 8005058:	dcf2      	bgt.n	8005040 <_printf_i+0x214>
 800505a:	e7eb      	b.n	8005034 <_printf_i+0x208>
 800505c:	2500      	movs	r5, #0
 800505e:	f104 0619 	add.w	r6, r4, #25
 8005062:	e7f5      	b.n	8005050 <_printf_i+0x224>
 8005064:	08005364 	.word	0x08005364
 8005068:	08005375 	.word	0x08005375

0800506c <__malloc_lock>:
 800506c:	4801      	ldr	r0, [pc, #4]	@ (8005074 <__malloc_lock+0x8>)
 800506e:	f7ff bc6f 	b.w	8004950 <__retarget_lock_acquire_recursive>
 8005072:	bf00      	nop
 8005074:	20001eb0 	.word	0x20001eb0

08005078 <__malloc_unlock>:
 8005078:	4801      	ldr	r0, [pc, #4]	@ (8005080 <__malloc_unlock+0x8>)
 800507a:	f7ff bc6a 	b.w	8004952 <__retarget_lock_release_recursive>
 800507e:	bf00      	nop
 8005080:	20001eb0 	.word	0x20001eb0

08005084 <_realloc_r>:
 8005084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005088:	4680      	mov	r8, r0
 800508a:	4615      	mov	r5, r2
 800508c:	460c      	mov	r4, r1
 800508e:	b921      	cbnz	r1, 800509a <_realloc_r+0x16>
 8005090:	4611      	mov	r1, r2
 8005092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005096:	f7ff bdd7 	b.w	8004c48 <_malloc_r>
 800509a:	b92a      	cbnz	r2, 80050a8 <_realloc_r+0x24>
 800509c:	f000 f866 	bl	800516c <_free_r>
 80050a0:	2400      	movs	r4, #0
 80050a2:	4620      	mov	r0, r4
 80050a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050a8:	f000 f8a8 	bl	80051fc <_malloc_usable_size_r>
 80050ac:	4285      	cmp	r5, r0
 80050ae:	4606      	mov	r6, r0
 80050b0:	d802      	bhi.n	80050b8 <_realloc_r+0x34>
 80050b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80050b6:	d8f4      	bhi.n	80050a2 <_realloc_r+0x1e>
 80050b8:	4629      	mov	r1, r5
 80050ba:	4640      	mov	r0, r8
 80050bc:	f7ff fdc4 	bl	8004c48 <_malloc_r>
 80050c0:	4607      	mov	r7, r0
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d0ec      	beq.n	80050a0 <_realloc_r+0x1c>
 80050c6:	42b5      	cmp	r5, r6
 80050c8:	462a      	mov	r2, r5
 80050ca:	4621      	mov	r1, r4
 80050cc:	bf28      	it	cs
 80050ce:	4632      	movcs	r2, r6
 80050d0:	f000 f83e 	bl	8005150 <memcpy>
 80050d4:	4621      	mov	r1, r4
 80050d6:	4640      	mov	r0, r8
 80050d8:	f000 f848 	bl	800516c <_free_r>
 80050dc:	463c      	mov	r4, r7
 80050de:	e7e0      	b.n	80050a2 <_realloc_r+0x1e>

080050e0 <memmove>:
 80050e0:	4288      	cmp	r0, r1
 80050e2:	b510      	push	{r4, lr}
 80050e4:	eb01 0402 	add.w	r4, r1, r2
 80050e8:	d902      	bls.n	80050f0 <memmove+0x10>
 80050ea:	4284      	cmp	r4, r0
 80050ec:	4623      	mov	r3, r4
 80050ee:	d807      	bhi.n	8005100 <memmove+0x20>
 80050f0:	1e43      	subs	r3, r0, #1
 80050f2:	42a1      	cmp	r1, r4
 80050f4:	d008      	beq.n	8005108 <memmove+0x28>
 80050f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050fe:	e7f8      	b.n	80050f2 <memmove+0x12>
 8005100:	4601      	mov	r1, r0
 8005102:	4402      	add	r2, r0
 8005104:	428a      	cmp	r2, r1
 8005106:	d100      	bne.n	800510a <memmove+0x2a>
 8005108:	bd10      	pop	{r4, pc}
 800510a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800510e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005112:	e7f7      	b.n	8005104 <memmove+0x24>

08005114 <_sbrk_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	2300      	movs	r3, #0
 8005118:	4d05      	ldr	r5, [pc, #20]	@ (8005130 <_sbrk_r+0x1c>)
 800511a:	4604      	mov	r4, r0
 800511c:	4608      	mov	r0, r1
 800511e:	602b      	str	r3, [r5, #0]
 8005120:	f7fb fecc 	bl	8000ebc <_sbrk>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d102      	bne.n	800512e <_sbrk_r+0x1a>
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	b103      	cbz	r3, 800512e <_sbrk_r+0x1a>
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	bd38      	pop	{r3, r4, r5, pc}
 8005130:	20001ebc 	.word	0x20001ebc

08005134 <memchr>:
 8005134:	4603      	mov	r3, r0
 8005136:	b510      	push	{r4, lr}
 8005138:	b2c9      	uxtb	r1, r1
 800513a:	4402      	add	r2, r0
 800513c:	4293      	cmp	r3, r2
 800513e:	4618      	mov	r0, r3
 8005140:	d101      	bne.n	8005146 <memchr+0x12>
 8005142:	2000      	movs	r0, #0
 8005144:	e003      	b.n	800514e <memchr+0x1a>
 8005146:	7804      	ldrb	r4, [r0, #0]
 8005148:	3301      	adds	r3, #1
 800514a:	428c      	cmp	r4, r1
 800514c:	d1f6      	bne.n	800513c <memchr+0x8>
 800514e:	bd10      	pop	{r4, pc}

08005150 <memcpy>:
 8005150:	440a      	add	r2, r1
 8005152:	4291      	cmp	r1, r2
 8005154:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005158:	d100      	bne.n	800515c <memcpy+0xc>
 800515a:	4770      	bx	lr
 800515c:	b510      	push	{r4, lr}
 800515e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005162:	4291      	cmp	r1, r2
 8005164:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005168:	d1f9      	bne.n	800515e <memcpy+0xe>
 800516a:	bd10      	pop	{r4, pc}

0800516c <_free_r>:
 800516c:	b538      	push	{r3, r4, r5, lr}
 800516e:	4605      	mov	r5, r0
 8005170:	2900      	cmp	r1, #0
 8005172:	d040      	beq.n	80051f6 <_free_r+0x8a>
 8005174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005178:	1f0c      	subs	r4, r1, #4
 800517a:	2b00      	cmp	r3, #0
 800517c:	bfb8      	it	lt
 800517e:	18e4      	addlt	r4, r4, r3
 8005180:	f7ff ff74 	bl	800506c <__malloc_lock>
 8005184:	4a1c      	ldr	r2, [pc, #112]	@ (80051f8 <_free_r+0x8c>)
 8005186:	6813      	ldr	r3, [r2, #0]
 8005188:	b933      	cbnz	r3, 8005198 <_free_r+0x2c>
 800518a:	6063      	str	r3, [r4, #4]
 800518c:	6014      	str	r4, [r2, #0]
 800518e:	4628      	mov	r0, r5
 8005190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005194:	f7ff bf70 	b.w	8005078 <__malloc_unlock>
 8005198:	42a3      	cmp	r3, r4
 800519a:	d908      	bls.n	80051ae <_free_r+0x42>
 800519c:	6820      	ldr	r0, [r4, #0]
 800519e:	1821      	adds	r1, r4, r0
 80051a0:	428b      	cmp	r3, r1
 80051a2:	bf01      	itttt	eq
 80051a4:	6819      	ldreq	r1, [r3, #0]
 80051a6:	685b      	ldreq	r3, [r3, #4]
 80051a8:	1809      	addeq	r1, r1, r0
 80051aa:	6021      	streq	r1, [r4, #0]
 80051ac:	e7ed      	b.n	800518a <_free_r+0x1e>
 80051ae:	461a      	mov	r2, r3
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	b10b      	cbz	r3, 80051b8 <_free_r+0x4c>
 80051b4:	42a3      	cmp	r3, r4
 80051b6:	d9fa      	bls.n	80051ae <_free_r+0x42>
 80051b8:	6811      	ldr	r1, [r2, #0]
 80051ba:	1850      	adds	r0, r2, r1
 80051bc:	42a0      	cmp	r0, r4
 80051be:	d10b      	bne.n	80051d8 <_free_r+0x6c>
 80051c0:	6820      	ldr	r0, [r4, #0]
 80051c2:	4401      	add	r1, r0
 80051c4:	1850      	adds	r0, r2, r1
 80051c6:	4283      	cmp	r3, r0
 80051c8:	6011      	str	r1, [r2, #0]
 80051ca:	d1e0      	bne.n	800518e <_free_r+0x22>
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4408      	add	r0, r1
 80051d2:	6010      	str	r0, [r2, #0]
 80051d4:	6053      	str	r3, [r2, #4]
 80051d6:	e7da      	b.n	800518e <_free_r+0x22>
 80051d8:	d902      	bls.n	80051e0 <_free_r+0x74>
 80051da:	230c      	movs	r3, #12
 80051dc:	602b      	str	r3, [r5, #0]
 80051de:	e7d6      	b.n	800518e <_free_r+0x22>
 80051e0:	6820      	ldr	r0, [r4, #0]
 80051e2:	1821      	adds	r1, r4, r0
 80051e4:	428b      	cmp	r3, r1
 80051e6:	bf01      	itttt	eq
 80051e8:	6819      	ldreq	r1, [r3, #0]
 80051ea:	685b      	ldreq	r3, [r3, #4]
 80051ec:	1809      	addeq	r1, r1, r0
 80051ee:	6021      	streq	r1, [r4, #0]
 80051f0:	6063      	str	r3, [r4, #4]
 80051f2:	6054      	str	r4, [r2, #4]
 80051f4:	e7cb      	b.n	800518e <_free_r+0x22>
 80051f6:	bd38      	pop	{r3, r4, r5, pc}
 80051f8:	20001eb8 	.word	0x20001eb8

080051fc <_malloc_usable_size_r>:
 80051fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005200:	1f18      	subs	r0, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	bfbc      	itt	lt
 8005206:	580b      	ldrlt	r3, [r1, r0]
 8005208:	18c0      	addlt	r0, r0, r3
 800520a:	4770      	bx	lr

0800520c <_init>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr

08005218 <_fini>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	bf00      	nop
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr
