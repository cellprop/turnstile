
turnstile_stm_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060c8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080061d4  080061d4  000071d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006370  08006370  000083f0  2**0
                  CONTENTS
  4 .ARM          00000008  08006370  08006370  00007370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006378  08006378  000083f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006378  08006378  00007378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800637c  0800637c  0000737c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003f0  20000000  08006380  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004114  200003f0  08006770  000083f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004504  08006770  00008504  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000083f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e595  00000000  00000000  00008419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d8  00000000  00000000  000169ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00019188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6b  00000000  00000000  0001a038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189ad  00000000  00000000  0001aba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d53  00000000  00000000  00033550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0c6  00000000  00000000  000442a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0369  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004218  00000000  00000000  000d03ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000d45c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200003f0 	.word	0x200003f0
 8000128:	00000000 	.word	0x00000000
 800012c:	080061bc 	.word	0x080061bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200003f4 	.word	0x200003f4
 8000148:	080061bc 	.word	0x080061bc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <strcmp>:
 800015c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000164:	2a01      	cmp	r2, #1
 8000166:	bf28      	it	cs
 8000168:	429a      	cmpcs	r2, r3
 800016a:	d0f7      	beq.n	800015c <strcmp>
 800016c:	1ad0      	subs	r0, r2, r3
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__aeabi_f2uiz>:
 800062c:	0042      	lsls	r2, r0, #1
 800062e:	d20e      	bcs.n	800064e <__aeabi_f2uiz+0x22>
 8000630:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000634:	d30b      	bcc.n	800064e <__aeabi_f2uiz+0x22>
 8000636:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800063a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800063e:	d409      	bmi.n	8000654 <__aeabi_f2uiz+0x28>
 8000640:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000644:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000648:	fa23 f002 	lsr.w	r0, r3, r2
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr
 8000654:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000658:	d101      	bne.n	800065e <__aeabi_f2uiz+0x32>
 800065a:	0242      	lsls	r2, r0, #9
 800065c:	d102      	bne.n	8000664 <__aeabi_f2uiz+0x38>
 800065e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000662:	4770      	bx	lr
 8000664:	f04f 0000 	mov.w	r0, #0
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000672:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <MX_DMA_Init+0x48>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a0f      	ldr	r2, [pc, #60]	@ (80006b4 <MX_DMA_Init+0x48>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <MX_DMA_Init+0x48>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	200f      	movs	r0, #15
 8000690:	f001 fed3 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000694:	200f      	movs	r0, #15
 8000696:	f001 feec 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2010      	movs	r0, #16
 80006a0:	f001 fecb 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006a4:	2010      	movs	r0, #16
 80006a6:	f001 fee4 	bl	8002472 <HAL_NVIC_EnableIRQ>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000

080006b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006cc:	4b5f      	ldr	r3, [pc, #380]	@ (800084c <MX_GPIO_Init+0x194>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a5e      	ldr	r2, [pc, #376]	@ (800084c <MX_GPIO_Init+0x194>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b5c      	ldr	r3, [pc, #368]	@ (800084c <MX_GPIO_Init+0x194>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0310 	and.w	r3, r3, #16
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e4:	4b59      	ldr	r3, [pc, #356]	@ (800084c <MX_GPIO_Init+0x194>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a58      	ldr	r2, [pc, #352]	@ (800084c <MX_GPIO_Init+0x194>)
 80006ea:	f043 0320 	orr.w	r3, r3, #32
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b56      	ldr	r3, [pc, #344]	@ (800084c <MX_GPIO_Init+0x194>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0320 	and.w	r3, r3, #32
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b53      	ldr	r3, [pc, #332]	@ (800084c <MX_GPIO_Init+0x194>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a52      	ldr	r2, [pc, #328]	@ (800084c <MX_GPIO_Init+0x194>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b50      	ldr	r3, [pc, #320]	@ (800084c <MX_GPIO_Init+0x194>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000714:	4b4d      	ldr	r3, [pc, #308]	@ (800084c <MX_GPIO_Init+0x194>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a4c      	ldr	r2, [pc, #304]	@ (800084c <MX_GPIO_Init+0x194>)
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b4a      	ldr	r3, [pc, #296]	@ (800084c <MX_GPIO_Init+0x194>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0308 	and.w	r3, r3, #8
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IR_PULSE_GEN_Pin|Direction2_Pin|Direction1_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f240 3101 	movw	r1, #769	@ 0x301
 8000732:	4847      	ldr	r0, [pc, #284]	@ (8000850 <MX_GPIO_Init+0x198>)
 8000734:	f002 fae2 	bl	8002cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2120      	movs	r1, #32
 800073c:	4845      	ldr	r0, [pc, #276]	@ (8000854 <MX_GPIO_Init+0x19c>)
 800073e:	f002 fadd 	bl	8002cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|IR1_Pin|Encoder_Pin|IR_2_Pin
 8000742:	f242 03fe 	movw	r3, #8446	@ 0x20fe
 8000746:	613b      	str	r3, [r7, #16]
                          |IR_3_Pin|IR_4_Pin|IR_5_Pin|IR_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000748:	4b43      	ldr	r3, [pc, #268]	@ (8000858 <MX_GPIO_Init+0x1a0>)
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	483e      	ldr	r0, [pc, #248]	@ (8000850 <MX_GPIO_Init+0x198>)
 8000758:	f002 f94c 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IR_PULSE_GEN_Pin|Direction2_Pin|Direction1_Pin;
 800075c:	f240 3301 	movw	r3, #769	@ 0x301
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2302      	movs	r3, #2
 800076c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4619      	mov	r1, r3
 8000774:	4836      	ldr	r0, [pc, #216]	@ (8000850 <MX_GPIO_Init+0x198>)
 8000776:	f002 f93d 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800077a:	2320      	movs	r3, #32
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2302      	movs	r3, #2
 8000788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4619      	mov	r1, r3
 8000790:	4830      	ldr	r0, [pc, #192]	@ (8000854 <MX_GPIO_Init+0x19c>)
 8000792:	f002 f92f 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000796:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	4b2e      	ldr	r3, [pc, #184]	@ (8000858 <MX_GPIO_Init+0x1a0>)
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4619      	mov	r1, r3
 80007aa:	482c      	ldr	r0, [pc, #176]	@ (800085c <MX_GPIO_Init+0x1a4>)
 80007ac:	f002 f922 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Limit_2A_Pin|Limit_2B_Pin;
 80007b0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80007b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b6:	4b28      	ldr	r3, [pc, #160]	@ (8000858 <MX_GPIO_Init+0x1a0>)
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	4619      	mov	r1, r3
 80007c4:	4825      	ldr	r0, [pc, #148]	@ (800085c <MX_GPIO_Init+0x1a4>)
 80007c6:	f002 f915 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Limit_1A_Pin|Limit_1B_Pin;
 80007ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d0:	4b21      	ldr	r3, [pc, #132]	@ (8000858 <MX_GPIO_Init+0x1a0>)
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4619      	mov	r1, r3
 80007de:	481c      	ldr	r0, [pc, #112]	@ (8000850 <MX_GPIO_Init+0x198>)
 80007e0:	f002 f908 	bl	80029f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2100      	movs	r1, #0
 80007e8:	2007      	movs	r0, #7
 80007ea:	f001 fe26 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007ee:	2007      	movs	r0, #7
 80007f0:	f001 fe3f 	bl	8002472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2008      	movs	r0, #8
 80007fa:	f001 fe1e 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007fe:	2008      	movs	r0, #8
 8000800:	f001 fe37 	bl	8002472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2009      	movs	r0, #9
 800080a:	f001 fe16 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800080e:	2009      	movs	r0, #9
 8000810:	f001 fe2f 	bl	8002472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	200a      	movs	r0, #10
 800081a:	f001 fe0e 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800081e:	200a      	movs	r0, #10
 8000820:	f001 fe27 	bl	8002472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2017      	movs	r0, #23
 800082a:	f001 fe06 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800082e:	2017      	movs	r0, #23
 8000830:	f001 fe1f 	bl	8002472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2028      	movs	r0, #40	@ 0x28
 800083a:	f001 fdfe 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800083e:	2028      	movs	r0, #40	@ 0x28
 8000840:	f001 fe17 	bl	8002472 <HAL_NVIC_EnableIRQ>

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	40011000 	.word	0x40011000
 8000854:	40010800 	.word	0x40010800
 8000858:	10110000 	.word	0x10110000
 800085c:	40010c00 	.word	0x40010c00

08000860 <Draw_Arrow>:
const int entryStripSize = sizeof(entryStrip) / sizeof(entryStrip[0]);
const int exitStripSize = sizeof(exitStrip) / sizeof(exitStrip[0]);
const int entryRFIDSize = sizeof(entryRFID) / sizeof(entryRFID[0]);
const int exitRFIDSize = sizeof(exitRFID) / sizeof(exitRFID[0]);
/* Function to draw the arrow on a specified strip */
void Draw_Arrow(WS28XX_HandleTypeDef *ws, int *arrow, int color) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 26; i++) {
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	e010      	b.n	8000894 <Draw_Arrow+0x34>
        WS28XX_SetPixel_RGBW_565(ws, arrow[i], color, brightness);
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	4413      	add	r3, r2
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	b299      	uxth	r1, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	b29a      	uxth	r2, r3
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <Draw_Arrow+0x48>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f004 fecb 	bl	8005624 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 26; i++) {
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	2b19      	cmp	r3, #25
 8000898:	ddeb      	ble.n	8000872 <Draw_Arrow+0x12>
    }
    WS28XX_Update(ws);
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f004 ff36 	bl	800570c <WS28XX_Update>
}
 80008a0:	bf00      	nop
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000004 	.word	0x20000004

080008ac <Clear_Arrow>:

void Clear_Arrow(WS28XX_HandleTypeDef *ws, int *arrow) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 26; i++) {
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	e00d      	b.n	80008d8 <Clear_Arrow+0x2c>
        WS28XX_SetPixel_RGBW_565(ws, arrow[i], COLOR_RGB565_BLACK, 0);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	683a      	ldr	r2, [r7, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	b299      	uxth	r1, r3
 80008c8:	2300      	movs	r3, #0
 80008ca:	2200      	movs	r2, #0
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f004 fea9 	bl	8005624 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 26; i++) {
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	3301      	adds	r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b19      	cmp	r3, #25
 80008dc:	ddee      	ble.n	80008bc <Clear_Arrow+0x10>
    }
    WS28XX_Update(ws);
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f004 ff14 	bl	800570c <WS28XX_Update>
}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <Shift_Arrow_EntryMatrix>:

/* Function to shift the arrow forward by one row, limited to the first strip */
void Shift_Arrow_EntryMatrix(int *arrow) {
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 26; i++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	e023      	b.n	8000942 <Shift_Arrow_EntryMatrix+0x56>
        arrow[i] += 8;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	6879      	ldr	r1, [r7, #4]
 800090a:	440b      	add	r3, r1
 800090c:	3208      	adds	r2, #8
 800090e:	601a      	str	r2, [r3, #0]
        if (arrow[i] >= 256) {  // Wrap around if out of bounds in the entry matrix (0–255)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	4413      	add	r3, r2
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2bff      	cmp	r3, #255	@ 0xff
 800091c:	dd0e      	ble.n	800093c <Shift_Arrow_EntryMatrix+0x50>
            arrow[i] = arrow[i] % 256;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	0092      	lsls	r2, r2, #2
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	440a      	add	r2, r1
 8000930:	4259      	negs	r1, r3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	b2c9      	uxtb	r1, r1
 8000936:	bf58      	it	pl
 8000938:	424b      	negpl	r3, r1
 800093a:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < 26; i++) {
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	3301      	adds	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2b19      	cmp	r3, #25
 8000946:	ddd8      	ble.n	80008fa <Shift_Arrow_EntryMatrix+0xe>
        }
    }
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <Shift_Arrow_ExitMatrix>:

/* Function to shift the arrow forward by one row, limited to the second strip */
void Shift_Arrow_ExitMatrix(int *arrow) {
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 26; i++) {
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	e029      	b.n	80009b6 <Shift_Arrow_ExitMatrix+0x62>
        arrow[i] += 8;  // Move forward by 8 (to the next row)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	6879      	ldr	r1, [r7, #4]
 8000972:	440b      	add	r3, r1
 8000974:	3208      	adds	r2, #8
 8000976:	601a      	str	r2, [r3, #0]
        if (arrow[i] >= 578) {  // Wrap around if the index exceeds the maximum address (577)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	4413      	add	r3, r2
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f240 2241 	movw	r2, #577	@ 0x241
 8000986:	4293      	cmp	r3, r2
 8000988:	dd12      	ble.n	80009b0 <Shift_Arrow_ExitMatrix+0x5c>
            arrow[i] = 322 + ((arrow[i] - 322) % 256);  // Rebase to 0, wrap, and re-add the base offset
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8000998:	425a      	negs	r2, r3
 800099a:	b2db      	uxtb	r3, r3
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	bf58      	it	pl
 80009a0:	4253      	negpl	r3, r2
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	0092      	lsls	r2, r2, #2
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	440a      	add	r2, r1
 80009aa:	f503 73a1 	add.w	r3, r3, #322	@ 0x142
 80009ae:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < 26; i++) {
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	3301      	adds	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	2b19      	cmp	r3, #25
 80009ba:	ddd2      	ble.n	8000962 <Shift_Arrow_ExitMatrix+0xe>
        }
    }
}
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <Led_Strip>:

void Led_Strip(WS28XX_HandleTypeDef *ws, int *strip, int strip_size, char *color) {
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b087      	sub	sp, #28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	603b      	str	r3, [r7, #0]
    uint16_t selected_color; // Variable to hold the selected color value

    // Determine the color based on the input string
    if (strcmp(color, "red") == 0) {
 80009d6:	4929      	ldr	r1, [pc, #164]	@ (8000a7c <Led_Strip+0xb4>)
 80009d8:	6838      	ldr	r0, [r7, #0]
 80009da:	f7ff fbbf 	bl	800015c <strcmp>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d103      	bne.n	80009ec <Led_Strip+0x24>
        selected_color = COLOR_RGB565_RED;
 80009e4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80009e8:	82fb      	strh	r3, [r7, #22]
 80009ea:	e01d      	b.n	8000a28 <Led_Strip+0x60>
    } else if (strcmp(color, "blue") == 0) {
 80009ec:	4924      	ldr	r1, [pc, #144]	@ (8000a80 <Led_Strip+0xb8>)
 80009ee:	6838      	ldr	r0, [r7, #0]
 80009f0:	f7ff fbb4 	bl	800015c <strcmp>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d102      	bne.n	8000a00 <Led_Strip+0x38>
        selected_color = COLOR_RGB565_BLUE;
 80009fa:	231f      	movs	r3, #31
 80009fc:	82fb      	strh	r3, [r7, #22]
 80009fe:	e013      	b.n	8000a28 <Led_Strip+0x60>
    } else if (strcmp(color, "green") == 0) {
 8000a00:	4920      	ldr	r1, [pc, #128]	@ (8000a84 <Led_Strip+0xbc>)
 8000a02:	6838      	ldr	r0, [r7, #0]
 8000a04:	f7ff fbaa 	bl	800015c <strcmp>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d103      	bne.n	8000a16 <Led_Strip+0x4e>
        selected_color = COLOR_RGB565_GREEN;
 8000a0e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000a12:	82fb      	strh	r3, [r7, #22]
 8000a14:	e008      	b.n	8000a28 <Led_Strip+0x60>
    } else if (strcmp(color, "off") == 0) {
 8000a16:	491c      	ldr	r1, [pc, #112]	@ (8000a88 <Led_Strip+0xc0>)
 8000a18:	6838      	ldr	r0, [r7, #0]
 8000a1a:	f7ff fb9f 	bl	800015c <strcmp>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d126      	bne.n	8000a72 <Led_Strip+0xaa>
        selected_color = COLOR_RGB565_BLACK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	82fb      	strh	r3, [r7, #22]
    } else {
        return; // Invalid color; do nothing
    }

    // Set the color for each LED in the strip
    for (int i = 0; i < strip_size; i++) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	e019      	b.n	8000a62 <Led_Strip+0x9a>
        WS28XX_SetPixel_RGBW_565(ws, strip[i], selected_color, (strcmp(color, "off") == 0) ? 0 : brightness);
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	4413      	add	r3, r2
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	b29c      	uxth	r4, r3
 8000a3a:	4913      	ldr	r1, [pc, #76]	@ (8000a88 <Led_Strip+0xc0>)
 8000a3c:	6838      	ldr	r0, [r7, #0]
 8000a3e:	f7ff fb8d 	bl	800015c <strcmp>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <Led_Strip+0x88>
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <Led_Strip+0xc4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	e000      	b.n	8000a52 <Led_Strip+0x8a>
 8000a50:	2300      	movs	r3, #0
 8000a52:	8afa      	ldrh	r2, [r7, #22]
 8000a54:	4621      	mov	r1, r4
 8000a56:	68f8      	ldr	r0, [r7, #12]
 8000a58:	f004 fde4 	bl	8005624 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < strip_size; i++) {
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	dbe1      	blt.n	8000a2e <Led_Strip+0x66>
    }

    // Update the LED strip
    WS28XX_Update(ws);
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f004 fe4e 	bl	800570c <WS28XX_Update>
 8000a70:	e000      	b.n	8000a74 <Led_Strip+0xac>
        return; // Invalid color; do nothing
 8000a72:	bf00      	nop
}
 8000a74:	371c      	adds	r7, #28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd90      	pop	{r4, r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	080061d4 	.word	0x080061d4
 8000a80:	080061d8 	.word	0x080061d8
 8000a84:	080061e0 	.word	0x080061e0
 8000a88:	080061e8 	.word	0x080061e8
 8000a8c:	20000004 	.word	0x20000004

08000a90 <Draw_Cross>:

/* Function to animate the cross pattern */
void Draw_Cross(WS28XX_HandleTypeDef *ws, int *top, int *middle, int *bottom, int color) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 16; i++) {
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	e02c      	b.n	8000afe <Draw_Cross+0x6e>
        WS28XX_SetPixel_RGBW_565(ws, top[i], color, brightness);
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	4413      	add	r3, r2
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	b299      	uxth	r1, r3
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <Draw_Cross+0x84>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f004 fdb2 	bl	8005624 <WS28XX_SetPixel_RGBW_565>
        WS28XX_SetPixel_RGBW_565(ws, middle[i], color, brightness);
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	b299      	uxth	r1, r3
 8000acc:	6a3b      	ldr	r3, [r7, #32]
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <Draw_Cross+0x84>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f004 fda4 	bl	8005624 <WS28XX_SetPixel_RGBW_565>
        WS28XX_SetPixel_RGBW_565(ws, bottom[i], color, brightness);
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	b299      	uxth	r1, r3
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <Draw_Cross+0x84>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f004 fd96 	bl	8005624 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 16; i++) {
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3301      	adds	r3, #1
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	ddcf      	ble.n	8000aa4 <Draw_Cross+0x14>
    }
    WS28XX_Update(ws);
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f004 fe01 	bl	800570c <WS28XX_Update>
}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000004 	.word	0x20000004

08000b18 <Clear_Cross>:

void Clear_Cross(WS28XX_HandleTypeDef *ws, int *top, int *middle, int *bottom) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 16; i++) {
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	e023      	b.n	8000b74 <Clear_Cross+0x5c>
        WS28XX_SetPixel_RGBW_565(ws, top[i], COLOR_RGB565_BLACK, 0);
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	4413      	add	r3, r2
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	b299      	uxth	r1, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f004 fd71 	bl	8005624 <WS28XX_SetPixel_RGBW_565>
        WS28XX_SetPixel_RGBW_565(ws, middle[i], COLOR_RGB565_BLACK, 0);
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	b299      	uxth	r1, r3
 8000b4e:	2300      	movs	r3, #0
 8000b50:	2200      	movs	r2, #0
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f004 fd66 	bl	8005624 <WS28XX_SetPixel_RGBW_565>
        WS28XX_SetPixel_RGBW_565(ws, bottom[i], COLOR_RGB565_BLACK, 0);
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	b299      	uxth	r1, r3
 8000b64:	2300      	movs	r3, #0
 8000b66:	2200      	movs	r2, #0
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f004 fd5b 	bl	8005624 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 16; i++) {
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	2b0f      	cmp	r3, #15
 8000b78:	ddd8      	ble.n	8000b2c <Clear_Cross+0x14>
    }
    WS28XX_Update(ws);
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f004 fdc6 	bl	800570c <WS28XX_Update>
}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <Clear_All_Animations>:

/* Function to clear all animations on both strips */
void Clear_All_Animations(WS28XX_HandleTypeDef *ws) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
    Clear_Arrow(ws, arrow_entry_matrix);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4918      	ldr	r1, [pc, #96]	@ (8000bf4 <Clear_All_Animations+0x6c>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fe89 	bl	80008ac <Clear_Arrow>
    Clear_Arrow(ws, arrow_exit_matrix);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4916      	ldr	r1, [pc, #88]	@ (8000bf8 <Clear_All_Animations+0x70>)
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fe84 	bl	80008ac <Clear_Arrow>
    Clear_Cross(ws, topCross_entry_matrix, middleCross_entry_matrix, bottomCross_entry_matrix);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <Clear_All_Animations+0x74>)
 8000ba8:	4a15      	ldr	r2, [pc, #84]	@ (8000c00 <Clear_All_Animations+0x78>)
 8000baa:	4916      	ldr	r1, [pc, #88]	@ (8000c04 <Clear_All_Animations+0x7c>)
 8000bac:	f7ff ffb4 	bl	8000b18 <Clear_Cross>
    Clear_Cross(ws, topCross_exit_matrix, middleCross_exit_matrix, bottomCross_exit_matrix);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <Clear_All_Animations+0x80>)
 8000bb4:	4a15      	ldr	r2, [pc, #84]	@ (8000c0c <Clear_All_Animations+0x84>)
 8000bb6:	4916      	ldr	r1, [pc, #88]	@ (8000c10 <Clear_All_Animations+0x88>)
 8000bb8:	f7ff ffae 	bl	8000b18 <Clear_Cross>
    Led_Strip(&ws, entryStrip, entryStripSize, "off");
 8000bbc:	2213      	movs	r2, #19
 8000bbe:	1d38      	adds	r0, r7, #4
 8000bc0:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <Clear_All_Animations+0x8c>)
 8000bc2:	4915      	ldr	r1, [pc, #84]	@ (8000c18 <Clear_All_Animations+0x90>)
 8000bc4:	f7ff ff00 	bl	80009c8 <Led_Strip>
    Led_Strip(&ws, entryRFID, entryRFIDSize, "off");
 8000bc8:	2214      	movs	r2, #20
 8000bca:	1d38      	adds	r0, r7, #4
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <Clear_All_Animations+0x8c>)
 8000bce:	4913      	ldr	r1, [pc, #76]	@ (8000c1c <Clear_All_Animations+0x94>)
 8000bd0:	f7ff fefa 	bl	80009c8 <Led_Strip>
    Led_Strip(&ws, exitStrip, exitStripSize, "off");
 8000bd4:	2213      	movs	r2, #19
 8000bd6:	1d38      	adds	r0, r7, #4
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <Clear_All_Animations+0x8c>)
 8000bda:	4911      	ldr	r1, [pc, #68]	@ (8000c20 <Clear_All_Animations+0x98>)
 8000bdc:	f7ff fef4 	bl	80009c8 <Led_Strip>
    Led_Strip(&ws, exitRFID, exitRFIDSize, "off");
 8000be0:	2214      	movs	r2, #20
 8000be2:	1d38      	adds	r0, r7, #4
 8000be4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <Clear_All_Animations+0x8c>)
 8000be6:	490f      	ldr	r1, [pc, #60]	@ (8000c24 <Clear_All_Animations+0x9c>)
 8000be8:	f7ff feee 	bl	80009c8 <Led_Strip>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000000c 	.word	0x2000000c
 8000bf8:	20000074 	.word	0x20000074
 8000bfc:	2000015c 	.word	0x2000015c
 8000c00:	2000011c 	.word	0x2000011c
 8000c04:	200000dc 	.word	0x200000dc
 8000c08:	2000021c 	.word	0x2000021c
 8000c0c:	200001dc 	.word	0x200001dc
 8000c10:	2000019c 	.word	0x2000019c
 8000c14:	080061e8 	.word	0x080061e8
 8000c18:	2000025c 	.word	0x2000025c
 8000c1c:	200002f4 	.word	0x200002f4
 8000c20:	200002a8 	.word	0x200002a8
 8000c24:	20000344 	.word	0x20000344

08000c28 <Entry_Granted_Animation>:


void Entry_Granted_Animation(WS28XX_HandleTypeDef *ws) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af02      	add	r7, sp, #8
 8000c2e:	6078      	str	r0, [r7, #4]
    static uint32_t last_update_time = 0;

    if (HAL_GetTick() - last_update_time >= DELAY_TIME) {
 8000c30:	f001 fae8 	bl	8002204 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <Entry_Granted_Animation+0xb4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	2b63      	cmp	r3, #99	@ 0x63
 8000c3e:	d949      	bls.n	8000cd4 <Entry_Granted_Animation+0xac>
        last_update_time = HAL_GetTick();
 8000c40:	f001 fae0 	bl	8002204 <HAL_GetTick>
 8000c44:	4603      	mov	r3, r0
 8000c46:	4a25      	ldr	r2, [pc, #148]	@ (8000cdc <Entry_Granted_Animation+0xb4>)
 8000c48:	6013      	str	r3, [r2, #0]

        Clear_Arrow(ws, arrow_entry_matrix);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4924      	ldr	r1, [pc, #144]	@ (8000ce0 <Entry_Granted_Animation+0xb8>)
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fe2c 	bl	80008ac <Clear_Arrow>
        Shift_Arrow_EntryMatrix(arrow_entry_matrix);
 8000c54:	4822      	ldr	r0, [pc, #136]	@ (8000ce0 <Entry_Granted_Animation+0xb8>)
 8000c56:	f7ff fe49 	bl	80008ec <Shift_Arrow_EntryMatrix>
        Draw_Arrow(ws, arrow_entry_matrix, COLOR_RGB565_GREEN);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000c60:	491f      	ldr	r1, [pc, #124]	@ (8000ce0 <Entry_Granted_Animation+0xb8>)
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fdfc 	bl	8000860 <Draw_Arrow>

        Led_Strip(&ws, entryStrip, entryStripSize, "green");
 8000c68:	2213      	movs	r2, #19
 8000c6a:	1d38      	adds	r0, r7, #4
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <Entry_Granted_Animation+0xbc>)
 8000c6e:	491e      	ldr	r1, [pc, #120]	@ (8000ce8 <Entry_Granted_Animation+0xc0>)
 8000c70:	f7ff feaa 	bl	80009c8 <Led_Strip>
        Led_Strip(&ws, entryRFID, entryRFIDSize, "green");
 8000c74:	2214      	movs	r2, #20
 8000c76:	1d38      	adds	r0, r7, #4
 8000c78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <Entry_Granted_Animation+0xbc>)
 8000c7a:	491c      	ldr	r1, [pc, #112]	@ (8000cec <Entry_Granted_Animation+0xc4>)
 8000c7c:	f7ff fea4 	bl	80009c8 <Led_Strip>
        Led_Strip(&ws, exitStrip, exitStripSize, "red");
 8000c80:	2213      	movs	r2, #19
 8000c82:	1d38      	adds	r0, r7, #4
 8000c84:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <Entry_Granted_Animation+0xc8>)
 8000c86:	491b      	ldr	r1, [pc, #108]	@ (8000cf4 <Entry_Granted_Animation+0xcc>)
 8000c88:	f7ff fe9e 	bl	80009c8 <Led_Strip>
        Led_Strip(&ws, exitRFID, exitRFIDSize, "red");
 8000c8c:	2214      	movs	r2, #20
 8000c8e:	1d38      	adds	r0, r7, #4
 8000c90:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <Entry_Granted_Animation+0xc8>)
 8000c92:	4919      	ldr	r1, [pc, #100]	@ (8000cf8 <Entry_Granted_Animation+0xd0>)
 8000c94:	f7ff fe98 	bl	80009c8 <Led_Strip>

        if (cross_state) {
 8000c98:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <Entry_Granted_Animation+0xd4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d009      	beq.n	8000cb4 <Entry_Granted_Animation+0x8c>
            Draw_Cross(ws, topCross_exit_matrix, middleCross_exit_matrix, bottomCross_exit_matrix, COLOR_RGB565_RED);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <Entry_Granted_Animation+0xd8>)
 8000caa:	4a16      	ldr	r2, [pc, #88]	@ (8000d04 <Entry_Granted_Animation+0xdc>)
 8000cac:	4916      	ldr	r1, [pc, #88]	@ (8000d08 <Entry_Granted_Animation+0xe0>)
 8000cae:	f7ff feef 	bl	8000a90 <Draw_Cross>
 8000cb2:	e005      	b.n	8000cc0 <Entry_Granted_Animation+0x98>
        } else {
            Clear_Cross(ws, topCross_exit_matrix, middleCross_exit_matrix, bottomCross_exit_matrix);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <Entry_Granted_Animation+0xd8>)
 8000cb8:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <Entry_Granted_Animation+0xdc>)
 8000cba:	4913      	ldr	r1, [pc, #76]	@ (8000d08 <Entry_Granted_Animation+0xe0>)
 8000cbc:	f7ff ff2c 	bl	8000b18 <Clear_Cross>
        }
        cross_state = !cross_state;
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <Entry_Granted_Animation+0xd4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	bf0c      	ite	eq
 8000cc8:	2301      	moveq	r3, #1
 8000cca:	2300      	movne	r3, #0
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <Entry_Granted_Animation+0xd4>)
 8000cd2:	601a      	str	r2, [r3, #0]
    }
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20004158 	.word	0x20004158
 8000ce0:	2000000c 	.word	0x2000000c
 8000ce4:	080061e0 	.word	0x080061e0
 8000ce8:	2000025c 	.word	0x2000025c
 8000cec:	200002f4 	.word	0x200002f4
 8000cf0:	080061d4 	.word	0x080061d4
 8000cf4:	200002a8 	.word	0x200002a8
 8000cf8:	20000344 	.word	0x20000344
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	2000021c 	.word	0x2000021c
 8000d04:	200001dc 	.word	0x200001dc
 8000d08:	2000019c 	.word	0x2000019c

08000d0c <Exit_Granted_Animation>:


void Exit_Granted_Animation(WS28XX_HandleTypeDef *ws) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	6078      	str	r0, [r7, #4]
    static uint32_t last_update_time = 0;

    if (HAL_GetTick() - last_update_time >= DELAY_TIME) {
 8000d14:	f001 fa76 	bl	8002204 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	4b29      	ldr	r3, [pc, #164]	@ (8000dc0 <Exit_Granted_Animation+0xb4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b63      	cmp	r3, #99	@ 0x63
 8000d22:	d949      	bls.n	8000db8 <Exit_Granted_Animation+0xac>
        last_update_time = HAL_GetTick();
 8000d24:	f001 fa6e 	bl	8002204 <HAL_GetTick>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4a25      	ldr	r2, [pc, #148]	@ (8000dc0 <Exit_Granted_Animation+0xb4>)
 8000d2c:	6013      	str	r3, [r2, #0]

        if (cross_state) {
 8000d2e:	4b25      	ldr	r3, [pc, #148]	@ (8000dc4 <Exit_Granted_Animation+0xb8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d009      	beq.n	8000d4a <Exit_Granted_Animation+0x3e>
            Draw_Cross(ws, topCross_entry_matrix, middleCross_entry_matrix, bottomCross_entry_matrix, COLOR_RGB565_RED);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	4b22      	ldr	r3, [pc, #136]	@ (8000dc8 <Exit_Granted_Animation+0xbc>)
 8000d40:	4a22      	ldr	r2, [pc, #136]	@ (8000dcc <Exit_Granted_Animation+0xc0>)
 8000d42:	4923      	ldr	r1, [pc, #140]	@ (8000dd0 <Exit_Granted_Animation+0xc4>)
 8000d44:	f7ff fea4 	bl	8000a90 <Draw_Cross>
 8000d48:	e005      	b.n	8000d56 <Exit_Granted_Animation+0x4a>
        } else {
            Clear_Cross(ws, topCross_entry_matrix, middleCross_entry_matrix, bottomCross_entry_matrix);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc8 <Exit_Granted_Animation+0xbc>)
 8000d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dcc <Exit_Granted_Animation+0xc0>)
 8000d50:	491f      	ldr	r1, [pc, #124]	@ (8000dd0 <Exit_Granted_Animation+0xc4>)
 8000d52:	f7ff fee1 	bl	8000b18 <Clear_Cross>
        }
        cross_state = !cross_state;
 8000d56:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <Exit_Granted_Animation+0xb8>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	bf0c      	ite	eq
 8000d5e:	2301      	moveq	r3, #1
 8000d60:	2300      	movne	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b17      	ldr	r3, [pc, #92]	@ (8000dc4 <Exit_Granted_Animation+0xb8>)
 8000d68:	601a      	str	r2, [r3, #0]

        Led_Strip(&ws, entryStrip, entryStripSize, "red");
 8000d6a:	2213      	movs	r2, #19
 8000d6c:	1d38      	adds	r0, r7, #4
 8000d6e:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <Exit_Granted_Animation+0xc8>)
 8000d70:	4919      	ldr	r1, [pc, #100]	@ (8000dd8 <Exit_Granted_Animation+0xcc>)
 8000d72:	f7ff fe29 	bl	80009c8 <Led_Strip>
        Led_Strip(&ws, entryRFID, entryRFIDSize, "red");
 8000d76:	2214      	movs	r2, #20
 8000d78:	1d38      	adds	r0, r7, #4
 8000d7a:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <Exit_Granted_Animation+0xc8>)
 8000d7c:	4917      	ldr	r1, [pc, #92]	@ (8000ddc <Exit_Granted_Animation+0xd0>)
 8000d7e:	f7ff fe23 	bl	80009c8 <Led_Strip>
        Led_Strip(&ws, exitStrip, exitStripSize, "green");
 8000d82:	2213      	movs	r2, #19
 8000d84:	1d38      	adds	r0, r7, #4
 8000d86:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <Exit_Granted_Animation+0xd4>)
 8000d88:	4916      	ldr	r1, [pc, #88]	@ (8000de4 <Exit_Granted_Animation+0xd8>)
 8000d8a:	f7ff fe1d 	bl	80009c8 <Led_Strip>
        Led_Strip(&ws, exitRFID, exitRFIDSize, "green");
 8000d8e:	2214      	movs	r2, #20
 8000d90:	1d38      	adds	r0, r7, #4
 8000d92:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <Exit_Granted_Animation+0xd4>)
 8000d94:	4914      	ldr	r1, [pc, #80]	@ (8000de8 <Exit_Granted_Animation+0xdc>)
 8000d96:	f7ff fe17 	bl	80009c8 <Led_Strip>

        Clear_Arrow(ws, arrow_exit_matrix);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4913      	ldr	r1, [pc, #76]	@ (8000dec <Exit_Granted_Animation+0xe0>)
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fd84 	bl	80008ac <Clear_Arrow>
        Shift_Arrow_ExitMatrix(arrow_exit_matrix);
 8000da4:	4811      	ldr	r0, [pc, #68]	@ (8000dec <Exit_Granted_Animation+0xe0>)
 8000da6:	f7ff fdd5 	bl	8000954 <Shift_Arrow_ExitMatrix>
        Draw_Arrow(ws, arrow_exit_matrix, COLOR_RGB565_GREEN);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000db0:	490e      	ldr	r1, [pc, #56]	@ (8000dec <Exit_Granted_Animation+0xe0>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fd54 	bl	8000860 <Draw_Arrow>
    }
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000415c 	.word	0x2000415c
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	2000015c 	.word	0x2000015c
 8000dcc:	2000011c 	.word	0x2000011c
 8000dd0:	200000dc 	.word	0x200000dc
 8000dd4:	080061d4 	.word	0x080061d4
 8000dd8:	2000025c 	.word	0x2000025c
 8000ddc:	200002f4 	.word	0x200002f4
 8000de0:	080061e0 	.word	0x080061e0
 8000de4:	200002a8 	.word	0x200002a8
 8000de8:	20000344 	.word	0x20000344
 8000dec:	20000074 	.word	0x20000074

08000df0 <Access_Denied_Animation>:
        Draw_Arrow(ws, arrow_exit_matrix, COLOR_RGB565_GREEN);
    }
}

/* Function 4: Cross animation on both strips */
void Access_Denied_Animation(WS28XX_HandleTypeDef *ws) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	6078      	str	r0, [r7, #4]
    static uint32_t last_update_time = 0;

    if (HAL_GetTick() - last_update_time >= DELAY_TIME) {
 8000df8:	f001 fa04 	bl	8002204 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	4b29      	ldr	r3, [pc, #164]	@ (8000ea4 <Access_Denied_Animation+0xb4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b63      	cmp	r3, #99	@ 0x63
 8000e06:	d949      	bls.n	8000e9c <Access_Denied_Animation+0xac>
        last_update_time = HAL_GetTick();
 8000e08:	f001 f9fc 	bl	8002204 <HAL_GetTick>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a25      	ldr	r2, [pc, #148]	@ (8000ea4 <Access_Denied_Animation+0xb4>)
 8000e10:	6013      	str	r3, [r2, #0]

        if (cross_state) {
 8000e12:	4b25      	ldr	r3, [pc, #148]	@ (8000ea8 <Access_Denied_Animation+0xb8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d012      	beq.n	8000e40 <Access_Denied_Animation+0x50>
            Draw_Cross(ws, topCross_entry_matrix, middleCross_entry_matrix, bottomCross_entry_matrix, COLOR_RGB565_RED);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	4b22      	ldr	r3, [pc, #136]	@ (8000eac <Access_Denied_Animation+0xbc>)
 8000e24:	4a22      	ldr	r2, [pc, #136]	@ (8000eb0 <Access_Denied_Animation+0xc0>)
 8000e26:	4923      	ldr	r1, [pc, #140]	@ (8000eb4 <Access_Denied_Animation+0xc4>)
 8000e28:	f7ff fe32 	bl	8000a90 <Draw_Cross>
            Draw_Cross(ws, topCross_exit_matrix, middleCross_exit_matrix, bottomCross_exit_matrix, COLOR_RGB565_RED);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <Access_Denied_Animation+0xc8>)
 8000e36:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <Access_Denied_Animation+0xcc>)
 8000e38:	4921      	ldr	r1, [pc, #132]	@ (8000ec0 <Access_Denied_Animation+0xd0>)
 8000e3a:	f7ff fe29 	bl	8000a90 <Draw_Cross>
 8000e3e:	e00b      	b.n	8000e58 <Access_Denied_Animation+0x68>
        } else {
            Clear_Cross(ws, topCross_entry_matrix, middleCross_entry_matrix, bottomCross_entry_matrix);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <Access_Denied_Animation+0xbc>)
 8000e44:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb0 <Access_Denied_Animation+0xc0>)
 8000e46:	491b      	ldr	r1, [pc, #108]	@ (8000eb4 <Access_Denied_Animation+0xc4>)
 8000e48:	f7ff fe66 	bl	8000b18 <Clear_Cross>
            Clear_Cross(ws, topCross_exit_matrix, middleCross_exit_matrix, bottomCross_exit_matrix);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <Access_Denied_Animation+0xc8>)
 8000e50:	4a1a      	ldr	r2, [pc, #104]	@ (8000ebc <Access_Denied_Animation+0xcc>)
 8000e52:	491b      	ldr	r1, [pc, #108]	@ (8000ec0 <Access_Denied_Animation+0xd0>)
 8000e54:	f7ff fe60 	bl	8000b18 <Clear_Cross>
        }
        cross_state = !cross_state;
 8000e58:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <Access_Denied_Animation+0xb8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	bf0c      	ite	eq
 8000e60:	2301      	moveq	r3, #1
 8000e62:	2300      	movne	r3, #0
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <Access_Denied_Animation+0xb8>)
 8000e6a:	601a      	str	r2, [r3, #0]

        Led_Strip(&ws, entryStrip, entryStripSize, "red");
 8000e6c:	2213      	movs	r2, #19
 8000e6e:	1d38      	adds	r0, r7, #4
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <Access_Denied_Animation+0xd4>)
 8000e72:	4915      	ldr	r1, [pc, #84]	@ (8000ec8 <Access_Denied_Animation+0xd8>)
 8000e74:	f7ff fda8 	bl	80009c8 <Led_Strip>
        Led_Strip(&ws, entryRFID, entryRFIDSize, "red");
 8000e78:	2214      	movs	r2, #20
 8000e7a:	1d38      	adds	r0, r7, #4
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <Access_Denied_Animation+0xd4>)
 8000e7e:	4913      	ldr	r1, [pc, #76]	@ (8000ecc <Access_Denied_Animation+0xdc>)
 8000e80:	f7ff fda2 	bl	80009c8 <Led_Strip>
        Led_Strip(&ws, exitStrip, exitStripSize, "red");
 8000e84:	2213      	movs	r2, #19
 8000e86:	1d38      	adds	r0, r7, #4
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <Access_Denied_Animation+0xd4>)
 8000e8a:	4911      	ldr	r1, [pc, #68]	@ (8000ed0 <Access_Denied_Animation+0xe0>)
 8000e8c:	f7ff fd9c 	bl	80009c8 <Led_Strip>
        Led_Strip(&ws, exitRFID, exitRFIDSize, "red");
 8000e90:	2214      	movs	r2, #20
 8000e92:	1d38      	adds	r0, r7, #4
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <Access_Denied_Animation+0xd4>)
 8000e96:	490f      	ldr	r1, [pc, #60]	@ (8000ed4 <Access_Denied_Animation+0xe4>)
 8000e98:	f7ff fd96 	bl	80009c8 <Led_Strip>
    }
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20004160 	.word	0x20004160
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	2000015c 	.word	0x2000015c
 8000eb0:	2000011c 	.word	0x2000011c
 8000eb4:	200000dc 	.word	0x200000dc
 8000eb8:	2000021c 	.word	0x2000021c
 8000ebc:	200001dc 	.word	0x200001dc
 8000ec0:	2000019c 	.word	0x2000019c
 8000ec4:	080061d4 	.word	0x080061d4
 8000ec8:	2000025c 	.word	0x2000025c
 8000ecc:	200002f4 	.word	0x200002f4
 8000ed0:	200002a8 	.word	0x200002a8
 8000ed4:	20000344 	.word	0x20000344

08000ed8 <Speed_Control1>:
}


//MOTOR CONTROL FUNCTIONS
void Speed_Control1(int a)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, a);
 8000ee0:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <Speed_Control1+0x1c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	635a      	str	r2, [r3, #52]	@ 0x34
	//__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, a - 30);
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20004210 	.word	0x20004210

08000ef8 <Speed_Control2>:
void Speed_Control2(int a)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, a);
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, a);
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <Speed_Control2+0x1c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20004210 	.word	0x20004210

08000f18 <Direction>:

void Direction(int a)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	if(a==1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d10b      	bne.n	8000f3e <Direction+0x26>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f2c:	480d      	ldr	r0, [pc, #52]	@ (8000f64 <Direction+0x4c>)
 8000f2e:	f001 fee5 	bl	8002cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f38:	480a      	ldr	r0, [pc, #40]	@ (8000f64 <Direction+0x4c>)
 8000f3a:	f001 fedf 	bl	8002cfc <HAL_GPIO_WritePin>
	}
	if(a==0)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10b      	bne.n	8000f5c <Direction+0x44>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f4a:	4806      	ldr	r0, [pc, #24]	@ (8000f64 <Direction+0x4c>)
 8000f4c:	f001 fed6 	bl	8002cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f56:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <Direction+0x4c>)
 8000f58:	f001 fed0 	bl	8002cfc <HAL_GPIO_WritePin>
	}
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40011000 	.word	0x40011000

08000f68 <HAL_GPIO_EXTI_Callback>:

const uint16_t pulse_pins[NUM_SENSORS] = {GPIO_PIN_1, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
        if (GPIO_Pin == pulse_pins[i]) {
            last_pulse_received_time[i] = HAL_GetTick();
            return; // Exit after updating the correct sensor
        }
    }*/
	if(GPIO_Pin == GPIO_PIN_12)
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f78:	d110      	bne.n	8000f9c <HAL_GPIO_EXTI_Callback+0x34>
	{
			counter1++;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <HAL_GPIO_EXTI_Callback+0x84>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a1a      	ldr	r2, [pc, #104]	@ (8000fec <HAL_GPIO_EXTI_Callback+0x84>)
 8000f82:	6013      	str	r3, [r2, #0]
			if(counter1 == 598)
 8000f84:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <HAL_GPIO_EXTI_Callback+0x84>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f240 2256 	movw	r2, #598	@ 0x256
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d105      	bne.n	8000f9c <HAL_GPIO_EXTI_Callback+0x34>
			{
				Speed_Control1(0);
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ffa1 	bl	8000ed8 <Speed_Control1>
				counter1 = 0;
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_GPIO_EXTI_Callback+0x84>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
			}
	}
	if(GPIO_Pin == GPIO_PIN_2)
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d10f      	bne.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x5a>
	{
			counter2++;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4a11      	ldr	r2, [pc, #68]	@ (8000ff0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000faa:	6013      	str	r3, [r2, #0]
			if(counter2 == 520)
 8000fac:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 8000fb4:	d105      	bne.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x5a>
			{
				Speed_Control2(0);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff ff9e 	bl	8000ef8 <Speed_Control2>
				counter2 = 0;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
			}
	}
	if(GPIO_Pin == GPIO_PIN_13)
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fc8:	d10b      	bne.n	8000fe2 <HAL_GPIO_EXTI_Callback+0x7a>
	{
			counter1 = 0;
 8000fca:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <HAL_GPIO_EXTI_Callback+0x84>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
			counter2 = 0;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
			Speed_Control1(0);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff ff7e 	bl	8000ed8 <Speed_Control1>
			Speed_Control2(0);
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f7ff ff8b 	bl	8000ef8 <Speed_Control2>
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20004150 	.word	0x20004150
 8000ff0:	20004154 	.word	0x20004154

08000ff4 <quarter_cycle_open>:

void quarter_cycle_open(int source) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    uint32_t start_time = HAL_GetTick();  // Record the start time
 8000ffc:	f001 f902 	bl	8002204 <HAL_GetTick>
 8001000:	60f8      	str	r0, [r7, #12]
    counter1 = 0;  // Reset the counter at the start of the operation
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <quarter_cycle_open+0x48>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
    counter2 = 0;
 8001008:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <quarter_cycle_open+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]

    // Set motor direction based on the source
    if (source == 1) {
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d103      	bne.n	800101c <quarter_cycle_open+0x28>
        Direction(0);  // Direction for source 1
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff ff7f 	bl	8000f18 <Direction>
 800101a:	e005      	b.n	8001028 <quarter_cycle_open+0x34>
    } else if (source == 2) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d102      	bne.n	8001028 <quarter_cycle_open+0x34>
        Direction(1);  // Direction for source 2
 8001022:	2001      	movs	r0, #1
 8001024:	f7ff ff78 	bl	8000f18 <Direction>
    }

	Speed_Control1(100);
 8001028:	2064      	movs	r0, #100	@ 0x64
 800102a:	f7ff ff55 	bl	8000ed8 <Speed_Control1>
	Speed_Control2(80);
 800102e:	2050      	movs	r0, #80	@ 0x50
 8001030:	f7ff ff62 	bl	8000ef8 <Speed_Control2>



}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20004150 	.word	0x20004150
 8001040:	20004154 	.word	0x20004154

08001044 <quarter_cycle_closed>:

void quarter_cycle_closed(int source) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
    uint32_t start_time = HAL_GetTick();  // Record the start time
 800104c:	f001 f8da 	bl	8002204 <HAL_GetTick>
 8001050:	60f8      	str	r0, [r7, #12]
    counter1 = 0;  // Reset the counter at the start of the operation
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <quarter_cycle_closed+0x48>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
    counter2 = 0;
 8001058:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <quarter_cycle_closed+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
    // Set motor direction based on the source
    if (source == 1) {
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d103      	bne.n	800106c <quarter_cycle_closed+0x28>
        Direction(1);  // Direction for source 1
 8001064:	2001      	movs	r0, #1
 8001066:	f7ff ff57 	bl	8000f18 <Direction>
 800106a:	e005      	b.n	8001078 <quarter_cycle_closed+0x34>
    } else if (source == 2) {
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d102      	bne.n	8001078 <quarter_cycle_closed+0x34>
        Direction(0);  // Direction for source 2
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff ff50 	bl	8000f18 <Direction>
    }

	Speed_Control1(100);
 8001078:	2064      	movs	r0, #100	@ 0x64
 800107a:	f7ff ff2d 	bl	8000ed8 <Speed_Control1>
	Speed_Control2(80);
 800107e:	2050      	movs	r0, #80	@ 0x50
 8001080:	f7ff ff3a 	bl	8000ef8 <Speed_Control2>

}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20004150 	.word	0x20004150
 8001090:	20004154 	.word	0x20004154

08001094 <ready_state>:

//STATE FUNCTIONS

void ready_state(void) {
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
            currentState = STATE_READING;
        }
    }*/
    //Ready_State_Animation(&ws);

    if (flag_rev == 1) {
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <ready_state+0x2c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d109      	bne.n	80010b6 <ready_state+0x22>
        currentState = STATE_READING;
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <ready_state+0x30>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
        RFID_counter++;
 80010a8:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <ready_state+0x34>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	3301      	adds	r3, #1
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <ready_state+0x34>)
 80010b4:	701a      	strb	r2, [r3, #0]
    }
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20004147 	.word	0x20004147
 80010c4:	20004114 	.word	0x20004114
 80010c8:	20004149 	.word	0x20004149

080010cc <reading_state>:

void reading_state(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0

    if (flag_rev == 1) {
 80010d0:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <reading_state+0x80>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d10b      	bne.n	80010f2 <reading_state+0x26>
    	//sprintf(usermsg, "%s", processedData);
        HAL_UART_Transmit_IT(&huart2, (uint8_t *)usermsg, sizeof(usermsg));
 80010da:	220f      	movs	r2, #15
 80010dc:	491c      	ldr	r1, [pc, #112]	@ (8001150 <reading_state+0x84>)
 80010de:	481d      	ldr	r0, [pc, #116]	@ (8001154 <reading_state+0x88>)
 80010e0:	f003 fc17 	bl	8004912 <HAL_UART_Transmit_IT>
        HAL_Delay(1000);
 80010e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010e8:	f001 f896 	bl	8002218 <HAL_Delay>
        flag_rev = 0;
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <reading_state+0x80>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
    }

    // NOS Potential Responses Setup
    switch (intresponseData) {
 80010f2:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <reading_state+0x8c>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	d826      	bhi.n	8001148 <reading_state+0x7c>
 80010fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001100 <reading_state+0x34>)
 80010fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001100:	08001119 	.word	0x08001119
 8001104:	08001121 	.word	0x08001121
 8001108:	08001129 	.word	0x08001129
 800110c:	08001131 	.word	0x08001131
 8001110:	08001139 	.word	0x08001139
 8001114:	08001141 	.word	0x08001141
        case 0: currentState = STATE_READY; break;
 8001118:	4b10      	ldr	r3, [pc, #64]	@ (800115c <reading_state+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	e013      	b.n	8001148 <reading_state+0x7c>
        case 1: currentState = STATE_OPEN; break;
 8001120:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <reading_state+0x90>)
 8001122:	2202      	movs	r2, #2
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	e00f      	b.n	8001148 <reading_state+0x7c>
        case 2: currentState = STATE_CLOSED; break;
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <reading_state+0x90>)
 800112a:	2203      	movs	r2, #3
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	e00b      	b.n	8001148 <reading_state+0x7c>
        case 3: currentState = STATE_EMERGENCY; break;
 8001130:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <reading_state+0x90>)
 8001132:	2206      	movs	r2, #6
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	e007      	b.n	8001148 <reading_state+0x7c>
        case 4: currentState = STATE_SLEEP; break;
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <reading_state+0x90>)
 800113a:	2205      	movs	r2, #5
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e003      	b.n	8001148 <reading_state+0x7c>
        case 5: currentState = STATE_OVERCAPACITY; break;
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <reading_state+0x90>)
 8001142:	2204      	movs	r2, #4
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	bf00      	nop
    }
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20004147 	.word	0x20004147
 8001150:	20004138 	.word	0x20004138
 8001154:	20004328 	.word	0x20004328
 8001158:	2000414e 	.word	0x2000414e
 800115c:	20004114 	.word	0x20004114

08001160 <open_state>:

void open_state(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    static uint32_t start_time = 0;
    static int step = 0;

    if (step == 0) {
 8001164:	4b29      	ldr	r3, [pc, #164]	@ (800120c <open_state+0xac>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d110      	bne.n	800118e <open_state+0x2e>
        Clear_All_Animations(&ws);
 800116c:	4828      	ldr	r0, [pc, #160]	@ (8001210 <open_state+0xb0>)
 800116e:	f7ff fd0b 	bl	8000b88 <Clear_All_Animations>
        quarter_cycle_open(uart_source);
 8001172:	4b28      	ldr	r3, [pc, #160]	@ (8001214 <open_state+0xb4>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff3b 	bl	8000ff4 <quarter_cycle_open>
        start_time = HAL_GetTick();
 800117e:	f001 f841 	bl	8002204 <HAL_GetTick>
 8001182:	4603      	mov	r3, r0
 8001184:	4a24      	ldr	r2, [pc, #144]	@ (8001218 <open_state+0xb8>)
 8001186:	6013      	str	r3, [r2, #0]
        step = 1;
 8001188:	4b20      	ldr	r3, [pc, #128]	@ (800120c <open_state+0xac>)
 800118a:	2201      	movs	r2, #1
 800118c:	601a      	str	r2, [r3, #0]
    }

    if (step == 1 && HAL_GetTick() - start_time >= 2000) {
 800118e:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <open_state+0xac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d10b      	bne.n	80011ae <open_state+0x4e>
 8001196:	f001 f835 	bl	8002204 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <open_state+0xb8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011a6:	d302      	bcc.n	80011ae <open_state+0x4e>
        // Step 1: Wait for 2 seconds after opening
        step = 2;
 80011a8:	4b18      	ldr	r3, [pc, #96]	@ (800120c <open_state+0xac>)
 80011aa:	2202      	movs	r2, #2
 80011ac:	601a      	str	r2, [r3, #0]
    }

    if (step == 2) {
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <open_state+0xac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d117      	bne.n	80011e6 <open_state+0x86>
                Entry_Granted_Animation(&ws);
            } else if (uart_source == 2) {
                Exit_Granted_Animation(&ws);
            }
        }*/
        if (uart_source == 1) {
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <open_state+0xb4>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d103      	bne.n	80011c8 <open_state+0x68>
            Entry_Granted_Animation(&ws);
 80011c0:	4813      	ldr	r0, [pc, #76]	@ (8001210 <open_state+0xb0>)
 80011c2:	f7ff fd31 	bl	8000c28 <Entry_Granted_Animation>
 80011c6:	e007      	b.n	80011d8 <open_state+0x78>
        } else if (uart_source == 2) {
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <open_state+0xb4>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d102      	bne.n	80011d8 <open_state+0x78>
            Exit_Granted_Animation(&ws);
 80011d2:	480f      	ldr	r0, [pc, #60]	@ (8001210 <open_state+0xb0>)
 80011d4:	f7ff fd9a 	bl	8000d0c <Exit_Granted_Animation>
        }
        HAL_Delay(4000);
 80011d8:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80011dc:	f001 f81c 	bl	8002218 <HAL_Delay>

        // No object detected, proceed to close the doors
        step = 3;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <open_state+0xac>)
 80011e2:	2203      	movs	r2, #3
 80011e4:	601a      	str	r2, [r3, #0]
    }

    if (step == 3) {
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <open_state+0xac>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d10b      	bne.n	8001206 <open_state+0xa6>
        quarter_cycle_closed(uart_source);
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <open_state+0xb4>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff25 	bl	8001044 <quarter_cycle_closed>
        currentState = STATE_READY;
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <open_state+0xbc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
        step = 0; // Reset step for the next cycle
 8001200:	4b02      	ldr	r3, [pc, #8]	@ (800120c <open_state+0xac>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
    }
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20004164 	.word	0x20004164
 8001210:	2000040c 	.word	0x2000040c
 8001214:	20004148 	.word	0x20004148
 8001218:	20004168 	.word	0x20004168
 800121c:	20004114 	.word	0x20004114

08001220 <closed_state>:

void closed_state(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
    static uint32_t start_time = 0;

    if (start_time == 0) {
 8001224:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <closed_state+0x48>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d107      	bne.n	800123c <closed_state+0x1c>
        start_time = HAL_GetTick();
 800122c:	f000 ffea 	bl	8002204 <HAL_GetTick>
 8001230:	4603      	mov	r3, r0
 8001232:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <closed_state+0x48>)
 8001234:	6013      	str	r3, [r2, #0]
        Clear_All_Animations(&ws);
 8001236:	480d      	ldr	r0, [pc, #52]	@ (800126c <closed_state+0x4c>)
 8001238:	f7ff fca6 	bl	8000b88 <Clear_All_Animations>
    }

    if (HAL_GetTick() - start_time < 2000) {
 800123c:	f000 ffe2 	bl	8002204 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <closed_state+0x48>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800124c:	d203      	bcs.n	8001256 <closed_state+0x36>
        Access_Denied_Animation(&ws);
 800124e:	4807      	ldr	r0, [pc, #28]	@ (800126c <closed_state+0x4c>)
 8001250:	f7ff fdce 	bl	8000df0 <Access_Denied_Animation>
    } else {
        currentState = STATE_READY;
        start_time = 0; // Reset for the next execution
    }
}
 8001254:	e005      	b.n	8001262 <closed_state+0x42>
        currentState = STATE_READY;
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <closed_state+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
        start_time = 0; // Reset for the next execution
 800125c:	4b02      	ldr	r3, [pc, #8]	@ (8001268 <closed_state+0x48>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000416c 	.word	0x2000416c
 800126c:	2000040c 	.word	0x2000040c
 8001270:	20004114 	.word	0x20004114

08001274 <sleep_state>:

void sleep_state(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    Clear_All_Animations(&ws);
 8001278:	480a      	ldr	r0, [pc, #40]	@ (80012a4 <sleep_state+0x30>)
 800127a:	f7ff fc85 	bl	8000b88 <Clear_All_Animations>
    Led_Strip(&ws, entryStrip, entryStripSize, "off");
 800127e:	2213      	movs	r2, #19
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <sleep_state+0x34>)
 8001282:	490a      	ldr	r1, [pc, #40]	@ (80012ac <sleep_state+0x38>)
 8001284:	4807      	ldr	r0, [pc, #28]	@ (80012a4 <sleep_state+0x30>)
 8001286:	f7ff fb9f 	bl	80009c8 <Led_Strip>
    Led_Strip(&ws, exitStrip, exitStripSize, "off");
 800128a:	2213      	movs	r2, #19
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <sleep_state+0x34>)
 800128e:	4908      	ldr	r1, [pc, #32]	@ (80012b0 <sleep_state+0x3c>)
 8001290:	4804      	ldr	r0, [pc, #16]	@ (80012a4 <sleep_state+0x30>)
 8001292:	f7ff fb99 	bl	80009c8 <Led_Strip>
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001296:	2101      	movs	r1, #1
 8001298:	2000      	movs	r0, #0
 800129a:	f001 fd79 	bl	8002d90 <HAL_PWR_EnterSLEEPMode>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000040c 	.word	0x2000040c
 80012a8:	080061e8 	.word	0x080061e8
 80012ac:	2000025c 	.word	0x2000025c
 80012b0:	200002a8 	.word	0x200002a8

080012b4 <overcapacity_state>:

void overcapacity_state(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
    static uint32_t start_time = 0;

    if (start_time == 0) {
 80012b8:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <overcapacity_state+0x54>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d104      	bne.n	80012ca <overcapacity_state+0x16>
        start_time = HAL_GetTick();
 80012c0:	f000 ffa0 	bl	8002204 <HAL_GetTick>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4a10      	ldr	r2, [pc, #64]	@ (8001308 <overcapacity_state+0x54>)
 80012c8:	6013      	str	r3, [r2, #0]
    }

    if (HAL_GetTick() - start_time < 2000) {
 80012ca:	f000 ff9b 	bl	8002204 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <overcapacity_state+0x54>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80012da:	d20c      	bcs.n	80012f6 <overcapacity_state+0x42>
        Led_Strip(&ws, entryStrip, entryStripSize, "red");
 80012dc:	2213      	movs	r2, #19
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <overcapacity_state+0x58>)
 80012e0:	490b      	ldr	r1, [pc, #44]	@ (8001310 <overcapacity_state+0x5c>)
 80012e2:	480c      	ldr	r0, [pc, #48]	@ (8001314 <overcapacity_state+0x60>)
 80012e4:	f7ff fb70 	bl	80009c8 <Led_Strip>
        Led_Strip(&ws, exitStrip, exitStripSize, "red");
 80012e8:	2213      	movs	r2, #19
 80012ea:	4b08      	ldr	r3, [pc, #32]	@ (800130c <overcapacity_state+0x58>)
 80012ec:	490a      	ldr	r1, [pc, #40]	@ (8001318 <overcapacity_state+0x64>)
 80012ee:	4809      	ldr	r0, [pc, #36]	@ (8001314 <overcapacity_state+0x60>)
 80012f0:	f7ff fb6a 	bl	80009c8 <Led_Strip>
    } else {
        currentState = STATE_READY;
        start_time = 0; // Reset timer
    }
}
 80012f4:	e005      	b.n	8001302 <overcapacity_state+0x4e>
        currentState = STATE_READY;
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <overcapacity_state+0x68>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
        start_time = 0; // Reset timer
 80012fc:	4b02      	ldr	r3, [pc, #8]	@ (8001308 <overcapacity_state+0x54>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20004170 	.word	0x20004170
 800130c:	080061d4 	.word	0x080061d4
 8001310:	2000025c 	.word	0x2000025c
 8001314:	2000040c 	.word	0x2000040c
 8001318:	200002a8 	.word	0x200002a8
 800131c:	20004114 	.word	0x20004114

08001320 <emergency_state>:

void emergency_state(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
    static uint32_t last_blink_time = 0;
    static int blink_count = 0;

    if (blink_count < 10) {
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <emergency_state+0x90>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b09      	cmp	r3, #9
 800132a:	dc32      	bgt.n	8001392 <emergency_state+0x72>
        if (HAL_GetTick() - last_blink_time >= 500) {
 800132c:	f000 ff6a 	bl	8002204 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	4b20      	ldr	r3, [pc, #128]	@ (80013b4 <emergency_state+0x94>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800133c:	d335      	bcc.n	80013aa <emergency_state+0x8a>
            last_blink_time = HAL_GetTick();
 800133e:	f000 ff61 	bl	8002204 <HAL_GetTick>
 8001342:	4603      	mov	r3, r0
 8001344:	4a1b      	ldr	r2, [pc, #108]	@ (80013b4 <emergency_state+0x94>)
 8001346:	6013      	str	r3, [r2, #0]
            if (blink_count % 2 == 0) {
 8001348:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <emergency_state+0x90>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10c      	bne.n	800136e <emergency_state+0x4e>
                Led_Strip(&ws, entryStrip, entryStripSize, "red");
 8001354:	2213      	movs	r2, #19
 8001356:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <emergency_state+0x98>)
 8001358:	4918      	ldr	r1, [pc, #96]	@ (80013bc <emergency_state+0x9c>)
 800135a:	4819      	ldr	r0, [pc, #100]	@ (80013c0 <emergency_state+0xa0>)
 800135c:	f7ff fb34 	bl	80009c8 <Led_Strip>
                Led_Strip(&ws, exitStrip, exitStripSize, "red");
 8001360:	2213      	movs	r2, #19
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <emergency_state+0x98>)
 8001364:	4917      	ldr	r1, [pc, #92]	@ (80013c4 <emergency_state+0xa4>)
 8001366:	4816      	ldr	r0, [pc, #88]	@ (80013c0 <emergency_state+0xa0>)
 8001368:	f7ff fb2e 	bl	80009c8 <Led_Strip>
 800136c:	e00b      	b.n	8001386 <emergency_state+0x66>
            } else {
                Led_Strip(&ws, entryStrip, entryStripSize, "off");
 800136e:	2213      	movs	r2, #19
 8001370:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <emergency_state+0xa8>)
 8001372:	4912      	ldr	r1, [pc, #72]	@ (80013bc <emergency_state+0x9c>)
 8001374:	4812      	ldr	r0, [pc, #72]	@ (80013c0 <emergency_state+0xa0>)
 8001376:	f7ff fb27 	bl	80009c8 <Led_Strip>
                Led_Strip(&ws, exitStrip, exitStripSize, "off");
 800137a:	2213      	movs	r2, #19
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <emergency_state+0xa8>)
 800137e:	4911      	ldr	r1, [pc, #68]	@ (80013c4 <emergency_state+0xa4>)
 8001380:	480f      	ldr	r0, [pc, #60]	@ (80013c0 <emergency_state+0xa0>)
 8001382:	f7ff fb21 	bl	80009c8 <Led_Strip>
            }
            blink_count++;
 8001386:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <emergency_state+0x90>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	4a08      	ldr	r2, [pc, #32]	@ (80013b0 <emergency_state+0x90>)
 800138e:	6013      	str	r3, [r2, #0]
        quarter_cycle_open(1);
        quarter_cycle_open(1);
        currentState = STATE_SLEEP;
        blink_count = 0;
    }
}
 8001390:	e00b      	b.n	80013aa <emergency_state+0x8a>
        quarter_cycle_open(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff fe2e 	bl	8000ff4 <quarter_cycle_open>
        quarter_cycle_open(1);
 8001398:	2001      	movs	r0, #1
 800139a:	f7ff fe2b 	bl	8000ff4 <quarter_cycle_open>
        currentState = STATE_SLEEP;
 800139e:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <emergency_state+0xac>)
 80013a0:	2205      	movs	r2, #5
 80013a2:	701a      	strb	r2, [r3, #0]
        blink_count = 0;
 80013a4:	4b02      	ldr	r3, [pc, #8]	@ (80013b0 <emergency_state+0x90>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20004174 	.word	0x20004174
 80013b4:	20004178 	.word	0x20004178
 80013b8:	080061d4 	.word	0x080061d4
 80013bc:	2000025c 	.word	0x2000025c
 80013c0:	2000040c 	.word	0x2000040c
 80013c4:	200002a8 	.word	0x200002a8
 80013c8:	080061e8 	.word	0x080061e8
 80013cc:	20004114 	.word	0x20004114

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d6:	f000 febd 	bl	8002154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013da:	f000 f873 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013de:	f7ff f96b 	bl	80006b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80013e2:	f7ff f943 	bl	800066c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013e6:	f000 fd6f 	bl	8001ec8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80013ea:	f000 fb39 	bl	8001a60 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013ee:	f000 fbad 	bl	8001b4c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80013f2:	f000 fd3f 	bl	8001e74 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80013f6:	f000 fd91 	bl	8001f1c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80013fa:	f000 fabb 	bl	8001974 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 80013fe:	4828      	ldr	r0, [pc, #160]	@ (80014a0 <main+0xd0>)
 8001400:	f002 f942 	bl	8003688 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001404:	2100      	movs	r1, #0
 8001406:	4826      	ldr	r0, [pc, #152]	@ (80014a0 <main+0xd0>)
 8001408:	f002 f9e0 	bl	80037cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 800140c:	2104      	movs	r1, #4
 800140e:	4824      	ldr	r0, [pc, #144]	@ (80014a0 <main+0xd0>)
 8001410:	f002 f9dc 	bl	80037cc <HAL_TIM_PWM_Start>
  WS28XX_Init(&ws, &htim3, 72, TIM_CHANNEL_1, LED_TOTAL);
 8001414:	f240 2342 	movw	r3, #578	@ 0x242
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2300      	movs	r3, #0
 800141c:	2248      	movs	r2, #72	@ 0x48
 800141e:	4921      	ldr	r1, [pc, #132]	@ (80014a4 <main+0xd4>)
 8001420:	4821      	ldr	r0, [pc, #132]	@ (80014a8 <main+0xd8>)
 8001422:	f004 f865 	bl	80054f0 <WS28XX_Init>


  // Start UART reception for RFID Reader (USART1)
  HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));
 8001426:	220e      	movs	r2, #14
 8001428:	4920      	ldr	r1, [pc, #128]	@ (80014ac <main+0xdc>)
 800142a:	4821      	ldr	r0, [pc, #132]	@ (80014b0 <main+0xe0>)
 800142c:	f003 faa6 	bl	800497c <HAL_UART_Receive_IT>

  // Start UART reception for Additional UART (USART2)
  HAL_UART_Receive_IT(&huart3, rxData, sizeof(rxData));
 8001430:	220e      	movs	r2, #14
 8001432:	491e      	ldr	r1, [pc, #120]	@ (80014ac <main+0xdc>)
 8001434:	481f      	ldr	r0, [pc, #124]	@ (80014b4 <main+0xe4>)
 8001436:	f003 faa1 	bl	800497c <HAL_UART_Receive_IT>

  // Start UART reception for NOS response (USART3)
  HAL_UART_Receive_IT(&huart2, &responseData, 2);
 800143a:	2202      	movs	r2, #2
 800143c:	491e      	ldr	r1, [pc, #120]	@ (80014b8 <main+0xe8>)
 800143e:	481f      	ldr	r0, [pc, #124]	@ (80014bc <main+0xec>)
 8001440:	f003 fa9c 	bl	800497c <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		switch (currentState)
 8001444:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <main+0xf0>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b06      	cmp	r3, #6
 800144a:	d826      	bhi.n	800149a <main+0xca>
 800144c:	a201      	add	r2, pc, #4	@ (adr r2, 8001454 <main+0x84>)
 800144e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001452:	bf00      	nop
 8001454:	08001471 	.word	0x08001471
 8001458:	08001477 	.word	0x08001477
 800145c:	0800147d 	.word	0x0800147d
 8001460:	08001483 	.word	0x08001483
 8001464:	08001489 	.word	0x08001489
 8001468:	0800148f 	.word	0x0800148f
 800146c:	08001495 	.word	0x08001495
		{
			case STATE_READY:
				ready_state();
 8001470:	f7ff fe10 	bl	8001094 <ready_state>
				break;
 8001474:	e012      	b.n	800149c <main+0xcc>
			case STATE_READING:
				reading_state();
 8001476:	f7ff fe29 	bl	80010cc <reading_state>
				break;
 800147a:	e00f      	b.n	800149c <main+0xcc>
			case STATE_OPEN:
				open_state();
 800147c:	f7ff fe70 	bl	8001160 <open_state>
				break;
 8001480:	e00c      	b.n	800149c <main+0xcc>
			case STATE_CLOSED:
				closed_state();
 8001482:	f7ff fecd 	bl	8001220 <closed_state>
				break;
 8001486:	e009      	b.n	800149c <main+0xcc>
			// Leave other states empty for now
			case STATE_OVERCAPACITY:
				overcapacity_state();
 8001488:	f7ff ff14 	bl	80012b4 <overcapacity_state>
				break;
 800148c:	e006      	b.n	800149c <main+0xcc>
			case STATE_SLEEP:
				sleep_state();
 800148e:	f7ff fef1 	bl	8001274 <sleep_state>
				break;
 8001492:	e003      	b.n	800149c <main+0xcc>
			case STATE_EMERGENCY:
				emergency_state();
 8001494:	f7ff ff44 	bl	8001320 <emergency_state>
				break;
 8001498:	e000      	b.n	800149c <main+0xcc>
			default:
				break;
 800149a:	bf00      	nop
		switch (currentState)
 800149c:	e7d2      	b.n	8001444 <main+0x74>
 800149e:	bf00      	nop
 80014a0:	20004210 	.word	0x20004210
 80014a4:	200041c8 	.word	0x200041c8
 80014a8:	2000040c 	.word	0x2000040c
 80014ac:	20004118 	.word	0x20004118
 80014b0:	200042e0 	.word	0x200042e0
 80014b4:	20004370 	.word	0x20004370
 80014b8:	2000414c 	.word	0x2000414c
 80014bc:	20004328 	.word	0x20004328
 80014c0:	20004114 	.word	0x20004114

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b090      	sub	sp, #64	@ 0x40
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0318 	add.w	r3, r7, #24
 80014ce:	2228      	movs	r2, #40	@ 0x28
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f004 f9e2 	bl	800589c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014ea:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80014ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f4:	2301      	movs	r3, #1
 80014f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f8:	2302      	movs	r3, #2
 80014fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001500:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001502:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001506:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	4618      	mov	r0, r3
 800150e:	f001 fc5b 	bl	8002dc8 <HAL_RCC_OscConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001518:	f000 f8da 	bl	80016d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151c:	230f      	movs	r3, #15
 800151e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001520:	2302      	movs	r3, #2
 8001522:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001528:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800152c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2102      	movs	r1, #2
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fec8 	bl	80032cc <HAL_RCC_ClockConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001542:	f000 f8c5 	bl	80016d0 <Error_Handler>
  }
}
 8001546:	bf00      	nop
 8001548:	3740      	adds	r7, #64	@ 0x40
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1 && rfid_flag == 1) { // Data received from USART1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a4d      	ldr	r2, [pc, #308]	@ (8001694 <HAL_UART_RxCpltCallback+0x144>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d137      	bne.n	80015d2 <HAL_UART_RxCpltCallback+0x82>
 8001562:	4b4d      	ldr	r3, [pc, #308]	@ (8001698 <HAL_UART_RxCpltCallback+0x148>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b01      	cmp	r3, #1
 800156a:	d132      	bne.n	80015d2 <HAL_UART_RxCpltCallback+0x82>
        // Process the received data
        for (int i = 0; i < 12; i++) {
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	e00b      	b.n	800158a <HAL_UART_RxCpltCallback+0x3a>
            processedData[i] = rxData[i + 1]; // Skip the start byte
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3301      	adds	r3, #1
 8001576:	4a49      	ldr	r2, [pc, #292]	@ (800169c <HAL_UART_RxCpltCallback+0x14c>)
 8001578:	5cd1      	ldrb	r1, [r2, r3]
 800157a:	4a49      	ldr	r2, [pc, #292]	@ (80016a0 <HAL_UART_RxCpltCallback+0x150>)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	4413      	add	r3, r2
 8001580:	460a      	mov	r2, r1
 8001582:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 12; i++) {
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	3301      	adds	r3, #1
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	2b0b      	cmp	r3, #11
 800158e:	ddf0      	ble.n	8001572 <HAL_UART_RxCpltCallback+0x22>
        }

        uart_source = 1;
 8001590:	4b44      	ldr	r3, [pc, #272]	@ (80016a4 <HAL_UART_RxCpltCallback+0x154>)
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
        processedData[12] = uart_source + '0';
 8001596:	4b43      	ldr	r3, [pc, #268]	@ (80016a4 <HAL_UART_RxCpltCallback+0x154>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3330      	adds	r3, #48	@ 0x30
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b3f      	ldr	r3, [pc, #252]	@ (80016a0 <HAL_UART_RxCpltCallback+0x150>)
 80015a2:	731a      	strb	r2, [r3, #12]
        processedData[13] = TURNSTILE_ID + '0';
 80015a4:	4b3e      	ldr	r3, [pc, #248]	@ (80016a0 <HAL_UART_RxCpltCallback+0x150>)
 80015a6:	2231      	movs	r2, #49	@ 0x31
 80015a8:	735a      	strb	r2, [r3, #13]
        processedData[14] = '\0';
 80015aa:	4b3d      	ldr	r3, [pc, #244]	@ (80016a0 <HAL_UART_RxCpltCallback+0x150>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	739a      	strb	r2, [r3, #14]

        // Use sprintf to format usermsg with identification flag
        sprintf(usermsg, "%s", processedData);
 80015b0:	4a3b      	ldr	r2, [pc, #236]	@ (80016a0 <HAL_UART_RxCpltCallback+0x150>)
 80015b2:	493d      	ldr	r1, [pc, #244]	@ (80016a8 <HAL_UART_RxCpltCallback+0x158>)
 80015b4:	483d      	ldr	r0, [pc, #244]	@ (80016ac <HAL_UART_RxCpltCallback+0x15c>)
 80015b6:	f004 f951 	bl	800585c <siprintf>

        flag_rev = 1; // Set flag to indicate data has been received
 80015ba:	4b3d      	ldr	r3, [pc, #244]	@ (80016b0 <HAL_UART_RxCpltCallback+0x160>)
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
        rfid_flag = 0;
 80015c0:	4b35      	ldr	r3, [pc, #212]	@ (8001698 <HAL_UART_RxCpltCallback+0x148>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]

        // Re-enable UART reception for USART1
        HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));
 80015c6:	220e      	movs	r2, #14
 80015c8:	4934      	ldr	r1, [pc, #208]	@ (800169c <HAL_UART_RxCpltCallback+0x14c>)
 80015ca:	483a      	ldr	r0, [pc, #232]	@ (80016b4 <HAL_UART_RxCpltCallback+0x164>)
 80015cc:	f003 f9d6 	bl	800497c <HAL_UART_Receive_IT>


        // Re-enable UART reception
        HAL_UART_Receive_IT(&huart3,  rxData, sizeof(rxData));
    }
}
 80015d0:	e05c      	b.n	800168c <HAL_UART_RxCpltCallback+0x13c>
    else if (huart->Instance == USART2) { // Data received from USART2
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a38      	ldr	r2, [pc, #224]	@ (80016b8 <HAL_UART_RxCpltCallback+0x168>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d11b      	bne.n	8001614 <HAL_UART_RxCpltCallback+0xc4>
        char receivedCommandChar = responseData[0];  // First character is the command
 80015dc:	4b37      	ldr	r3, [pc, #220]	@ (80016bc <HAL_UART_RxCpltCallback+0x16c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	75fb      	strb	r3, [r7, #23]
        char receivedTurnstileIDChar = responseData[1];  // Second character is the Turnstile ID
 80015e2:	4b36      	ldr	r3, [pc, #216]	@ (80016bc <HAL_UART_RxCpltCallback+0x16c>)
 80015e4:	785b      	ldrb	r3, [r3, #1]
 80015e6:	75bb      	strb	r3, [r7, #22]
        int receivedCommand = receivedCommandChar - '0';  // Convert Command to integer
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	3b30      	subs	r3, #48	@ 0x30
 80015ec:	613b      	str	r3, [r7, #16]
        int receivedTurnstileID = receivedTurnstileIDChar - '0';  // Convert ID to integer
 80015ee:	7dbb      	ldrb	r3, [r7, #22]
 80015f0:	3b30      	subs	r3, #48	@ 0x30
 80015f2:	60fb      	str	r3, [r7, #12]
        if (receivedTurnstileID == TURNSTILE_ID) {  // Process only if ID matches
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d103      	bne.n	8001602 <HAL_UART_RxCpltCallback+0xb2>
            intresponseData = receivedCommand;  // Store the command
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <HAL_UART_RxCpltCallback+0x170>)
 8001600:	701a      	strb	r2, [r3, #0]
        rfid_flag = 1;
 8001602:	4b25      	ldr	r3, [pc, #148]	@ (8001698 <HAL_UART_RxCpltCallback+0x148>)
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, responseData, 2);
 8001608:	2202      	movs	r2, #2
 800160a:	492c      	ldr	r1, [pc, #176]	@ (80016bc <HAL_UART_RxCpltCallback+0x16c>)
 800160c:	482d      	ldr	r0, [pc, #180]	@ (80016c4 <HAL_UART_RxCpltCallback+0x174>)
 800160e:	f003 f9b5 	bl	800497c <HAL_UART_Receive_IT>
}
 8001612:	e03b      	b.n	800168c <HAL_UART_RxCpltCallback+0x13c>
    else if (huart->Instance == USART3 && rfid_flag == 1) {  // USART3 Interrupt
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a2b      	ldr	r2, [pc, #172]	@ (80016c8 <HAL_UART_RxCpltCallback+0x178>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d136      	bne.n	800168c <HAL_UART_RxCpltCallback+0x13c>
 800161e:	4b1e      	ldr	r3, [pc, #120]	@ (8001698 <HAL_UART_RxCpltCallback+0x148>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b01      	cmp	r3, #1
 8001626:	d131      	bne.n	800168c <HAL_UART_RxCpltCallback+0x13c>
        for (int i = 0; i < 12; i++) {
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
 800162c:	e00b      	b.n	8001646 <HAL_UART_RxCpltCallback+0xf6>
            processedData[i] = rxData[i + 1]; // Skip the start byte
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	3301      	adds	r3, #1
 8001632:	4a1a      	ldr	r2, [pc, #104]	@ (800169c <HAL_UART_RxCpltCallback+0x14c>)
 8001634:	5cd1      	ldrb	r1, [r2, r3]
 8001636:	4a1a      	ldr	r2, [pc, #104]	@ (80016a0 <HAL_UART_RxCpltCallback+0x150>)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	4413      	add	r3, r2
 800163c:	460a      	mov	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 12; i++) {
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	3301      	adds	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b0b      	cmp	r3, #11
 800164a:	ddf0      	ble.n	800162e <HAL_UART_RxCpltCallback+0xde>
        uart_source = 2;
 800164c:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <HAL_UART_RxCpltCallback+0x154>)
 800164e:	2202      	movs	r2, #2
 8001650:	701a      	strb	r2, [r3, #0]
		processedData[12] = uart_source + '0';
 8001652:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <HAL_UART_RxCpltCallback+0x154>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	3330      	adds	r3, #48	@ 0x30
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <HAL_UART_RxCpltCallback+0x150>)
 800165e:	731a      	strb	r2, [r3, #12]
        processedData[13] = TURNSTILE_ID + '0';
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <HAL_UART_RxCpltCallback+0x150>)
 8001662:	2231      	movs	r2, #49	@ 0x31
 8001664:	735a      	strb	r2, [r3, #13]
        processedData[14] = '\0';
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <HAL_UART_RxCpltCallback+0x150>)
 8001668:	2200      	movs	r2, #0
 800166a:	739a      	strb	r2, [r3, #14]
        sprintf(usermsg, "%s", processedData);
 800166c:	4a0c      	ldr	r2, [pc, #48]	@ (80016a0 <HAL_UART_RxCpltCallback+0x150>)
 800166e:	490e      	ldr	r1, [pc, #56]	@ (80016a8 <HAL_UART_RxCpltCallback+0x158>)
 8001670:	480e      	ldr	r0, [pc, #56]	@ (80016ac <HAL_UART_RxCpltCallback+0x15c>)
 8001672:	f004 f8f3 	bl	800585c <siprintf>
        flag_rev = 1; // Set flag to indicate data has been received
 8001676:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <HAL_UART_RxCpltCallback+0x160>)
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
        rfid_flag = 0;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_UART_RxCpltCallback+0x148>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart3,  rxData, sizeof(rxData));
 8001682:	220e      	movs	r2, #14
 8001684:	4905      	ldr	r1, [pc, #20]	@ (800169c <HAL_UART_RxCpltCallback+0x14c>)
 8001686:	4811      	ldr	r0, [pc, #68]	@ (80016cc <HAL_UART_RxCpltCallback+0x17c>)
 8001688:	f003 f978 	bl	800497c <HAL_UART_Receive_IT>
}
 800168c:	bf00      	nop
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40013800 	.word	0x40013800
 8001698:	20000008 	.word	0x20000008
 800169c:	20004118 	.word	0x20004118
 80016a0:	20004128 	.word	0x20004128
 80016a4:	20004148 	.word	0x20004148
 80016a8:	080061ec 	.word	0x080061ec
 80016ac:	20004138 	.word	0x20004138
 80016b0:	20004147 	.word	0x20004147
 80016b4:	200042e0 	.word	0x200042e0
 80016b8:	40004400 	.word	0x40004400
 80016bc:	2000414c 	.word	0x2000414c
 80016c0:	2000414e 	.word	0x2000414e
 80016c4:	20004328 	.word	0x20004328
 80016c8:	40004800 	.word	0x40004800
 80016cc:	20004370 	.word	0x20004370

080016d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b0a5      	sub	sp, #148	@ 0x94
 80016d4:	af02      	add	r7, sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d6:	b672      	cpsid	i
}
 80016d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    uint32_t error_start_time = HAL_GetTick();
 80016da:	f000 fd93 	bl	8002204 <HAL_GetTick>
 80016de:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

    while (1) {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Indicate error
 80016e2:	2120      	movs	r1, #32
 80016e4:	4816      	ldr	r0, [pc, #88]	@ (8001740 <Error_Handler+0x70>)
 80016e6:	f001 fb21 	bl	8002d2c <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 80016ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016ee:	f000 fd93 	bl	8002218 <HAL_Delay>

        char error_msg[128];
        snprintf(error_msg, sizeof(error_msg), "Error in state: %d, time: %lu\n", currentState, HAL_GetTick());
 80016f2:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <Error_Handler+0x74>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	461c      	mov	r4, r3
 80016f8:	f000 fd84 	bl	8002204 <HAL_GetTick>
 80016fc:	4603      	mov	r3, r0
 80016fe:	1d38      	adds	r0, r7, #4
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	4623      	mov	r3, r4
 8001704:	4a10      	ldr	r2, [pc, #64]	@ (8001748 <Error_Handler+0x78>)
 8001706:	2180      	movs	r1, #128	@ 0x80
 8001708:	f004 f874 	bl	80057f4 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fd1c 	bl	800014c <strlen>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	1d39      	adds	r1, r7, #4
 800171a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800171e:	480b      	ldr	r0, [pc, #44]	@ (800174c <Error_Handler+0x7c>)
 8001720:	f003 f86c 	bl	80047fc <HAL_UART_Transmit>

        if (HAL_GetTick() - error_start_time > 10000) {  // Reset system after prolonged error
 8001724:	f000 fd6e 	bl	8002204 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001734:	4293      	cmp	r3, r2
 8001736:	d9d4      	bls.n	80016e2 <Error_Handler+0x12>
            HAL_NVIC_SystemReset();
 8001738:	f000 fea9 	bl	800248e <HAL_NVIC_SystemReset>
    while (1) {
 800173c:	e7d1      	b.n	80016e2 <Error_Handler+0x12>
 800173e:	bf00      	nop
 8001740:	40010800 	.word	0x40010800
 8001744:	20004114 	.word	0x20004114
 8001748:	080061f0 	.word	0x080061f0
 800174c:	20004370 	.word	0x20004370

08001750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <HAL_MspInit+0x5c>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	4a14      	ldr	r2, [pc, #80]	@ (80017ac <HAL_MspInit+0x5c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6193      	str	r3, [r2, #24]
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <HAL_MspInit+0x5c>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a0e      	ldr	r2, [pc, #56]	@ (80017ac <HAL_MspInit+0x5c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001778:	61d3      	str	r3, [r2, #28]
 800177a:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_MspInit+0x60>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <HAL_MspInit+0x60>)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <NMI_Handler+0x4>

080017bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <MemManage_Handler+0x4>

080017cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <UsageFault_Handler+0x4>

080017dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001804:	f000 fcec 	bl	80021e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR1_Pin);
 8001810:	2002      	movs	r0, #2
 8001812:	f001 faa5 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}

0800181a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Pin);
 800181e:	2004      	movs	r0, #4
 8001820:	f001 fa9e 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_2_Pin);
 800182c:	2008      	movs	r0, #8
 800182e:	f001 fa97 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}

08001836 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_3_Pin);
 800183a:	2010      	movs	r0, #16
 800183c:	f001 fa90 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <DMA1_Channel5_IRQHandler+0x10>)
 800184a:	f000 ff9f 	bl	800278c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20004258 	.word	0x20004258

08001858 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800185c:	4802      	ldr	r0, [pc, #8]	@ (8001868 <DMA1_Channel6_IRQHandler+0x10>)
 800185e:	f000 ff95 	bl	800278c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000429c 	.word	0x2000429c

0800186c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_4_Pin);
 8001870:	2020      	movs	r0, #32
 8001872:	f001 fa75 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IR_5_Pin);
 8001876:	2040      	movs	r0, #64	@ 0x40
 8001878:	f001 fa72 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IR_6_Pin);
 800187c:	2080      	movs	r0, #128	@ 0x80
 800187e:	f001 fa6f 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800188c:	4802      	ldr	r0, [pc, #8]	@ (8001898 <USART1_IRQHandler+0x10>)
 800188e:	f003 f89b 	bl	80049c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200042e0 	.word	0x200042e0

0800189c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a0:	4802      	ldr	r0, [pc, #8]	@ (80018ac <USART2_IRQHandler+0x10>)
 80018a2:	f003 f891 	bl	80049c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20004328 	.word	0x20004328

080018b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018b4:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <USART3_IRQHandler+0x10>)
 80018b6:	f003 f887 	bl	80049c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20004370 	.word	0x20004370

080018c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_1A_Pin);
 80018c8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80018cc:	f001 fa48 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_1B_Pin);
 80018d0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80018d4:	f001 fa44 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80018d8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80018dc:	f001 fa40 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80018e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80018e4:	f001 fa3c 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_2A_Pin);
 80018e8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80018ec:	f001 fa38 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_2B_Pin);
 80018f0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80018f4:	f001 fa34 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001904:	4a14      	ldr	r2, [pc, #80]	@ (8001958 <_sbrk+0x5c>)
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <_sbrk+0x60>)
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001910:	4b13      	ldr	r3, [pc, #76]	@ (8001960 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <_sbrk+0x64>)
 800191a:	4a12      	ldr	r2, [pc, #72]	@ (8001964 <_sbrk+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	429a      	cmp	r2, r3
 800192a:	d207      	bcs.n	800193c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800192c:	f003 ffbe 	bl	80058ac <__errno>
 8001930:	4603      	mov	r3, r0
 8001932:	220c      	movs	r2, #12
 8001934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800193a:	e009      	b.n	8001950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800193c:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001942:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <_sbrk+0x64>)
 800194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20005000 	.word	0x20005000
 800195c:	00000400 	.word	0x00000400
 8001960:	2000417c 	.word	0x2000417c
 8001964:	20004508 	.word	0x20004508

08001968 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08e      	sub	sp, #56	@ 0x38
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001988:	f107 0320 	add.w	r3, r7, #32
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
 80019a0:	615a      	str	r2, [r3, #20]
 80019a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019a4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a5c <MX_TIM2_Init+0xe8>)
 80019a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019ac:	4b2b      	ldr	r3, [pc, #172]	@ (8001a5c <MX_TIM2_Init+0xe8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a5c <MX_TIM2_Init+0xe8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80019b8:	4b28      	ldr	r3, [pc, #160]	@ (8001a5c <MX_TIM2_Init+0xe8>)
 80019ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c0:	4b26      	ldr	r3, [pc, #152]	@ (8001a5c <MX_TIM2_Init+0xe8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c6:	4b25      	ldr	r3, [pc, #148]	@ (8001a5c <MX_TIM2_Init+0xe8>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019cc:	4823      	ldr	r0, [pc, #140]	@ (8001a5c <MX_TIM2_Init+0xe8>)
 80019ce:	f001 fe0b 	bl	80035e8 <HAL_TIM_Base_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019d8:	f7ff fe7a 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019e6:	4619      	mov	r1, r3
 80019e8:	481c      	ldr	r0, [pc, #112]	@ (8001a5c <MX_TIM2_Init+0xe8>)
 80019ea:	f002 f9f5 	bl	8003dd8 <HAL_TIM_ConfigClockSource>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80019f4:	f7ff fe6c 	bl	80016d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019f8:	4818      	ldr	r0, [pc, #96]	@ (8001a5c <MX_TIM2_Init+0xe8>)
 80019fa:	f001 fe8f 	bl	800371c <HAL_TIM_PWM_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a04:	f7ff fe64 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a10:	f107 0320 	add.w	r3, r7, #32
 8001a14:	4619      	mov	r1, r3
 8001a16:	4811      	ldr	r0, [pc, #68]	@ (8001a5c <MX_TIM2_Init+0xe8>)
 8001a18:	f002 fe42 	bl	80046a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a22:	f7ff fe55 	bl	80016d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a26:	2360      	movs	r3, #96	@ 0x60
 8001a28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4807      	ldr	r0, [pc, #28]	@ (8001a5c <MX_TIM2_Init+0xe8>)
 8001a3e:	f002 f909 	bl	8003c54 <HAL_TIM_PWM_ConfigChannel>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a48:	f7ff fe42 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a4c:	4803      	ldr	r0, [pc, #12]	@ (8001a5c <MX_TIM2_Init+0xe8>)
 8001a4e:	f000 f99f 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 8001a52:	bf00      	nop
 8001a54:	3738      	adds	r7, #56	@ 0x38
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20004180 	.word	0x20004180

08001a60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08e      	sub	sp, #56	@ 0x38
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	f107 0320 	add.w	r3, r7, #32
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
 8001a8c:	615a      	str	r2, [r3, #20]
 8001a8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a90:	4b2c      	ldr	r3, [pc, #176]	@ (8001b44 <MX_TIM3_Init+0xe4>)
 8001a92:	4a2d      	ldr	r2, [pc, #180]	@ (8001b48 <MX_TIM3_Init+0xe8>)
 8001a94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a96:	4b2b      	ldr	r3, [pc, #172]	@ (8001b44 <MX_TIM3_Init+0xe4>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9c:	4b29      	ldr	r3, [pc, #164]	@ (8001b44 <MX_TIM3_Init+0xe4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001aa2:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <MX_TIM3_Init+0xe4>)
 8001aa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aa8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aaa:	4b26      	ldr	r3, [pc, #152]	@ (8001b44 <MX_TIM3_Init+0xe4>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab0:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <MX_TIM3_Init+0xe4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ab6:	4823      	ldr	r0, [pc, #140]	@ (8001b44 <MX_TIM3_Init+0xe4>)
 8001ab8:	f001 fd96 	bl	80035e8 <HAL_TIM_Base_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ac2:	f7ff fe05 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001acc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	481c      	ldr	r0, [pc, #112]	@ (8001b44 <MX_TIM3_Init+0xe4>)
 8001ad4:	f002 f980 	bl	8003dd8 <HAL_TIM_ConfigClockSource>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001ade:	f7ff fdf7 	bl	80016d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ae2:	4818      	ldr	r0, [pc, #96]	@ (8001b44 <MX_TIM3_Init+0xe4>)
 8001ae4:	f001 fe1a 	bl	800371c <HAL_TIM_PWM_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001aee:	f7ff fdef 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001afa:	f107 0320 	add.w	r3, r7, #32
 8001afe:	4619      	mov	r1, r3
 8001b00:	4810      	ldr	r0, [pc, #64]	@ (8001b44 <MX_TIM3_Init+0xe4>)
 8001b02:	f002 fdcd 	bl	80046a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b0c:	f7ff fde0 	bl	80016d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b10:	2360      	movs	r3, #96	@ 0x60
 8001b12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	2200      	movs	r2, #0
 8001b24:	4619      	mov	r1, r3
 8001b26:	4807      	ldr	r0, [pc, #28]	@ (8001b44 <MX_TIM3_Init+0xe4>)
 8001b28:	f002 f894 	bl	8003c54 <HAL_TIM_PWM_ConfigChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b32:	f7ff fdcd 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b36:	4803      	ldr	r0, [pc, #12]	@ (8001b44 <MX_TIM3_Init+0xe4>)
 8001b38:	f000 f92a 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 8001b3c:	bf00      	nop
 8001b3e:	3738      	adds	r7, #56	@ 0x38
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200041c8 	.word	0x200041c8
 8001b48:	40000400 	.word	0x40000400

08001b4c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08e      	sub	sp, #56	@ 0x38
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b60:	f107 0320 	add.w	r3, r7, #32
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
 8001b78:	615a      	str	r2, [r3, #20]
 8001b7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b7c:	4b32      	ldr	r3, [pc, #200]	@ (8001c48 <MX_TIM4_Init+0xfc>)
 8001b7e:	4a33      	ldr	r2, [pc, #204]	@ (8001c4c <MX_TIM4_Init+0x100>)
 8001b80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 360-1;
 8001b82:	4b31      	ldr	r3, [pc, #196]	@ (8001c48 <MX_TIM4_Init+0xfc>)
 8001b84:	f240 1267 	movw	r2, #359	@ 0x167
 8001b88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c48 <MX_TIM4_Init+0xfc>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 8001b90:	4b2d      	ldr	r3, [pc, #180]	@ (8001c48 <MX_TIM4_Init+0xfc>)
 8001b92:	22c7      	movs	r2, #199	@ 0xc7
 8001b94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b96:	4b2c      	ldr	r3, [pc, #176]	@ (8001c48 <MX_TIM4_Init+0xfc>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c48 <MX_TIM4_Init+0xfc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ba2:	4829      	ldr	r0, [pc, #164]	@ (8001c48 <MX_TIM4_Init+0xfc>)
 8001ba4:	f001 fd20 	bl	80035e8 <HAL_TIM_Base_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001bae:	f7ff fd8f 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bb8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4822      	ldr	r0, [pc, #136]	@ (8001c48 <MX_TIM4_Init+0xfc>)
 8001bc0:	f002 f90a 	bl	8003dd8 <HAL_TIM_ConfigClockSource>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001bca:	f7ff fd81 	bl	80016d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001bce:	481e      	ldr	r0, [pc, #120]	@ (8001c48 <MX_TIM4_Init+0xfc>)
 8001bd0:	f001 fda4 	bl	800371c <HAL_TIM_PWM_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001bda:	f7ff fd79 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001be6:	f107 0320 	add.w	r3, r7, #32
 8001bea:	4619      	mov	r1, r3
 8001bec:	4816      	ldr	r0, [pc, #88]	@ (8001c48 <MX_TIM4_Init+0xfc>)
 8001bee:	f002 fd57 	bl	80046a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001bf8:	f7ff fd6a 	bl	80016d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bfc:	2360      	movs	r3, #96	@ 0x60
 8001bfe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2200      	movs	r2, #0
 8001c10:	4619      	mov	r1, r3
 8001c12:	480d      	ldr	r0, [pc, #52]	@ (8001c48 <MX_TIM4_Init+0xfc>)
 8001c14:	f002 f81e 	bl	8003c54 <HAL_TIM_PWM_ConfigChannel>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001c1e:	f7ff fd57 	bl	80016d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2204      	movs	r2, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4807      	ldr	r0, [pc, #28]	@ (8001c48 <MX_TIM4_Init+0xfc>)
 8001c2a:	f002 f813 	bl	8003c54 <HAL_TIM_PWM_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001c34:	f7ff fd4c 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c38:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <MX_TIM4_Init+0xfc>)
 8001c3a:	f000 f8a9 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 8001c3e:	bf00      	nop
 8001c40:	3738      	adds	r7, #56	@ 0x38
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20004210 	.word	0x20004210
 8001c4c:	40000800 	.word	0x40000800

08001c50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c60:	d133      	bne.n	8001cca <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c62:	4b44      	ldr	r3, [pc, #272]	@ (8001d74 <HAL_TIM_Base_MspInit+0x124>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a43      	ldr	r2, [pc, #268]	@ (8001d74 <HAL_TIM_Base_MspInit+0x124>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	61d3      	str	r3, [r2, #28]
 8001c6e:	4b41      	ldr	r3, [pc, #260]	@ (8001d74 <HAL_TIM_Base_MspInit+0x124>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d78 <HAL_TIM_Base_MspInit+0x128>)
 8001c7c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d7c <HAL_TIM_Base_MspInit+0x12c>)
 8001c7e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c80:	4b3d      	ldr	r3, [pc, #244]	@ (8001d78 <HAL_TIM_Base_MspInit+0x128>)
 8001c82:	2210      	movs	r2, #16
 8001c84:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c86:	4b3c      	ldr	r3, [pc, #240]	@ (8001d78 <HAL_TIM_Base_MspInit+0x128>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c8c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d78 <HAL_TIM_Base_MspInit+0x128>)
 8001c8e:	2280      	movs	r2, #128	@ 0x80
 8001c90:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c92:	4b39      	ldr	r3, [pc, #228]	@ (8001d78 <HAL_TIM_Base_MspInit+0x128>)
 8001c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c98:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c9a:	4b37      	ldr	r3, [pc, #220]	@ (8001d78 <HAL_TIM_Base_MspInit+0x128>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001ca0:	4b35      	ldr	r3, [pc, #212]	@ (8001d78 <HAL_TIM_Base_MspInit+0x128>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001ca6:	4b34      	ldr	r3, [pc, #208]	@ (8001d78 <HAL_TIM_Base_MspInit+0x128>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001cac:	4832      	ldr	r0, [pc, #200]	@ (8001d78 <HAL_TIM_Base_MspInit+0x128>)
 8001cae:	f000 fbff 	bl	80024b0 <HAL_DMA_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8001cb8:	f7ff fd0a 	bl	80016d0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a2e      	ldr	r2, [pc, #184]	@ (8001d78 <HAL_TIM_Base_MspInit+0x128>)
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8001cc2:	4a2d      	ldr	r2, [pc, #180]	@ (8001d78 <HAL_TIM_Base_MspInit+0x128>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001cc8:	e04f      	b.n	8001d6a <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM3)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a2c      	ldr	r2, [pc, #176]	@ (8001d80 <HAL_TIM_Base_MspInit+0x130>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d139      	bne.n	8001d48 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cd4:	4b27      	ldr	r3, [pc, #156]	@ (8001d74 <HAL_TIM_Base_MspInit+0x124>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	4a26      	ldr	r2, [pc, #152]	@ (8001d74 <HAL_TIM_Base_MspInit+0x124>)
 8001cda:	f043 0302 	orr.w	r3, r3, #2
 8001cde:	61d3      	str	r3, [r2, #28]
 8001ce0:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <HAL_TIM_Base_MspInit+0x124>)
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001cec:	4b25      	ldr	r3, [pc, #148]	@ (8001d84 <HAL_TIM_Base_MspInit+0x134>)
 8001cee:	4a26      	ldr	r2, [pc, #152]	@ (8001d88 <HAL_TIM_Base_MspInit+0x138>)
 8001cf0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cf2:	4b24      	ldr	r3, [pc, #144]	@ (8001d84 <HAL_TIM_Base_MspInit+0x134>)
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf8:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <HAL_TIM_Base_MspInit+0x134>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001cfe:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <HAL_TIM_Base_MspInit+0x134>)
 8001d00:	2280      	movs	r2, #128	@ 0x80
 8001d02:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <HAL_TIM_Base_MspInit+0x134>)
 8001d06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d0a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <HAL_TIM_Base_MspInit+0x134>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <HAL_TIM_Base_MspInit+0x134>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001d18:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <HAL_TIM_Base_MspInit+0x134>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001d1e:	4819      	ldr	r0, [pc, #100]	@ (8001d84 <HAL_TIM_Base_MspInit+0x134>)
 8001d20:	f000 fbc6 	bl	80024b0 <HAL_DMA_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_TIM_Base_MspInit+0xde>
      Error_Handler();
 8001d2a:	f7ff fcd1 	bl	80016d0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a14      	ldr	r2, [pc, #80]	@ (8001d84 <HAL_TIM_Base_MspInit+0x134>)
 8001d32:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d34:	4a13      	ldr	r2, [pc, #76]	@ (8001d84 <HAL_TIM_Base_MspInit+0x134>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a11      	ldr	r2, [pc, #68]	@ (8001d84 <HAL_TIM_Base_MspInit+0x134>)
 8001d3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d40:	4a10      	ldr	r2, [pc, #64]	@ (8001d84 <HAL_TIM_Base_MspInit+0x134>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001d46:	e010      	b.n	8001d6a <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM4)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d8c <HAL_TIM_Base_MspInit+0x13c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d10b      	bne.n	8001d6a <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d52:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <HAL_TIM_Base_MspInit+0x124>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a07      	ldr	r2, [pc, #28]	@ (8001d74 <HAL_TIM_Base_MspInit+0x124>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	61d3      	str	r3, [r2, #28]
 8001d5e:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <HAL_TIM_Base_MspInit+0x124>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	20004258 	.word	0x20004258
 8001d7c:	40020058 	.word	0x40020058
 8001d80:	40000400 	.word	0x40000400
 8001d84:	2000429c 	.word	0x2000429c
 8001d88:	4002006c 	.word	0x4002006c
 8001d8c:	40000800 	.word	0x40000800

08001d90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	@ 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0318 	add.w	r3, r7, #24
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dae:	d118      	bne.n	8001de2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e60 <HAL_TIM_MspPostInit+0xd0>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4a2a      	ldr	r2, [pc, #168]	@ (8001e60 <HAL_TIM_MspPostInit+0xd0>)
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	6193      	str	r3, [r2, #24]
 8001dbc:	4b28      	ldr	r3, [pc, #160]	@ (8001e60 <HAL_TIM_MspPostInit+0xd0>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f107 0318 	add.w	r3, r7, #24
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4822      	ldr	r0, [pc, #136]	@ (8001e64 <HAL_TIM_MspPostInit+0xd4>)
 8001ddc:	f000 fe0a 	bl	80029f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001de0:	e03a      	b.n	8001e58 <HAL_TIM_MspPostInit+0xc8>
  else if(timHandle->Instance==TIM3)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a20      	ldr	r2, [pc, #128]	@ (8001e68 <HAL_TIM_MspPostInit+0xd8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d118      	bne.n	8001e1e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dec:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <HAL_TIM_MspPostInit+0xd0>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e60 <HAL_TIM_MspPostInit+0xd0>)
 8001df2:	f043 0304 	orr.w	r3, r3, #4
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <HAL_TIM_MspPostInit+0xd0>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e04:	2340      	movs	r3, #64	@ 0x40
 8001e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 0318 	add.w	r3, r7, #24
 8001e14:	4619      	mov	r1, r3
 8001e16:	4813      	ldr	r0, [pc, #76]	@ (8001e64 <HAL_TIM_MspPostInit+0xd4>)
 8001e18:	f000 fdec 	bl	80029f4 <HAL_GPIO_Init>
}
 8001e1c:	e01c      	b.n	8001e58 <HAL_TIM_MspPostInit+0xc8>
  else if(timHandle->Instance==TIM4)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a12      	ldr	r2, [pc, #72]	@ (8001e6c <HAL_TIM_MspPostInit+0xdc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d117      	bne.n	8001e58 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e28:	4b0d      	ldr	r3, [pc, #52]	@ (8001e60 <HAL_TIM_MspPostInit+0xd0>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e60 <HAL_TIM_MspPostInit+0xd0>)
 8001e2e:	f043 0308 	orr.w	r3, r3, #8
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <HAL_TIM_MspPostInit+0xd0>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e40:	23c0      	movs	r3, #192	@ 0xc0
 8001e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 0318 	add.w	r3, r7, #24
 8001e50:	4619      	mov	r1, r3
 8001e52:	4807      	ldr	r0, [pc, #28]	@ (8001e70 <HAL_TIM_MspPostInit+0xe0>)
 8001e54:	f000 fdce 	bl	80029f4 <HAL_GPIO_Init>
}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	@ 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010800 	.word	0x40010800
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40000800 	.word	0x40000800
 8001e70:	40010c00 	.word	0x40010c00

08001e74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e78:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ec4 <MX_USART1_UART_Init+0x50>)
 8001e7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001e80:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e98:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001eac:	f002 fc56 	bl	800475c <HAL_UART_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eb6:	f7ff fc0b 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200042e0 	.word	0x200042e0
 8001ec4:	40013800 	.word	0x40013800

08001ec8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <MX_USART2_UART_Init+0x4c>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	@ (8001f18 <MX_USART2_UART_Init+0x50>)
 8001ed0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <MX_USART2_UART_Init+0x4c>)
 8001ed4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ed8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	@ (8001f14 <MX_USART2_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <MX_USART2_UART_Init+0x4c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <MX_USART2_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eec:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <MX_USART2_UART_Init+0x4c>)
 8001eee:	220c      	movs	r2, #12
 8001ef0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <MX_USART2_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <MX_USART2_UART_Init+0x4c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001efe:	4805      	ldr	r0, [pc, #20]	@ (8001f14 <MX_USART2_UART_Init+0x4c>)
 8001f00:	f002 fc2c 	bl	800475c <HAL_UART_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f0a:	f7ff fbe1 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20004328 	.word	0x20004328
 8001f18:	40004400 	.word	0x40004400

08001f1c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f20:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	@ (8001f6c <MX_USART3_UART_Init+0x50>)
 8001f24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f28:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f42:	220c      	movs	r2, #12
 8001f44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f54:	f002 fc02 	bl	800475c <HAL_UART_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f5e:	f7ff fbb7 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20004370 	.word	0x20004370
 8001f6c:	40004800 	.word	0x40004800

08001f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08c      	sub	sp, #48	@ 0x30
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0320 	add.w	r3, r7, #32
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a59      	ldr	r2, [pc, #356]	@ (80020f0 <HAL_UART_MspInit+0x180>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d13a      	bne.n	8002006 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f90:	4b58      	ldr	r3, [pc, #352]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4a57      	ldr	r2, [pc, #348]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 8001f96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f9a:	6193      	str	r3, [r2, #24]
 8001f9c:	4b55      	ldr	r3, [pc, #340]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	4b52      	ldr	r3, [pc, #328]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	4a51      	ldr	r2, [pc, #324]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6193      	str	r3, [r2, #24]
 8001fb4:	4b4f      	ldr	r3, [pc, #316]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0320 	add.w	r3, r7, #32
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4848      	ldr	r0, [pc, #288]	@ (80020f8 <HAL_UART_MspInit+0x188>)
 8001fd6:	f000 fd0d 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	f107 0320 	add.w	r3, r7, #32
 8001fec:	4619      	mov	r1, r3
 8001fee:	4842      	ldr	r0, [pc, #264]	@ (80020f8 <HAL_UART_MspInit+0x188>)
 8001ff0:	f000 fd00 	bl	80029f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2025      	movs	r0, #37	@ 0x25
 8001ffa:	f000 fa1e 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ffe:	2025      	movs	r0, #37	@ 0x25
 8002000:	f000 fa37 	bl	8002472 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002004:	e070      	b.n	80020e8 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a3c      	ldr	r2, [pc, #240]	@ (80020fc <HAL_UART_MspInit+0x18c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d12c      	bne.n	800206a <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002010:	4b38      	ldr	r3, [pc, #224]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	4a37      	ldr	r2, [pc, #220]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 8002016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800201a:	61d3      	str	r3, [r2, #28]
 800201c:	4b35      	ldr	r3, [pc, #212]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	4b32      	ldr	r3, [pc, #200]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a31      	ldr	r2, [pc, #196]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b2f      	ldr	r3, [pc, #188]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002040:	230c      	movs	r3, #12
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2302      	movs	r3, #2
 800204a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 0320 	add.w	r3, r7, #32
 8002050:	4619      	mov	r1, r3
 8002052:	4829      	ldr	r0, [pc, #164]	@ (80020f8 <HAL_UART_MspInit+0x188>)
 8002054:	f000 fcce 	bl	80029f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002058:	2200      	movs	r2, #0
 800205a:	2100      	movs	r1, #0
 800205c:	2026      	movs	r0, #38	@ 0x26
 800205e:	f000 f9ec 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002062:	2026      	movs	r0, #38	@ 0x26
 8002064:	f000 fa05 	bl	8002472 <HAL_NVIC_EnableIRQ>
}
 8002068:	e03e      	b.n	80020e8 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART3)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a24      	ldr	r2, [pc, #144]	@ (8002100 <HAL_UART_MspInit+0x190>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d139      	bne.n	80020e8 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002074:	4b1f      	ldr	r3, [pc, #124]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	4a1e      	ldr	r2, [pc, #120]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 800207a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800207e:	61d3      	str	r3, [r2, #28]
 8002080:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208c:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a18      	ldr	r2, [pc, #96]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <HAL_UART_MspInit+0x184>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	f107 0320 	add.w	r3, r7, #32
 80020b6:	4619      	mov	r1, r3
 80020b8:	4812      	ldr	r0, [pc, #72]	@ (8002104 <HAL_UART_MspInit+0x194>)
 80020ba:	f000 fc9b 	bl	80029f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020cc:	f107 0320 	add.w	r3, r7, #32
 80020d0:	4619      	mov	r1, r3
 80020d2:	480c      	ldr	r0, [pc, #48]	@ (8002104 <HAL_UART_MspInit+0x194>)
 80020d4:	f000 fc8e 	bl	80029f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	2027      	movs	r0, #39	@ 0x27
 80020de:	f000 f9ac 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020e2:	2027      	movs	r0, #39	@ 0x27
 80020e4:	f000 f9c5 	bl	8002472 <HAL_NVIC_EnableIRQ>
}
 80020e8:	bf00      	nop
 80020ea:	3730      	adds	r7, #48	@ 0x30
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010800 	.word	0x40010800
 80020fc:	40004400 	.word	0x40004400
 8002100:	40004800 	.word	0x40004800
 8002104:	40010c00 	.word	0x40010c00

08002108 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002108:	f7ff fc2e 	bl	8001968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800210c:	480b      	ldr	r0, [pc, #44]	@ (800213c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800210e:	490c      	ldr	r1, [pc, #48]	@ (8002140 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002110:	4a0c      	ldr	r2, [pc, #48]	@ (8002144 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002122:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002124:	4c09      	ldr	r4, [pc, #36]	@ (800214c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002132:	f003 fbc1 	bl	80058b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002136:	f7ff f94b 	bl	80013d0 <main>
  bx lr
 800213a:	4770      	bx	lr
  ldr r0, =_sdata
 800213c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002140:	200003f0 	.word	0x200003f0
  ldr r2, =_sidata
 8002144:	08006380 	.word	0x08006380
  ldr r2, =_sbss
 8002148:	200003f0 	.word	0x200003f0
  ldr r4, =_ebss
 800214c:	20004504 	.word	0x20004504

08002150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC1_2_IRQHandler>
	...

08002154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002158:	4b08      	ldr	r3, [pc, #32]	@ (800217c <HAL_Init+0x28>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a07      	ldr	r2, [pc, #28]	@ (800217c <HAL_Init+0x28>)
 800215e:	f043 0310 	orr.w	r3, r3, #16
 8002162:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002164:	2003      	movs	r0, #3
 8002166:	f000 f95d 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216a:	2000      	movs	r0, #0
 800216c:	f000 f808 	bl	8002180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002170:	f7ff faee 	bl	8001750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40022000 	.word	0x40022000

08002180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002188:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <HAL_InitTick+0x54>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_InitTick+0x58>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002196:	fbb3 f3f1 	udiv	r3, r3, r1
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f979 	bl	8002496 <HAL_SYSTICK_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00e      	b.n	80021cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d80a      	bhi.n	80021ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b4:	2200      	movs	r2, #0
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021bc:	f000 f93d 	bl	800243a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c0:	4a06      	ldr	r2, [pc, #24]	@ (80021dc <HAL_InitTick+0x5c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000394 	.word	0x20000394
 80021d8:	2000039c 	.word	0x2000039c
 80021dc:	20000398 	.word	0x20000398

080021e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_IncTick+0x1c>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_IncTick+0x20>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4a03      	ldr	r2, [pc, #12]	@ (8002200 <HAL_IncTick+0x20>)
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	2000039c 	.word	0x2000039c
 8002200:	200043b8 	.word	0x200043b8

08002204 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return uwTick;
 8002208:	4b02      	ldr	r3, [pc, #8]	@ (8002214 <HAL_GetTick+0x10>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	200043b8 	.word	0x200043b8

08002218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002220:	f7ff fff0 	bl	8002204 <HAL_GetTick>
 8002224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002230:	d005      	beq.n	800223e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002232:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <HAL_Delay+0x44>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800223e:	bf00      	nop
 8002240:	f7ff ffe0 	bl	8002204 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	429a      	cmp	r2, r3
 800224e:	d8f7      	bhi.n	8002240 <HAL_Delay+0x28>
  {
  }
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	2000039c 	.word	0x2000039c

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800228c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002292:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4906      	ldr	r1, [pc, #24]	@ (80022f8 <__NVIC_EnableIRQ+0x34>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	e000e100 	.word	0xe000e100

080022fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	db0a      	blt.n	8002326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	490c      	ldr	r1, [pc, #48]	@ (8002348 <__NVIC_SetPriority+0x4c>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002324:	e00a      	b.n	800233c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4908      	ldr	r1, [pc, #32]	@ (800234c <__NVIC_SetPriority+0x50>)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	3b04      	subs	r3, #4
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	440b      	add	r3, r1
 800233a:	761a      	strb	r2, [r3, #24]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	@ 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	2b04      	cmp	r3, #4
 800236c:	bf28      	it	cs
 800236e:	2304      	movcs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3304      	adds	r3, #4
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <NVIC_EncodePriority+0x30>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b03      	subs	r3, #3
 800237e:	e000      	b.n	8002382 <NVIC_EncodePriority+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002398:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43d9      	mvns	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	4313      	orrs	r3, r2
         );
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	@ 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023b8:	f3bf 8f4f 	dsb	sy
}
 80023bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <__NVIC_SystemReset+0x24>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80023c6:	4904      	ldr	r1, [pc, #16]	@ (80023d8 <__NVIC_SystemReset+0x24>)
 80023c8:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <__NVIC_SystemReset+0x28>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80023ce:	f3bf 8f4f 	dsb	sy
}
 80023d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <__NVIC_SystemReset+0x20>
 80023d8:	e000ed00 	.word	0xe000ed00
 80023dc:	05fa0004 	.word	0x05fa0004

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002404:	f7ff ff7a 	bl	80022fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff17 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff2c 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff7a 	bl	8002350 <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff49 	bl	80022fc <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff1f 	bl	80022c4 <__NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002492:	f7ff ff8f 	bl	80023b4 <__NVIC_SystemReset>

08002496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ff9e 	bl	80023e0 <SysTick_Config>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e043      	b.n	800254e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b22      	ldr	r3, [pc, #136]	@ (8002558 <HAL_DMA_Init+0xa8>)
 80024ce:	4413      	add	r3, r2
 80024d0:	4a22      	ldr	r2, [pc, #136]	@ (800255c <HAL_DMA_Init+0xac>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	009a      	lsls	r2, r3, #2
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002560 <HAL_DMA_Init+0xb0>)
 80024e2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024fa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80024fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	bffdfff8 	.word	0xbffdfff8
 800255c:	cccccccd 	.word	0xcccccccd
 8002560:	40020000 	.word	0x40020000

08002564 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_DMA_Start_IT+0x20>
 8002580:	2302      	movs	r3, #2
 8002582:	e04b      	b.n	800261c <HAL_DMA_Start_IT+0xb8>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d13a      	bne.n	800260e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0201 	bic.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f9eb 	bl	8002998 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 020e 	orr.w	r2, r2, #14
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e00f      	b.n	80025fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0204 	bic.w	r2, r2, #4
 80025ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 020a 	orr.w	r2, r2, #10
 80025fa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e005      	b.n	800261a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002616:	2302      	movs	r3, #2
 8002618:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800261a:	7dfb      	ldrb	r3, [r7, #23]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d008      	beq.n	800264e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2204      	movs	r2, #4
 8002640:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e020      	b.n	8002690 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 020e 	bic.w	r2, r2, #14
 800265c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0201 	bic.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002676:	2101      	movs	r1, #1
 8002678:	fa01 f202 	lsl.w	r2, r1, r2
 800267c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800268e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
	...

0800269c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d005      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2204      	movs	r2, #4
 80026b8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
 80026be:	e051      	b.n	8002764 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 020e 	bic.w	r2, r2, #14
 80026ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a22      	ldr	r2, [pc, #136]	@ (8002770 <HAL_DMA_Abort_IT+0xd4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d029      	beq.n	800273e <HAL_DMA_Abort_IT+0xa2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a21      	ldr	r2, [pc, #132]	@ (8002774 <HAL_DMA_Abort_IT+0xd8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d022      	beq.n	800273a <HAL_DMA_Abort_IT+0x9e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002778 <HAL_DMA_Abort_IT+0xdc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d01a      	beq.n	8002734 <HAL_DMA_Abort_IT+0x98>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1e      	ldr	r2, [pc, #120]	@ (800277c <HAL_DMA_Abort_IT+0xe0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d012      	beq.n	800272e <HAL_DMA_Abort_IT+0x92>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a1c      	ldr	r2, [pc, #112]	@ (8002780 <HAL_DMA_Abort_IT+0xe4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00a      	beq.n	8002728 <HAL_DMA_Abort_IT+0x8c>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a1b      	ldr	r2, [pc, #108]	@ (8002784 <HAL_DMA_Abort_IT+0xe8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d102      	bne.n	8002722 <HAL_DMA_Abort_IT+0x86>
 800271c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002720:	e00e      	b.n	8002740 <HAL_DMA_Abort_IT+0xa4>
 8002722:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002726:	e00b      	b.n	8002740 <HAL_DMA_Abort_IT+0xa4>
 8002728:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800272c:	e008      	b.n	8002740 <HAL_DMA_Abort_IT+0xa4>
 800272e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002732:	e005      	b.n	8002740 <HAL_DMA_Abort_IT+0xa4>
 8002734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002738:	e002      	b.n	8002740 <HAL_DMA_Abort_IT+0xa4>
 800273a:	2310      	movs	r3, #16
 800273c:	e000      	b.n	8002740 <HAL_DMA_Abort_IT+0xa4>
 800273e:	2301      	movs	r3, #1
 8002740:	4a11      	ldr	r2, [pc, #68]	@ (8002788 <HAL_DMA_Abort_IT+0xec>)
 8002742:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
    } 
  }
  return status;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40020008 	.word	0x40020008
 8002774:	4002001c 	.word	0x4002001c
 8002778:	40020030 	.word	0x40020030
 800277c:	40020044 	.word	0x40020044
 8002780:	40020058 	.word	0x40020058
 8002784:	4002006c 	.word	0x4002006c
 8002788:	40020000 	.word	0x40020000

0800278c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	2204      	movs	r2, #4
 80027aa:	409a      	lsls	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d04f      	beq.n	8002854 <HAL_DMA_IRQHandler+0xc8>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d04a      	beq.n	8002854 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d107      	bne.n	80027dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0204 	bic.w	r2, r2, #4
 80027da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a66      	ldr	r2, [pc, #408]	@ (800297c <HAL_DMA_IRQHandler+0x1f0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d029      	beq.n	800283a <HAL_DMA_IRQHandler+0xae>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a65      	ldr	r2, [pc, #404]	@ (8002980 <HAL_DMA_IRQHandler+0x1f4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d022      	beq.n	8002836 <HAL_DMA_IRQHandler+0xaa>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a63      	ldr	r2, [pc, #396]	@ (8002984 <HAL_DMA_IRQHandler+0x1f8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01a      	beq.n	8002830 <HAL_DMA_IRQHandler+0xa4>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a62      	ldr	r2, [pc, #392]	@ (8002988 <HAL_DMA_IRQHandler+0x1fc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d012      	beq.n	800282a <HAL_DMA_IRQHandler+0x9e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a60      	ldr	r2, [pc, #384]	@ (800298c <HAL_DMA_IRQHandler+0x200>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00a      	beq.n	8002824 <HAL_DMA_IRQHandler+0x98>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a5f      	ldr	r2, [pc, #380]	@ (8002990 <HAL_DMA_IRQHandler+0x204>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d102      	bne.n	800281e <HAL_DMA_IRQHandler+0x92>
 8002818:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800281c:	e00e      	b.n	800283c <HAL_DMA_IRQHandler+0xb0>
 800281e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002822:	e00b      	b.n	800283c <HAL_DMA_IRQHandler+0xb0>
 8002824:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002828:	e008      	b.n	800283c <HAL_DMA_IRQHandler+0xb0>
 800282a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800282e:	e005      	b.n	800283c <HAL_DMA_IRQHandler+0xb0>
 8002830:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002834:	e002      	b.n	800283c <HAL_DMA_IRQHandler+0xb0>
 8002836:	2340      	movs	r3, #64	@ 0x40
 8002838:	e000      	b.n	800283c <HAL_DMA_IRQHandler+0xb0>
 800283a:	2304      	movs	r3, #4
 800283c:	4a55      	ldr	r2, [pc, #340]	@ (8002994 <HAL_DMA_IRQHandler+0x208>)
 800283e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8094 	beq.w	8002972 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002852:	e08e      	b.n	8002972 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	2202      	movs	r2, #2
 800285a:	409a      	lsls	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d056      	beq.n	8002912 <HAL_DMA_IRQHandler+0x186>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d051      	beq.n	8002912 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10b      	bne.n	8002894 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 020a 	bic.w	r2, r2, #10
 800288a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a38      	ldr	r2, [pc, #224]	@ (800297c <HAL_DMA_IRQHandler+0x1f0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d029      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x166>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a37      	ldr	r2, [pc, #220]	@ (8002980 <HAL_DMA_IRQHandler+0x1f4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d022      	beq.n	80028ee <HAL_DMA_IRQHandler+0x162>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a35      	ldr	r2, [pc, #212]	@ (8002984 <HAL_DMA_IRQHandler+0x1f8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d01a      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x15c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a34      	ldr	r2, [pc, #208]	@ (8002988 <HAL_DMA_IRQHandler+0x1fc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d012      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x156>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a32      	ldr	r2, [pc, #200]	@ (800298c <HAL_DMA_IRQHandler+0x200>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00a      	beq.n	80028dc <HAL_DMA_IRQHandler+0x150>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a31      	ldr	r2, [pc, #196]	@ (8002990 <HAL_DMA_IRQHandler+0x204>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d102      	bne.n	80028d6 <HAL_DMA_IRQHandler+0x14a>
 80028d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028d4:	e00e      	b.n	80028f4 <HAL_DMA_IRQHandler+0x168>
 80028d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028da:	e00b      	b.n	80028f4 <HAL_DMA_IRQHandler+0x168>
 80028dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028e0:	e008      	b.n	80028f4 <HAL_DMA_IRQHandler+0x168>
 80028e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028e6:	e005      	b.n	80028f4 <HAL_DMA_IRQHandler+0x168>
 80028e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028ec:	e002      	b.n	80028f4 <HAL_DMA_IRQHandler+0x168>
 80028ee:	2320      	movs	r3, #32
 80028f0:	e000      	b.n	80028f4 <HAL_DMA_IRQHandler+0x168>
 80028f2:	2302      	movs	r3, #2
 80028f4:	4a27      	ldr	r2, [pc, #156]	@ (8002994 <HAL_DMA_IRQHandler+0x208>)
 80028f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002904:	2b00      	cmp	r3, #0
 8002906:	d034      	beq.n	8002972 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002910:	e02f      	b.n	8002972 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	2208      	movs	r2, #8
 8002918:	409a      	lsls	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d028      	beq.n	8002974 <HAL_DMA_IRQHandler+0x1e8>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d023      	beq.n	8002974 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 020e 	bic.w	r2, r2, #14
 800293a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002944:	2101      	movs	r1, #1
 8002946:	fa01 f202 	lsl.w	r2, r1, r2
 800294a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	2b00      	cmp	r3, #0
 8002968:	d004      	beq.n	8002974 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
    }
  }
  return;
 8002972:	bf00      	nop
 8002974:	bf00      	nop
}
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40020008 	.word	0x40020008
 8002980:	4002001c 	.word	0x4002001c
 8002984:	40020030 	.word	0x40020030
 8002988:	40020044 	.word	0x40020044
 800298c:	40020058 	.word	0x40020058
 8002990:	4002006c 	.word	0x4002006c
 8002994:	40020000 	.word	0x40020000

08002998 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ae:	2101      	movs	r1, #1
 80029b0:	fa01 f202 	lsl.w	r2, r1, r2
 80029b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	d108      	bne.n	80029d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029d6:	e007      	b.n	80029e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	60da      	str	r2, [r3, #12]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b08b      	sub	sp, #44	@ 0x2c
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029fe:	2300      	movs	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a02:	2300      	movs	r3, #0
 8002a04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a06:	e169      	b.n	8002cdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a08:	2201      	movs	r2, #1
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	f040 8158 	bne.w	8002cd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4a9a      	ldr	r2, [pc, #616]	@ (8002c94 <HAL_GPIO_Init+0x2a0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d05e      	beq.n	8002aee <HAL_GPIO_Init+0xfa>
 8002a30:	4a98      	ldr	r2, [pc, #608]	@ (8002c94 <HAL_GPIO_Init+0x2a0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d875      	bhi.n	8002b22 <HAL_GPIO_Init+0x12e>
 8002a36:	4a98      	ldr	r2, [pc, #608]	@ (8002c98 <HAL_GPIO_Init+0x2a4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d058      	beq.n	8002aee <HAL_GPIO_Init+0xfa>
 8002a3c:	4a96      	ldr	r2, [pc, #600]	@ (8002c98 <HAL_GPIO_Init+0x2a4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d86f      	bhi.n	8002b22 <HAL_GPIO_Init+0x12e>
 8002a42:	4a96      	ldr	r2, [pc, #600]	@ (8002c9c <HAL_GPIO_Init+0x2a8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d052      	beq.n	8002aee <HAL_GPIO_Init+0xfa>
 8002a48:	4a94      	ldr	r2, [pc, #592]	@ (8002c9c <HAL_GPIO_Init+0x2a8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d869      	bhi.n	8002b22 <HAL_GPIO_Init+0x12e>
 8002a4e:	4a94      	ldr	r2, [pc, #592]	@ (8002ca0 <HAL_GPIO_Init+0x2ac>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d04c      	beq.n	8002aee <HAL_GPIO_Init+0xfa>
 8002a54:	4a92      	ldr	r2, [pc, #584]	@ (8002ca0 <HAL_GPIO_Init+0x2ac>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d863      	bhi.n	8002b22 <HAL_GPIO_Init+0x12e>
 8002a5a:	4a92      	ldr	r2, [pc, #584]	@ (8002ca4 <HAL_GPIO_Init+0x2b0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d046      	beq.n	8002aee <HAL_GPIO_Init+0xfa>
 8002a60:	4a90      	ldr	r2, [pc, #576]	@ (8002ca4 <HAL_GPIO_Init+0x2b0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d85d      	bhi.n	8002b22 <HAL_GPIO_Init+0x12e>
 8002a66:	2b12      	cmp	r3, #18
 8002a68:	d82a      	bhi.n	8002ac0 <HAL_GPIO_Init+0xcc>
 8002a6a:	2b12      	cmp	r3, #18
 8002a6c:	d859      	bhi.n	8002b22 <HAL_GPIO_Init+0x12e>
 8002a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a74 <HAL_GPIO_Init+0x80>)
 8002a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a74:	08002aef 	.word	0x08002aef
 8002a78:	08002ac9 	.word	0x08002ac9
 8002a7c:	08002adb 	.word	0x08002adb
 8002a80:	08002b1d 	.word	0x08002b1d
 8002a84:	08002b23 	.word	0x08002b23
 8002a88:	08002b23 	.word	0x08002b23
 8002a8c:	08002b23 	.word	0x08002b23
 8002a90:	08002b23 	.word	0x08002b23
 8002a94:	08002b23 	.word	0x08002b23
 8002a98:	08002b23 	.word	0x08002b23
 8002a9c:	08002b23 	.word	0x08002b23
 8002aa0:	08002b23 	.word	0x08002b23
 8002aa4:	08002b23 	.word	0x08002b23
 8002aa8:	08002b23 	.word	0x08002b23
 8002aac:	08002b23 	.word	0x08002b23
 8002ab0:	08002b23 	.word	0x08002b23
 8002ab4:	08002b23 	.word	0x08002b23
 8002ab8:	08002ad1 	.word	0x08002ad1
 8002abc:	08002ae5 	.word	0x08002ae5
 8002ac0:	4a79      	ldr	r2, [pc, #484]	@ (8002ca8 <HAL_GPIO_Init+0x2b4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ac6:	e02c      	b.n	8002b22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	623b      	str	r3, [r7, #32]
          break;
 8002ace:	e029      	b.n	8002b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	623b      	str	r3, [r7, #32]
          break;
 8002ad8:	e024      	b.n	8002b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	3308      	adds	r3, #8
 8002ae0:	623b      	str	r3, [r7, #32]
          break;
 8002ae2:	e01f      	b.n	8002b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	330c      	adds	r3, #12
 8002aea:	623b      	str	r3, [r7, #32]
          break;
 8002aec:	e01a      	b.n	8002b24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002af6:	2304      	movs	r3, #4
 8002af8:	623b      	str	r3, [r7, #32]
          break;
 8002afa:	e013      	b.n	8002b24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d105      	bne.n	8002b10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b04:	2308      	movs	r3, #8
 8002b06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	611a      	str	r2, [r3, #16]
          break;
 8002b0e:	e009      	b.n	8002b24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b10:	2308      	movs	r3, #8
 8002b12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	615a      	str	r2, [r3, #20]
          break;
 8002b1a:	e003      	b.n	8002b24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	623b      	str	r3, [r7, #32]
          break;
 8002b20:	e000      	b.n	8002b24 <HAL_GPIO_Init+0x130>
          break;
 8002b22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	2bff      	cmp	r3, #255	@ 0xff
 8002b28:	d801      	bhi.n	8002b2e <HAL_GPIO_Init+0x13a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	e001      	b.n	8002b32 <HAL_GPIO_Init+0x13e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3304      	adds	r3, #4
 8002b32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2bff      	cmp	r3, #255	@ 0xff
 8002b38:	d802      	bhi.n	8002b40 <HAL_GPIO_Init+0x14c>
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	e002      	b.n	8002b46 <HAL_GPIO_Init+0x152>
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	3b08      	subs	r3, #8
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	210f      	movs	r1, #15
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	401a      	ands	r2, r3
 8002b58:	6a39      	ldr	r1, [r7, #32]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b60:	431a      	orrs	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80b1 	beq.w	8002cd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b74:	4b4d      	ldr	r3, [pc, #308]	@ (8002cac <HAL_GPIO_Init+0x2b8>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	4a4c      	ldr	r2, [pc, #304]	@ (8002cac <HAL_GPIO_Init+0x2b8>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6193      	str	r3, [r2, #24]
 8002b80:	4b4a      	ldr	r3, [pc, #296]	@ (8002cac <HAL_GPIO_Init+0x2b8>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b8c:	4a48      	ldr	r2, [pc, #288]	@ (8002cb0 <HAL_GPIO_Init+0x2bc>)
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	089b      	lsrs	r3, r3, #2
 8002b92:	3302      	adds	r3, #2
 8002b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	220f      	movs	r2, #15
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4013      	ands	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a40      	ldr	r2, [pc, #256]	@ (8002cb4 <HAL_GPIO_Init+0x2c0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <HAL_GPIO_Init+0x1ec>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a3f      	ldr	r2, [pc, #252]	@ (8002cb8 <HAL_GPIO_Init+0x2c4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00d      	beq.n	8002bdc <HAL_GPIO_Init+0x1e8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a3e      	ldr	r2, [pc, #248]	@ (8002cbc <HAL_GPIO_Init+0x2c8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d007      	beq.n	8002bd8 <HAL_GPIO_Init+0x1e4>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a3d      	ldr	r2, [pc, #244]	@ (8002cc0 <HAL_GPIO_Init+0x2cc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d101      	bne.n	8002bd4 <HAL_GPIO_Init+0x1e0>
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e006      	b.n	8002be2 <HAL_GPIO_Init+0x1ee>
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	e004      	b.n	8002be2 <HAL_GPIO_Init+0x1ee>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e002      	b.n	8002be2 <HAL_GPIO_Init+0x1ee>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_GPIO_Init+0x1ee>
 8002be0:	2300      	movs	r3, #0
 8002be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be4:	f002 0203 	and.w	r2, r2, #3
 8002be8:	0092      	lsls	r2, r2, #2
 8002bea:	4093      	lsls	r3, r2
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bf2:	492f      	ldr	r1, [pc, #188]	@ (8002cb0 <HAL_GPIO_Init+0x2bc>)
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	492c      	ldr	r1, [pc, #176]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	608b      	str	r3, [r1, #8]
 8002c18:	e006      	b.n	8002c28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	4928      	ldr	r1, [pc, #160]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d006      	beq.n	8002c42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c34:	4b23      	ldr	r3, [pc, #140]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	4922      	ldr	r1, [pc, #136]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60cb      	str	r3, [r1, #12]
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c42:	4b20      	ldr	r3, [pc, #128]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	491e      	ldr	r1, [pc, #120]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d006      	beq.n	8002c6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	4918      	ldr	r1, [pc, #96]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]
 8002c68:	e006      	b.n	8002c78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c6a:	4b16      	ldr	r3, [pc, #88]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	4914      	ldr	r1, [pc, #80]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d021      	beq.n	8002cc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c84:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	490e      	ldr	r1, [pc, #56]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]
 8002c90:	e021      	b.n	8002cd6 <HAL_GPIO_Init+0x2e2>
 8002c92:	bf00      	nop
 8002c94:	10320000 	.word	0x10320000
 8002c98:	10310000 	.word	0x10310000
 8002c9c:	10220000 	.word	0x10220000
 8002ca0:	10210000 	.word	0x10210000
 8002ca4:	10120000 	.word	0x10120000
 8002ca8:	10110000 	.word	0x10110000
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40010000 	.word	0x40010000
 8002cb4:	40010800 	.word	0x40010800
 8002cb8:	40010c00 	.word	0x40010c00
 8002cbc:	40011000 	.word	0x40011000
 8002cc0:	40011400 	.word	0x40011400
 8002cc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <HAL_GPIO_Init+0x304>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	4909      	ldr	r1, [pc, #36]	@ (8002cf8 <HAL_GPIO_Init+0x304>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	3301      	adds	r3, #1
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f47f ae8e 	bne.w	8002a08 <HAL_GPIO_Init+0x14>
  }
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	372c      	adds	r7, #44	@ 0x2c
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	40010400 	.word	0x40010400

08002cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	807b      	strh	r3, [r7, #2]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d0c:	787b      	ldrb	r3, [r7, #1]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d12:	887a      	ldrh	r2, [r7, #2]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d18:	e003      	b.n	8002d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d1a:	887b      	ldrh	r3, [r7, #2]
 8002d1c:	041a      	lsls	r2, r3, #16
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	611a      	str	r2, [r3, #16]
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d3e:	887a      	ldrh	r2, [r7, #2]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4013      	ands	r3, r2
 8002d44:	041a      	lsls	r2, r3, #16
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	43d9      	mvns	r1, r3
 8002d4a:	887b      	ldrh	r3, [r7, #2]
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	611a      	str	r2, [r3, #16]
}
 8002d54:	bf00      	nop
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d6a:	4b08      	ldr	r3, [pc, #32]	@ (8002d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d006      	beq.n	8002d84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d76:	4a05      	ldr	r2, [pc, #20]	@ (8002d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe f8f2 	bl	8000f68 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40010400 	.word	0x40010400

08002d90 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002d9c:	4b09      	ldr	r3, [pc, #36]	@ (8002dc4 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	4a08      	ldr	r2, [pc, #32]	@ (8002dc4 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002da2:	f023 0304 	bic.w	r3, r3, #4
 8002da6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002dae:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002db0:	e002      	b.n	8002db8 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8002db2:	bf40      	sev
    __WFE();
 8002db4:	bf20      	wfe
    __WFE();
 8002db6:	bf20      	wfe
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e272      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 8087 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de8:	4b92      	ldr	r3, [pc, #584]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 030c 	and.w	r3, r3, #12
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d00c      	beq.n	8002e0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002df4:	4b8f      	ldr	r3, [pc, #572]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d112      	bne.n	8002e26 <HAL_RCC_OscConfig+0x5e>
 8002e00:	4b8c      	ldr	r3, [pc, #560]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e0c:	d10b      	bne.n	8002e26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0e:	4b89      	ldr	r3, [pc, #548]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d06c      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x12c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d168      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e24c      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCC_OscConfig+0x76>
 8002e30:	4b80      	ldr	r3, [pc, #512]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a7f      	ldr	r2, [pc, #508]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	e02e      	b.n	8002e9c <HAL_RCC_OscConfig+0xd4>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x98>
 8002e46:	4b7b      	ldr	r3, [pc, #492]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7a      	ldr	r2, [pc, #488]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b78      	ldr	r3, [pc, #480]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a77      	ldr	r2, [pc, #476]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e01d      	b.n	8002e9c <HAL_RCC_OscConfig+0xd4>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0xbc>
 8002e6a:	4b72      	ldr	r3, [pc, #456]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a71      	ldr	r2, [pc, #452]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b6f      	ldr	r3, [pc, #444]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a6e      	ldr	r2, [pc, #440]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	e00b      	b.n	8002e9c <HAL_RCC_OscConfig+0xd4>
 8002e84:	4b6b      	ldr	r3, [pc, #428]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a6a      	ldr	r2, [pc, #424]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4b68      	ldr	r3, [pc, #416]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a67      	ldr	r2, [pc, #412]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d013      	beq.n	8002ecc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7ff f9ae 	bl	8002204 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eac:	f7ff f9aa 	bl	8002204 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	@ 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e200      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0xe4>
 8002eca:	e014      	b.n	8002ef6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7ff f99a 	bl	8002204 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7ff f996 	bl	8002204 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	@ 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1ec      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee6:	4b53      	ldr	r3, [pc, #332]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x10c>
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d063      	beq.n	8002fca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f02:	4b4c      	ldr	r3, [pc, #304]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f0e:	4b49      	ldr	r3, [pc, #292]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d11c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x18c>
 8002f1a:	4b46      	ldr	r3, [pc, #280]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d116      	bne.n	8002f54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f26:	4b43      	ldr	r3, [pc, #268]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_RCC_OscConfig+0x176>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d001      	beq.n	8002f3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e1c0      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4939      	ldr	r1, [pc, #228]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f52:	e03a      	b.n	8002fca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d020      	beq.n	8002f9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f5c:	4b36      	ldr	r3, [pc, #216]	@ (8003038 <HAL_RCC_OscConfig+0x270>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f62:	f7ff f94f 	bl	8002204 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6a:	f7ff f94b 	bl	8002204 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e1a1      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f88:	4b2a      	ldr	r3, [pc, #168]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4927      	ldr	r1, [pc, #156]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]
 8002f9c:	e015      	b.n	8002fca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9e:	4b26      	ldr	r3, [pc, #152]	@ (8003038 <HAL_RCC_OscConfig+0x270>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7ff f92e 	bl	8002204 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fac:	f7ff f92a 	bl	8002204 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e180      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d03a      	beq.n	800304c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d019      	beq.n	8003012 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fde:	4b17      	ldr	r3, [pc, #92]	@ (800303c <HAL_RCC_OscConfig+0x274>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe4:	f7ff f90e 	bl	8002204 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fec:	f7ff f90a 	bl	8002204 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e160      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800300a:	2001      	movs	r0, #1
 800300c:	f000 face 	bl	80035ac <RCC_Delay>
 8003010:	e01c      	b.n	800304c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003012:	4b0a      	ldr	r3, [pc, #40]	@ (800303c <HAL_RCC_OscConfig+0x274>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003018:	f7ff f8f4 	bl	8002204 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301e:	e00f      	b.n	8003040 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003020:	f7ff f8f0 	bl	8002204 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d908      	bls.n	8003040 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e146      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	42420000 	.word	0x42420000
 800303c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003040:	4b92      	ldr	r3, [pc, #584]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1e9      	bne.n	8003020 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80a6 	beq.w	80031a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305a:	2300      	movs	r3, #0
 800305c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305e:	4b8b      	ldr	r3, [pc, #556]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10d      	bne.n	8003086 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	4b88      	ldr	r3, [pc, #544]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	4a87      	ldr	r2, [pc, #540]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003074:	61d3      	str	r3, [r2, #28]
 8003076:	4b85      	ldr	r3, [pc, #532]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003082:	2301      	movs	r3, #1
 8003084:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003086:	4b82      	ldr	r3, [pc, #520]	@ (8003290 <HAL_RCC_OscConfig+0x4c8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d118      	bne.n	80030c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003092:	4b7f      	ldr	r3, [pc, #508]	@ (8003290 <HAL_RCC_OscConfig+0x4c8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a7e      	ldr	r2, [pc, #504]	@ (8003290 <HAL_RCC_OscConfig+0x4c8>)
 8003098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800309c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309e:	f7ff f8b1 	bl	8002204 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a6:	f7ff f8ad 	bl	8002204 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b64      	cmp	r3, #100	@ 0x64
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e103      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	4b75      	ldr	r3, [pc, #468]	@ (8003290 <HAL_RCC_OscConfig+0x4c8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d106      	bne.n	80030da <HAL_RCC_OscConfig+0x312>
 80030cc:	4b6f      	ldr	r3, [pc, #444]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4a6e      	ldr	r2, [pc, #440]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6213      	str	r3, [r2, #32]
 80030d8:	e02d      	b.n	8003136 <HAL_RCC_OscConfig+0x36e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0x334>
 80030e2:	4b6a      	ldr	r3, [pc, #424]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	4a69      	ldr	r2, [pc, #420]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	6213      	str	r3, [r2, #32]
 80030ee:	4b67      	ldr	r3, [pc, #412]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4a66      	ldr	r2, [pc, #408]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	f023 0304 	bic.w	r3, r3, #4
 80030f8:	6213      	str	r3, [r2, #32]
 80030fa:	e01c      	b.n	8003136 <HAL_RCC_OscConfig+0x36e>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b05      	cmp	r3, #5
 8003102:	d10c      	bne.n	800311e <HAL_RCC_OscConfig+0x356>
 8003104:	4b61      	ldr	r3, [pc, #388]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4a60      	ldr	r2, [pc, #384]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 800310a:	f043 0304 	orr.w	r3, r3, #4
 800310e:	6213      	str	r3, [r2, #32]
 8003110:	4b5e      	ldr	r3, [pc, #376]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4a5d      	ldr	r2, [pc, #372]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6213      	str	r3, [r2, #32]
 800311c:	e00b      	b.n	8003136 <HAL_RCC_OscConfig+0x36e>
 800311e:	4b5b      	ldr	r3, [pc, #364]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	4a5a      	ldr	r2, [pc, #360]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	6213      	str	r3, [r2, #32]
 800312a:	4b58      	ldr	r3, [pc, #352]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4a57      	ldr	r2, [pc, #348]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003130:	f023 0304 	bic.w	r3, r3, #4
 8003134:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d015      	beq.n	800316a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313e:	f7ff f861 	bl	8002204 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003144:	e00a      	b.n	800315c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003146:	f7ff f85d 	bl	8002204 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003154:	4293      	cmp	r3, r2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e0b1      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315c:	4b4b      	ldr	r3, [pc, #300]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ee      	beq.n	8003146 <HAL_RCC_OscConfig+0x37e>
 8003168:	e014      	b.n	8003194 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316a:	f7ff f84b 	bl	8002204 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003170:	e00a      	b.n	8003188 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7ff f847 	bl	8002204 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e09b      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003188:	4b40      	ldr	r3, [pc, #256]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ee      	bne.n	8003172 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d105      	bne.n	80031a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319a:	4b3c      	ldr	r3, [pc, #240]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	4a3b      	ldr	r2, [pc, #236]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8087 	beq.w	80032be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b0:	4b36      	ldr	r3, [pc, #216]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d061      	beq.n	8003280 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d146      	bne.n	8003252 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c4:	4b33      	ldr	r3, [pc, #204]	@ (8003294 <HAL_RCC_OscConfig+0x4cc>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ca:	f7ff f81b 	bl	8002204 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d2:	f7ff f817 	bl	8002204 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e06d      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e4:	4b29      	ldr	r3, [pc, #164]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f8:	d108      	bne.n	800320c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031fa:	4b24      	ldr	r3, [pc, #144]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	4921      	ldr	r1, [pc, #132]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800320c:	4b1f      	ldr	r3, [pc, #124]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a19      	ldr	r1, [r3, #32]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	430b      	orrs	r3, r1
 800321e:	491b      	ldr	r1, [pc, #108]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003224:	4b1b      	ldr	r3, [pc, #108]	@ (8003294 <HAL_RCC_OscConfig+0x4cc>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe ffeb 	bl	8002204 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003232:	f7fe ffe7 	bl	8002204 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e03d      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003244:	4b11      	ldr	r3, [pc, #68]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x46a>
 8003250:	e035      	b.n	80032be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	4b10      	ldr	r3, [pc, #64]	@ (8003294 <HAL_RCC_OscConfig+0x4cc>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe ffd4 	bl	8002204 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003260:	f7fe ffd0 	bl	8002204 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e026      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x498>
 800327e:	e01e      	b.n	80032be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d107      	bne.n	8003298 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e019      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
 800328c:	40021000 	.word	0x40021000
 8003290:	40007000 	.word	0x40007000
 8003294:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003298:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCC_OscConfig+0x500>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d106      	bne.n	80032ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d001      	beq.n	80032be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000

080032cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0d0      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e0:	4b6a      	ldr	r3, [pc, #424]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d910      	bls.n	8003310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ee:	4b67      	ldr	r3, [pc, #412]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 0207 	bic.w	r2, r3, #7
 80032f6:	4965      	ldr	r1, [pc, #404]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b63      	ldr	r3, [pc, #396]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0b8      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d020      	beq.n	800335e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003328:	4b59      	ldr	r3, [pc, #356]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a58      	ldr	r2, [pc, #352]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003332:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003340:	4b53      	ldr	r3, [pc, #332]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a52      	ldr	r2, [pc, #328]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800334a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334c:	4b50      	ldr	r3, [pc, #320]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	494d      	ldr	r1, [pc, #308]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d040      	beq.n	80033ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b47      	ldr	r3, [pc, #284]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d115      	bne.n	80033aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e07f      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d107      	bne.n	800339a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338a:	4b41      	ldr	r3, [pc, #260]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e073      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339a:	4b3d      	ldr	r3, [pc, #244]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e06b      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033aa:	4b39      	ldr	r3, [pc, #228]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f023 0203 	bic.w	r2, r3, #3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4936      	ldr	r1, [pc, #216]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033bc:	f7fe ff22 	bl	8002204 <HAL_GetTick>
 80033c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c2:	e00a      	b.n	80033da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c4:	f7fe ff1e 	bl	8002204 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e053      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033da:	4b2d      	ldr	r3, [pc, #180]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 020c 	and.w	r2, r3, #12
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d1eb      	bne.n	80033c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033ec:	4b27      	ldr	r3, [pc, #156]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d210      	bcs.n	800341c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b24      	ldr	r3, [pc, #144]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 0207 	bic.w	r2, r3, #7
 8003402:	4922      	ldr	r1, [pc, #136]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b20      	ldr	r3, [pc, #128]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e032      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003428:	4b19      	ldr	r3, [pc, #100]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4916      	ldr	r1, [pc, #88]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003446:	4b12      	ldr	r3, [pc, #72]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	490e      	ldr	r1, [pc, #56]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800345a:	f000 f821 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 800345e:	4602      	mov	r2, r0
 8003460:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	490a      	ldr	r1, [pc, #40]	@ (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 800346c:	5ccb      	ldrb	r3, [r1, r3]
 800346e:	fa22 f303 	lsr.w	r3, r2, r3
 8003472:	4a09      	ldr	r2, [pc, #36]	@ (8003498 <HAL_RCC_ClockConfig+0x1cc>)
 8003474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003476:	4b09      	ldr	r3, [pc, #36]	@ (800349c <HAL_RCC_ClockConfig+0x1d0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe fe80 	bl	8002180 <HAL_InitTick>

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40022000 	.word	0x40022000
 8003490:	40021000 	.word	0x40021000
 8003494:	08006210 	.word	0x08006210
 8003498:	20000394 	.word	0x20000394
 800349c:	20000398 	.word	0x20000398

080034a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	2300      	movs	r3, #0
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	2300      	movs	r3, #0
 80034b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x94>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d002      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x30>
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d003      	beq.n	80034d6 <HAL_RCC_GetSysClockFreq+0x36>
 80034ce:	e027      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034d0:	4b19      	ldr	r3, [pc, #100]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x98>)
 80034d2:	613b      	str	r3, [r7, #16]
      break;
 80034d4:	e027      	b.n	8003526 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	0c9b      	lsrs	r3, r3, #18
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	4a17      	ldr	r2, [pc, #92]	@ (800353c <HAL_RCC_GetSysClockFreq+0x9c>)
 80034e0:	5cd3      	ldrb	r3, [r2, r3]
 80034e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d010      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034ee:	4b11      	ldr	r3, [pc, #68]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x94>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	0c5b      	lsrs	r3, r3, #17
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	4a11      	ldr	r2, [pc, #68]	@ (8003540 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034fa:	5cd3      	ldrb	r3, [r2, r3]
 80034fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a0d      	ldr	r2, [pc, #52]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x98>)
 8003502:	fb03 f202 	mul.w	r2, r3, r2
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	fbb2 f3f3 	udiv	r3, r2, r3
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	e004      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a0c      	ldr	r2, [pc, #48]	@ (8003544 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003514:	fb02 f303 	mul.w	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	613b      	str	r3, [r7, #16]
      break;
 800351e:	e002      	b.n	8003526 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003520:	4b05      	ldr	r3, [pc, #20]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x98>)
 8003522:	613b      	str	r3, [r7, #16]
      break;
 8003524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003526:	693b      	ldr	r3, [r7, #16]
}
 8003528:	4618      	mov	r0, r3
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40021000 	.word	0x40021000
 8003538:	007a1200 	.word	0x007a1200
 800353c:	08006228 	.word	0x08006228
 8003540:	08006238 	.word	0x08006238
 8003544:	003d0900 	.word	0x003d0900

08003548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800354c:	4b02      	ldr	r3, [pc, #8]	@ (8003558 <HAL_RCC_GetHCLKFreq+0x10>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr
 8003558:	20000394 	.word	0x20000394

0800355c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003560:	f7ff fff2 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b05      	ldr	r3, [pc, #20]	@ (800357c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	4903      	ldr	r1, [pc, #12]	@ (8003580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003578:	4618      	mov	r0, r3
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000
 8003580:	08006220 	.word	0x08006220

08003584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003588:	f7ff ffde 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	0adb      	lsrs	r3, r3, #11
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4903      	ldr	r1, [pc, #12]	@ (80035a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	08006220 	.word	0x08006220

080035ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035b4:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <RCC_Delay+0x34>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0a      	ldr	r2, [pc, #40]	@ (80035e4 <RCC_Delay+0x38>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	0a5b      	lsrs	r3, r3, #9
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035c8:	bf00      	nop
  }
  while (Delay --);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1e5a      	subs	r2, r3, #1
 80035ce:	60fa      	str	r2, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f9      	bne.n	80035c8 <RCC_Delay+0x1c>
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	20000394 	.word	0x20000394
 80035e4:	10624dd3 	.word	0x10624dd3

080035e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e041      	b.n	800367e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7fe fb1e 	bl	8001c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	4619      	mov	r1, r3
 8003626:	4610      	mov	r0, r2
 8003628:	f000 fd8a 	bl	8004140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d001      	beq.n	80036a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e032      	b.n	8003706 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a18      	ldr	r2, [pc, #96]	@ (8003710 <HAL_TIM_Base_Start+0x88>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00e      	beq.n	80036d0 <HAL_TIM_Base_Start+0x48>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ba:	d009      	beq.n	80036d0 <HAL_TIM_Base_Start+0x48>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a14      	ldr	r2, [pc, #80]	@ (8003714 <HAL_TIM_Base_Start+0x8c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d004      	beq.n	80036d0 <HAL_TIM_Base_Start+0x48>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a13      	ldr	r2, [pc, #76]	@ (8003718 <HAL_TIM_Base_Start+0x90>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d111      	bne.n	80036f4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d010      	beq.n	8003704 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f2:	e007      	b.n	8003704 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800

0800371c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e041      	b.n	80037b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f839 	bl	80037ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3304      	adds	r3, #4
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f000 fcf0 	bl	8004140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr

080037cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_TIM_PWM_Start+0x24>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e022      	b.n	8003836 <HAL_TIM_PWM_Start+0x6a>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d109      	bne.n	800380a <HAL_TIM_PWM_Start+0x3e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	e015      	b.n	8003836 <HAL_TIM_PWM_Start+0x6a>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d109      	bne.n	8003824 <HAL_TIM_PWM_Start+0x58>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e008      	b.n	8003836 <HAL_TIM_PWM_Start+0x6a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e05e      	b.n	80038fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d104      	bne.n	800384e <HAL_TIM_PWM_Start+0x82>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800384c:	e013      	b.n	8003876 <HAL_TIM_PWM_Start+0xaa>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b04      	cmp	r3, #4
 8003852:	d104      	bne.n	800385e <HAL_TIM_PWM_Start+0x92>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800385c:	e00b      	b.n	8003876 <HAL_TIM_PWM_Start+0xaa>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b08      	cmp	r3, #8
 8003862:	d104      	bne.n	800386e <HAL_TIM_PWM_Start+0xa2>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800386c:	e003      	b.n	8003876 <HAL_TIM_PWM_Start+0xaa>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2201      	movs	r2, #1
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 feea 	bl	8004658 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1e      	ldr	r2, [pc, #120]	@ (8003904 <HAL_TIM_PWM_Start+0x138>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d107      	bne.n	800389e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800389c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a18      	ldr	r2, [pc, #96]	@ (8003904 <HAL_TIM_PWM_Start+0x138>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00e      	beq.n	80038c6 <HAL_TIM_PWM_Start+0xfa>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b0:	d009      	beq.n	80038c6 <HAL_TIM_PWM_Start+0xfa>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a14      	ldr	r2, [pc, #80]	@ (8003908 <HAL_TIM_PWM_Start+0x13c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d004      	beq.n	80038c6 <HAL_TIM_PWM_Start+0xfa>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a12      	ldr	r2, [pc, #72]	@ (800390c <HAL_TIM_PWM_Start+0x140>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d111      	bne.n	80038ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b06      	cmp	r3, #6
 80038d6:	d010      	beq.n	80038fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e8:	e007      	b.n	80038fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0201 	orr.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40012c00 	.word	0x40012c00
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800

08003910 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d109      	bne.n	800393c <HAL_TIM_PWM_Start_DMA+0x2c>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	e022      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x72>
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b04      	cmp	r3, #4
 8003940:	d109      	bne.n	8003956 <HAL_TIM_PWM_Start_DMA+0x46>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	bf0c      	ite	eq
 800394e:	2301      	moveq	r3, #1
 8003950:	2300      	movne	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	e015      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x72>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b08      	cmp	r3, #8
 800395a:	d109      	bne.n	8003970 <HAL_TIM_PWM_Start_DMA+0x60>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	bf0c      	ite	eq
 8003968:	2301      	moveq	r3, #1
 800396a:	2300      	movne	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e008      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x72>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	bf0c      	ite	eq
 800397c:	2301      	moveq	r3, #1
 800397e:	2300      	movne	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003986:	2302      	movs	r3, #2
 8003988:	e153      	b.n	8003c32 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d109      	bne.n	80039a4 <HAL_TIM_PWM_Start_DMA+0x94>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	e022      	b.n	80039ea <HAL_TIM_PWM_Start_DMA+0xda>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d109      	bne.n	80039be <HAL_TIM_PWM_Start_DMA+0xae>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	bf0c      	ite	eq
 80039b6:	2301      	moveq	r3, #1
 80039b8:	2300      	movne	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	e015      	b.n	80039ea <HAL_TIM_PWM_Start_DMA+0xda>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d109      	bne.n	80039d8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	e008      	b.n	80039ea <HAL_TIM_PWM_Start_DMA+0xda>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d024      	beq.n	8003a38 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_TIM_PWM_Start_DMA+0xea>
 80039f4:	887b      	ldrh	r3, [r7, #2]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e119      	b.n	8003c32 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d104      	bne.n	8003a0e <HAL_TIM_PWM_Start_DMA+0xfe>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a0c:	e016      	b.n	8003a3c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d104      	bne.n	8003a1e <HAL_TIM_PWM_Start_DMA+0x10e>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a1c:	e00e      	b.n	8003a3c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d104      	bne.n	8003a2e <HAL_TIM_PWM_Start_DMA+0x11e>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a2c:	e006      	b.n	8003a3c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2202      	movs	r2, #2
 8003a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a36:	e001      	b.n	8003a3c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0fa      	b.n	8003c32 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b0c      	cmp	r3, #12
 8003a40:	f200 80ae 	bhi.w	8003ba0 <HAL_TIM_PWM_Start_DMA+0x290>
 8003a44:	a201      	add	r2, pc, #4	@ (adr r2, 8003a4c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a81 	.word	0x08003a81
 8003a50:	08003ba1 	.word	0x08003ba1
 8003a54:	08003ba1 	.word	0x08003ba1
 8003a58:	08003ba1 	.word	0x08003ba1
 8003a5c:	08003ac9 	.word	0x08003ac9
 8003a60:	08003ba1 	.word	0x08003ba1
 8003a64:	08003ba1 	.word	0x08003ba1
 8003a68:	08003ba1 	.word	0x08003ba1
 8003a6c:	08003b11 	.word	0x08003b11
 8003a70:	08003ba1 	.word	0x08003ba1
 8003a74:	08003ba1 	.word	0x08003ba1
 8003a78:	08003ba1 	.word	0x08003ba1
 8003a7c:	08003b59 	.word	0x08003b59
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	4a6d      	ldr	r2, [pc, #436]	@ (8003c3c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003a86:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	4a6c      	ldr	r2, [pc, #432]	@ (8003c40 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	4a6b      	ldr	r2, [pc, #428]	@ (8003c44 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003a96:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3334      	adds	r3, #52	@ 0x34
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	887b      	ldrh	r3, [r7, #2]
 8003aa8:	f7fe fd5c 	bl	8002564 <HAL_DMA_Start_IT>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0bd      	b.n	8003c32 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac4:	60da      	str	r2, [r3, #12]
      break;
 8003ac6:	e06e      	b.n	8003ba6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003acc:	4a5b      	ldr	r2, [pc, #364]	@ (8003c3c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003ace:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad4:	4a5a      	ldr	r2, [pc, #360]	@ (8003c40 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003ad6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	4a59      	ldr	r2, [pc, #356]	@ (8003c44 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3338      	adds	r3, #56	@ 0x38
 8003aec:	461a      	mov	r2, r3
 8003aee:	887b      	ldrh	r3, [r7, #2]
 8003af0:	f7fe fd38 	bl	8002564 <HAL_DMA_Start_IT>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e099      	b.n	8003c32 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b0c:	60da      	str	r2, [r3, #12]
      break;
 8003b0e:	e04a      	b.n	8003ba6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b14:	4a49      	ldr	r2, [pc, #292]	@ (8003c3c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003b16:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1c:	4a48      	ldr	r2, [pc, #288]	@ (8003c40 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	4a47      	ldr	r2, [pc, #284]	@ (8003c44 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003b26:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	333c      	adds	r3, #60	@ 0x3c
 8003b34:	461a      	mov	r2, r3
 8003b36:	887b      	ldrh	r3, [r7, #2]
 8003b38:	f7fe fd14 	bl	8002564 <HAL_DMA_Start_IT>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e075      	b.n	8003c32 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b54:	60da      	str	r2, [r3, #12]
      break;
 8003b56:	e026      	b.n	8003ba6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	4a37      	ldr	r2, [pc, #220]	@ (8003c3c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003b5e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b64:	4a36      	ldr	r2, [pc, #216]	@ (8003c40 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003b66:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6c:	4a35      	ldr	r2, [pc, #212]	@ (8003c44 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003b6e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3340      	adds	r3, #64	@ 0x40
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	887b      	ldrh	r3, [r7, #2]
 8003b80:	f7fe fcf0 	bl	8002564 <HAL_DMA_Start_IT>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e051      	b.n	8003c32 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b9c:	60da      	str	r2, [r3, #12]
      break;
 8003b9e:	e002      	b.n	8003ba6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d141      	bne.n	8003c30 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fd4f 	bl	8004658 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a22      	ldr	r2, [pc, #136]	@ (8003c48 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d107      	bne.n	8003bd4 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bd2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c48 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00e      	beq.n	8003bfc <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be6:	d009      	beq.n	8003bfc <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a17      	ldr	r2, [pc, #92]	@ (8003c4c <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a16      	ldr	r2, [pc, #88]	@ (8003c50 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d111      	bne.n	8003c20 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b06      	cmp	r3, #6
 8003c0c:	d010      	beq.n	8003c30 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1e:	e007      	b.n	8003c30 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	0800402f 	.word	0x0800402f
 8003c40:	080040d7 	.word	0x080040d7
 8003c44:	08003f9d 	.word	0x08003f9d
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800

08003c54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e0ae      	b.n	8003dd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b0c      	cmp	r3, #12
 8003c7e:	f200 809f 	bhi.w	8003dc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c82:	a201      	add	r2, pc, #4	@ (adr r2, 8003c88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c88:	08003cbd 	.word	0x08003cbd
 8003c8c:	08003dc1 	.word	0x08003dc1
 8003c90:	08003dc1 	.word	0x08003dc1
 8003c94:	08003dc1 	.word	0x08003dc1
 8003c98:	08003cfd 	.word	0x08003cfd
 8003c9c:	08003dc1 	.word	0x08003dc1
 8003ca0:	08003dc1 	.word	0x08003dc1
 8003ca4:	08003dc1 	.word	0x08003dc1
 8003ca8:	08003d3f 	.word	0x08003d3f
 8003cac:	08003dc1 	.word	0x08003dc1
 8003cb0:	08003dc1 	.word	0x08003dc1
 8003cb4:	08003dc1 	.word	0x08003dc1
 8003cb8:	08003d7f 	.word	0x08003d7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 faaa 	bl	800421c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699a      	ldr	r2, [r3, #24]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0208 	orr.w	r2, r2, #8
 8003cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0204 	bic.w	r2, r2, #4
 8003ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6999      	ldr	r1, [r3, #24]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	619a      	str	r2, [r3, #24]
      break;
 8003cfa:	e064      	b.n	8003dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 faf0 	bl	80042e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6999      	ldr	r1, [r3, #24]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	021a      	lsls	r2, r3, #8
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	619a      	str	r2, [r3, #24]
      break;
 8003d3c:	e043      	b.n	8003dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fb39 	bl	80043bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0208 	orr.w	r2, r2, #8
 8003d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0204 	bic.w	r2, r2, #4
 8003d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69d9      	ldr	r1, [r3, #28]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	61da      	str	r2, [r3, #28]
      break;
 8003d7c:	e023      	b.n	8003dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fb83 	bl	8004490 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69d9      	ldr	r1, [r3, #28]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	021a      	lsls	r2, r3, #8
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	61da      	str	r2, [r3, #28]
      break;
 8003dbe:	e002      	b.n	8003dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_TIM_ConfigClockSource+0x1c>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e0b4      	b.n	8003f5e <HAL_TIM_ConfigClockSource+0x186>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e2c:	d03e      	beq.n	8003eac <HAL_TIM_ConfigClockSource+0xd4>
 8003e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e32:	f200 8087 	bhi.w	8003f44 <HAL_TIM_ConfigClockSource+0x16c>
 8003e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e3a:	f000 8086 	beq.w	8003f4a <HAL_TIM_ConfigClockSource+0x172>
 8003e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e42:	d87f      	bhi.n	8003f44 <HAL_TIM_ConfigClockSource+0x16c>
 8003e44:	2b70      	cmp	r3, #112	@ 0x70
 8003e46:	d01a      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0xa6>
 8003e48:	2b70      	cmp	r3, #112	@ 0x70
 8003e4a:	d87b      	bhi.n	8003f44 <HAL_TIM_ConfigClockSource+0x16c>
 8003e4c:	2b60      	cmp	r3, #96	@ 0x60
 8003e4e:	d050      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0x11a>
 8003e50:	2b60      	cmp	r3, #96	@ 0x60
 8003e52:	d877      	bhi.n	8003f44 <HAL_TIM_ConfigClockSource+0x16c>
 8003e54:	2b50      	cmp	r3, #80	@ 0x50
 8003e56:	d03c      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0xfa>
 8003e58:	2b50      	cmp	r3, #80	@ 0x50
 8003e5a:	d873      	bhi.n	8003f44 <HAL_TIM_ConfigClockSource+0x16c>
 8003e5c:	2b40      	cmp	r3, #64	@ 0x40
 8003e5e:	d058      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x13a>
 8003e60:	2b40      	cmp	r3, #64	@ 0x40
 8003e62:	d86f      	bhi.n	8003f44 <HAL_TIM_ConfigClockSource+0x16c>
 8003e64:	2b30      	cmp	r3, #48	@ 0x30
 8003e66:	d064      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x15a>
 8003e68:	2b30      	cmp	r3, #48	@ 0x30
 8003e6a:	d86b      	bhi.n	8003f44 <HAL_TIM_ConfigClockSource+0x16c>
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d060      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x15a>
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	d867      	bhi.n	8003f44 <HAL_TIM_ConfigClockSource+0x16c>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d05c      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x15a>
 8003e78:	2b10      	cmp	r3, #16
 8003e7a:	d05a      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x15a>
 8003e7c:	e062      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e8e:	f000 fbc4 	bl	800461a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	609a      	str	r2, [r3, #8]
      break;
 8003eaa:	e04f      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ebc:	f000 fbad 	bl	800461a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ece:	609a      	str	r2, [r3, #8]
      break;
 8003ed0:	e03c      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f000 fb24 	bl	800452c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2150      	movs	r1, #80	@ 0x50
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fb7b 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 8003ef0:	e02c      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003efe:	461a      	mov	r2, r3
 8003f00:	f000 fb42 	bl	8004588 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2160      	movs	r1, #96	@ 0x60
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fb6b 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 8003f10:	e01c      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f000 fb04 	bl	800452c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2140      	movs	r1, #64	@ 0x40
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fb5b 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 8003f30:	e00c      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	f000 fb52 	bl	80045e6 <TIM_ITRx_SetConfig>
      break;
 8003f42:	e003      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      break;
 8003f48:	e000      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr

08003f8a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d107      	bne.n	8003fc4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fc2:	e02a      	b.n	800401a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d107      	bne.n	8003fde <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fdc:	e01d      	b.n	800401a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d107      	bne.n	8003ff8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2204      	movs	r2, #4
 8003fec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ff6:	e010      	b.n	800401a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d107      	bne.n	8004012 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2208      	movs	r2, #8
 8004006:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004010:	e003      	b.n	800401a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7ff ffb5 	bl	8003f8a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	771a      	strb	r2, [r3, #28]
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	429a      	cmp	r2, r3
 8004044:	d10b      	bne.n	800405e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d136      	bne.n	80040c2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800405c:	e031      	b.n	80040c2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	429a      	cmp	r2, r3
 8004066:	d10b      	bne.n	8004080 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2202      	movs	r2, #2
 800406c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d125      	bne.n	80040c2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800407e:	e020      	b.n	80040c2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	429a      	cmp	r2, r3
 8004088:	d10b      	bne.n	80040a2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2204      	movs	r2, #4
 800408e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d114      	bne.n	80040c2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040a0:	e00f      	b.n	80040c2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d10a      	bne.n	80040c2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2208      	movs	r2, #8
 80040b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d103      	bne.n	80040c2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f7ff ff4f 	bl	8003f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	771a      	strb	r2, [r3, #28]
}
 80040ce:	bf00      	nop
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d103      	bne.n	80040f6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	771a      	strb	r2, [r3, #28]
 80040f4:	e019      	b.n	800412a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d103      	bne.n	8004108 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2202      	movs	r2, #2
 8004104:	771a      	strb	r2, [r3, #28]
 8004106:	e010      	b.n	800412a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	429a      	cmp	r2, r3
 8004110:	d103      	bne.n	800411a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2204      	movs	r2, #4
 8004116:	771a      	strb	r2, [r3, #28]
 8004118:	e007      	b.n	800412a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	429a      	cmp	r2, r3
 8004122:	d102      	bne.n	800412a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2208      	movs	r2, #8
 8004128:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f7ff ff24 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	771a      	strb	r2, [r3, #28]
}
 8004136:	bf00      	nop
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a2f      	ldr	r2, [pc, #188]	@ (8004210 <TIM_Base_SetConfig+0xd0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00b      	beq.n	8004170 <TIM_Base_SetConfig+0x30>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800415e:	d007      	beq.n	8004170 <TIM_Base_SetConfig+0x30>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a2c      	ldr	r2, [pc, #176]	@ (8004214 <TIM_Base_SetConfig+0xd4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d003      	beq.n	8004170 <TIM_Base_SetConfig+0x30>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a2b      	ldr	r2, [pc, #172]	@ (8004218 <TIM_Base_SetConfig+0xd8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d108      	bne.n	8004182 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a22      	ldr	r2, [pc, #136]	@ (8004210 <TIM_Base_SetConfig+0xd0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00b      	beq.n	80041a2 <TIM_Base_SetConfig+0x62>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004190:	d007      	beq.n	80041a2 <TIM_Base_SetConfig+0x62>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a1f      	ldr	r2, [pc, #124]	@ (8004214 <TIM_Base_SetConfig+0xd4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d003      	beq.n	80041a2 <TIM_Base_SetConfig+0x62>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a1e      	ldr	r2, [pc, #120]	@ (8004218 <TIM_Base_SetConfig+0xd8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d108      	bne.n	80041b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a0d      	ldr	r2, [pc, #52]	@ (8004210 <TIM_Base_SetConfig+0xd0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d103      	bne.n	80041e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f023 0201 	bic.w	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	611a      	str	r2, [r3, #16]
  }
}
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr
 8004210:	40012c00 	.word	0x40012c00
 8004214:	40000400 	.word	0x40000400
 8004218:	40000800 	.word	0x40000800

0800421c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f023 0201 	bic.w	r2, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0303 	bic.w	r3, r3, #3
 8004252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f023 0302 	bic.w	r3, r3, #2
 8004264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a1c      	ldr	r2, [pc, #112]	@ (80042e4 <TIM_OC1_SetConfig+0xc8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d10c      	bne.n	8004292 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0308 	bic.w	r3, r3, #8
 800427e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a13      	ldr	r2, [pc, #76]	@ (80042e4 <TIM_OC1_SetConfig+0xc8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d111      	bne.n	80042be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	621a      	str	r2, [r3, #32]
}
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40012c00 	.word	0x40012c00

080042e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f023 0210 	bic.w	r2, r3, #16
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800431e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f023 0320 	bic.w	r3, r3, #32
 8004332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a1d      	ldr	r2, [pc, #116]	@ (80043b8 <TIM_OC2_SetConfig+0xd0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d10d      	bne.n	8004364 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800434e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004362:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a14      	ldr	r2, [pc, #80]	@ (80043b8 <TIM_OC2_SetConfig+0xd0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d113      	bne.n	8004394 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800437a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	621a      	str	r2, [r3, #32]
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr
 80043b8:	40012c00 	.word	0x40012c00

080043bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0303 	bic.w	r3, r3, #3
 80043f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a1d      	ldr	r2, [pc, #116]	@ (800448c <TIM_OC3_SetConfig+0xd0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d10d      	bne.n	8004436 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a14      	ldr	r2, [pc, #80]	@ (800448c <TIM_OC3_SetConfig+0xd0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d113      	bne.n	8004466 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800444c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	621a      	str	r2, [r3, #32]
}
 8004480:	bf00      	nop
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40012c00 	.word	0x40012c00

08004490 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	031b      	lsls	r3, r3, #12
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004528 <TIM_OC4_SetConfig+0x98>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d109      	bne.n	8004504 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	019b      	lsls	r3, r3, #6
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	621a      	str	r2, [r3, #32]
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	40012c00 	.word	0x40012c00

0800452c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f023 0201 	bic.w	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f023 030a 	bic.w	r3, r3, #10
 8004568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4313      	orrs	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f023 0210 	bic.w	r2, r3, #16
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	031b      	lsls	r3, r3, #12
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	621a      	str	r2, [r3, #32]
}
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr

080045e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	f043 0307 	orr.w	r3, r3, #7
 8004608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	609a      	str	r2, [r3, #8]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800461a:	b480      	push	{r7}
 800461c:	b087      	sub	sp, #28
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
 8004626:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004634:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	021a      	lsls	r2, r3, #8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	431a      	orrs	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4313      	orrs	r3, r2
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	609a      	str	r2, [r3, #8]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	2201      	movs	r2, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1a      	ldr	r2, [r3, #32]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	43db      	mvns	r3, r3
 800467a:	401a      	ands	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1a      	ldr	r2, [r3, #32]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	fa01 f303 	lsl.w	r3, r1, r3
 8004690:	431a      	orrs	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	621a      	str	r2, [r3, #32]
}
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr

080046a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e046      	b.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a16      	ldr	r2, [pc, #88]	@ (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00e      	beq.n	800471a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004704:	d009      	beq.n	800471a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a12      	ldr	r2, [pc, #72]	@ (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d004      	beq.n	800471a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a10      	ldr	r2, [pc, #64]	@ (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d10c      	bne.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004720:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	4313      	orrs	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800

0800475c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e042      	b.n	80047f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fd fbf4 	bl	8001f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2224      	movs	r2, #36	@ 0x24
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800479e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fded 	bl	8005380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08a      	sub	sp, #40	@ 0x28
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b20      	cmp	r3, #32
 800481a:	d175      	bne.n	8004908 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_UART_Transmit+0x2c>
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e06e      	b.n	800490a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2221      	movs	r2, #33	@ 0x21
 8004836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800483a:	f7fd fce3 	bl	8002204 <HAL_GetTick>
 800483e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	88fa      	ldrh	r2, [r7, #6]
 8004844:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	88fa      	ldrh	r2, [r7, #6]
 800484a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004854:	d108      	bne.n	8004868 <HAL_UART_Transmit+0x6c>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d104      	bne.n	8004868 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	e003      	b.n	8004870 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800486c:	2300      	movs	r3, #0
 800486e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004870:	e02e      	b.n	80048d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2200      	movs	r2, #0
 800487a:	2180      	movs	r1, #128	@ 0x80
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fb52 	bl	8004f26 <UART_WaitOnFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e03a      	b.n	800490a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	3302      	adds	r3, #2
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	e007      	b.n	80048c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	781a      	ldrb	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	3301      	adds	r3, #1
 80048c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1cb      	bne.n	8004872 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2200      	movs	r2, #0
 80048e2:	2140      	movs	r1, #64	@ 0x40
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fb1e 	bl	8004f26 <UART_WaitOnFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e006      	b.n	800490a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	e000      	b.n	800490a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004908:	2302      	movs	r3, #2
  }
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004912:	b480      	push	{r7}
 8004914:	b085      	sub	sp, #20
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	4613      	mov	r3, r2
 800491e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b20      	cmp	r3, #32
 800492a:	d121      	bne.n	8004970 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_UART_Transmit_IT+0x26>
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e01a      	b.n	8004972 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	88fa      	ldrh	r2, [r7, #6]
 8004946:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	88fa      	ldrh	r2, [r7, #6]
 800494c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2221      	movs	r2, #33	@ 0x21
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800496a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	e000      	b.n	8004972 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004970:	2302      	movs	r3, #2
  }
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr

0800497c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	4613      	mov	r3, r2
 8004988:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b20      	cmp	r3, #32
 8004994:	d112      	bne.n	80049bc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_UART_Receive_IT+0x26>
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e00b      	b.n	80049be <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	461a      	mov	r2, r3
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fb10 	bl	8004fd8 <UART_Start_Receive_IT>
 80049b8:	4603      	mov	r3, r0
 80049ba:	e000      	b.n	80049be <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
  }
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b0ba      	sub	sp, #232	@ 0xe8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10f      	bne.n	8004a2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <HAL_UART_IRQHandler+0x66>
 8004a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fbec 	bl	8005204 <UART_Receive_IT>
      return;
 8004a2c:	e25b      	b.n	8004ee6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 80de 	beq.w	8004bf4 <HAL_UART_IRQHandler+0x22c>
 8004a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d106      	bne.n	8004a52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80d1 	beq.w	8004bf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_UART_IRQHandler+0xae>
 8004a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6e:	f043 0201 	orr.w	r2, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00b      	beq.n	8004a9a <HAL_UART_IRQHandler+0xd2>
 8004a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a92:	f043 0202 	orr.w	r2, r3, #2
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00b      	beq.n	8004abe <HAL_UART_IRQHandler+0xf6>
 8004aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab6:	f043 0204 	orr.w	r2, r3, #4
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d011      	beq.n	8004aee <HAL_UART_IRQHandler+0x126>
 8004aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d105      	bne.n	8004ae2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae6:	f043 0208 	orr.w	r2, r3, #8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 81f2 	beq.w	8004edc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_UART_IRQHandler+0x14e>
 8004b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b08:	f003 0320 	and.w	r3, r3, #32
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fb77 	bl	8005204 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf14      	ite	ne
 8004b24:	2301      	movne	r3, #1
 8004b26:	2300      	moveq	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d103      	bne.n	8004b42 <HAL_UART_IRQHandler+0x17a>
 8004b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d04f      	beq.n	8004be2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fa81 	bl	800504a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d041      	beq.n	8004bda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3314      	adds	r3, #20
 8004b5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1d9      	bne.n	8004b56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d013      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bae:	4a7e      	ldr	r2, [pc, #504]	@ (8004da8 <HAL_UART_IRQHandler+0x3e0>)
 8004bb0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fd fd70 	bl	800269c <HAL_DMA_Abort_IT>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d016      	beq.n	8004bf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd0:	e00e      	b.n	8004bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f993 	bl	8004efe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd8:	e00a      	b.n	8004bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f98f 	bl	8004efe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be0:	e006      	b.n	8004bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f98b 	bl	8004efe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004bee:	e175      	b.n	8004edc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf0:	bf00      	nop
    return;
 8004bf2:	e173      	b.n	8004edc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	f040 814f 	bne.w	8004e9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 8148 	beq.w	8004e9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 8141 	beq.w	8004e9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80b6 	beq.w	8004dac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 8145 	beq.w	8004ee0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	f080 813e 	bcs.w	8004ee0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	f000 8088 	beq.w	8004d88 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ca4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ca8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004cb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cb4:	e841 2300 	strex	r3, r2, [r1]
 8004cb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1d9      	bne.n	8004c78 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3314      	adds	r3, #20
 8004cca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004cd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cd6:	f023 0301 	bic.w	r3, r3, #1
 8004cda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3314      	adds	r3, #20
 8004ce4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ce8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004cec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004cf0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004cfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e1      	bne.n	8004cc4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3314      	adds	r3, #20
 8004d06:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3314      	adds	r3, #20
 8004d20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d24:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d26:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d2a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e3      	bne.n	8004d00 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d58:	f023 0310 	bic.w	r3, r3, #16
 8004d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d6a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d6c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e3      	bne.n	8004d46 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fd fc4e 	bl	8002624 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f8b6 	bl	8004f10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004da4:	e09c      	b.n	8004ee0 <HAL_UART_IRQHandler+0x518>
 8004da6:	bf00      	nop
 8004da8:	0800510f 	.word	0x0800510f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 808e 	beq.w	8004ee4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8089 	beq.w	8004ee4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	330c      	adds	r3, #12
 8004dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004de4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004de8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	330c      	adds	r3, #12
 8004df2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004df6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004df8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e3      	bne.n	8004dd2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3314      	adds	r3, #20
 8004e10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	623b      	str	r3, [r7, #32]
   return(result);
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3314      	adds	r3, #20
 8004e2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e3      	bne.n	8004e0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	330c      	adds	r3, #12
 8004e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0310 	bic.w	r3, r3, #16
 8004e66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e74:	61fa      	str	r2, [r7, #28]
 8004e76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e78:	69b9      	ldr	r1, [r7, #24]
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	e841 2300 	strex	r3, r2, [r1]
 8004e80:	617b      	str	r3, [r7, #20]
   return(result);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e3      	bne.n	8004e50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e92:	4619      	mov	r1, r3
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f83b 	bl	8004f10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e9a:	e023      	b.n	8004ee4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d009      	beq.n	8004ebc <HAL_UART_IRQHandler+0x4f4>
 8004ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f93e 	bl	8005136 <UART_Transmit_IT>
    return;
 8004eba:	e014      	b.n	8004ee6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00e      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x51e>
 8004ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f97d 	bl	80051d4 <UART_EndTransmit_IT>
    return;
 8004eda:	e004      	b.n	8004ee6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004edc:	bf00      	nop
 8004ede:	e002      	b.n	8004ee6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ee0:	bf00      	nop
 8004ee2:	e000      	b.n	8004ee6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ee4:	bf00      	nop
  }
}
 8004ee6:	37e8      	adds	r7, #232	@ 0xe8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr

08004efe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr

08004f10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr

08004f26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b086      	sub	sp, #24
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	4613      	mov	r3, r2
 8004f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f36:	e03b      	b.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f3e:	d037      	beq.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f40:	f7fd f960 	bl	8002204 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	6a3a      	ldr	r2, [r7, #32]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d302      	bcc.n	8004f56 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e03a      	b.n	8004fd0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d023      	beq.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b80      	cmp	r3, #128	@ 0x80
 8004f6c:	d020      	beq.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b40      	cmp	r3, #64	@ 0x40
 8004f72:	d01d      	beq.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d116      	bne.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f856 	bl	800504a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e00f      	b.n	8004fd0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d0b4      	beq.n	8004f38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3718      	adds	r7, #24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	88fa      	ldrh	r2, [r7, #6]
 8004ff0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	88fa      	ldrh	r2, [r7, #6]
 8004ff6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2222      	movs	r2, #34	@ 0x22
 8005002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d007      	beq.n	800501e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800501c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695a      	ldr	r2, [r3, #20]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0201 	orr.w	r2, r2, #1
 800502c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0220 	orr.w	r2, r2, #32
 800503c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr

0800504a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800504a:	b480      	push	{r7}
 800504c:	b095      	sub	sp, #84	@ 0x54
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	330c      	adds	r3, #12
 8005058:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005064:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005068:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	330c      	adds	r3, #12
 8005070:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005072:	643a      	str	r2, [r7, #64]	@ 0x40
 8005074:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005078:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e5      	bne.n	8005052 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3314      	adds	r3, #20
 800508c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	61fb      	str	r3, [r7, #28]
   return(result);
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f023 0301 	bic.w	r3, r3, #1
 800509c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3314      	adds	r3, #20
 80050a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e5      	bne.n	8005086 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d119      	bne.n	80050f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	330c      	adds	r3, #12
 80050c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f023 0310 	bic.w	r3, r3, #16
 80050d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	330c      	adds	r3, #12
 80050e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050e2:	61ba      	str	r2, [r7, #24]
 80050e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6979      	ldr	r1, [r7, #20]
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	613b      	str	r3, [r7, #16]
   return(result);
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e5      	bne.n	80050c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005104:	bf00      	nop
 8005106:	3754      	adds	r7, #84	@ 0x54
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr

0800510e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f7ff fee8 	bl	8004efe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b21      	cmp	r3, #33	@ 0x21
 8005148:	d13e      	bne.n	80051c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005152:	d114      	bne.n	800517e <UART_Transmit_IT+0x48>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d110      	bne.n	800517e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005170:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	1c9a      	adds	r2, r3, #2
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	621a      	str	r2, [r3, #32]
 800517c:	e008      	b.n	8005190 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	1c59      	adds	r1, r3, #1
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6211      	str	r1, [r2, #32]
 8005188:	781a      	ldrb	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29b      	uxth	r3, r3
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	4619      	mov	r1, r3
 800519e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10f      	bne.n	80051c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e000      	b.n	80051ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
  }
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr

080051d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff fe79 	bl	8004eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08c      	sub	sp, #48	@ 0x30
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b22      	cmp	r3, #34	@ 0x22
 8005216:	f040 80ae 	bne.w	8005376 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005222:	d117      	bne.n	8005254 <UART_Receive_IT+0x50>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d113      	bne.n	8005254 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800522c:	2300      	movs	r3, #0
 800522e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005234:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005242:	b29a      	uxth	r2, r3
 8005244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005246:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524c:	1c9a      	adds	r2, r3, #2
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	629a      	str	r2, [r3, #40]	@ 0x28
 8005252:	e026      	b.n	80052a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800525a:	2300      	movs	r3, #0
 800525c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005266:	d007      	beq.n	8005278 <UART_Receive_IT+0x74>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <UART_Receive_IT+0x82>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d106      	bne.n	8005286 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	b2da      	uxtb	r2, r3
 8005280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	e008      	b.n	8005298 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005292:	b2da      	uxtb	r2, r3
 8005294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005296:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	4619      	mov	r1, r3
 80052b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d15d      	bne.n	8005372 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0220 	bic.w	r2, r2, #32
 80052c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695a      	ldr	r2, [r3, #20]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d135      	bne.n	8005368 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	330c      	adds	r3, #12
 8005308:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	613b      	str	r3, [r7, #16]
   return(result);
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f023 0310 	bic.w	r3, r3, #16
 8005318:	627b      	str	r3, [r7, #36]	@ 0x24
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330c      	adds	r3, #12
 8005320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005322:	623a      	str	r2, [r7, #32]
 8005324:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	69f9      	ldr	r1, [r7, #28]
 8005328:	6a3a      	ldr	r2, [r7, #32]
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e5      	bne.n	8005302 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b10      	cmp	r3, #16
 8005342:	d10a      	bne.n	800535a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800535e:	4619      	mov	r1, r3
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff fdd5 	bl	8004f10 <HAL_UARTEx_RxEventCallback>
 8005366:	e002      	b.n	800536e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fc f8f1 	bl	8001550 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	e002      	b.n	8005378 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	e000      	b.n	8005378 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005376:	2302      	movs	r3, #2
  }
}
 8005378:	4618      	mov	r0, r3
 800537a:	3730      	adds	r7, #48	@ 0x30
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80053ba:	f023 030c 	bic.w	r3, r3, #12
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6812      	ldr	r2, [r2, #0]
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	430b      	orrs	r3, r1
 80053c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005494 <UART_SetConfig+0x114>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d103      	bne.n	80053f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053e8:	f7fe f8cc 	bl	8003584 <HAL_RCC_GetPCLK2Freq>
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	e002      	b.n	80053f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053f0:	f7fe f8b4 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 80053f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009a      	lsls	r2, r3, #2
 8005400:	441a      	add	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	fbb2 f3f3 	udiv	r3, r2, r3
 800540c:	4a22      	ldr	r2, [pc, #136]	@ (8005498 <UART_SetConfig+0x118>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	0119      	lsls	r1, r3, #4
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	009a      	lsls	r2, r3, #2
 8005420:	441a      	add	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	fbb2 f2f3 	udiv	r2, r2, r3
 800542c:	4b1a      	ldr	r3, [pc, #104]	@ (8005498 <UART_SetConfig+0x118>)
 800542e:	fba3 0302 	umull	r0, r3, r3, r2
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	2064      	movs	r0, #100	@ 0x64
 8005436:	fb00 f303 	mul.w	r3, r0, r3
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	3332      	adds	r3, #50	@ 0x32
 8005440:	4a15      	ldr	r2, [pc, #84]	@ (8005498 <UART_SetConfig+0x118>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800544c:	4419      	add	r1, r3
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	009a      	lsls	r2, r3, #2
 8005458:	441a      	add	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	fbb2 f2f3 	udiv	r2, r2, r3
 8005464:	4b0c      	ldr	r3, [pc, #48]	@ (8005498 <UART_SetConfig+0x118>)
 8005466:	fba3 0302 	umull	r0, r3, r3, r2
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	2064      	movs	r0, #100	@ 0x64
 800546e:	fb00 f303 	mul.w	r3, r0, r3
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	3332      	adds	r3, #50	@ 0x32
 8005478:	4a07      	ldr	r2, [pc, #28]	@ (8005498 <UART_SetConfig+0x118>)
 800547a:	fba2 2303 	umull	r2, r3, r2, r3
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	f003 020f 	and.w	r2, r3, #15
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	440a      	add	r2, r1
 800548a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800548c:	bf00      	nop
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40013800 	.word	0x40013800
 8005498:	51eb851f 	.word	0x51eb851f

0800549c <WS28XX_Delay>:
void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed);

/***********************************************************************************************************/

void WS28XX_Delay(uint32_t Delay)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
#if WS28XX_RTOS == WS28XX_RTOS_DISABLE
  HAL_Delay(Delay);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7fc feb7 	bl	8002218 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 80054aa:	bf00      	nop
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <WS28XX_Lock>:

/***********************************************************************************************************/

void WS28XX_Lock(WS28XX_HandleTypeDef *hLed)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b082      	sub	sp, #8
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  while (hLed->Lock)
 80054ba:	e002      	b.n	80054c2 <WS28XX_Lock+0x10>
  {
    WS28XX_Delay(1);
 80054bc:	2001      	movs	r0, #1
 80054be:	f7ff ffed 	bl	800549c <WS28XX_Delay>
  while (hLed->Lock)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	795b      	ldrb	r3, [r3, #5]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1f8      	bne.n	80054bc <WS28XX_Lock+0xa>
  }
  hLed->Lock = 1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	715a      	strb	r2, [r3, #5]
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <WS28XX_UnLock>:

/***********************************************************************************************************/

void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  hLed->Lock = 0;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	715a      	strb	r2, [r3, #5]
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr

080054f0 <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *hLed, TIM_HandleTypeDef *hTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	4611      	mov	r1, r2
 80054fc:	461a      	mov	r2, r3
 80054fe:	460b      	mov	r3, r1
 8005500:	80fb      	strh	r3, [r7, #6]
 8005502:	4613      	mov	r3, r2
 8005504:	717b      	strb	r3, [r7, #5]
  bool answer = false;
 8005506:	2300      	movs	r3, #0
 8005508:	75fb      	strb	r3, [r7, #23]
  uint32_t aar_value;
  do
  {
    if (hLed == NULL || hTim == NULL)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d07d      	beq.n	800560c <WS28XX_Init+0x11c>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d07a      	beq.n	800560c <WS28XX_Init+0x11c>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 8005516:	8c3b      	ldrh	r3, [r7, #32]
 8005518:	f240 2242 	movw	r2, #578	@ 0x242
 800551c:	4293      	cmp	r3, r2
 800551e:	d874      	bhi.n	800560a <WS28XX_Init+0x11a>
    {
      break;
    }
    hLed->Channel = Channel;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	797a      	ldrb	r2, [r7, #5]
 8005524:	711a      	strb	r2, [r3, #4]
    hLed->MaxPixel = Pixel;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8c3a      	ldrh	r2, [r7, #32]
 800552a:	815a      	strh	r2, [r3, #10]
    hLed->hTim = hTim;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	4618      	mov	r0, r3
 8005536:	f7fa fed5 	bl	80002e4 <__aeabi_i2f>
 800553a:	4603      	mov	r3, r0
 800553c:	4936      	ldr	r1, [pc, #216]	@ (8005618 <WS28XX_Init+0x128>)
 800553e:	4618      	mov	r0, r3
 8005540:	f7fa ffd8 	bl	80004f4 <__aeabi_fdiv>
 8005544:	4603      	mov	r3, r0
 8005546:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800554a:	4618      	mov	r0, r3
 800554c:	f7fa fe14 	bl	8000178 <__aeabi_fsub>
 8005550:	4603      	mov	r3, r0
 8005552:	4618      	mov	r0, r3
 8005554:	f7fb f86a 	bl	800062c <__aeabi_f2uiz>
 8005558:	4603      	mov	r3, r0
 800555a:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(hLed->hTim ,aar_value);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(hLed->hTim, 0);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2200      	movs	r2, #0
 8005576:	629a      	str	r2, [r3, #40]	@ 0x28
    hLed->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8005578:	6938      	ldr	r0, [r7, #16]
 800557a:	f7fa feaf 	bl	80002dc <__aeabi_ui2f>
 800557e:	4603      	mov	r3, r0
 8005580:	4926      	ldr	r1, [pc, #152]	@ (800561c <WS28XX_Init+0x12c>)
 8005582:	4618      	mov	r0, r3
 8005584:	f7fa ff02 	bl	800038c <__aeabi_fmul>
 8005588:	4603      	mov	r3, r0
 800558a:	4925      	ldr	r1, [pc, #148]	@ (8005620 <WS28XX_Init+0x130>)
 800558c:	4618      	mov	r0, r3
 800558e:	f7fa ffb1 	bl	80004f4 <__aeabi_fdiv>
 8005592:	4603      	mov	r3, r0
 8005594:	4618      	mov	r0, r3
 8005596:	f7fb f849 	bl	800062c <__aeabi_f2uiz>
 800559a:	4603      	mov	r3, r0
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	80da      	strh	r2, [r3, #6]
    hLed->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 80055a2:	6938      	ldr	r0, [r7, #16]
 80055a4:	f7fa fe9a 	bl	80002dc <__aeabi_ui2f>
 80055a8:	4603      	mov	r3, r0
 80055aa:	491b      	ldr	r1, [pc, #108]	@ (8005618 <WS28XX_Init+0x128>)
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fa feed 	bl	800038c <__aeabi_fmul>
 80055b2:	4603      	mov	r3, r0
 80055b4:	491a      	ldr	r1, [pc, #104]	@ (8005620 <WS28XX_Init+0x130>)
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fa ff9c 	bl	80004f4 <__aeabi_fdiv>
 80055bc:	4603      	mov	r3, r0
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fb f834 	bl	800062c <__aeabi_f2uiz>
 80055c4:	4603      	mov	r3, r0
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	811a      	strh	r2, [r3, #8]
    memset(hLed->Pixel, 0, sizeof(hLed->Pixel));
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	330c      	adds	r3, #12
 80055d0:	f240 62c6 	movw	r2, #1734	@ 0x6c6
 80055d4:	2100      	movs	r1, #0
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 f960 	bl	800589c <memset>
    memset(hLed->Buffer, 0, sizeof(hLed->Buffer));
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f203 63d2 	addw	r3, r3, #1746	@ 0x6d2
 80055e2:	f243 6234 	movw	r2, #13876	@ 0x3634
 80055e6:	2100      	movs	r1, #0
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 f957 	bl	800589c <memset>
    HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, Pixel);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	791b      	ldrb	r3, [r3, #4]
 80055f6:	4619      	mov	r1, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f203 62d2 	addw	r2, r3, #1746	@ 0x6d2
 80055fe:	8c3b      	ldrh	r3, [r7, #32]
 8005600:	f7fe f986 	bl	8003910 <HAL_TIM_PWM_Start_DMA>
    answer = true;
 8005604:	2301      	movs	r3, #1
 8005606:	75fb      	strb	r3, [r7, #23]
 8005608:	e000      	b.n	800560c <WS28XX_Init+0x11c>
      break;
 800560a:	bf00      	nop
  }
  while (0);

  return answer;
 800560c:	7dfb      	ldrb	r3, [r7, #23]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	3f4ccccd 	.word	0x3f4ccccd
 800561c:	3ecccccd 	.word	0x3ecccccd
 8005620:	3fa00000 	.word	0x3fa00000

08005624 <WS28XX_SetPixel_RGBW_565>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_565(WS28XX_HandleTypeDef *hLed, uint16_t Pixel, uint16_t Color, uint8_t Brightness)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	4608      	mov	r0, r1
 800562e:	4611      	mov	r1, r2
 8005630:	461a      	mov	r2, r3
 8005632:	4603      	mov	r3, r0
 8005634:	817b      	strh	r3, [r7, #10]
 8005636:	460b      	mov	r3, r1
 8005638:	813b      	strh	r3, [r7, #8]
 800563a:	4613      	mov	r3, r2
 800563c:	71fb      	strb	r3, [r7, #7]
  bool answer = true;
 800563e:	2301      	movs	r3, #1
 8005640:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= hLed->MaxPixel)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	895b      	ldrh	r3, [r3, #10]
 8005646:	897a      	ldrh	r2, [r7, #10]
 8005648:	429a      	cmp	r2, r3
 800564a:	d302      	bcc.n	8005652 <WS28XX_SetPixel_RGBW_565+0x2e>
    {
      answer = false;
 800564c:	2300      	movs	r3, #0
 800564e:	75fb      	strb	r3, [r7, #23]
      break;
 8005650:	e051      	b.n	80056f6 <WS28XX_SetPixel_RGBW_565+0xd2>
    }
    Red = ((Color >> 8) & 0xF8) * Brightness / 255;
 8005652:	893b      	ldrh	r3, [r7, #8]
 8005654:	0a1b      	lsrs	r3, r3, #8
 8005656:	b29b      	uxth	r3, r3
 8005658:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800565c:	79fa      	ldrb	r2, [r7, #7]
 800565e:	fb02 f303 	mul.w	r3, r2, r3
 8005662:	4a28      	ldr	r2, [pc, #160]	@ (8005704 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8005664:	fb82 1203 	smull	r1, r2, r2, r3
 8005668:	441a      	add	r2, r3
 800566a:	11d2      	asrs	r2, r2, #7
 800566c:	17db      	asrs	r3, r3, #31
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	75bb      	strb	r3, [r7, #22]
    Green = ((Color >> 3) & 0xFC)* Brightness / 255;
 8005672:	893b      	ldrh	r3, [r7, #8]
 8005674:	08db      	lsrs	r3, r3, #3
 8005676:	b29b      	uxth	r3, r3
 8005678:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 800567c:	79fa      	ldrb	r2, [r7, #7]
 800567e:	fb02 f303 	mul.w	r3, r2, r3
 8005682:	4a20      	ldr	r2, [pc, #128]	@ (8005704 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8005684:	fb82 1203 	smull	r1, r2, r2, r3
 8005688:	441a      	add	r2, r3
 800568a:	11d2      	asrs	r2, r2, #7
 800568c:	17db      	asrs	r3, r3, #31
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	757b      	strb	r3, [r7, #21]
    Blue = ((Color << 3) & 0xF8) * Brightness / 255;
 8005692:	893b      	ldrh	r3, [r7, #8]
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	b2db      	uxtb	r3, r3
 8005698:	79fa      	ldrb	r2, [r7, #7]
 800569a:	fb02 f303 	mul.w	r3, r2, r3
 800569e:	4a19      	ldr	r2, [pc, #100]	@ (8005704 <WS28XX_SetPixel_RGBW_565+0xe0>)
 80056a0:	fb82 1203 	smull	r1, r2, r2, r3
 80056a4:	441a      	add	r2, r3
 80056a6:	11d2      	asrs	r2, r2, #7
 80056a8:	17db      	asrs	r3, r3, #31
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 80056ae:	7d7b      	ldrb	r3, [r7, #21]
 80056b0:	897a      	ldrh	r2, [r7, #10]
 80056b2:	4915      	ldr	r1, [pc, #84]	@ (8005708 <WS28XX_SetPixel_RGBW_565+0xe4>)
 80056b4:	5cc8      	ldrb	r0, [r1, r3]
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	4613      	mov	r3, r2
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	4413      	add	r3, r2
 80056be:	440b      	add	r3, r1
 80056c0:	330c      	adds	r3, #12
 80056c2:	4602      	mov	r2, r0
 80056c4:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 80056c6:	7dbb      	ldrb	r3, [r7, #22]
 80056c8:	897a      	ldrh	r2, [r7, #10]
 80056ca:	490f      	ldr	r1, [pc, #60]	@ (8005708 <WS28XX_SetPixel_RGBW_565+0xe4>)
 80056cc:	5cc8      	ldrb	r0, [r1, r3]
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	4613      	mov	r3, r2
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	4413      	add	r3, r2
 80056d6:	440b      	add	r3, r1
 80056d8:	330d      	adds	r3, #13
 80056da:	4602      	mov	r2, r0
 80056dc:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 80056de:	7d3b      	ldrb	r3, [r7, #20]
 80056e0:	897a      	ldrh	r2, [r7, #10]
 80056e2:	4909      	ldr	r1, [pc, #36]	@ (8005708 <WS28XX_SetPixel_RGBW_565+0xe4>)
 80056e4:	5cc8      	ldrb	r0, [r1, r3]
 80056e6:	68f9      	ldr	r1, [r7, #12]
 80056e8:	4613      	mov	r3, r2
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	4413      	add	r3, r2
 80056ee:	440b      	add	r3, r1
 80056f0:	330e      	adds	r3, #14
 80056f2:	4602      	mov	r2, r0
 80056f4:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 80056f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	80808081 	.word	0x80808081
 8005708:	0800623c 	.word	0x0800623c

0800570c <WS28XX_Update>:
  * @param  *hLed: Pointer to WS28XX_hLedTypeDef structure
  *
  * @retval bool: true or false
  */
bool WS28XX_Update(WS28XX_HandleTypeDef *hLed)
{
 800570c:	b590      	push	{r4, r7, lr}
 800570e:	b089      	sub	sp, #36	@ 0x24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  bool answer = true;
 8005714:	2301      	movs	r3, #1
 8005716:	77fb      	strb	r3, [r7, #31]
  uint32_t i = 2;
 8005718:	2302      	movs	r3, #2
 800571a:	61bb      	str	r3, [r7, #24]
  WS28XX_Lock(hLed);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff fec8 	bl	80054b2 <WS28XX_Lock>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 8005722:	2300      	movs	r3, #0
 8005724:	82fb      	strh	r3, [r7, #22]
 8005726:	e03e      	b.n	80057a6 <WS28XX_Update+0x9a>
  {
    for (int rgb = 0; rgb < 3; rgb ++)
 8005728:	2300      	movs	r3, #0
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	e035      	b.n	800579a <WS28XX_Update+0x8e>
    {
      for (int b = 7; b >= 0 ; b--)
 800572e:	2307      	movs	r3, #7
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	e02c      	b.n	800578e <WS28XX_Update+0x82>
      {
        if ((hLed->Pixel[pixel][rgb] & (1 << b)) == 0)
 8005734:	8afa      	ldrh	r2, [r7, #22]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	4413      	add	r3, r2
 800573e:	18ca      	adds	r2, r1, r3
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	4413      	add	r3, r2
 8005744:	330c      	adds	r3, #12
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	fa42 f303 	asr.w	r3, r2, r3
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10a      	bne.n	800576e <WS28XX_Update+0x62>
        {
          hLed->Buffer[i] = hLed->Pulse0;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	88db      	ldrh	r3, [r3, #6]
 800575c:	b2d9      	uxtb	r1, r3
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	4413      	add	r3, r2
 8005764:	f203 63d2 	addw	r3, r3, #1746	@ 0x6d2
 8005768:	460a      	mov	r2, r1
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	e009      	b.n	8005782 <WS28XX_Update+0x76>
        }
        else
        {
          hLed->Buffer[i] = hLed->Pulse1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	891b      	ldrh	r3, [r3, #8]
 8005772:	b2d9      	uxtb	r1, r3
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	4413      	add	r3, r2
 800577a:	f203 63d2 	addw	r3, r3, #1746	@ 0x6d2
 800577e:	460a      	mov	r2, r1
 8005780:	701a      	strb	r2, [r3, #0]
        }
        i++;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	3301      	adds	r3, #1
 8005786:	61bb      	str	r3, [r7, #24]
      for (int b = 7; b >= 0 ; b--)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3b01      	subs	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	dacf      	bge.n	8005734 <WS28XX_Update+0x28>
    for (int rgb = 0; rgb < 3; rgb ++)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	3301      	adds	r3, #1
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b02      	cmp	r3, #2
 800579e:	ddc6      	ble.n	800572e <WS28XX_Update+0x22>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 80057a0:	8afb      	ldrh	r3, [r7, #22]
 80057a2:	3301      	adds	r3, #1
 80057a4:	82fb      	strh	r3, [r7, #22]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	895b      	ldrh	r3, [r3, #10]
 80057aa:	8afa      	ldrh	r2, [r7, #22]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d3bb      	bcc.n	8005728 <WS28XX_Update+0x1c>
      }
    }
  }
  if (HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, (hLed->MaxPixel * 24) + 4) != HAL_OK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6818      	ldr	r0, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	791b      	ldrb	r3, [r3, #4]
 80057b8:	461c      	mov	r4, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f203 62d2 	addw	r2, r3, #1746	@ 0x6d2
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	895b      	ldrh	r3, [r3, #10]
 80057c4:	4619      	mov	r1, r3
 80057c6:	0049      	lsls	r1, r1, #1
 80057c8:	440b      	add	r3, r1
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3304      	adds	r3, #4
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	4621      	mov	r1, r4
 80057d4:	f7fe f89c 	bl	8003910 <HAL_TIM_PWM_Start_DMA>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <WS28XX_Update+0xd6>
  {
    answer = false;
 80057de:	2300      	movs	r3, #0
 80057e0:	77fb      	strb	r3, [r7, #31]
  }
  WS28XX_UnLock(hLed);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff fe78 	bl	80054d8 <WS28XX_UnLock>
  return answer;
 80057e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3724      	adds	r7, #36	@ 0x24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd90      	pop	{r4, r7, pc}
	...

080057f4 <sniprintf>:
 80057f4:	b40c      	push	{r2, r3}
 80057f6:	b530      	push	{r4, r5, lr}
 80057f8:	4b17      	ldr	r3, [pc, #92]	@ (8005858 <sniprintf+0x64>)
 80057fa:	1e0c      	subs	r4, r1, #0
 80057fc:	681d      	ldr	r5, [r3, #0]
 80057fe:	b09d      	sub	sp, #116	@ 0x74
 8005800:	da08      	bge.n	8005814 <sniprintf+0x20>
 8005802:	238b      	movs	r3, #139	@ 0x8b
 8005804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005808:	602b      	str	r3, [r5, #0]
 800580a:	b01d      	add	sp, #116	@ 0x74
 800580c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005810:	b002      	add	sp, #8
 8005812:	4770      	bx	lr
 8005814:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005818:	f8ad 3014 	strh.w	r3, [sp, #20]
 800581c:	bf0c      	ite	eq
 800581e:	4623      	moveq	r3, r4
 8005820:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005824:	9304      	str	r3, [sp, #16]
 8005826:	9307      	str	r3, [sp, #28]
 8005828:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800582c:	9002      	str	r0, [sp, #8]
 800582e:	9006      	str	r0, [sp, #24]
 8005830:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005834:	4628      	mov	r0, r5
 8005836:	ab21      	add	r3, sp, #132	@ 0x84
 8005838:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800583a:	a902      	add	r1, sp, #8
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	f000 f8bd 	bl	80059bc <_svfiprintf_r>
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	bfbc      	itt	lt
 8005846:	238b      	movlt	r3, #139	@ 0x8b
 8005848:	602b      	strlt	r3, [r5, #0]
 800584a:	2c00      	cmp	r4, #0
 800584c:	d0dd      	beq.n	800580a <sniprintf+0x16>
 800584e:	2200      	movs	r2, #0
 8005850:	9b02      	ldr	r3, [sp, #8]
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	e7d9      	b.n	800580a <sniprintf+0x16>
 8005856:	bf00      	nop
 8005858:	200003a0 	.word	0x200003a0

0800585c <siprintf>:
 800585c:	b40e      	push	{r1, r2, r3}
 800585e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005862:	b500      	push	{lr}
 8005864:	b09c      	sub	sp, #112	@ 0x70
 8005866:	ab1d      	add	r3, sp, #116	@ 0x74
 8005868:	9002      	str	r0, [sp, #8]
 800586a:	9006      	str	r0, [sp, #24]
 800586c:	9107      	str	r1, [sp, #28]
 800586e:	9104      	str	r1, [sp, #16]
 8005870:	4808      	ldr	r0, [pc, #32]	@ (8005894 <siprintf+0x38>)
 8005872:	4909      	ldr	r1, [pc, #36]	@ (8005898 <siprintf+0x3c>)
 8005874:	f853 2b04 	ldr.w	r2, [r3], #4
 8005878:	9105      	str	r1, [sp, #20]
 800587a:	6800      	ldr	r0, [r0, #0]
 800587c:	a902      	add	r1, sp, #8
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	f000 f89c 	bl	80059bc <_svfiprintf_r>
 8005884:	2200      	movs	r2, #0
 8005886:	9b02      	ldr	r3, [sp, #8]
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	b01c      	add	sp, #112	@ 0x70
 800588c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005890:	b003      	add	sp, #12
 8005892:	4770      	bx	lr
 8005894:	200003a0 	.word	0x200003a0
 8005898:	ffff0208 	.word	0xffff0208

0800589c <memset>:
 800589c:	4603      	mov	r3, r0
 800589e:	4402      	add	r2, r0
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d100      	bne.n	80058a6 <memset+0xa>
 80058a4:	4770      	bx	lr
 80058a6:	f803 1b01 	strb.w	r1, [r3], #1
 80058aa:	e7f9      	b.n	80058a0 <memset+0x4>

080058ac <__errno>:
 80058ac:	4b01      	ldr	r3, [pc, #4]	@ (80058b4 <__errno+0x8>)
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	200003a0 	.word	0x200003a0

080058b8 <__libc_init_array>:
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	2600      	movs	r6, #0
 80058bc:	4d0c      	ldr	r5, [pc, #48]	@ (80058f0 <__libc_init_array+0x38>)
 80058be:	4c0d      	ldr	r4, [pc, #52]	@ (80058f4 <__libc_init_array+0x3c>)
 80058c0:	1b64      	subs	r4, r4, r5
 80058c2:	10a4      	asrs	r4, r4, #2
 80058c4:	42a6      	cmp	r6, r4
 80058c6:	d109      	bne.n	80058dc <__libc_init_array+0x24>
 80058c8:	f000 fc78 	bl	80061bc <_init>
 80058cc:	2600      	movs	r6, #0
 80058ce:	4d0a      	ldr	r5, [pc, #40]	@ (80058f8 <__libc_init_array+0x40>)
 80058d0:	4c0a      	ldr	r4, [pc, #40]	@ (80058fc <__libc_init_array+0x44>)
 80058d2:	1b64      	subs	r4, r4, r5
 80058d4:	10a4      	asrs	r4, r4, #2
 80058d6:	42a6      	cmp	r6, r4
 80058d8:	d105      	bne.n	80058e6 <__libc_init_array+0x2e>
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e0:	4798      	blx	r3
 80058e2:	3601      	adds	r6, #1
 80058e4:	e7ee      	b.n	80058c4 <__libc_init_array+0xc>
 80058e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ea:	4798      	blx	r3
 80058ec:	3601      	adds	r6, #1
 80058ee:	e7f2      	b.n	80058d6 <__libc_init_array+0x1e>
 80058f0:	08006378 	.word	0x08006378
 80058f4:	08006378 	.word	0x08006378
 80058f8:	08006378 	.word	0x08006378
 80058fc:	0800637c 	.word	0x0800637c

08005900 <__retarget_lock_acquire_recursive>:
 8005900:	4770      	bx	lr

08005902 <__retarget_lock_release_recursive>:
 8005902:	4770      	bx	lr

08005904 <__ssputs_r>:
 8005904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005908:	461f      	mov	r7, r3
 800590a:	688e      	ldr	r6, [r1, #8]
 800590c:	4682      	mov	sl, r0
 800590e:	42be      	cmp	r6, r7
 8005910:	460c      	mov	r4, r1
 8005912:	4690      	mov	r8, r2
 8005914:	680b      	ldr	r3, [r1, #0]
 8005916:	d82d      	bhi.n	8005974 <__ssputs_r+0x70>
 8005918:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800591c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005920:	d026      	beq.n	8005970 <__ssputs_r+0x6c>
 8005922:	6965      	ldr	r5, [r4, #20]
 8005924:	6909      	ldr	r1, [r1, #16]
 8005926:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800592a:	eba3 0901 	sub.w	r9, r3, r1
 800592e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005932:	1c7b      	adds	r3, r7, #1
 8005934:	444b      	add	r3, r9
 8005936:	106d      	asrs	r5, r5, #1
 8005938:	429d      	cmp	r5, r3
 800593a:	bf38      	it	cc
 800593c:	461d      	movcc	r5, r3
 800593e:	0553      	lsls	r3, r2, #21
 8005940:	d527      	bpl.n	8005992 <__ssputs_r+0x8e>
 8005942:	4629      	mov	r1, r5
 8005944:	f000 f958 	bl	8005bf8 <_malloc_r>
 8005948:	4606      	mov	r6, r0
 800594a:	b360      	cbz	r0, 80059a6 <__ssputs_r+0xa2>
 800594c:	464a      	mov	r2, r9
 800594e:	6921      	ldr	r1, [r4, #16]
 8005950:	f000 fbd6 	bl	8006100 <memcpy>
 8005954:	89a3      	ldrh	r3, [r4, #12]
 8005956:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800595a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800595e:	81a3      	strh	r3, [r4, #12]
 8005960:	6126      	str	r6, [r4, #16]
 8005962:	444e      	add	r6, r9
 8005964:	6026      	str	r6, [r4, #0]
 8005966:	463e      	mov	r6, r7
 8005968:	6165      	str	r5, [r4, #20]
 800596a:	eba5 0509 	sub.w	r5, r5, r9
 800596e:	60a5      	str	r5, [r4, #8]
 8005970:	42be      	cmp	r6, r7
 8005972:	d900      	bls.n	8005976 <__ssputs_r+0x72>
 8005974:	463e      	mov	r6, r7
 8005976:	4632      	mov	r2, r6
 8005978:	4641      	mov	r1, r8
 800597a:	6820      	ldr	r0, [r4, #0]
 800597c:	f000 fb88 	bl	8006090 <memmove>
 8005980:	2000      	movs	r0, #0
 8005982:	68a3      	ldr	r3, [r4, #8]
 8005984:	1b9b      	subs	r3, r3, r6
 8005986:	60a3      	str	r3, [r4, #8]
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	4433      	add	r3, r6
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005992:	462a      	mov	r2, r5
 8005994:	f000 fb4e 	bl	8006034 <_realloc_r>
 8005998:	4606      	mov	r6, r0
 800599a:	2800      	cmp	r0, #0
 800599c:	d1e0      	bne.n	8005960 <__ssputs_r+0x5c>
 800599e:	4650      	mov	r0, sl
 80059a0:	6921      	ldr	r1, [r4, #16]
 80059a2:	f000 fbbb 	bl	800611c <_free_r>
 80059a6:	230c      	movs	r3, #12
 80059a8:	f8ca 3000 	str.w	r3, [sl]
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059b6:	81a3      	strh	r3, [r4, #12]
 80059b8:	e7e9      	b.n	800598e <__ssputs_r+0x8a>
	...

080059bc <_svfiprintf_r>:
 80059bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c0:	4698      	mov	r8, r3
 80059c2:	898b      	ldrh	r3, [r1, #12]
 80059c4:	4607      	mov	r7, r0
 80059c6:	061b      	lsls	r3, r3, #24
 80059c8:	460d      	mov	r5, r1
 80059ca:	4614      	mov	r4, r2
 80059cc:	b09d      	sub	sp, #116	@ 0x74
 80059ce:	d510      	bpl.n	80059f2 <_svfiprintf_r+0x36>
 80059d0:	690b      	ldr	r3, [r1, #16]
 80059d2:	b973      	cbnz	r3, 80059f2 <_svfiprintf_r+0x36>
 80059d4:	2140      	movs	r1, #64	@ 0x40
 80059d6:	f000 f90f 	bl	8005bf8 <_malloc_r>
 80059da:	6028      	str	r0, [r5, #0]
 80059dc:	6128      	str	r0, [r5, #16]
 80059de:	b930      	cbnz	r0, 80059ee <_svfiprintf_r+0x32>
 80059e0:	230c      	movs	r3, #12
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059e8:	b01d      	add	sp, #116	@ 0x74
 80059ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ee:	2340      	movs	r3, #64	@ 0x40
 80059f0:	616b      	str	r3, [r5, #20]
 80059f2:	2300      	movs	r3, #0
 80059f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80059f6:	2320      	movs	r3, #32
 80059f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059fc:	2330      	movs	r3, #48	@ 0x30
 80059fe:	f04f 0901 	mov.w	r9, #1
 8005a02:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a06:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005ba0 <_svfiprintf_r+0x1e4>
 8005a0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a0e:	4623      	mov	r3, r4
 8005a10:	469a      	mov	sl, r3
 8005a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a16:	b10a      	cbz	r2, 8005a1c <_svfiprintf_r+0x60>
 8005a18:	2a25      	cmp	r2, #37	@ 0x25
 8005a1a:	d1f9      	bne.n	8005a10 <_svfiprintf_r+0x54>
 8005a1c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a20:	d00b      	beq.n	8005a3a <_svfiprintf_r+0x7e>
 8005a22:	465b      	mov	r3, fp
 8005a24:	4622      	mov	r2, r4
 8005a26:	4629      	mov	r1, r5
 8005a28:	4638      	mov	r0, r7
 8005a2a:	f7ff ff6b 	bl	8005904 <__ssputs_r>
 8005a2e:	3001      	adds	r0, #1
 8005a30:	f000 80a7 	beq.w	8005b82 <_svfiprintf_r+0x1c6>
 8005a34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a36:	445a      	add	r2, fp
 8005a38:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 809f 	beq.w	8005b82 <_svfiprintf_r+0x1c6>
 8005a44:	2300      	movs	r3, #0
 8005a46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a4e:	f10a 0a01 	add.w	sl, sl, #1
 8005a52:	9304      	str	r3, [sp, #16]
 8005a54:	9307      	str	r3, [sp, #28]
 8005a56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a5c:	4654      	mov	r4, sl
 8005a5e:	2205      	movs	r2, #5
 8005a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a64:	484e      	ldr	r0, [pc, #312]	@ (8005ba0 <_svfiprintf_r+0x1e4>)
 8005a66:	f000 fb3d 	bl	80060e4 <memchr>
 8005a6a:	9a04      	ldr	r2, [sp, #16]
 8005a6c:	b9d8      	cbnz	r0, 8005aa6 <_svfiprintf_r+0xea>
 8005a6e:	06d0      	lsls	r0, r2, #27
 8005a70:	bf44      	itt	mi
 8005a72:	2320      	movmi	r3, #32
 8005a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a78:	0711      	lsls	r1, r2, #28
 8005a7a:	bf44      	itt	mi
 8005a7c:	232b      	movmi	r3, #43	@ 0x2b
 8005a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a82:	f89a 3000 	ldrb.w	r3, [sl]
 8005a86:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a88:	d015      	beq.n	8005ab6 <_svfiprintf_r+0xfa>
 8005a8a:	4654      	mov	r4, sl
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	f04f 0c0a 	mov.w	ip, #10
 8005a92:	9a07      	ldr	r2, [sp, #28]
 8005a94:	4621      	mov	r1, r4
 8005a96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a9a:	3b30      	subs	r3, #48	@ 0x30
 8005a9c:	2b09      	cmp	r3, #9
 8005a9e:	d94b      	bls.n	8005b38 <_svfiprintf_r+0x17c>
 8005aa0:	b1b0      	cbz	r0, 8005ad0 <_svfiprintf_r+0x114>
 8005aa2:	9207      	str	r2, [sp, #28]
 8005aa4:	e014      	b.n	8005ad0 <_svfiprintf_r+0x114>
 8005aa6:	eba0 0308 	sub.w	r3, r0, r8
 8005aaa:	fa09 f303 	lsl.w	r3, r9, r3
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	46a2      	mov	sl, r4
 8005ab2:	9304      	str	r3, [sp, #16]
 8005ab4:	e7d2      	b.n	8005a5c <_svfiprintf_r+0xa0>
 8005ab6:	9b03      	ldr	r3, [sp, #12]
 8005ab8:	1d19      	adds	r1, r3, #4
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	9103      	str	r1, [sp, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bfbb      	ittet	lt
 8005ac2:	425b      	neglt	r3, r3
 8005ac4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ac8:	9307      	strge	r3, [sp, #28]
 8005aca:	9307      	strlt	r3, [sp, #28]
 8005acc:	bfb8      	it	lt
 8005ace:	9204      	strlt	r2, [sp, #16]
 8005ad0:	7823      	ldrb	r3, [r4, #0]
 8005ad2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ad4:	d10a      	bne.n	8005aec <_svfiprintf_r+0x130>
 8005ad6:	7863      	ldrb	r3, [r4, #1]
 8005ad8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ada:	d132      	bne.n	8005b42 <_svfiprintf_r+0x186>
 8005adc:	9b03      	ldr	r3, [sp, #12]
 8005ade:	3402      	adds	r4, #2
 8005ae0:	1d1a      	adds	r2, r3, #4
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	9203      	str	r2, [sp, #12]
 8005ae6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005aea:	9305      	str	r3, [sp, #20]
 8005aec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005ba4 <_svfiprintf_r+0x1e8>
 8005af0:	2203      	movs	r2, #3
 8005af2:	4650      	mov	r0, sl
 8005af4:	7821      	ldrb	r1, [r4, #0]
 8005af6:	f000 faf5 	bl	80060e4 <memchr>
 8005afa:	b138      	cbz	r0, 8005b0c <_svfiprintf_r+0x150>
 8005afc:	2240      	movs	r2, #64	@ 0x40
 8005afe:	9b04      	ldr	r3, [sp, #16]
 8005b00:	eba0 000a 	sub.w	r0, r0, sl
 8005b04:	4082      	lsls	r2, r0
 8005b06:	4313      	orrs	r3, r2
 8005b08:	3401      	adds	r4, #1
 8005b0a:	9304      	str	r3, [sp, #16]
 8005b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b10:	2206      	movs	r2, #6
 8005b12:	4825      	ldr	r0, [pc, #148]	@ (8005ba8 <_svfiprintf_r+0x1ec>)
 8005b14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b18:	f000 fae4 	bl	80060e4 <memchr>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d036      	beq.n	8005b8e <_svfiprintf_r+0x1d2>
 8005b20:	4b22      	ldr	r3, [pc, #136]	@ (8005bac <_svfiprintf_r+0x1f0>)
 8005b22:	bb1b      	cbnz	r3, 8005b6c <_svfiprintf_r+0x1b0>
 8005b24:	9b03      	ldr	r3, [sp, #12]
 8005b26:	3307      	adds	r3, #7
 8005b28:	f023 0307 	bic.w	r3, r3, #7
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	9303      	str	r3, [sp, #12]
 8005b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b32:	4433      	add	r3, r6
 8005b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b36:	e76a      	b.n	8005a0e <_svfiprintf_r+0x52>
 8005b38:	460c      	mov	r4, r1
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b40:	e7a8      	b.n	8005a94 <_svfiprintf_r+0xd8>
 8005b42:	2300      	movs	r3, #0
 8005b44:	f04f 0c0a 	mov.w	ip, #10
 8005b48:	4619      	mov	r1, r3
 8005b4a:	3401      	adds	r4, #1
 8005b4c:	9305      	str	r3, [sp, #20]
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b54:	3a30      	subs	r2, #48	@ 0x30
 8005b56:	2a09      	cmp	r2, #9
 8005b58:	d903      	bls.n	8005b62 <_svfiprintf_r+0x1a6>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0c6      	beq.n	8005aec <_svfiprintf_r+0x130>
 8005b5e:	9105      	str	r1, [sp, #20]
 8005b60:	e7c4      	b.n	8005aec <_svfiprintf_r+0x130>
 8005b62:	4604      	mov	r4, r0
 8005b64:	2301      	movs	r3, #1
 8005b66:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b6a:	e7f0      	b.n	8005b4e <_svfiprintf_r+0x192>
 8005b6c:	ab03      	add	r3, sp, #12
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	462a      	mov	r2, r5
 8005b72:	4638      	mov	r0, r7
 8005b74:	4b0e      	ldr	r3, [pc, #56]	@ (8005bb0 <_svfiprintf_r+0x1f4>)
 8005b76:	a904      	add	r1, sp, #16
 8005b78:	f3af 8000 	nop.w
 8005b7c:	1c42      	adds	r2, r0, #1
 8005b7e:	4606      	mov	r6, r0
 8005b80:	d1d6      	bne.n	8005b30 <_svfiprintf_r+0x174>
 8005b82:	89ab      	ldrh	r3, [r5, #12]
 8005b84:	065b      	lsls	r3, r3, #25
 8005b86:	f53f af2d 	bmi.w	80059e4 <_svfiprintf_r+0x28>
 8005b8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b8c:	e72c      	b.n	80059e8 <_svfiprintf_r+0x2c>
 8005b8e:	ab03      	add	r3, sp, #12
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	462a      	mov	r2, r5
 8005b94:	4638      	mov	r0, r7
 8005b96:	4b06      	ldr	r3, [pc, #24]	@ (8005bb0 <_svfiprintf_r+0x1f4>)
 8005b98:	a904      	add	r1, sp, #16
 8005b9a:	f000 f91f 	bl	8005ddc <_printf_i>
 8005b9e:	e7ed      	b.n	8005b7c <_svfiprintf_r+0x1c0>
 8005ba0:	0800633c 	.word	0x0800633c
 8005ba4:	08006342 	.word	0x08006342
 8005ba8:	08006346 	.word	0x08006346
 8005bac:	00000000 	.word	0x00000000
 8005bb0:	08005905 	.word	0x08005905

08005bb4 <sbrk_aligned>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8005bf4 <sbrk_aligned+0x40>)
 8005bb8:	460c      	mov	r4, r1
 8005bba:	6831      	ldr	r1, [r6, #0]
 8005bbc:	4605      	mov	r5, r0
 8005bbe:	b911      	cbnz	r1, 8005bc6 <sbrk_aligned+0x12>
 8005bc0:	f000 fa80 	bl	80060c4 <_sbrk_r>
 8005bc4:	6030      	str	r0, [r6, #0]
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f000 fa7b 	bl	80060c4 <_sbrk_r>
 8005bce:	1c43      	adds	r3, r0, #1
 8005bd0:	d103      	bne.n	8005bda <sbrk_aligned+0x26>
 8005bd2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	bd70      	pop	{r4, r5, r6, pc}
 8005bda:	1cc4      	adds	r4, r0, #3
 8005bdc:	f024 0403 	bic.w	r4, r4, #3
 8005be0:	42a0      	cmp	r0, r4
 8005be2:	d0f8      	beq.n	8005bd6 <sbrk_aligned+0x22>
 8005be4:	1a21      	subs	r1, r4, r0
 8005be6:	4628      	mov	r0, r5
 8005be8:	f000 fa6c 	bl	80060c4 <_sbrk_r>
 8005bec:	3001      	adds	r0, #1
 8005bee:	d1f2      	bne.n	8005bd6 <sbrk_aligned+0x22>
 8005bf0:	e7ef      	b.n	8005bd2 <sbrk_aligned+0x1e>
 8005bf2:	bf00      	nop
 8005bf4:	200044f8 	.word	0x200044f8

08005bf8 <_malloc_r>:
 8005bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bfc:	1ccd      	adds	r5, r1, #3
 8005bfe:	f025 0503 	bic.w	r5, r5, #3
 8005c02:	3508      	adds	r5, #8
 8005c04:	2d0c      	cmp	r5, #12
 8005c06:	bf38      	it	cc
 8005c08:	250c      	movcc	r5, #12
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	db01      	blt.n	8005c14 <_malloc_r+0x1c>
 8005c10:	42a9      	cmp	r1, r5
 8005c12:	d904      	bls.n	8005c1e <_malloc_r+0x26>
 8005c14:	230c      	movs	r3, #12
 8005c16:	6033      	str	r3, [r6, #0]
 8005c18:	2000      	movs	r0, #0
 8005c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005cf4 <_malloc_r+0xfc>
 8005c22:	f000 f9fb 	bl	800601c <__malloc_lock>
 8005c26:	f8d8 3000 	ldr.w	r3, [r8]
 8005c2a:	461c      	mov	r4, r3
 8005c2c:	bb44      	cbnz	r4, 8005c80 <_malloc_r+0x88>
 8005c2e:	4629      	mov	r1, r5
 8005c30:	4630      	mov	r0, r6
 8005c32:	f7ff ffbf 	bl	8005bb4 <sbrk_aligned>
 8005c36:	1c43      	adds	r3, r0, #1
 8005c38:	4604      	mov	r4, r0
 8005c3a:	d158      	bne.n	8005cee <_malloc_r+0xf6>
 8005c3c:	f8d8 4000 	ldr.w	r4, [r8]
 8005c40:	4627      	mov	r7, r4
 8005c42:	2f00      	cmp	r7, #0
 8005c44:	d143      	bne.n	8005cce <_malloc_r+0xd6>
 8005c46:	2c00      	cmp	r4, #0
 8005c48:	d04b      	beq.n	8005ce2 <_malloc_r+0xea>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	4639      	mov	r1, r7
 8005c4e:	4630      	mov	r0, r6
 8005c50:	eb04 0903 	add.w	r9, r4, r3
 8005c54:	f000 fa36 	bl	80060c4 <_sbrk_r>
 8005c58:	4581      	cmp	r9, r0
 8005c5a:	d142      	bne.n	8005ce2 <_malloc_r+0xea>
 8005c5c:	6821      	ldr	r1, [r4, #0]
 8005c5e:	4630      	mov	r0, r6
 8005c60:	1a6d      	subs	r5, r5, r1
 8005c62:	4629      	mov	r1, r5
 8005c64:	f7ff ffa6 	bl	8005bb4 <sbrk_aligned>
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d03a      	beq.n	8005ce2 <_malloc_r+0xea>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	442b      	add	r3, r5
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	f8d8 3000 	ldr.w	r3, [r8]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	bb62      	cbnz	r2, 8005cd4 <_malloc_r+0xdc>
 8005c7a:	f8c8 7000 	str.w	r7, [r8]
 8005c7e:	e00f      	b.n	8005ca0 <_malloc_r+0xa8>
 8005c80:	6822      	ldr	r2, [r4, #0]
 8005c82:	1b52      	subs	r2, r2, r5
 8005c84:	d420      	bmi.n	8005cc8 <_malloc_r+0xd0>
 8005c86:	2a0b      	cmp	r2, #11
 8005c88:	d917      	bls.n	8005cba <_malloc_r+0xc2>
 8005c8a:	1961      	adds	r1, r4, r5
 8005c8c:	42a3      	cmp	r3, r4
 8005c8e:	6025      	str	r5, [r4, #0]
 8005c90:	bf18      	it	ne
 8005c92:	6059      	strne	r1, [r3, #4]
 8005c94:	6863      	ldr	r3, [r4, #4]
 8005c96:	bf08      	it	eq
 8005c98:	f8c8 1000 	streq.w	r1, [r8]
 8005c9c:	5162      	str	r2, [r4, r5]
 8005c9e:	604b      	str	r3, [r1, #4]
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	f000 f9c1 	bl	8006028 <__malloc_unlock>
 8005ca6:	f104 000b 	add.w	r0, r4, #11
 8005caa:	1d23      	adds	r3, r4, #4
 8005cac:	f020 0007 	bic.w	r0, r0, #7
 8005cb0:	1ac2      	subs	r2, r0, r3
 8005cb2:	bf1c      	itt	ne
 8005cb4:	1a1b      	subne	r3, r3, r0
 8005cb6:	50a3      	strne	r3, [r4, r2]
 8005cb8:	e7af      	b.n	8005c1a <_malloc_r+0x22>
 8005cba:	6862      	ldr	r2, [r4, #4]
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	bf0c      	ite	eq
 8005cc0:	f8c8 2000 	streq.w	r2, [r8]
 8005cc4:	605a      	strne	r2, [r3, #4]
 8005cc6:	e7eb      	b.n	8005ca0 <_malloc_r+0xa8>
 8005cc8:	4623      	mov	r3, r4
 8005cca:	6864      	ldr	r4, [r4, #4]
 8005ccc:	e7ae      	b.n	8005c2c <_malloc_r+0x34>
 8005cce:	463c      	mov	r4, r7
 8005cd0:	687f      	ldr	r7, [r7, #4]
 8005cd2:	e7b6      	b.n	8005c42 <_malloc_r+0x4a>
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	d1fb      	bne.n	8005cd4 <_malloc_r+0xdc>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	6053      	str	r3, [r2, #4]
 8005ce0:	e7de      	b.n	8005ca0 <_malloc_r+0xa8>
 8005ce2:	230c      	movs	r3, #12
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	6033      	str	r3, [r6, #0]
 8005ce8:	f000 f99e 	bl	8006028 <__malloc_unlock>
 8005cec:	e794      	b.n	8005c18 <_malloc_r+0x20>
 8005cee:	6005      	str	r5, [r0, #0]
 8005cf0:	e7d6      	b.n	8005ca0 <_malloc_r+0xa8>
 8005cf2:	bf00      	nop
 8005cf4:	200044fc 	.word	0x200044fc

08005cf8 <_printf_common>:
 8005cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cfc:	4616      	mov	r6, r2
 8005cfe:	4698      	mov	r8, r3
 8005d00:	688a      	ldr	r2, [r1, #8]
 8005d02:	690b      	ldr	r3, [r1, #16]
 8005d04:	4607      	mov	r7, r0
 8005d06:	4293      	cmp	r3, r2
 8005d08:	bfb8      	it	lt
 8005d0a:	4613      	movlt	r3, r2
 8005d0c:	6033      	str	r3, [r6, #0]
 8005d0e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d12:	460c      	mov	r4, r1
 8005d14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d18:	b10a      	cbz	r2, 8005d1e <_printf_common+0x26>
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	6033      	str	r3, [r6, #0]
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	0699      	lsls	r1, r3, #26
 8005d22:	bf42      	ittt	mi
 8005d24:	6833      	ldrmi	r3, [r6, #0]
 8005d26:	3302      	addmi	r3, #2
 8005d28:	6033      	strmi	r3, [r6, #0]
 8005d2a:	6825      	ldr	r5, [r4, #0]
 8005d2c:	f015 0506 	ands.w	r5, r5, #6
 8005d30:	d106      	bne.n	8005d40 <_printf_common+0x48>
 8005d32:	f104 0a19 	add.w	sl, r4, #25
 8005d36:	68e3      	ldr	r3, [r4, #12]
 8005d38:	6832      	ldr	r2, [r6, #0]
 8005d3a:	1a9b      	subs	r3, r3, r2
 8005d3c:	42ab      	cmp	r3, r5
 8005d3e:	dc2b      	bgt.n	8005d98 <_printf_common+0xa0>
 8005d40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d44:	6822      	ldr	r2, [r4, #0]
 8005d46:	3b00      	subs	r3, #0
 8005d48:	bf18      	it	ne
 8005d4a:	2301      	movne	r3, #1
 8005d4c:	0692      	lsls	r2, r2, #26
 8005d4e:	d430      	bmi.n	8005db2 <_printf_common+0xba>
 8005d50:	4641      	mov	r1, r8
 8005d52:	4638      	mov	r0, r7
 8005d54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d58:	47c8      	blx	r9
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d023      	beq.n	8005da6 <_printf_common+0xae>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	6922      	ldr	r2, [r4, #16]
 8005d62:	f003 0306 	and.w	r3, r3, #6
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	bf14      	ite	ne
 8005d6a:	2500      	movne	r5, #0
 8005d6c:	6833      	ldreq	r3, [r6, #0]
 8005d6e:	f04f 0600 	mov.w	r6, #0
 8005d72:	bf08      	it	eq
 8005d74:	68e5      	ldreq	r5, [r4, #12]
 8005d76:	f104 041a 	add.w	r4, r4, #26
 8005d7a:	bf08      	it	eq
 8005d7c:	1aed      	subeq	r5, r5, r3
 8005d7e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d82:	bf08      	it	eq
 8005d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	bfc4      	itt	gt
 8005d8c:	1a9b      	subgt	r3, r3, r2
 8005d8e:	18ed      	addgt	r5, r5, r3
 8005d90:	42b5      	cmp	r5, r6
 8005d92:	d11a      	bne.n	8005dca <_printf_common+0xd2>
 8005d94:	2000      	movs	r0, #0
 8005d96:	e008      	b.n	8005daa <_printf_common+0xb2>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	4652      	mov	r2, sl
 8005d9c:	4641      	mov	r1, r8
 8005d9e:	4638      	mov	r0, r7
 8005da0:	47c8      	blx	r9
 8005da2:	3001      	adds	r0, #1
 8005da4:	d103      	bne.n	8005dae <_printf_common+0xb6>
 8005da6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dae:	3501      	adds	r5, #1
 8005db0:	e7c1      	b.n	8005d36 <_printf_common+0x3e>
 8005db2:	2030      	movs	r0, #48	@ 0x30
 8005db4:	18e1      	adds	r1, r4, r3
 8005db6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005dc0:	4422      	add	r2, r4
 8005dc2:	3302      	adds	r3, #2
 8005dc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dc8:	e7c2      	b.n	8005d50 <_printf_common+0x58>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	4622      	mov	r2, r4
 8005dce:	4641      	mov	r1, r8
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	47c8      	blx	r9
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d0e6      	beq.n	8005da6 <_printf_common+0xae>
 8005dd8:	3601      	adds	r6, #1
 8005dda:	e7d9      	b.n	8005d90 <_printf_common+0x98>

08005ddc <_printf_i>:
 8005ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de0:	7e0f      	ldrb	r7, [r1, #24]
 8005de2:	4691      	mov	r9, r2
 8005de4:	2f78      	cmp	r7, #120	@ 0x78
 8005de6:	4680      	mov	r8, r0
 8005de8:	460c      	mov	r4, r1
 8005dea:	469a      	mov	sl, r3
 8005dec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005df2:	d807      	bhi.n	8005e04 <_printf_i+0x28>
 8005df4:	2f62      	cmp	r7, #98	@ 0x62
 8005df6:	d80a      	bhi.n	8005e0e <_printf_i+0x32>
 8005df8:	2f00      	cmp	r7, #0
 8005dfa:	f000 80d3 	beq.w	8005fa4 <_printf_i+0x1c8>
 8005dfe:	2f58      	cmp	r7, #88	@ 0x58
 8005e00:	f000 80ba 	beq.w	8005f78 <_printf_i+0x19c>
 8005e04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e0c:	e03a      	b.n	8005e84 <_printf_i+0xa8>
 8005e0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e12:	2b15      	cmp	r3, #21
 8005e14:	d8f6      	bhi.n	8005e04 <_printf_i+0x28>
 8005e16:	a101      	add	r1, pc, #4	@ (adr r1, 8005e1c <_printf_i+0x40>)
 8005e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e1c:	08005e75 	.word	0x08005e75
 8005e20:	08005e89 	.word	0x08005e89
 8005e24:	08005e05 	.word	0x08005e05
 8005e28:	08005e05 	.word	0x08005e05
 8005e2c:	08005e05 	.word	0x08005e05
 8005e30:	08005e05 	.word	0x08005e05
 8005e34:	08005e89 	.word	0x08005e89
 8005e38:	08005e05 	.word	0x08005e05
 8005e3c:	08005e05 	.word	0x08005e05
 8005e40:	08005e05 	.word	0x08005e05
 8005e44:	08005e05 	.word	0x08005e05
 8005e48:	08005f8b 	.word	0x08005f8b
 8005e4c:	08005eb3 	.word	0x08005eb3
 8005e50:	08005f45 	.word	0x08005f45
 8005e54:	08005e05 	.word	0x08005e05
 8005e58:	08005e05 	.word	0x08005e05
 8005e5c:	08005fad 	.word	0x08005fad
 8005e60:	08005e05 	.word	0x08005e05
 8005e64:	08005eb3 	.word	0x08005eb3
 8005e68:	08005e05 	.word	0x08005e05
 8005e6c:	08005e05 	.word	0x08005e05
 8005e70:	08005f4d 	.word	0x08005f4d
 8005e74:	6833      	ldr	r3, [r6, #0]
 8005e76:	1d1a      	adds	r2, r3, #4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6032      	str	r2, [r6, #0]
 8005e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e84:	2301      	movs	r3, #1
 8005e86:	e09e      	b.n	8005fc6 <_printf_i+0x1ea>
 8005e88:	6833      	ldr	r3, [r6, #0]
 8005e8a:	6820      	ldr	r0, [r4, #0]
 8005e8c:	1d19      	adds	r1, r3, #4
 8005e8e:	6031      	str	r1, [r6, #0]
 8005e90:	0606      	lsls	r6, r0, #24
 8005e92:	d501      	bpl.n	8005e98 <_printf_i+0xbc>
 8005e94:	681d      	ldr	r5, [r3, #0]
 8005e96:	e003      	b.n	8005ea0 <_printf_i+0xc4>
 8005e98:	0645      	lsls	r5, r0, #25
 8005e9a:	d5fb      	bpl.n	8005e94 <_printf_i+0xb8>
 8005e9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ea0:	2d00      	cmp	r5, #0
 8005ea2:	da03      	bge.n	8005eac <_printf_i+0xd0>
 8005ea4:	232d      	movs	r3, #45	@ 0x2d
 8005ea6:	426d      	negs	r5, r5
 8005ea8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005eac:	230a      	movs	r3, #10
 8005eae:	4859      	ldr	r0, [pc, #356]	@ (8006014 <_printf_i+0x238>)
 8005eb0:	e011      	b.n	8005ed6 <_printf_i+0xfa>
 8005eb2:	6821      	ldr	r1, [r4, #0]
 8005eb4:	6833      	ldr	r3, [r6, #0]
 8005eb6:	0608      	lsls	r0, r1, #24
 8005eb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ebc:	d402      	bmi.n	8005ec4 <_printf_i+0xe8>
 8005ebe:	0649      	lsls	r1, r1, #25
 8005ec0:	bf48      	it	mi
 8005ec2:	b2ad      	uxthmi	r5, r5
 8005ec4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ec6:	6033      	str	r3, [r6, #0]
 8005ec8:	bf14      	ite	ne
 8005eca:	230a      	movne	r3, #10
 8005ecc:	2308      	moveq	r3, #8
 8005ece:	4851      	ldr	r0, [pc, #324]	@ (8006014 <_printf_i+0x238>)
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ed6:	6866      	ldr	r6, [r4, #4]
 8005ed8:	2e00      	cmp	r6, #0
 8005eda:	bfa8      	it	ge
 8005edc:	6821      	ldrge	r1, [r4, #0]
 8005ede:	60a6      	str	r6, [r4, #8]
 8005ee0:	bfa4      	itt	ge
 8005ee2:	f021 0104 	bicge.w	r1, r1, #4
 8005ee6:	6021      	strge	r1, [r4, #0]
 8005ee8:	b90d      	cbnz	r5, 8005eee <_printf_i+0x112>
 8005eea:	2e00      	cmp	r6, #0
 8005eec:	d04b      	beq.n	8005f86 <_printf_i+0x1aa>
 8005eee:	4616      	mov	r6, r2
 8005ef0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ef4:	fb03 5711 	mls	r7, r3, r1, r5
 8005ef8:	5dc7      	ldrb	r7, [r0, r7]
 8005efa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005efe:	462f      	mov	r7, r5
 8005f00:	42bb      	cmp	r3, r7
 8005f02:	460d      	mov	r5, r1
 8005f04:	d9f4      	bls.n	8005ef0 <_printf_i+0x114>
 8005f06:	2b08      	cmp	r3, #8
 8005f08:	d10b      	bne.n	8005f22 <_printf_i+0x146>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	07df      	lsls	r7, r3, #31
 8005f0e:	d508      	bpl.n	8005f22 <_printf_i+0x146>
 8005f10:	6923      	ldr	r3, [r4, #16]
 8005f12:	6861      	ldr	r1, [r4, #4]
 8005f14:	4299      	cmp	r1, r3
 8005f16:	bfde      	ittt	le
 8005f18:	2330      	movle	r3, #48	@ 0x30
 8005f1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f1e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005f22:	1b92      	subs	r2, r2, r6
 8005f24:	6122      	str	r2, [r4, #16]
 8005f26:	464b      	mov	r3, r9
 8005f28:	4621      	mov	r1, r4
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	f8cd a000 	str.w	sl, [sp]
 8005f30:	aa03      	add	r2, sp, #12
 8005f32:	f7ff fee1 	bl	8005cf8 <_printf_common>
 8005f36:	3001      	adds	r0, #1
 8005f38:	d14a      	bne.n	8005fd0 <_printf_i+0x1f4>
 8005f3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f3e:	b004      	add	sp, #16
 8005f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	f043 0320 	orr.w	r3, r3, #32
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	2778      	movs	r7, #120	@ 0x78
 8005f4e:	4832      	ldr	r0, [pc, #200]	@ (8006018 <_printf_i+0x23c>)
 8005f50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	6831      	ldr	r1, [r6, #0]
 8005f58:	061f      	lsls	r7, r3, #24
 8005f5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f5e:	d402      	bmi.n	8005f66 <_printf_i+0x18a>
 8005f60:	065f      	lsls	r7, r3, #25
 8005f62:	bf48      	it	mi
 8005f64:	b2ad      	uxthmi	r5, r5
 8005f66:	6031      	str	r1, [r6, #0]
 8005f68:	07d9      	lsls	r1, r3, #31
 8005f6a:	bf44      	itt	mi
 8005f6c:	f043 0320 	orrmi.w	r3, r3, #32
 8005f70:	6023      	strmi	r3, [r4, #0]
 8005f72:	b11d      	cbz	r5, 8005f7c <_printf_i+0x1a0>
 8005f74:	2310      	movs	r3, #16
 8005f76:	e7ab      	b.n	8005ed0 <_printf_i+0xf4>
 8005f78:	4826      	ldr	r0, [pc, #152]	@ (8006014 <_printf_i+0x238>)
 8005f7a:	e7e9      	b.n	8005f50 <_printf_i+0x174>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	f023 0320 	bic.w	r3, r3, #32
 8005f82:	6023      	str	r3, [r4, #0]
 8005f84:	e7f6      	b.n	8005f74 <_printf_i+0x198>
 8005f86:	4616      	mov	r6, r2
 8005f88:	e7bd      	b.n	8005f06 <_printf_i+0x12a>
 8005f8a:	6833      	ldr	r3, [r6, #0]
 8005f8c:	6825      	ldr	r5, [r4, #0]
 8005f8e:	1d18      	adds	r0, r3, #4
 8005f90:	6961      	ldr	r1, [r4, #20]
 8005f92:	6030      	str	r0, [r6, #0]
 8005f94:	062e      	lsls	r6, r5, #24
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	d501      	bpl.n	8005f9e <_printf_i+0x1c2>
 8005f9a:	6019      	str	r1, [r3, #0]
 8005f9c:	e002      	b.n	8005fa4 <_printf_i+0x1c8>
 8005f9e:	0668      	lsls	r0, r5, #25
 8005fa0:	d5fb      	bpl.n	8005f9a <_printf_i+0x1be>
 8005fa2:	8019      	strh	r1, [r3, #0]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4616      	mov	r6, r2
 8005fa8:	6123      	str	r3, [r4, #16]
 8005faa:	e7bc      	b.n	8005f26 <_printf_i+0x14a>
 8005fac:	6833      	ldr	r3, [r6, #0]
 8005fae:	2100      	movs	r1, #0
 8005fb0:	1d1a      	adds	r2, r3, #4
 8005fb2:	6032      	str	r2, [r6, #0]
 8005fb4:	681e      	ldr	r6, [r3, #0]
 8005fb6:	6862      	ldr	r2, [r4, #4]
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f000 f893 	bl	80060e4 <memchr>
 8005fbe:	b108      	cbz	r0, 8005fc4 <_printf_i+0x1e8>
 8005fc0:	1b80      	subs	r0, r0, r6
 8005fc2:	6060      	str	r0, [r4, #4]
 8005fc4:	6863      	ldr	r3, [r4, #4]
 8005fc6:	6123      	str	r3, [r4, #16]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fce:	e7aa      	b.n	8005f26 <_printf_i+0x14a>
 8005fd0:	4632      	mov	r2, r6
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	47d0      	blx	sl
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d0ad      	beq.n	8005f3a <_printf_i+0x15e>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	079b      	lsls	r3, r3, #30
 8005fe2:	d413      	bmi.n	800600c <_printf_i+0x230>
 8005fe4:	68e0      	ldr	r0, [r4, #12]
 8005fe6:	9b03      	ldr	r3, [sp, #12]
 8005fe8:	4298      	cmp	r0, r3
 8005fea:	bfb8      	it	lt
 8005fec:	4618      	movlt	r0, r3
 8005fee:	e7a6      	b.n	8005f3e <_printf_i+0x162>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	4632      	mov	r2, r6
 8005ff4:	4649      	mov	r1, r9
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	47d0      	blx	sl
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d09d      	beq.n	8005f3a <_printf_i+0x15e>
 8005ffe:	3501      	adds	r5, #1
 8006000:	68e3      	ldr	r3, [r4, #12]
 8006002:	9903      	ldr	r1, [sp, #12]
 8006004:	1a5b      	subs	r3, r3, r1
 8006006:	42ab      	cmp	r3, r5
 8006008:	dcf2      	bgt.n	8005ff0 <_printf_i+0x214>
 800600a:	e7eb      	b.n	8005fe4 <_printf_i+0x208>
 800600c:	2500      	movs	r5, #0
 800600e:	f104 0619 	add.w	r6, r4, #25
 8006012:	e7f5      	b.n	8006000 <_printf_i+0x224>
 8006014:	0800634d 	.word	0x0800634d
 8006018:	0800635e 	.word	0x0800635e

0800601c <__malloc_lock>:
 800601c:	4801      	ldr	r0, [pc, #4]	@ (8006024 <__malloc_lock+0x8>)
 800601e:	f7ff bc6f 	b.w	8005900 <__retarget_lock_acquire_recursive>
 8006022:	bf00      	nop
 8006024:	200044f4 	.word	0x200044f4

08006028 <__malloc_unlock>:
 8006028:	4801      	ldr	r0, [pc, #4]	@ (8006030 <__malloc_unlock+0x8>)
 800602a:	f7ff bc6a 	b.w	8005902 <__retarget_lock_release_recursive>
 800602e:	bf00      	nop
 8006030:	200044f4 	.word	0x200044f4

08006034 <_realloc_r>:
 8006034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006038:	4680      	mov	r8, r0
 800603a:	4615      	mov	r5, r2
 800603c:	460c      	mov	r4, r1
 800603e:	b921      	cbnz	r1, 800604a <_realloc_r+0x16>
 8006040:	4611      	mov	r1, r2
 8006042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006046:	f7ff bdd7 	b.w	8005bf8 <_malloc_r>
 800604a:	b92a      	cbnz	r2, 8006058 <_realloc_r+0x24>
 800604c:	f000 f866 	bl	800611c <_free_r>
 8006050:	2400      	movs	r4, #0
 8006052:	4620      	mov	r0, r4
 8006054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006058:	f000 f8a8 	bl	80061ac <_malloc_usable_size_r>
 800605c:	4285      	cmp	r5, r0
 800605e:	4606      	mov	r6, r0
 8006060:	d802      	bhi.n	8006068 <_realloc_r+0x34>
 8006062:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006066:	d8f4      	bhi.n	8006052 <_realloc_r+0x1e>
 8006068:	4629      	mov	r1, r5
 800606a:	4640      	mov	r0, r8
 800606c:	f7ff fdc4 	bl	8005bf8 <_malloc_r>
 8006070:	4607      	mov	r7, r0
 8006072:	2800      	cmp	r0, #0
 8006074:	d0ec      	beq.n	8006050 <_realloc_r+0x1c>
 8006076:	42b5      	cmp	r5, r6
 8006078:	462a      	mov	r2, r5
 800607a:	4621      	mov	r1, r4
 800607c:	bf28      	it	cs
 800607e:	4632      	movcs	r2, r6
 8006080:	f000 f83e 	bl	8006100 <memcpy>
 8006084:	4621      	mov	r1, r4
 8006086:	4640      	mov	r0, r8
 8006088:	f000 f848 	bl	800611c <_free_r>
 800608c:	463c      	mov	r4, r7
 800608e:	e7e0      	b.n	8006052 <_realloc_r+0x1e>

08006090 <memmove>:
 8006090:	4288      	cmp	r0, r1
 8006092:	b510      	push	{r4, lr}
 8006094:	eb01 0402 	add.w	r4, r1, r2
 8006098:	d902      	bls.n	80060a0 <memmove+0x10>
 800609a:	4284      	cmp	r4, r0
 800609c:	4623      	mov	r3, r4
 800609e:	d807      	bhi.n	80060b0 <memmove+0x20>
 80060a0:	1e43      	subs	r3, r0, #1
 80060a2:	42a1      	cmp	r1, r4
 80060a4:	d008      	beq.n	80060b8 <memmove+0x28>
 80060a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060ae:	e7f8      	b.n	80060a2 <memmove+0x12>
 80060b0:	4601      	mov	r1, r0
 80060b2:	4402      	add	r2, r0
 80060b4:	428a      	cmp	r2, r1
 80060b6:	d100      	bne.n	80060ba <memmove+0x2a>
 80060b8:	bd10      	pop	{r4, pc}
 80060ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060c2:	e7f7      	b.n	80060b4 <memmove+0x24>

080060c4 <_sbrk_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	2300      	movs	r3, #0
 80060c8:	4d05      	ldr	r5, [pc, #20]	@ (80060e0 <_sbrk_r+0x1c>)
 80060ca:	4604      	mov	r4, r0
 80060cc:	4608      	mov	r0, r1
 80060ce:	602b      	str	r3, [r5, #0]
 80060d0:	f7fb fc14 	bl	80018fc <_sbrk>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d102      	bne.n	80060de <_sbrk_r+0x1a>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	b103      	cbz	r3, 80060de <_sbrk_r+0x1a>
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	20004500 	.word	0x20004500

080060e4 <memchr>:
 80060e4:	4603      	mov	r3, r0
 80060e6:	b510      	push	{r4, lr}
 80060e8:	b2c9      	uxtb	r1, r1
 80060ea:	4402      	add	r2, r0
 80060ec:	4293      	cmp	r3, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	d101      	bne.n	80060f6 <memchr+0x12>
 80060f2:	2000      	movs	r0, #0
 80060f4:	e003      	b.n	80060fe <memchr+0x1a>
 80060f6:	7804      	ldrb	r4, [r0, #0]
 80060f8:	3301      	adds	r3, #1
 80060fa:	428c      	cmp	r4, r1
 80060fc:	d1f6      	bne.n	80060ec <memchr+0x8>
 80060fe:	bd10      	pop	{r4, pc}

08006100 <memcpy>:
 8006100:	440a      	add	r2, r1
 8006102:	4291      	cmp	r1, r2
 8006104:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006108:	d100      	bne.n	800610c <memcpy+0xc>
 800610a:	4770      	bx	lr
 800610c:	b510      	push	{r4, lr}
 800610e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006112:	4291      	cmp	r1, r2
 8006114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006118:	d1f9      	bne.n	800610e <memcpy+0xe>
 800611a:	bd10      	pop	{r4, pc}

0800611c <_free_r>:
 800611c:	b538      	push	{r3, r4, r5, lr}
 800611e:	4605      	mov	r5, r0
 8006120:	2900      	cmp	r1, #0
 8006122:	d040      	beq.n	80061a6 <_free_r+0x8a>
 8006124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006128:	1f0c      	subs	r4, r1, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	bfb8      	it	lt
 800612e:	18e4      	addlt	r4, r4, r3
 8006130:	f7ff ff74 	bl	800601c <__malloc_lock>
 8006134:	4a1c      	ldr	r2, [pc, #112]	@ (80061a8 <_free_r+0x8c>)
 8006136:	6813      	ldr	r3, [r2, #0]
 8006138:	b933      	cbnz	r3, 8006148 <_free_r+0x2c>
 800613a:	6063      	str	r3, [r4, #4]
 800613c:	6014      	str	r4, [r2, #0]
 800613e:	4628      	mov	r0, r5
 8006140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006144:	f7ff bf70 	b.w	8006028 <__malloc_unlock>
 8006148:	42a3      	cmp	r3, r4
 800614a:	d908      	bls.n	800615e <_free_r+0x42>
 800614c:	6820      	ldr	r0, [r4, #0]
 800614e:	1821      	adds	r1, r4, r0
 8006150:	428b      	cmp	r3, r1
 8006152:	bf01      	itttt	eq
 8006154:	6819      	ldreq	r1, [r3, #0]
 8006156:	685b      	ldreq	r3, [r3, #4]
 8006158:	1809      	addeq	r1, r1, r0
 800615a:	6021      	streq	r1, [r4, #0]
 800615c:	e7ed      	b.n	800613a <_free_r+0x1e>
 800615e:	461a      	mov	r2, r3
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	b10b      	cbz	r3, 8006168 <_free_r+0x4c>
 8006164:	42a3      	cmp	r3, r4
 8006166:	d9fa      	bls.n	800615e <_free_r+0x42>
 8006168:	6811      	ldr	r1, [r2, #0]
 800616a:	1850      	adds	r0, r2, r1
 800616c:	42a0      	cmp	r0, r4
 800616e:	d10b      	bne.n	8006188 <_free_r+0x6c>
 8006170:	6820      	ldr	r0, [r4, #0]
 8006172:	4401      	add	r1, r0
 8006174:	1850      	adds	r0, r2, r1
 8006176:	4283      	cmp	r3, r0
 8006178:	6011      	str	r1, [r2, #0]
 800617a:	d1e0      	bne.n	800613e <_free_r+0x22>
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	4408      	add	r0, r1
 8006182:	6010      	str	r0, [r2, #0]
 8006184:	6053      	str	r3, [r2, #4]
 8006186:	e7da      	b.n	800613e <_free_r+0x22>
 8006188:	d902      	bls.n	8006190 <_free_r+0x74>
 800618a:	230c      	movs	r3, #12
 800618c:	602b      	str	r3, [r5, #0]
 800618e:	e7d6      	b.n	800613e <_free_r+0x22>
 8006190:	6820      	ldr	r0, [r4, #0]
 8006192:	1821      	adds	r1, r4, r0
 8006194:	428b      	cmp	r3, r1
 8006196:	bf01      	itttt	eq
 8006198:	6819      	ldreq	r1, [r3, #0]
 800619a:	685b      	ldreq	r3, [r3, #4]
 800619c:	1809      	addeq	r1, r1, r0
 800619e:	6021      	streq	r1, [r4, #0]
 80061a0:	6063      	str	r3, [r4, #4]
 80061a2:	6054      	str	r4, [r2, #4]
 80061a4:	e7cb      	b.n	800613e <_free_r+0x22>
 80061a6:	bd38      	pop	{r3, r4, r5, pc}
 80061a8:	200044fc 	.word	0x200044fc

080061ac <_malloc_usable_size_r>:
 80061ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061b0:	1f18      	subs	r0, r3, #4
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	bfbc      	itt	lt
 80061b6:	580b      	ldrlt	r3, [r1, r0]
 80061b8:	18c0      	addlt	r0, r0, r3
 80061ba:	4770      	bx	lr

080061bc <_init>:
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	bf00      	nop
 80061c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c2:	bc08      	pop	{r3}
 80061c4:	469e      	mov	lr, r3
 80061c6:	4770      	bx	lr

080061c8 <_fini>:
 80061c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ca:	bf00      	nop
 80061cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ce:	bc08      	pop	{r3}
 80061d0:	469e      	mov	lr, r3
 80061d2:	4770      	bx	lr
