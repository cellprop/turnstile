
turnstile_stm_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005154  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005260  08005260  00006260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c4  080053c4  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080053c4  080053c4  000063c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053cc  080053cc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053cc  080053cc  000063cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053d0  080053d0  000063d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080053d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e64  2000005c  08005430  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ec0  08005430  00007ec0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6ab  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002541  00000000  00000000  00014730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00016c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a78  00000000  00000000  000179f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018774  00000000  00000000  00018468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fec4  00000000  00000000  00030bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b72d  00000000  00000000  00040aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc1cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d08  00000000  00000000  000cc210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000cff18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005248 	.word	0x08005248

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005248 	.word	0x08005248

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_DMA_Init+0x38>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a0b      	ldr	r2, [pc, #44]	@ (8000690 <MX_DMA_Init+0x38>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6153      	str	r3, [r2, #20]
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_DMA_Init+0x38>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	2010      	movs	r0, #16
 800067c:	f001 f8e7 	bl	800184e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000680:	2010      	movs	r0, #16
 8000682:	f001 f900 	bl	8001886 <HAL_NVIC_EnableIRQ>

}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a8:	4b52      	ldr	r3, [pc, #328]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a51      	ldr	r2, [pc, #324]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b4f      	ldr	r3, [pc, #316]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0310 	and.w	r3, r3, #16
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c0:	4b4c      	ldr	r3, [pc, #304]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a4b      	ldr	r2, [pc, #300]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006c6:	f043 0320 	orr.w	r3, r3, #32
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b49      	ldr	r3, [pc, #292]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0320 	and.w	r3, r3, #32
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b46      	ldr	r3, [pc, #280]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a45      	ldr	r2, [pc, #276]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b43      	ldr	r3, [pc, #268]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	4b40      	ldr	r3, [pc, #256]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a3f      	ldr	r2, [pc, #252]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006f6:	f043 0308 	orr.w	r3, r3, #8
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b3d      	ldr	r3, [pc, #244]	@ (80007f4 <MX_GPIO_Init+0x160>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IR_PULSE_GEN_Pin|Direction2_Pin|Direction1_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f240 3101 	movw	r1, #769	@ 0x301
 800070e:	483a      	ldr	r0, [pc, #232]	@ (80007f8 <MX_GPIO_Init+0x164>)
 8000710:	f001 fcfa 	bl	8002108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2120      	movs	r1, #32
 8000718:	4838      	ldr	r0, [pc, #224]	@ (80007fc <MX_GPIO_Init+0x168>)
 800071a:	f001 fcf5 	bl	8002108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2180      	movs	r1, #128	@ 0x80
 8000722:	4837      	ldr	r0, [pc, #220]	@ (8000800 <MX_GPIO_Init+0x16c>)
 8000724:	f001 fcf0 	bl	8002108 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|IR1_Pin|Encoder_Pin|IR_2_Pin
 8000728:	f242 03fe 	movw	r3, #8446	@ 0x20fe
 800072c:	613b      	str	r3, [r7, #16]
                          |IR_3_Pin|IR_4_Pin|IR_5_Pin|IR_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800072e:	4b35      	ldr	r3, [pc, #212]	@ (8000804 <MX_GPIO_Init+0x170>)
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	482e      	ldr	r0, [pc, #184]	@ (80007f8 <MX_GPIO_Init+0x164>)
 800073e:	f001 fb5f 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IR_PULSE_GEN_Pin|Direction2_Pin|Direction1_Pin;
 8000742:	f240 3301 	movw	r3, #769	@ 0x301
 8000746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2302      	movs	r3, #2
 8000752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	4827      	ldr	r0, [pc, #156]	@ (80007f8 <MX_GPIO_Init+0x164>)
 800075c:	f001 fb50 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000760:	2320      	movs	r3, #32
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2302      	movs	r3, #2
 800076e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	4619      	mov	r1, r3
 8000776:	4821      	ldr	r0, [pc, #132]	@ (80007fc <MX_GPIO_Init+0x168>)
 8000778:	f001 fb42 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Limit_2A_Pin|Limit_2B_Pin;
 800077c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000782:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <MX_GPIO_Init+0x170>)
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000786:	2301      	movs	r3, #1
 8000788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4619      	mov	r1, r3
 8000790:	481b      	ldr	r0, [pc, #108]	@ (8000800 <MX_GPIO_Init+0x16c>)
 8000792:	f001 fb35 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Limit_1A_Pin|Limit_1B_Pin;
 8000796:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <MX_GPIO_Init+0x170>)
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4619      	mov	r1, r3
 80007aa:	4813      	ldr	r0, [pc, #76]	@ (80007f8 <MX_GPIO_Init+0x164>)
 80007ac:	f001 fb28 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007b0:	2380      	movs	r3, #128	@ 0x80
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2302      	movs	r3, #2
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	480e      	ldr	r0, [pc, #56]	@ (8000800 <MX_GPIO_Init+0x16c>)
 80007c8:	f001 fb1a 	bl	8001e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2100      	movs	r1, #0
 80007d0:	2008      	movs	r0, #8
 80007d2:	f001 f83c 	bl	800184e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007d6:	2008      	movs	r0, #8
 80007d8:	f001 f855 	bl	8001886 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2028      	movs	r0, #40	@ 0x28
 80007e2:	f001 f834 	bl	800184e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007e6:	2028      	movs	r0, #40	@ 0x28
 80007e8:	f001 f84d 	bl	8001886 <HAL_NVIC_EnableIRQ>

}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40011000 	.word	0x40011000
 80007fc:	40010800 	.word	0x40010800
 8000800:	40010c00 	.word	0x40010c00
 8000804:	10110000 	.word	0x10110000

08000808 <Speed_Control>:
/* USER CODE BEGIN 0 */


//MOTOR CONTROL FUNCTIONS
void Speed_Control(int a)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, a);
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <Speed_Control+0x1c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20001c10 	.word	0x20001c10

08000828 <Direction>:

void Direction(int a)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	if(a==1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d10b      	bne.n	800084e <Direction+0x26>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800083c:	480d      	ldr	r0, [pc, #52]	@ (8000874 <Direction+0x4c>)
 800083e:	f001 fc63 	bl	8002108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000848:	480a      	ldr	r0, [pc, #40]	@ (8000874 <Direction+0x4c>)
 800084a:	f001 fc5d 	bl	8002108 <HAL_GPIO_WritePin>

	}
	if(a==0)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d10b      	bne.n	800086c <Direction+0x44>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800085a:	4806      	ldr	r0, [pc, #24]	@ (8000874 <Direction+0x4c>)
 800085c:	f001 fc54 	bl	8002108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000866:	4803      	ldr	r0, [pc, #12]	@ (8000874 <Direction+0x4c>)
 8000868:	f001 fc4e 	bl	8002108 <HAL_GPIO_WritePin>
	}
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40011000 	.word	0x40011000

08000878 <encoder>:

void encoder(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    counter++;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <encoder+0x2c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <encoder+0x2c>)
 8000884:	6013      	str	r3, [r2, #0]
    if(counter == 570)
 8000886:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <encoder+0x2c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f240 223a 	movw	r2, #570	@ 0x23a
 800088e:	4293      	cmp	r3, r2
 8000890:	d105      	bne.n	800089e <encoder+0x26>
    {
        Speed_Control(0); // Stop the motor
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff ffb8 	bl	8000808 <Speed_Control>
        counter = 0;      // Reset counter for next operation
 8000898:	4b02      	ldr	r3, [pc, #8]	@ (80008a4 <encoder+0x2c>)
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
    }
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20001bc0 	.word	0x20001bc0

080008a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_2)
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d105      	bne.n	80008c4 <HAL_GPIO_EXTI_Callback+0x1c>
    {
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // Toggle an LED on PB7 for visual feedback
 80008b8:	2180      	movs	r1, #128	@ 0x80
 80008ba:	4818      	ldr	r0, [pc, #96]	@ (800091c <HAL_GPIO_EXTI_Callback+0x74>)
 80008bc:	f001 fc3c 	bl	8002138 <HAL_GPIO_TogglePin>
    	encoder();
 80008c0:	f7ff ffda 	bl	8000878 <encoder>
    }
    if(GPIO_Pin == GPIO_PIN_10)
 80008c4:	88fb      	ldrh	r3, [r7, #6]
 80008c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008ca:	d105      	bne.n	80008d8 <HAL_GPIO_EXTI_Callback+0x30>
	{
		Speed_Control(0);
 80008cc:	2000      	movs	r0, #0
 80008ce:	f7ff ff9b 	bl	8000808 <Speed_Control>
		counter = 0;
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x78>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
    if(GPIO_Pin == GPIO_PIN_11)
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80008de:	d105      	bne.n	80008ec <HAL_GPIO_EXTI_Callback+0x44>
	{
		Speed_Control(0);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff ff91 	bl	8000808 <Speed_Control>
		counter = 0;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x78>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
    if(GPIO_Pin == GPIO_PIN_14)
 80008ec:	88fb      	ldrh	r3, [r7, #6]
 80008ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80008f2:	d105      	bne.n	8000900 <HAL_GPIO_EXTI_Callback+0x58>
	{
		Speed_Control(0);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff ff87 	bl	8000808 <Speed_Control>
		counter = 0;
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x78>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
    if(GPIO_Pin == GPIO_PIN_15)
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000906:	d105      	bne.n	8000914 <HAL_GPIO_EXTI_Callback+0x6c>
	{
		Speed_Control(0);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff ff7d 	bl	8000808 <Speed_Control>
		counter = 0;
 800090e:	4b04      	ldr	r3, [pc, #16]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x78>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40010c00 	.word	0x40010c00
 8000920:	20001bc0 	.word	0x20001bc0

08000924 <quarter_cycle_open>:

void quarter_cycle_open(int source)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    if(source == 1){
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d103      	bne.n	800093a <quarter_cycle_open+0x16>
        Direction(0);
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff ff78 	bl	8000828 <Direction>
 8000938:	e005      	b.n	8000946 <quarter_cycle_open+0x22>
    }
    else if(source == 2){
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d102      	bne.n	8000946 <quarter_cycle_open+0x22>
        Direction(1);
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff ff71 	bl	8000828 <Direction>
    }
    Speed_Control(1000); // Start motor
 8000946:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800094a:	f7ff ff5d 	bl	8000808 <Speed_Control>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <quarter_cycle_closed>:

void quarter_cycle_closed(int source)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
    if(source == 1){
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d103      	bne.n	800096c <quarter_cycle_closed+0x16>
        Direction(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff ff5f 	bl	8000828 <Direction>
 800096a:	e005      	b.n	8000978 <quarter_cycle_closed+0x22>
    }
    else if(source == 2){
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b02      	cmp	r3, #2
 8000970:	d102      	bne.n	8000978 <quarter_cycle_closed+0x22>
        Direction(0);
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff ff58 	bl	8000828 <Direction>
    }
    Speed_Control(1000); // Start motor
 8000978:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800097c:	f7ff ff44 	bl	8000808 <Speed_Control>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <centre_align>:

void centre_align(void){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	quarter_cycle_open(1);
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff ffc9 	bl	8000924 <quarter_cycle_open>
	quarter_cycle_open(1);
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff ffc6 	bl	8000924 <quarter_cycle_open>
	quarter_cycle_closed(1);
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff ffdc 	bl	8000956 <quarter_cycle_closed>
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <ready_state>:


//STATE FUNCTIONS

void ready_state(void){
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
	//Display Code
    // Check if data has been received
    if(flag_rev == 1){
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <ready_state+0x1c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d102      	bne.n	80009b6 <ready_state+0x12>
        currentState = STATE_READING; // Transition to Reading State
 80009b0:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <ready_state+0x20>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
    }
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20001bba 	.word	0x20001bba
 80009c4:	20001b88 	.word	0x20001b88

080009c8 <reading_state>:

void reading_state(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	//Display Code
    if(flag_rev == 1){
 80009cc:	4b20      	ldr	r3, [pc, #128]	@ (8000a50 <reading_state+0x88>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d10c      	bne.n	80009ee <reading_state+0x26>
        HAL_UART_Transmit_IT(&huart3, (uint8_t *)usermsg, strlen(usermsg));
 80009d4:	481f      	ldr	r0, [pc, #124]	@ (8000a54 <reading_state+0x8c>)
 80009d6:	f7ff fbb9 	bl	800014c <strlen>
 80009da:	4603      	mov	r3, r0
 80009dc:	b29b      	uxth	r3, r3
 80009de:	461a      	mov	r2, r3
 80009e0:	491c      	ldr	r1, [pc, #112]	@ (8000a54 <reading_state+0x8c>)
 80009e2:	481d      	ldr	r0, [pc, #116]	@ (8000a58 <reading_state+0x90>)
 80009e4:	f003 f8f4 	bl	8003bd0 <HAL_UART_Transmit_IT>
        flag_rev = 0;
 80009e8:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <reading_state+0x88>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(1000); // Delay as needed
 80009ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009f2:	f000 fe31 	bl	8001658 <HAL_Delay>

    //NOS Potential Responses Setup
    switch(intresponseData){
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <reading_state+0x94>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b05      	cmp	r3, #5
 80009fc:	d826      	bhi.n	8000a4c <reading_state+0x84>
 80009fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000a04 <reading_state+0x3c>)
 8000a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a04:	08000a1d 	.word	0x08000a1d
 8000a08:	08000a25 	.word	0x08000a25
 8000a0c:	08000a2d 	.word	0x08000a2d
 8000a10:	08000a35 	.word	0x08000a35
 8000a14:	08000a3d 	.word	0x08000a3d
 8000a18:	08000a45 	.word	0x08000a45

    case 0:
    	currentState = STATE_READY;
 8000a1c:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <reading_state+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
    	break;
 8000a22:	e013      	b.n	8000a4c <reading_state+0x84>
    case 1:
    	currentState = STATE_OPEN;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <reading_state+0x98>)
 8000a26:	2202      	movs	r2, #2
 8000a28:	701a      	strb	r2, [r3, #0]
    	break;
 8000a2a:	e00f      	b.n	8000a4c <reading_state+0x84>
    case 2:
    	currentState = STATE_CLOSED;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <reading_state+0x98>)
 8000a2e:	2203      	movs	r2, #3
 8000a30:	701a      	strb	r2, [r3, #0]
    	break;
 8000a32:	e00b      	b.n	8000a4c <reading_state+0x84>
    case 3:
    	currentState = STATE_EMERGENCY;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <reading_state+0x98>)
 8000a36:	2206      	movs	r2, #6
 8000a38:	701a      	strb	r2, [r3, #0]
    	break;
 8000a3a:	e007      	b.n	8000a4c <reading_state+0x84>
    case 4:
    	currentState = STATE_SLEEP;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <reading_state+0x98>)
 8000a3e:	2205      	movs	r2, #5
 8000a40:	701a      	strb	r2, [r3, #0]
    	break;
 8000a42:	e003      	b.n	8000a4c <reading_state+0x84>
    case 5:
    	currentState = STATE_OVERCAPACITY;
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <reading_state+0x98>)
 8000a46:	2204      	movs	r2, #4
 8000a48:	701a      	strb	r2, [r3, #0]
		break;
 8000a4a:	bf00      	nop
    }
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20001bba 	.word	0x20001bba
 8000a54:	20001bac 	.word	0x20001bac
 8000a58:	20001d2c 	.word	0x20001d2c
 8000a5c:	20001bbd 	.word	0x20001bbd
 8000a60:	20001b88 	.word	0x20001b88

08000a64 <open_state>:

void open_state(void){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	quarter_cycle_open(uart_source);
 8000a68:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <open_state+0x34>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff59 	bl	8000924 <quarter_cycle_open>
	//IR Sensor Code
	HAL_Delay(5000);
 8000a72:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a76:	f000 fdef 	bl	8001658 <HAL_Delay>
	quarter_cycle_closed(uart_source);
 8000a7a:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <open_state+0x34>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff69 	bl	8000956 <quarter_cycle_closed>
	HAL_Delay(1000);
 8000a84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a88:	f000 fde6 	bl	8001658 <HAL_Delay>
	currentState = STATE_READY;
 8000a8c:	4b03      	ldr	r3, [pc, #12]	@ (8000a9c <open_state+0x38>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20001bbb 	.word	0x20001bbb
 8000a9c:	20001b88 	.word	0x20001b88

08000aa0 <closed_state>:

void closed_state(void){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	//Display Code
	HAL_Delay(3000);
 8000aa4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000aa8:	f000 fdd6 	bl	8001658 <HAL_Delay>
	currentState = STATE_READY;
 8000aac:	4b02      	ldr	r3, [pc, #8]	@ (8000ab8 <closed_state+0x18>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20001b88 	.word	0x20001b88

08000abc <overcapacity_state>:

void overcapacity_state(void){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	//Display Code
	Speed_Control(0);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff fea1 	bl	8000808 <Speed_Control>
	currentState = STATE_READY;
 8000ac6:	4b02      	ldr	r3, [pc, #8]	@ (8000ad0 <overcapacity_state+0x14>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20001b88 	.word	0x20001b88

08000ad4 <sleep_state>:

void sleep_state(void){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	//Shut off system code:
	centre_align();
 8000ad8:	f7ff ff56 	bl	8000988 <centre_align>
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <emergency_state>:

void emergency_state(void){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	//Display Code
	quarter_cycle_open(1);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff ff1d 	bl	8000924 <quarter_cycle_open>
	quarter_cycle_open(1);
 8000aea:	2001      	movs	r0, #1
 8000aec:	f7ff ff1a 	bl	8000924 <quarter_cycle_open>
	currentState = STATE_SLEEP;
 8000af0:	4b02      	ldr	r3, [pc, #8]	@ (8000afc <emergency_state+0x1c>)
 8000af2:	2205      	movs	r2, #5
 8000af4:	701a      	strb	r2, [r3, #0]
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20001b88 	.word	0x20001b88

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b06:	f000 fd45 	bl	8001594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0a:	f000 f86b 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0e:	f7ff fdc1 	bl	8000694 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b12:	f7ff fda1 	bl	8000658 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b16:	f000 fbf7 	bl	8001308 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000b1a:	f000 fa29 	bl	8000f70 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b1e:	f000 fa9d 	bl	800105c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000b22:	f000 fbc7 	bl	80012b4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000b26:	f000 fc19 	bl	800135c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8000b2a:	4825      	ldr	r0, [pc, #148]	@ (8000bc0 <main+0xc0>)
 8000b2c:	f001 ff96 	bl	8002a5c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000b30:	2100      	movs	r1, #0
 8000b32:	4823      	ldr	r0, [pc, #140]	@ (8000bc0 <main+0xc0>)
 8000b34:	f002 f834 	bl	8002ba0 <HAL_TIM_PWM_Start>
  WS28XX_Init(&ws, &htim3, 72, TIM_CHANNEL_1, 256);
 8000b38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	2248      	movs	r2, #72	@ 0x48
 8000b42:	4920      	ldr	r1, [pc, #128]	@ (8000bc4 <main+0xc4>)
 8000b44:	4820      	ldr	r0, [pc, #128]	@ (8000bc8 <main+0xc8>)
 8000b46:	f003 fdaf 	bl	80046a8 <WS28XX_Init>


  // Start UART reception for RFID Reader (USART1)
  HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));
 8000b4a:	220e      	movs	r2, #14
 8000b4c:	491f      	ldr	r1, [pc, #124]	@ (8000bcc <main+0xcc>)
 8000b4e:	4820      	ldr	r0, [pc, #128]	@ (8000bd0 <main+0xd0>)
 8000b50:	f003 f873 	bl	8003c3a <HAL_UART_Receive_IT>

  // Start UART reception for Additional UART (USART2)
  HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));
 8000b54:	220e      	movs	r2, #14
 8000b56:	491d      	ldr	r1, [pc, #116]	@ (8000bcc <main+0xcc>)
 8000b58:	481e      	ldr	r0, [pc, #120]	@ (8000bd4 <main+0xd4>)
 8000b5a:	f003 f86e 	bl	8003c3a <HAL_UART_Receive_IT>

  // Start UART reception for NOS response (USART3)
  HAL_UART_Receive_IT(&huart3, &responseData, 1);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	491d      	ldr	r1, [pc, #116]	@ (8000bd8 <main+0xd8>)
 8000b62:	481e      	ldr	r0, [pc, #120]	@ (8000bdc <main+0xdc>)
 8000b64:	f003 f869 	bl	8003c3a <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		switch (currentState)
 8000b68:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <main+0xe0>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b06      	cmp	r3, #6
 8000b6e:	d825      	bhi.n	8000bbc <main+0xbc>
 8000b70:	a201      	add	r2, pc, #4	@ (adr r2, 8000b78 <main+0x78>)
 8000b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b76:	bf00      	nop
 8000b78:	08000b95 	.word	0x08000b95
 8000b7c:	08000b9b 	.word	0x08000b9b
 8000b80:	08000ba1 	.word	0x08000ba1
 8000b84:	08000ba7 	.word	0x08000ba7
 8000b88:	08000bad 	.word	0x08000bad
 8000b8c:	08000bb3 	.word	0x08000bb3
 8000b90:	08000bb7 	.word	0x08000bb7
		{
			case STATE_READY:
				ready_state();
 8000b94:	f7ff ff06 	bl	80009a4 <ready_state>
				break;
 8000b98:	e011      	b.n	8000bbe <main+0xbe>
			case STATE_READING:
				reading_state();
 8000b9a:	f7ff ff15 	bl	80009c8 <reading_state>
				break;
 8000b9e:	e00e      	b.n	8000bbe <main+0xbe>
			case STATE_OPEN:
				open_state();
 8000ba0:	f7ff ff60 	bl	8000a64 <open_state>
				break;
 8000ba4:	e00b      	b.n	8000bbe <main+0xbe>
			case STATE_CLOSED:
				closed_state();
 8000ba6:	f7ff ff7b 	bl	8000aa0 <closed_state>
				break;
 8000baa:	e008      	b.n	8000bbe <main+0xbe>
			// Leave other states empty for now
			case STATE_OVERCAPACITY:
				overcapacity_state();
 8000bac:	f7ff ff86 	bl	8000abc <overcapacity_state>
				break;
 8000bb0:	e005      	b.n	8000bbe <main+0xbe>
			case STATE_SLEEP:
				sleep_state();
 8000bb2:	f7ff ff8f 	bl	8000ad4 <sleep_state>
				//break;
			case STATE_EMERGENCY:
				emergency_state();
 8000bb6:	f7ff ff93 	bl	8000ae0 <emergency_state>
				break;
 8000bba:	e000      	b.n	8000bbe <main+0xbe>
			default:
				break;
 8000bbc:	bf00      	nop
		switch (currentState)
 8000bbe:	e7d3      	b.n	8000b68 <main+0x68>
 8000bc0:	20001c10 	.word	0x20001c10
 8000bc4:	20001bc8 	.word	0x20001bc8
 8000bc8:	20000078 	.word	0x20000078
 8000bcc:	20001b8c 	.word	0x20001b8c
 8000bd0:	20001c9c 	.word	0x20001c9c
 8000bd4:	20001ce4 	.word	0x20001ce4
 8000bd8:	20001bbc 	.word	0x20001bbc
 8000bdc:	20001d2c 	.word	0x20001d2c
 8000be0:	20001b88 	.word	0x20001b88

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b090      	sub	sp, #64	@ 0x40
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0318 	add.w	r3, r7, #24
 8000bee:	2228      	movs	r2, #40	@ 0x28
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f003 fe98 	bl	8004928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c0a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c14:	2301      	movs	r3, #1
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c22:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 fab5 	bl	800219c <HAL_RCC_OscConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c38:	f000 f8b2 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c40:	2302      	movs	r3, #2
 8000c42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2102      	movs	r1, #2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fd22 	bl	80026a0 <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c62:	f000 f89d 	bl	8000da0 <Error_Handler>
  }
}
 8000c66:	bf00      	nop
 8000c68:	3740      	adds	r7, #64	@ 0x40
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) { // Data received from USART1
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a3a      	ldr	r2, [pc, #232]	@ (8000d68 <HAL_UART_RxCpltCallback+0xf8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d12b      	bne.n	8000cda <HAL_UART_RxCpltCallback+0x6a>
        // Process the received data
        for (int i = 0; i < 12; i++) {
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	e00b      	b.n	8000ca0 <HAL_UART_RxCpltCallback+0x30>
            processedData[i] = rxData[i + 1]; // Skip the start byte
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	4a37      	ldr	r2, [pc, #220]	@ (8000d6c <HAL_UART_RxCpltCallback+0xfc>)
 8000c8e:	5cd1      	ldrb	r1, [r2, r3]
 8000c90:	4a37      	ldr	r2, [pc, #220]	@ (8000d70 <HAL_UART_RxCpltCallback+0x100>)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4413      	add	r3, r2
 8000c96:	460a      	mov	r2, r1
 8000c98:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 12; i++) {
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b0b      	cmp	r3, #11
 8000ca4:	ddf0      	ble.n	8000c88 <HAL_UART_RxCpltCallback+0x18>
        }

        uart_source = 1;
 8000ca6:	4b33      	ldr	r3, [pc, #204]	@ (8000d74 <HAL_UART_RxCpltCallback+0x104>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]
        processedData[12] = uart_source + '0';
 8000cac:	4b31      	ldr	r3, [pc, #196]	@ (8000d74 <HAL_UART_RxCpltCallback+0x104>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	3330      	adds	r3, #48	@ 0x30
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000d70 <HAL_UART_RxCpltCallback+0x100>)
 8000cb6:	731a      	strb	r2, [r3, #12]
        processedData[13] = '\0'; // Null-terminate the string
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d70 <HAL_UART_RxCpltCallback+0x100>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	735a      	strb	r2, [r3, #13]

        // Use sprintf to format usermsg with identification flag
        sprintf(usermsg, "%s", processedData);
 8000cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8000d70 <HAL_UART_RxCpltCallback+0x100>)
 8000cc0:	492d      	ldr	r1, [pc, #180]	@ (8000d78 <HAL_UART_RxCpltCallback+0x108>)
 8000cc2:	482e      	ldr	r0, [pc, #184]	@ (8000d7c <HAL_UART_RxCpltCallback+0x10c>)
 8000cc4:	f003 fd8c 	bl	80047e0 <siprintf>

        flag_rev = 1; // Set flag to indicate data has been received
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d80 <HAL_UART_RxCpltCallback+0x110>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]

        // Re-enable UART reception for USART1
        HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));
 8000cce:	220e      	movs	r2, #14
 8000cd0:	4926      	ldr	r1, [pc, #152]	@ (8000d6c <HAL_UART_RxCpltCallback+0xfc>)
 8000cd2:	482c      	ldr	r0, [pc, #176]	@ (8000d84 <HAL_UART_RxCpltCallback+0x114>)
 8000cd4:	f002 ffb1 	bl	8003c3a <HAL_UART_Receive_IT>


        // Re-enable UART reception for USART3
        HAL_UART_Receive_IT(&huart3, &responseData, 1);
    }
}
 8000cd8:	e041      	b.n	8000d5e <HAL_UART_RxCpltCallback+0xee>
    else if (huart->Instance == USART2) { // Data received from USART2
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a2a      	ldr	r2, [pc, #168]	@ (8000d88 <HAL_UART_RxCpltCallback+0x118>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d12b      	bne.n	8000d3c <HAL_UART_RxCpltCallback+0xcc>
        for (int i = 0; i < 12; i++) {
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	e00b      	b.n	8000d02 <HAL_UART_RxCpltCallback+0x92>
            processedData[i] = rxData[i + 1]; // Skip the start byte
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	3301      	adds	r3, #1
 8000cee:	4a1f      	ldr	r2, [pc, #124]	@ (8000d6c <HAL_UART_RxCpltCallback+0xfc>)
 8000cf0:	5cd1      	ldrb	r1, [r2, r3]
 8000cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8000d70 <HAL_UART_RxCpltCallback+0x100>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	460a      	mov	r2, r1
 8000cfa:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 12; i++) {
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	2b0b      	cmp	r3, #11
 8000d06:	ddf0      	ble.n	8000cea <HAL_UART_RxCpltCallback+0x7a>
        uart_source = 2;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <HAL_UART_RxCpltCallback+0x104>)
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	701a      	strb	r2, [r3, #0]
		processedData[12] = uart_source + '0';
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_UART_RxCpltCallback+0x104>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	3330      	adds	r3, #48	@ 0x30
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b16      	ldr	r3, [pc, #88]	@ (8000d70 <HAL_UART_RxCpltCallback+0x100>)
 8000d18:	731a      	strb	r2, [r3, #12]
		processedData[13] = '\0'; // Null-terminate the string
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <HAL_UART_RxCpltCallback+0x100>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	735a      	strb	r2, [r3, #13]
        sprintf(usermsg, "%s", processedData);
 8000d20:	4a13      	ldr	r2, [pc, #76]	@ (8000d70 <HAL_UART_RxCpltCallback+0x100>)
 8000d22:	4915      	ldr	r1, [pc, #84]	@ (8000d78 <HAL_UART_RxCpltCallback+0x108>)
 8000d24:	4815      	ldr	r0, [pc, #84]	@ (8000d7c <HAL_UART_RxCpltCallback+0x10c>)
 8000d26:	f003 fd5b 	bl	80047e0 <siprintf>
        flag_rev = 1; // Set flag to indicate data has been received
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_UART_RxCpltCallback+0x110>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));
 8000d30:	220e      	movs	r2, #14
 8000d32:	490e      	ldr	r1, [pc, #56]	@ (8000d6c <HAL_UART_RxCpltCallback+0xfc>)
 8000d34:	4815      	ldr	r0, [pc, #84]	@ (8000d8c <HAL_UART_RxCpltCallback+0x11c>)
 8000d36:	f002 ff80 	bl	8003c3a <HAL_UART_Receive_IT>
}
 8000d3a:	e010      	b.n	8000d5e <HAL_UART_RxCpltCallback+0xee>
    else if (huart->Instance == USART3) { // NOS Response (USART3)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a13      	ldr	r2, [pc, #76]	@ (8000d90 <HAL_UART_RxCpltCallback+0x120>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d10b      	bne.n	8000d5e <HAL_UART_RxCpltCallback+0xee>
        intresponseData = atoi(&responseData);
 8000d46:	4813      	ldr	r0, [pc, #76]	@ (8000d94 <HAL_UART_RxCpltCallback+0x124>)
 8000d48:	f003 fd46 	bl	80047d8 <atoi>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <HAL_UART_RxCpltCallback+0x128>)
 8000d52:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart3, &responseData, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	490f      	ldr	r1, [pc, #60]	@ (8000d94 <HAL_UART_RxCpltCallback+0x124>)
 8000d58:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <HAL_UART_RxCpltCallback+0x12c>)
 8000d5a:	f002 ff6e 	bl	8003c3a <HAL_UART_Receive_IT>
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	20001b8c 	.word	0x20001b8c
 8000d70:	20001b9c 	.word	0x20001b9c
 8000d74:	20001bbb 	.word	0x20001bbb
 8000d78:	08005260 	.word	0x08005260
 8000d7c:	20001bac 	.word	0x20001bac
 8000d80:	20001bba 	.word	0x20001bba
 8000d84:	20001c9c 	.word	0x20001c9c
 8000d88:	40004400 	.word	0x40004400
 8000d8c:	20001ce4 	.word	0x20001ce4
 8000d90:	40004800 	.word	0x40004800
 8000d94:	20001bbc 	.word	0x20001bbc
 8000d98:	20001bbd 	.word	0x20001bbd
 8000d9c:	20001d2c 	.word	0x20001d2c

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <Error_Handler+0x8>

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <HAL_MspInit+0x5c>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	4a14      	ldr	r2, [pc, #80]	@ (8000e08 <HAL_MspInit+0x5c>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6193      	str	r3, [r2, #24]
 8000dbe:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <HAL_MspInit+0x5c>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dca:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <HAL_MspInit+0x5c>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a0e      	ldr	r2, [pc, #56]	@ (8000e08 <HAL_MspInit+0x5c>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd4:	61d3      	str	r3, [r2, #28]
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <HAL_MspInit+0x5c>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <HAL_MspInit+0x60>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4a04      	ldr	r2, [pc, #16]	@ (8000e0c <HAL_MspInit+0x60>)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010000 	.word	0x40010000

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <NMI_Handler+0x4>

08000e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <MemManage_Handler+0x4>

08000e28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 fbde 	bl	8001620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Pin);
 8000e6c:	2004      	movs	r0, #4
 8000e6e:	f001 f97d 	bl	800216c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <DMA1_Channel6_IRQHandler+0x10>)
 8000e7e:	f000 fe8b 	bl	8001b98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20001c58 	.word	0x20001c58

08000e8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e90:	4802      	ldr	r0, [pc, #8]	@ (8000e9c <USART1_IRQHandler+0x10>)
 8000e92:	f002 fef7 	bl	8003c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20001c9c 	.word	0x20001c9c

08000ea0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <USART2_IRQHandler+0x10>)
 8000ea6:	f002 feed 	bl	8003c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20001ce4 	.word	0x20001ce4

08000eb4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <USART3_IRQHandler+0x10>)
 8000eba:	f002 fee3 	bl	8003c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20001d2c 	.word	0x20001d2c

08000ec8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_1A_Pin);
 8000ecc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000ed0:	f001 f94c 	bl	800216c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_1B_Pin);
 8000ed4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000ed8:	f001 f948 	bl	800216c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000edc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ee0:	f001 f944 	bl	800216c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_2A_Pin);
 8000ee4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000ee8:	f001 f940 	bl	800216c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_2B_Pin);
 8000eec:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000ef0:	f001 f93c 	bl	800216c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <_sbrk+0x5c>)
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <_sbrk+0x60>)
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <_sbrk+0x64>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <_sbrk+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d207      	bcs.n	8000f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f28:	f003 fd06 	bl	8004938 <__errno>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	220c      	movs	r2, #12
 8000f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f36:	e009      	b.n	8000f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <_sbrk+0x64>)
 8000f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20005000 	.word	0x20005000
 8000f58:	00000400 	.word	0x00000400
 8000f5c:	20001bc4 	.word	0x20001bc4
 8000f60:	20001ec0 	.word	0x20001ec0

08000f64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08e      	sub	sp, #56	@ 0x38
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	f107 0320 	add.w	r3, r7, #32
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
 8000f9c:	615a      	str	r2, [r3, #20]
 8000f9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	@ (8001054 <MX_TIM3_Init+0xe4>)
 8000fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8001058 <MX_TIM3_Init+0xe8>)
 8000fa4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8001054 <MX_TIM3_Init+0xe4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fac:	4b29      	ldr	r3, [pc, #164]	@ (8001054 <MX_TIM3_Init+0xe4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <MX_TIM3_Init+0xe4>)
 8000fb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fba:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <MX_TIM3_Init+0xe4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc0:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <MX_TIM3_Init+0xe4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fc6:	4823      	ldr	r0, [pc, #140]	@ (8001054 <MX_TIM3_Init+0xe4>)
 8000fc8:	f001 fcf8 	bl	80029bc <HAL_TIM_Base_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fd2:	f7ff fee5 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	481c      	ldr	r0, [pc, #112]	@ (8001054 <MX_TIM3_Init+0xe4>)
 8000fe4:	f002 f8e2 	bl	80031ac <HAL_TIM_ConfigClockSource>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fee:	f7ff fed7 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ff2:	4818      	ldr	r0, [pc, #96]	@ (8001054 <MX_TIM3_Init+0xe4>)
 8000ff4:	f001 fd7c 	bl	8002af0 <HAL_TIM_PWM_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ffe:	f7ff fecf 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800100a:	f107 0320 	add.w	r3, r7, #32
 800100e:	4619      	mov	r1, r3
 8001010:	4810      	ldr	r0, [pc, #64]	@ (8001054 <MX_TIM3_Init+0xe4>)
 8001012:	f002 fd2f 	bl	8003a74 <HAL_TIMEx_MasterConfigSynchronization>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800101c:	f7ff fec0 	bl	8000da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001020:	2360      	movs	r3, #96	@ 0x60
 8001022:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	4807      	ldr	r0, [pc, #28]	@ (8001054 <MX_TIM3_Init+0xe4>)
 8001038:	f001 fff6 	bl	8003028 <HAL_TIM_PWM_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001042:	f7ff fead 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001046:	4803      	ldr	r0, [pc, #12]	@ (8001054 <MX_TIM3_Init+0xe4>)
 8001048:	f000 f8e0 	bl	800120c <HAL_TIM_MspPostInit>

}
 800104c:	bf00      	nop
 800104e:	3738      	adds	r7, #56	@ 0x38
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20001bc8 	.word	0x20001bc8
 8001058:	40000400 	.word	0x40000400

0800105c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08e      	sub	sp, #56	@ 0x38
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001062:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	f107 0320 	add.w	r3, r7, #32
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
 8001088:	615a      	str	r2, [r3, #20]
 800108a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800108c:	4b2c      	ldr	r3, [pc, #176]	@ (8001140 <MX_TIM4_Init+0xe4>)
 800108e:	4a2d      	ldr	r2, [pc, #180]	@ (8001144 <MX_TIM4_Init+0xe8>)
 8001090:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001092:	4b2b      	ldr	r3, [pc, #172]	@ (8001140 <MX_TIM4_Init+0xe4>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <MX_TIM4_Init+0xe4>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800109e:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <MX_TIM4_Init+0xe4>)
 80010a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <MX_TIM4_Init+0xe4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ac:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <MX_TIM4_Init+0xe4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010b2:	4823      	ldr	r0, [pc, #140]	@ (8001140 <MX_TIM4_Init+0xe4>)
 80010b4:	f001 fc82 	bl	80029bc <HAL_TIM_Base_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80010be:	f7ff fe6f 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010cc:	4619      	mov	r1, r3
 80010ce:	481c      	ldr	r0, [pc, #112]	@ (8001140 <MX_TIM4_Init+0xe4>)
 80010d0:	f002 f86c 	bl	80031ac <HAL_TIM_ConfigClockSource>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80010da:	f7ff fe61 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010de:	4818      	ldr	r0, [pc, #96]	@ (8001140 <MX_TIM4_Init+0xe4>)
 80010e0:	f001 fd06 	bl	8002af0 <HAL_TIM_PWM_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80010ea:	f7ff fe59 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010f6:	f107 0320 	add.w	r3, r7, #32
 80010fa:	4619      	mov	r1, r3
 80010fc:	4810      	ldr	r0, [pc, #64]	@ (8001140 <MX_TIM4_Init+0xe4>)
 80010fe:	f002 fcb9 	bl	8003a74 <HAL_TIMEx_MasterConfigSynchronization>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001108:	f7ff fe4a 	bl	8000da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110c:	2360      	movs	r3, #96	@ 0x60
 800110e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2200      	movs	r2, #0
 8001120:	4619      	mov	r1, r3
 8001122:	4807      	ldr	r0, [pc, #28]	@ (8001140 <MX_TIM4_Init+0xe4>)
 8001124:	f001 ff80 	bl	8003028 <HAL_TIM_PWM_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800112e:	f7ff fe37 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001132:	4803      	ldr	r0, [pc, #12]	@ (8001140 <MX_TIM4_Init+0xe4>)
 8001134:	f000 f86a 	bl	800120c <HAL_TIM_MspPostInit>

}
 8001138:	bf00      	nop
 800113a:	3738      	adds	r7, #56	@ 0x38
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20001c10 	.word	0x20001c10
 8001144:	40000800 	.word	0x40000800

08001148 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a28      	ldr	r2, [pc, #160]	@ (80011f8 <HAL_TIM_Base_MspInit+0xb0>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d139      	bne.n	80011ce <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800115a:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <HAL_TIM_Base_MspInit+0xb4>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	4a27      	ldr	r2, [pc, #156]	@ (80011fc <HAL_TIM_Base_MspInit+0xb4>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	61d3      	str	r3, [r2, #28]
 8001166:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <HAL_TIM_Base_MspInit+0xb4>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001172:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <HAL_TIM_Base_MspInit+0xb8>)
 8001174:	4a23      	ldr	r2, [pc, #140]	@ (8001204 <HAL_TIM_Base_MspInit+0xbc>)
 8001176:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001178:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <HAL_TIM_Base_MspInit+0xb8>)
 800117a:	2210      	movs	r2, #16
 800117c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <HAL_TIM_Base_MspInit+0xb8>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001184:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <HAL_TIM_Base_MspInit+0xb8>)
 8001186:	2280      	movs	r2, #128	@ 0x80
 8001188:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800118a:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <HAL_TIM_Base_MspInit+0xb8>)
 800118c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001190:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001192:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <HAL_TIM_Base_MspInit+0xb8>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <HAL_TIM_Base_MspInit+0xb8>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <HAL_TIM_Base_MspInit+0xb8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80011a4:	4816      	ldr	r0, [pc, #88]	@ (8001200 <HAL_TIM_Base_MspInit+0xb8>)
 80011a6:	f000 fb89 	bl	80018bc <HAL_DMA_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 80011b0:	f7ff fdf6 	bl	8000da0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <HAL_TIM_Base_MspInit+0xb8>)
 80011b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80011ba:	4a11      	ldr	r2, [pc, #68]	@ (8001200 <HAL_TIM_Base_MspInit+0xb8>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001200 <HAL_TIM_Base_MspInit+0xb8>)
 80011c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80011c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001200 <HAL_TIM_Base_MspInit+0xb8>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011cc:	e010      	b.n	80011f0 <HAL_TIM_Base_MspInit+0xa8>
  else if(tim_baseHandle->Instance==TIM4)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <HAL_TIM_Base_MspInit+0xc0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d10b      	bne.n	80011f0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <HAL_TIM_Base_MspInit+0xb4>)
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <HAL_TIM_Base_MspInit+0xb4>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	61d3      	str	r3, [r2, #28]
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <HAL_TIM_Base_MspInit+0xb4>)
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40000400 	.word	0x40000400
 80011fc:	40021000 	.word	0x40021000
 8001200:	20001c58 	.word	0x20001c58
 8001204:	4002006c 	.word	0x4002006c
 8001208:	40000800 	.word	0x40000800

0800120c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a1e      	ldr	r2, [pc, #120]	@ (80012a0 <HAL_TIM_MspPostInit+0x94>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d118      	bne.n	800125e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <HAL_TIM_MspPostInit+0x98>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a1c      	ldr	r2, [pc, #112]	@ (80012a4 <HAL_TIM_MspPostInit+0x98>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <HAL_TIM_MspPostInit+0x98>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001244:	2340      	movs	r3, #64	@ 0x40
 8001246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2302      	movs	r3, #2
 800124e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4619      	mov	r1, r3
 8001256:	4814      	ldr	r0, [pc, #80]	@ (80012a8 <HAL_TIM_MspPostInit+0x9c>)
 8001258:	f000 fdd2 	bl	8001e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800125c:	e01c      	b.n	8001298 <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM4)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a12      	ldr	r2, [pc, #72]	@ (80012ac <HAL_TIM_MspPostInit+0xa0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d117      	bne.n	8001298 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <HAL_TIM_MspPostInit+0x98>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a0d      	ldr	r2, [pc, #52]	@ (80012a4 <HAL_TIM_MspPostInit+0x98>)
 800126e:	f043 0308 	orr.w	r3, r3, #8
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <HAL_TIM_MspPostInit+0x98>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001280:	2340      	movs	r3, #64	@ 0x40
 8001282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2302      	movs	r3, #2
 800128a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	4807      	ldr	r0, [pc, #28]	@ (80012b0 <HAL_TIM_MspPostInit+0xa4>)
 8001294:	f000 fdb4 	bl	8001e00 <HAL_GPIO_Init>
}
 8001298:	bf00      	nop
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40000400 	.word	0x40000400
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010800 	.word	0x40010800
 80012ac:	40000800 	.word	0x40000800
 80012b0:	40010c00 	.word	0x40010c00

080012b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <MX_USART1_UART_Init+0x50>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	@ (8001300 <MX_USART1_UART_Init+0x4c>)
 80012ec:	f002 fc20 	bl	8003b30 <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012f6:	f7ff fd53 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20001c9c 	.word	0x20001c9c
 8001304:	40013800 	.word	0x40013800

08001308 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 800130e:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <MX_USART2_UART_Init+0x50>)
 8001310:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 8001314:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001318:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	@ (8001354 <MX_USART2_UART_Init+0x4c>)
 8001340:	f002 fbf6 	bl	8003b30 <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800134a:	f7ff fd29 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20001ce4 	.word	0x20001ce4
 8001358:	40004400 	.word	0x40004400

0800135c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_USART3_UART_Init+0x4c>)
 8001362:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <MX_USART3_UART_Init+0x50>)
 8001364:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <MX_USART3_UART_Init+0x4c>)
 8001368:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800136c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <MX_USART3_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_USART3_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <MX_USART3_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <MX_USART3_UART_Init+0x4c>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <MX_USART3_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <MX_USART3_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_USART3_UART_Init+0x4c>)
 8001394:	f002 fbcc 	bl	8003b30 <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800139e:	f7ff fcff 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20001d2c 	.word	0x20001d2c
 80013ac:	40004800 	.word	0x40004800

080013b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	@ 0x30
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a59      	ldr	r2, [pc, #356]	@ (8001530 <HAL_UART_MspInit+0x180>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d13a      	bne.n	8001446 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013d0:	4b58      	ldr	r3, [pc, #352]	@ (8001534 <HAL_UART_MspInit+0x184>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a57      	ldr	r2, [pc, #348]	@ (8001534 <HAL_UART_MspInit+0x184>)
 80013d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b55      	ldr	r3, [pc, #340]	@ (8001534 <HAL_UART_MspInit+0x184>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b52      	ldr	r3, [pc, #328]	@ (8001534 <HAL_UART_MspInit+0x184>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a51      	ldr	r2, [pc, #324]	@ (8001534 <HAL_UART_MspInit+0x184>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001534 <HAL_UART_MspInit+0x184>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001400:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0320 	add.w	r3, r7, #32
 8001412:	4619      	mov	r1, r3
 8001414:	4848      	ldr	r0, [pc, #288]	@ (8001538 <HAL_UART_MspInit+0x188>)
 8001416:	f000 fcf3 	bl	8001e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800141a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 0320 	add.w	r3, r7, #32
 800142c:	4619      	mov	r1, r3
 800142e:	4842      	ldr	r0, [pc, #264]	@ (8001538 <HAL_UART_MspInit+0x188>)
 8001430:	f000 fce6 	bl	8001e00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	2025      	movs	r0, #37	@ 0x25
 800143a:	f000 fa08 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800143e:	2025      	movs	r0, #37	@ 0x25
 8001440:	f000 fa21 	bl	8001886 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001444:	e070      	b.n	8001528 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART2)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a3c      	ldr	r2, [pc, #240]	@ (800153c <HAL_UART_MspInit+0x18c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d12c      	bne.n	80014aa <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001450:	4b38      	ldr	r3, [pc, #224]	@ (8001534 <HAL_UART_MspInit+0x184>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	4a37      	ldr	r2, [pc, #220]	@ (8001534 <HAL_UART_MspInit+0x184>)
 8001456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145a:	61d3      	str	r3, [r2, #28]
 800145c:	4b35      	ldr	r3, [pc, #212]	@ (8001534 <HAL_UART_MspInit+0x184>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b32      	ldr	r3, [pc, #200]	@ (8001534 <HAL_UART_MspInit+0x184>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a31      	ldr	r2, [pc, #196]	@ (8001534 <HAL_UART_MspInit+0x184>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b2f      	ldr	r3, [pc, #188]	@ (8001534 <HAL_UART_MspInit+0x184>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001480:	230c      	movs	r3, #12
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2302      	movs	r3, #2
 800148a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	4619      	mov	r1, r3
 8001492:	4829      	ldr	r0, [pc, #164]	@ (8001538 <HAL_UART_MspInit+0x188>)
 8001494:	f000 fcb4 	bl	8001e00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	2026      	movs	r0, #38	@ 0x26
 800149e:	f000 f9d6 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014a2:	2026      	movs	r0, #38	@ 0x26
 80014a4:	f000 f9ef 	bl	8001886 <HAL_NVIC_EnableIRQ>
}
 80014a8:	e03e      	b.n	8001528 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART3)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a24      	ldr	r2, [pc, #144]	@ (8001540 <HAL_UART_MspInit+0x190>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d139      	bne.n	8001528 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <HAL_UART_MspInit+0x184>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001534 <HAL_UART_MspInit+0x184>)
 80014ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014be:	61d3      	str	r3, [r2, #28]
 80014c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <HAL_UART_MspInit+0x184>)
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <HAL_UART_MspInit+0x184>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a18      	ldr	r2, [pc, #96]	@ (8001534 <HAL_UART_MspInit+0x184>)
 80014d2:	f043 0308 	orr.w	r3, r3, #8
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <HAL_UART_MspInit+0x184>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 0320 	add.w	r3, r7, #32
 80014f6:	4619      	mov	r1, r3
 80014f8:	4812      	ldr	r0, [pc, #72]	@ (8001544 <HAL_UART_MspInit+0x194>)
 80014fa:	f000 fc81 	bl	8001e00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0320 	add.w	r3, r7, #32
 8001510:	4619      	mov	r1, r3
 8001512:	480c      	ldr	r0, [pc, #48]	@ (8001544 <HAL_UART_MspInit+0x194>)
 8001514:	f000 fc74 	bl	8001e00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2027      	movs	r0, #39	@ 0x27
 800151e:	f000 f996 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001522:	2027      	movs	r0, #39	@ 0x27
 8001524:	f000 f9af 	bl	8001886 <HAL_NVIC_EnableIRQ>
}
 8001528:	bf00      	nop
 800152a:	3730      	adds	r7, #48	@ 0x30
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40013800 	.word	0x40013800
 8001534:	40021000 	.word	0x40021000
 8001538:	40010800 	.word	0x40010800
 800153c:	40004400 	.word	0x40004400
 8001540:	40004800 	.word	0x40004800
 8001544:	40010c00 	.word	0x40010c00

08001548 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001548:	f7ff fd0c 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800154c:	480b      	ldr	r0, [pc, #44]	@ (800157c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800154e:	490c      	ldr	r1, [pc, #48]	@ (8001580 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001550:	4a0c      	ldr	r2, [pc, #48]	@ (8001584 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a09      	ldr	r2, [pc, #36]	@ (8001588 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001564:	4c09      	ldr	r4, [pc, #36]	@ (800158c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001572:	f003 f9e7 	bl	8004944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001576:	f7ff fac3 	bl	8000b00 <main>
  bx lr
 800157a:	4770      	bx	lr
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001584:	080053d4 	.word	0x080053d4
  ldr r2, =_sbss
 8001588:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800158c:	20001ec0 	.word	0x20001ec0

08001590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC1_2_IRQHandler>
	...

08001594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001598:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <HAL_Init+0x28>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a07      	ldr	r2, [pc, #28]	@ (80015bc <HAL_Init+0x28>)
 800159e:	f043 0310 	orr.w	r3, r3, #16
 80015a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a4:	2003      	movs	r0, #3
 80015a6:	f000 f947 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f000 f808 	bl	80015c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b0:	f7ff fbfc 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40022000 	.word	0x40022000

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <HAL_InitTick+0x54>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <HAL_InitTick+0x58>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f95f 	bl	80018a2 <HAL_SYSTICK_Config>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00e      	b.n	800160c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d80a      	bhi.n	800160a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015fc:	f000 f927 	bl	800184e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001600:	4a06      	ldr	r2, [pc, #24]	@ (800161c <HAL_InitTick+0x5c>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000000 	.word	0x20000000
 8001618:	20000008 	.word	0x20000008
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001624:	4b05      	ldr	r3, [pc, #20]	@ (800163c <HAL_IncTick+0x1c>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <HAL_IncTick+0x20>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a03      	ldr	r2, [pc, #12]	@ (8001640 <HAL_IncTick+0x20>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	20000008 	.word	0x20000008
 8001640:	20001d74 	.word	0x20001d74

08001644 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b02      	ldr	r3, [pc, #8]	@ (8001654 <HAL_GetTick+0x10>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	20001d74 	.word	0x20001d74

08001658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff fff0 	bl	8001644 <HAL_GetTick>
 8001664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001670:	d005      	beq.n	800167e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_Delay+0x44>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800167e:	bf00      	nop
 8001680:	f7ff ffe0 	bl	8001644 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d8f7      	bhi.n	8001680 <HAL_Delay+0x28>
  {
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000008 	.word	0x20000008

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	@ (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4906      	ldr	r1, [pc, #24]	@ (8001738 <__NVIC_EnableIRQ+0x34>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	e000e100 	.word	0xe000e100

0800173c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	db0a      	blt.n	8001766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	490c      	ldr	r1, [pc, #48]	@ (8001788 <__NVIC_SetPriority+0x4c>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	440b      	add	r3, r1
 8001760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001764:	e00a      	b.n	800177c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4908      	ldr	r1, [pc, #32]	@ (800178c <__NVIC_SetPriority+0x50>)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	3b04      	subs	r3, #4
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	440b      	add	r3, r1
 800177a:	761a      	strb	r2, [r3, #24]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	@ 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f1c3 0307 	rsb	r3, r3, #7
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	bf28      	it	cs
 80017ae:	2304      	movcs	r3, #4
 80017b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3304      	adds	r3, #4
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d902      	bls.n	80017c0 <NVIC_EncodePriority+0x30>
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3b03      	subs	r3, #3
 80017be:	e000      	b.n	80017c2 <NVIC_EncodePriority+0x32>
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	43d9      	mvns	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	4313      	orrs	r3, r2
         );
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	@ 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001818:	f7ff ff90 	bl	800173c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff2d 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001860:	f7ff ff42 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 8001864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	6978      	ldr	r0, [r7, #20]
 800186c:	f7ff ff90 	bl	8001790 <NVIC_EncodePriority>
 8001870:	4602      	mov	r2, r0
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff5f 	bl	800173c <__NVIC_SetPriority>
}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff35 	bl	8001704 <__NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffa2 	bl	80017f4 <SysTick_Config>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e043      	b.n	800195a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b22      	ldr	r3, [pc, #136]	@ (8001964 <HAL_DMA_Init+0xa8>)
 80018da:	4413      	add	r3, r2
 80018dc:	4a22      	ldr	r2, [pc, #136]	@ (8001968 <HAL_DMA_Init+0xac>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	091b      	lsrs	r3, r3, #4
 80018e4:	009a      	lsls	r2, r3, #2
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a1f      	ldr	r2, [pc, #124]	@ (800196c <HAL_DMA_Init+0xb0>)
 80018ee:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001906:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800190a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001914:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001920:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	4313      	orrs	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	bffdfff8 	.word	0xbffdfff8
 8001968:	cccccccd 	.word	0xcccccccd
 800196c:	40020000 	.word	0x40020000

08001970 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_DMA_Start_IT+0x20>
 800198c:	2302      	movs	r3, #2
 800198e:	e04b      	b.n	8001a28 <HAL_DMA_Start_IT+0xb8>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d13a      	bne.n	8001a1a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0201 	bic.w	r2, r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 f9eb 	bl	8001da4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d008      	beq.n	80019e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 020e 	orr.w	r2, r2, #14
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	e00f      	b.n	8001a08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0204 	bic.w	r2, r2, #4
 80019f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 020a 	orr.w	r2, r2, #10
 8001a06:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e005      	b.n	8001a26 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a22:	2302      	movs	r3, #2
 8001a24:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d008      	beq.n	8001a5a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e020      	b.n	8001a9c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 020e 	bic.w	r2, r2, #14
 8001a68:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0201 	bic.w	r2, r2, #1
 8001a78:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a82:	2101      	movs	r1, #1
 8001a84:	fa01 f202 	lsl.w	r2, r1, r2
 8001a88:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d005      	beq.n	8001acc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	e051      	b.n	8001b70 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 020e 	bic.w	r2, r2, #14
 8001ada:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0201 	bic.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a22      	ldr	r2, [pc, #136]	@ (8001b7c <HAL_DMA_Abort_IT+0xd4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d029      	beq.n	8001b4a <HAL_DMA_Abort_IT+0xa2>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a21      	ldr	r2, [pc, #132]	@ (8001b80 <HAL_DMA_Abort_IT+0xd8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d022      	beq.n	8001b46 <HAL_DMA_Abort_IT+0x9e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1f      	ldr	r2, [pc, #124]	@ (8001b84 <HAL_DMA_Abort_IT+0xdc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d01a      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x98>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001b88 <HAL_DMA_Abort_IT+0xe0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d012      	beq.n	8001b3a <HAL_DMA_Abort_IT+0x92>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1c      	ldr	r2, [pc, #112]	@ (8001b8c <HAL_DMA_Abort_IT+0xe4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00a      	beq.n	8001b34 <HAL_DMA_Abort_IT+0x8c>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a1b      	ldr	r2, [pc, #108]	@ (8001b90 <HAL_DMA_Abort_IT+0xe8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d102      	bne.n	8001b2e <HAL_DMA_Abort_IT+0x86>
 8001b28:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001b2c:	e00e      	b.n	8001b4c <HAL_DMA_Abort_IT+0xa4>
 8001b2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b32:	e00b      	b.n	8001b4c <HAL_DMA_Abort_IT+0xa4>
 8001b34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b38:	e008      	b.n	8001b4c <HAL_DMA_Abort_IT+0xa4>
 8001b3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b3e:	e005      	b.n	8001b4c <HAL_DMA_Abort_IT+0xa4>
 8001b40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b44:	e002      	b.n	8001b4c <HAL_DMA_Abort_IT+0xa4>
 8001b46:	2310      	movs	r3, #16
 8001b48:	e000      	b.n	8001b4c <HAL_DMA_Abort_IT+0xa4>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	4a11      	ldr	r2, [pc, #68]	@ (8001b94 <HAL_DMA_Abort_IT+0xec>)
 8001b4e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	4798      	blx	r3
    } 
  }
  return status;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40020008 	.word	0x40020008
 8001b80:	4002001c 	.word	0x4002001c
 8001b84:	40020030 	.word	0x40020030
 8001b88:	40020044 	.word	0x40020044
 8001b8c:	40020058 	.word	0x40020058
 8001b90:	4002006c 	.word	0x4002006c
 8001b94:	40020000 	.word	0x40020000

08001b98 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d04f      	beq.n	8001c60 <HAL_DMA_IRQHandler+0xc8>
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d04a      	beq.n	8001c60 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0320 	and.w	r3, r3, #32
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d107      	bne.n	8001be8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0204 	bic.w	r2, r2, #4
 8001be6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a66      	ldr	r2, [pc, #408]	@ (8001d88 <HAL_DMA_IRQHandler+0x1f0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d029      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xae>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a65      	ldr	r2, [pc, #404]	@ (8001d8c <HAL_DMA_IRQHandler+0x1f4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d022      	beq.n	8001c42 <HAL_DMA_IRQHandler+0xaa>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a63      	ldr	r2, [pc, #396]	@ (8001d90 <HAL_DMA_IRQHandler+0x1f8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01a      	beq.n	8001c3c <HAL_DMA_IRQHandler+0xa4>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a62      	ldr	r2, [pc, #392]	@ (8001d94 <HAL_DMA_IRQHandler+0x1fc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d012      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x9e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a60      	ldr	r2, [pc, #384]	@ (8001d98 <HAL_DMA_IRQHandler+0x200>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00a      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x98>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a5f      	ldr	r2, [pc, #380]	@ (8001d9c <HAL_DMA_IRQHandler+0x204>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d102      	bne.n	8001c2a <HAL_DMA_IRQHandler+0x92>
 8001c24:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c28:	e00e      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c2a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001c2e:	e00b      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c30:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c34:	e008      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c3a:	e005      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c40:	e002      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c42:	2340      	movs	r3, #64	@ 0x40
 8001c44:	e000      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c46:	2304      	movs	r3, #4
 8001c48:	4a55      	ldr	r2, [pc, #340]	@ (8001da0 <HAL_DMA_IRQHandler+0x208>)
 8001c4a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8094 	beq.w	8001d7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c5e:	e08e      	b.n	8001d7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	2202      	movs	r2, #2
 8001c66:	409a      	lsls	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d056      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x186>
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d051      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10b      	bne.n	8001ca0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 020a 	bic.w	r2, r2, #10
 8001c96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a38      	ldr	r2, [pc, #224]	@ (8001d88 <HAL_DMA_IRQHandler+0x1f0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d029      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x166>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a37      	ldr	r2, [pc, #220]	@ (8001d8c <HAL_DMA_IRQHandler+0x1f4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d022      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x162>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a35      	ldr	r2, [pc, #212]	@ (8001d90 <HAL_DMA_IRQHandler+0x1f8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d01a      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x15c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a34      	ldr	r2, [pc, #208]	@ (8001d94 <HAL_DMA_IRQHandler+0x1fc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d012      	beq.n	8001cee <HAL_DMA_IRQHandler+0x156>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a32      	ldr	r2, [pc, #200]	@ (8001d98 <HAL_DMA_IRQHandler+0x200>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00a      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x150>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a31      	ldr	r2, [pc, #196]	@ (8001d9c <HAL_DMA_IRQHandler+0x204>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d102      	bne.n	8001ce2 <HAL_DMA_IRQHandler+0x14a>
 8001cdc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ce0:	e00e      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001ce2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ce6:	e00b      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001ce8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cec:	e008      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001cee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cf2:	e005      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001cf4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cf8:	e002      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	e000      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	4a27      	ldr	r2, [pc, #156]	@ (8001da0 <HAL_DMA_IRQHandler+0x208>)
 8001d02:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d034      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d1c:	e02f      	b.n	8001d7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	2208      	movs	r2, #8
 8001d24:	409a      	lsls	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d028      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x1e8>
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d023      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 020e 	bic.w	r2, r2, #14
 8001d46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d004      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	4798      	blx	r3
    }
  }
  return;
 8001d7e:	bf00      	nop
 8001d80:	bf00      	nop
}
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40020008 	.word	0x40020008
 8001d8c:	4002001c 	.word	0x4002001c
 8001d90:	40020030 	.word	0x40020030
 8001d94:	40020044 	.word	0x40020044
 8001d98:	40020058 	.word	0x40020058
 8001d9c:	4002006c 	.word	0x4002006c
 8001da0:	40020000 	.word	0x40020000

08001da4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d108      	bne.n	8001de4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001de2:	e007      	b.n	8001df4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	60da      	str	r2, [r3, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b08b      	sub	sp, #44	@ 0x2c
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e12:	e169      	b.n	80020e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e14:	2201      	movs	r2, #1
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	f040 8158 	bne.w	80020e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4a9a      	ldr	r2, [pc, #616]	@ (80020a0 <HAL_GPIO_Init+0x2a0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d05e      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e3c:	4a98      	ldr	r2, [pc, #608]	@ (80020a0 <HAL_GPIO_Init+0x2a0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d875      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e42:	4a98      	ldr	r2, [pc, #608]	@ (80020a4 <HAL_GPIO_Init+0x2a4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d058      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e48:	4a96      	ldr	r2, [pc, #600]	@ (80020a4 <HAL_GPIO_Init+0x2a4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d86f      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e4e:	4a96      	ldr	r2, [pc, #600]	@ (80020a8 <HAL_GPIO_Init+0x2a8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d052      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e54:	4a94      	ldr	r2, [pc, #592]	@ (80020a8 <HAL_GPIO_Init+0x2a8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d869      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e5a:	4a94      	ldr	r2, [pc, #592]	@ (80020ac <HAL_GPIO_Init+0x2ac>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d04c      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e60:	4a92      	ldr	r2, [pc, #584]	@ (80020ac <HAL_GPIO_Init+0x2ac>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d863      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e66:	4a92      	ldr	r2, [pc, #584]	@ (80020b0 <HAL_GPIO_Init+0x2b0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d046      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e6c:	4a90      	ldr	r2, [pc, #576]	@ (80020b0 <HAL_GPIO_Init+0x2b0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d85d      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e72:	2b12      	cmp	r3, #18
 8001e74:	d82a      	bhi.n	8001ecc <HAL_GPIO_Init+0xcc>
 8001e76:	2b12      	cmp	r3, #18
 8001e78:	d859      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e80 <HAL_GPIO_Init+0x80>)
 8001e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e80:	08001efb 	.word	0x08001efb
 8001e84:	08001ed5 	.word	0x08001ed5
 8001e88:	08001ee7 	.word	0x08001ee7
 8001e8c:	08001f29 	.word	0x08001f29
 8001e90:	08001f2f 	.word	0x08001f2f
 8001e94:	08001f2f 	.word	0x08001f2f
 8001e98:	08001f2f 	.word	0x08001f2f
 8001e9c:	08001f2f 	.word	0x08001f2f
 8001ea0:	08001f2f 	.word	0x08001f2f
 8001ea4:	08001f2f 	.word	0x08001f2f
 8001ea8:	08001f2f 	.word	0x08001f2f
 8001eac:	08001f2f 	.word	0x08001f2f
 8001eb0:	08001f2f 	.word	0x08001f2f
 8001eb4:	08001f2f 	.word	0x08001f2f
 8001eb8:	08001f2f 	.word	0x08001f2f
 8001ebc:	08001f2f 	.word	0x08001f2f
 8001ec0:	08001f2f 	.word	0x08001f2f
 8001ec4:	08001edd 	.word	0x08001edd
 8001ec8:	08001ef1 	.word	0x08001ef1
 8001ecc:	4a79      	ldr	r2, [pc, #484]	@ (80020b4 <HAL_GPIO_Init+0x2b4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ed2:	e02c      	b.n	8001f2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	623b      	str	r3, [r7, #32]
          break;
 8001eda:	e029      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	623b      	str	r3, [r7, #32]
          break;
 8001ee4:	e024      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	3308      	adds	r3, #8
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e01f      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	330c      	adds	r3, #12
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e01a      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f02:	2304      	movs	r3, #4
 8001f04:	623b      	str	r3, [r7, #32]
          break;
 8001f06:	e013      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f10:	2308      	movs	r3, #8
 8001f12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	611a      	str	r2, [r3, #16]
          break;
 8001f1a:	e009      	b.n	8001f30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	615a      	str	r2, [r3, #20]
          break;
 8001f26:	e003      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	e000      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          break;
 8001f2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2bff      	cmp	r3, #255	@ 0xff
 8001f34:	d801      	bhi.n	8001f3a <HAL_GPIO_Init+0x13a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	e001      	b.n	8001f3e <HAL_GPIO_Init+0x13e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2bff      	cmp	r3, #255	@ 0xff
 8001f44:	d802      	bhi.n	8001f4c <HAL_GPIO_Init+0x14c>
 8001f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	e002      	b.n	8001f52 <HAL_GPIO_Init+0x152>
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4e:	3b08      	subs	r3, #8
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	210f      	movs	r1, #15
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	401a      	ands	r2, r3
 8001f64:	6a39      	ldr	r1, [r7, #32]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80b1 	beq.w	80020e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f80:	4b4d      	ldr	r3, [pc, #308]	@ (80020b8 <HAL_GPIO_Init+0x2b8>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	4a4c      	ldr	r2, [pc, #304]	@ (80020b8 <HAL_GPIO_Init+0x2b8>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6193      	str	r3, [r2, #24]
 8001f8c:	4b4a      	ldr	r3, [pc, #296]	@ (80020b8 <HAL_GPIO_Init+0x2b8>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f98:	4a48      	ldr	r2, [pc, #288]	@ (80020bc <HAL_GPIO_Init+0x2bc>)
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a40      	ldr	r2, [pc, #256]	@ (80020c0 <HAL_GPIO_Init+0x2c0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d013      	beq.n	8001fec <HAL_GPIO_Init+0x1ec>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80020c4 <HAL_GPIO_Init+0x2c4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00d      	beq.n	8001fe8 <HAL_GPIO_Init+0x1e8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a3e      	ldr	r2, [pc, #248]	@ (80020c8 <HAL_GPIO_Init+0x2c8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d007      	beq.n	8001fe4 <HAL_GPIO_Init+0x1e4>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a3d      	ldr	r2, [pc, #244]	@ (80020cc <HAL_GPIO_Init+0x2cc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_GPIO_Init+0x1e0>
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e006      	b.n	8001fee <HAL_GPIO_Init+0x1ee>
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	e004      	b.n	8001fee <HAL_GPIO_Init+0x1ee>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e002      	b.n	8001fee <HAL_GPIO_Init+0x1ee>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_GPIO_Init+0x1ee>
 8001fec:	2300      	movs	r3, #0
 8001fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff0:	f002 0203 	and.w	r2, r2, #3
 8001ff4:	0092      	lsls	r2, r2, #2
 8001ff6:	4093      	lsls	r3, r2
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ffe:	492f      	ldr	r1, [pc, #188]	@ (80020bc <HAL_GPIO_Init+0x2bc>)
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002018:	4b2d      	ldr	r3, [pc, #180]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	492c      	ldr	r1, [pc, #176]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002026:	4b2a      	ldr	r3, [pc, #168]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	43db      	mvns	r3, r3
 800202e:	4928      	ldr	r1, [pc, #160]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002030:	4013      	ands	r3, r2
 8002032:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002040:	4b23      	ldr	r3, [pc, #140]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	4922      	ldr	r1, [pc, #136]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800204e:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	43db      	mvns	r3, r3
 8002056:	491e      	ldr	r1, [pc, #120]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002058:	4013      	ands	r3, r2
 800205a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d006      	beq.n	8002076 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002068:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	4918      	ldr	r1, [pc, #96]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
 8002074:	e006      	b.n	8002084 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002076:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	43db      	mvns	r3, r3
 800207e:	4914      	ldr	r1, [pc, #80]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002080:	4013      	ands	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d021      	beq.n	80020d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002090:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	490e      	ldr	r1, [pc, #56]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
 800209c:	e021      	b.n	80020e2 <HAL_GPIO_Init+0x2e2>
 800209e:	bf00      	nop
 80020a0:	10320000 	.word	0x10320000
 80020a4:	10310000 	.word	0x10310000
 80020a8:	10220000 	.word	0x10220000
 80020ac:	10210000 	.word	0x10210000
 80020b0:	10120000 	.word	0x10120000
 80020b4:	10110000 	.word	0x10110000
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40010000 	.word	0x40010000
 80020c0:	40010800 	.word	0x40010800
 80020c4:	40010c00 	.word	0x40010c00
 80020c8:	40011000 	.word	0x40011000
 80020cc:	40011400 	.word	0x40011400
 80020d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002104 <HAL_GPIO_Init+0x304>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	43db      	mvns	r3, r3
 80020dc:	4909      	ldr	r1, [pc, #36]	@ (8002104 <HAL_GPIO_Init+0x304>)
 80020de:	4013      	ands	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	3301      	adds	r3, #1
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	fa22 f303 	lsr.w	r3, r2, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f47f ae8e 	bne.w	8001e14 <HAL_GPIO_Init+0x14>
  }
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	372c      	adds	r7, #44	@ 0x2c
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	40010400 	.word	0x40010400

08002108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	807b      	strh	r3, [r7, #2]
 8002114:	4613      	mov	r3, r2
 8002116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002118:	787b      	ldrb	r3, [r7, #1]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800211e:	887a      	ldrh	r2, [r7, #2]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002124:	e003      	b.n	800212e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002126:	887b      	ldrh	r3, [r7, #2]
 8002128:	041a      	lsls	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	611a      	str	r2, [r3, #16]
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800214a:	887a      	ldrh	r2, [r7, #2]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4013      	ands	r3, r2
 8002150:	041a      	lsls	r2, r3, #16
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43d9      	mvns	r1, r3
 8002156:	887b      	ldrh	r3, [r7, #2]
 8002158:	400b      	ands	r3, r1
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	611a      	str	r2, [r3, #16]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
	...

0800216c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002176:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002182:	4a05      	ldr	r2, [pc, #20]	@ (8002198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fb8c 	bl	80008a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40010400 	.word	0x40010400

0800219c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e272      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8087 	beq.w	80022ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021bc:	4b92      	ldr	r3, [pc, #584]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d00c      	beq.n	80021e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d112      	bne.n	80021fa <HAL_RCC_OscConfig+0x5e>
 80021d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e0:	d10b      	bne.n	80021fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e2:	4b89      	ldr	r3, [pc, #548]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d06c      	beq.n	80022c8 <HAL_RCC_OscConfig+0x12c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d168      	bne.n	80022c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e24c      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x76>
 8002204:	4b80      	ldr	r3, [pc, #512]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a7f      	ldr	r2, [pc, #508]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800220a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	e02e      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0x98>
 800221a:	4b7b      	ldr	r3, [pc, #492]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a7a      	ldr	r2, [pc, #488]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b78      	ldr	r3, [pc, #480]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a77      	ldr	r2, [pc, #476]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800222c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e01d      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0xbc>
 800223e:	4b72      	ldr	r3, [pc, #456]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a71      	ldr	r2, [pc, #452]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b6f      	ldr	r3, [pc, #444]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a6e      	ldr	r2, [pc, #440]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002258:	4b6b      	ldr	r3, [pc, #428]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a6a      	ldr	r2, [pc, #424]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800225e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b68      	ldr	r3, [pc, #416]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a67      	ldr	r2, [pc, #412]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800226a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800226e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff f9e4 	bl	8001644 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002280:	f7ff f9e0 	bl	8001644 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	@ 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e200      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b5d      	ldr	r3, [pc, #372]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0xe4>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff f9d0 	bl	8001644 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7ff f9cc 	bl	8001644 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	@ 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e1ec      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ba:	4b53      	ldr	r3, [pc, #332]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x10c>
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d063      	beq.n	800239e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022e2:	4b49      	ldr	r3, [pc, #292]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d11c      	bne.n	8002328 <HAL_RCC_OscConfig+0x18c>
 80022ee:	4b46      	ldr	r3, [pc, #280]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d116      	bne.n	8002328 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	4b43      	ldr	r3, [pc, #268]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_RCC_OscConfig+0x176>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e1c0      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002312:	4b3d      	ldr	r3, [pc, #244]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4939      	ldr	r1, [pc, #228]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002326:	e03a      	b.n	800239e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002330:	4b36      	ldr	r3, [pc, #216]	@ (800240c <HAL_RCC_OscConfig+0x270>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7ff f985 	bl	8001644 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233e:	f7ff f981 	bl	8001644 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e1a1      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	4b2d      	ldr	r3, [pc, #180]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235c:	4b2a      	ldr	r3, [pc, #168]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4927      	ldr	r1, [pc, #156]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]
 8002370:	e015      	b.n	800239e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002372:	4b26      	ldr	r3, [pc, #152]	@ (800240c <HAL_RCC_OscConfig+0x270>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff f964 	bl	8001644 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002380:	f7ff f960 	bl	8001644 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e180      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	4b1d      	ldr	r3, [pc, #116]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d03a      	beq.n	8002420 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d019      	beq.n	80023e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b2:	4b17      	ldr	r3, [pc, #92]	@ (8002410 <HAL_RCC_OscConfig+0x274>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b8:	f7ff f944 	bl	8001644 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c0:	f7ff f940 	bl	8001644 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e160      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023de:	2001      	movs	r0, #1
 80023e0:	f000 face 	bl	8002980 <RCC_Delay>
 80023e4:	e01c      	b.n	8002420 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002410 <HAL_RCC_OscConfig+0x274>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ec:	f7ff f92a 	bl	8001644 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f2:	e00f      	b.n	8002414 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f4:	f7ff f926 	bl	8001644 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d908      	bls.n	8002414 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e146      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	42420000 	.word	0x42420000
 8002410:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002414:	4b92      	ldr	r3, [pc, #584]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1e9      	bne.n	80023f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80a6 	beq.w	800257a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002432:	4b8b      	ldr	r3, [pc, #556]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10d      	bne.n	800245a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4b88      	ldr	r3, [pc, #544]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a87      	ldr	r2, [pc, #540]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002448:	61d3      	str	r3, [r2, #28]
 800244a:	4b85      	ldr	r3, [pc, #532]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002456:	2301      	movs	r3, #1
 8002458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	4b82      	ldr	r3, [pc, #520]	@ (8002664 <HAL_RCC_OscConfig+0x4c8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d118      	bne.n	8002498 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002466:	4b7f      	ldr	r3, [pc, #508]	@ (8002664 <HAL_RCC_OscConfig+0x4c8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a7e      	ldr	r2, [pc, #504]	@ (8002664 <HAL_RCC_OscConfig+0x4c8>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002472:	f7ff f8e7 	bl	8001644 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247a:	f7ff f8e3 	bl	8001644 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b64      	cmp	r3, #100	@ 0x64
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e103      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248c:	4b75      	ldr	r3, [pc, #468]	@ (8002664 <HAL_RCC_OscConfig+0x4c8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d106      	bne.n	80024ae <HAL_RCC_OscConfig+0x312>
 80024a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6213      	str	r3, [r2, #32]
 80024ac:	e02d      	b.n	800250a <HAL_RCC_OscConfig+0x36e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x334>
 80024b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a69      	ldr	r2, [pc, #420]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	6213      	str	r3, [r2, #32]
 80024c2:	4b67      	ldr	r3, [pc, #412]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4a66      	ldr	r2, [pc, #408]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	f023 0304 	bic.w	r3, r3, #4
 80024cc:	6213      	str	r3, [r2, #32]
 80024ce:	e01c      	b.n	800250a <HAL_RCC_OscConfig+0x36e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d10c      	bne.n	80024f2 <HAL_RCC_OscConfig+0x356>
 80024d8:	4b61      	ldr	r3, [pc, #388]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a60      	ldr	r2, [pc, #384]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6213      	str	r3, [r2, #32]
 80024f0:	e00b      	b.n	800250a <HAL_RCC_OscConfig+0x36e>
 80024f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6213      	str	r3, [r2, #32]
 80024fe:	4b58      	ldr	r3, [pc, #352]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a57      	ldr	r2, [pc, #348]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d015      	beq.n	800253e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7ff f897 	bl	8001644 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7ff f893 	bl	8001644 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e0b1      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	4b4b      	ldr	r3, [pc, #300]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0ee      	beq.n	800251a <HAL_RCC_OscConfig+0x37e>
 800253c:	e014      	b.n	8002568 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253e:	f7ff f881 	bl	8001644 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	e00a      	b.n	800255c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7ff f87d 	bl	8001644 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002554:	4293      	cmp	r3, r2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e09b      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255c:	4b40      	ldr	r3, [pc, #256]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1ee      	bne.n	8002546 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d105      	bne.n	800257a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256e:	4b3c      	ldr	r3, [pc, #240]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4a3b      	ldr	r2, [pc, #236]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002578:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8087 	beq.w	8002692 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002584:	4b36      	ldr	r3, [pc, #216]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d061      	beq.n	8002654 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d146      	bne.n	8002626 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002598:	4b33      	ldr	r3, [pc, #204]	@ (8002668 <HAL_RCC_OscConfig+0x4cc>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7ff f851 	bl	8001644 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a6:	f7ff f84d 	bl	8001644 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e06d      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b8:	4b29      	ldr	r3, [pc, #164]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025cc:	d108      	bne.n	80025e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ce:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4921      	ldr	r1, [pc, #132]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a19      	ldr	r1, [r3, #32]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f0:	430b      	orrs	r3, r1
 80025f2:	491b      	ldr	r1, [pc, #108]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002668 <HAL_RCC_OscConfig+0x4cc>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7ff f821 	bl	8001644 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7ff f81d 	bl	8001644 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e03d      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002618:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x46a>
 8002624:	e035      	b.n	8002692 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <HAL_RCC_OscConfig+0x4cc>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff f80a 	bl	8001644 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7ff f806 	bl	8001644 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e026      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x498>
 8002652:	e01e      	b.n	8002692 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d107      	bne.n	800266c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e019      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
 8002660:	40021000 	.word	0x40021000
 8002664:	40007000 	.word	0x40007000
 8002668:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800266c:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <HAL_RCC_OscConfig+0x500>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	429a      	cmp	r2, r3
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0d0      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d910      	bls.n	80026e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b67      	ldr	r3, [pc, #412]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0207 	bic.w	r2, r3, #7
 80026ca:	4965      	ldr	r1, [pc, #404]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b63      	ldr	r3, [pc, #396]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0b8      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026fc:	4b59      	ldr	r3, [pc, #356]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a58      	ldr	r2, [pc, #352]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002706:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002714:	4b53      	ldr	r3, [pc, #332]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a52      	ldr	r2, [pc, #328]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800271e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002720:	4b50      	ldr	r3, [pc, #320]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	494d      	ldr	r1, [pc, #308]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d040      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	4b47      	ldr	r3, [pc, #284]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d115      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e07f      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275e:	4b41      	ldr	r3, [pc, #260]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e073      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276e:	4b3d      	ldr	r3, [pc, #244]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e06b      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277e:	4b39      	ldr	r3, [pc, #228]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f023 0203 	bic.w	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4936      	ldr	r1, [pc, #216]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002790:	f7fe ff58 	bl	8001644 <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	e00a      	b.n	80027ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002798:	f7fe ff54 	bl	8001644 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e053      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 020c 	and.w	r2, r3, #12
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	429a      	cmp	r2, r3
 80027be:	d1eb      	bne.n	8002798 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c0:	4b27      	ldr	r3, [pc, #156]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d210      	bcs.n	80027f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b24      	ldr	r3, [pc, #144]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 0207 	bic.w	r2, r3, #7
 80027d6:	4922      	ldr	r1, [pc, #136]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b20      	ldr	r3, [pc, #128]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e032      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027fc:	4b19      	ldr	r3, [pc, #100]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4916      	ldr	r1, [pc, #88]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800281a:	4b12      	ldr	r3, [pc, #72]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	490e      	ldr	r1, [pc, #56]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800282e:	f000 f821 	bl	8002874 <HAL_RCC_GetSysClockFreq>
 8002832:	4602      	mov	r2, r0
 8002834:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	490a      	ldr	r1, [pc, #40]	@ (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 8002840:	5ccb      	ldrb	r3, [r1, r3]
 8002842:	fa22 f303 	lsr.w	r3, r2, r3
 8002846:	4a09      	ldr	r2, [pc, #36]	@ (800286c <HAL_RCC_ClockConfig+0x1cc>)
 8002848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800284a:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <HAL_RCC_ClockConfig+0x1d0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe feb6 	bl	80015c0 <HAL_InitTick>

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40022000 	.word	0x40022000
 8002864:	40021000 	.word	0x40021000
 8002868:	08005264 	.word	0x08005264
 800286c:	20000000 	.word	0x20000000
 8002870:	20000004 	.word	0x20000004

08002874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800288e:	4b1e      	ldr	r3, [pc, #120]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x94>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d002      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0x30>
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x36>
 80028a2:	e027      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028a4:	4b19      	ldr	r3, [pc, #100]	@ (800290c <HAL_RCC_GetSysClockFreq+0x98>)
 80028a6:	613b      	str	r3, [r7, #16]
      break;
 80028a8:	e027      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	0c9b      	lsrs	r3, r3, #18
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	4a17      	ldr	r2, [pc, #92]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028b4:	5cd3      	ldrb	r3, [r2, r3]
 80028b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028c2:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x94>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	0c5b      	lsrs	r3, r3, #17
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	4a11      	ldr	r2, [pc, #68]	@ (8002914 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
 80028d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a0d      	ldr	r2, [pc, #52]	@ (800290c <HAL_RCC_GetSysClockFreq+0x98>)
 80028d6:	fb03 f202 	mul.w	r2, r3, r2
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	e004      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002918 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028e8:	fb02 f303 	mul.w	r3, r2, r3
 80028ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	613b      	str	r3, [r7, #16]
      break;
 80028f2:	e002      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b05      	ldr	r3, [pc, #20]	@ (800290c <HAL_RCC_GetSysClockFreq+0x98>)
 80028f6:	613b      	str	r3, [r7, #16]
      break;
 80028f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fa:	693b      	ldr	r3, [r7, #16]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	007a1200 	.word	0x007a1200
 8002910:	0800527c 	.word	0x0800527c
 8002914:	0800528c 	.word	0x0800528c
 8002918:	003d0900 	.word	0x003d0900

0800291c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002920:	4b02      	ldr	r3, [pc, #8]	@ (800292c <HAL_RCC_GetHCLKFreq+0x10>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	20000000 	.word	0x20000000

08002930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002934:	f7ff fff2 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4903      	ldr	r1, [pc, #12]	@ (8002954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	08005274 	.word	0x08005274

08002958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800295c:	f7ff ffde 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	0adb      	lsrs	r3, r3, #11
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4903      	ldr	r1, [pc, #12]	@ (800297c <HAL_RCC_GetPCLK2Freq+0x24>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000
 800297c:	08005274 	.word	0x08005274

08002980 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002988:	4b0a      	ldr	r3, [pc, #40]	@ (80029b4 <RCC_Delay+0x34>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0a      	ldr	r2, [pc, #40]	@ (80029b8 <RCC_Delay+0x38>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0a5b      	lsrs	r3, r3, #9
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	fb02 f303 	mul.w	r3, r2, r3
 800299a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800299c:	bf00      	nop
  }
  while (Delay --);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1e5a      	subs	r2, r3, #1
 80029a2:	60fa      	str	r2, [r7, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f9      	bne.n	800299c <RCC_Delay+0x1c>
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	20000000 	.word	0x20000000
 80029b8:	10624dd3 	.word	0x10624dd3

080029bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e041      	b.n	8002a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe fbb0 	bl	8001148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f000 fd8a 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d001      	beq.n	8002a74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e032      	b.n	8002ada <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a18      	ldr	r2, [pc, #96]	@ (8002ae4 <HAL_TIM_Base_Start+0x88>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00e      	beq.n	8002aa4 <HAL_TIM_Base_Start+0x48>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a8e:	d009      	beq.n	8002aa4 <HAL_TIM_Base_Start+0x48>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a14      	ldr	r2, [pc, #80]	@ (8002ae8 <HAL_TIM_Base_Start+0x8c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d004      	beq.n	8002aa4 <HAL_TIM_Base_Start+0x48>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a13      	ldr	r2, [pc, #76]	@ (8002aec <HAL_TIM_Base_Start+0x90>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d111      	bne.n	8002ac8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d010      	beq.n	8002ad8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0201 	orr.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac6:	e007      	b.n	8002ad8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40000400 	.word	0x40000400
 8002aec:	40000800 	.word	0x40000800

08002af0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e041      	b.n	8002b86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f839 	bl	8002b8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f000 fcf0 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d109      	bne.n	8002bc4 <HAL_TIM_PWM_Start+0x24>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	bf14      	ite	ne
 8002bbc:	2301      	movne	r3, #1
 8002bbe:	2300      	moveq	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	e022      	b.n	8002c0a <HAL_TIM_PWM_Start+0x6a>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d109      	bne.n	8002bde <HAL_TIM_PWM_Start+0x3e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	bf14      	ite	ne
 8002bd6:	2301      	movne	r3, #1
 8002bd8:	2300      	moveq	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	e015      	b.n	8002c0a <HAL_TIM_PWM_Start+0x6a>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d109      	bne.n	8002bf8 <HAL_TIM_PWM_Start+0x58>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e008      	b.n	8002c0a <HAL_TIM_PWM_Start+0x6a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e05e      	b.n	8002cd0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d104      	bne.n	8002c22 <HAL_TIM_PWM_Start+0x82>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c20:	e013      	b.n	8002c4a <HAL_TIM_PWM_Start+0xaa>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d104      	bne.n	8002c32 <HAL_TIM_PWM_Start+0x92>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c30:	e00b      	b.n	8002c4a <HAL_TIM_PWM_Start+0xaa>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d104      	bne.n	8002c42 <HAL_TIM_PWM_Start+0xa2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c40:	e003      	b.n	8002c4a <HAL_TIM_PWM_Start+0xaa>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	6839      	ldr	r1, [r7, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 feea 	bl	8003a2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd8 <HAL_TIM_PWM_Start+0x138>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d107      	bne.n	8002c72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a18      	ldr	r2, [pc, #96]	@ (8002cd8 <HAL_TIM_PWM_Start+0x138>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00e      	beq.n	8002c9a <HAL_TIM_PWM_Start+0xfa>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c84:	d009      	beq.n	8002c9a <HAL_TIM_PWM_Start+0xfa>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a14      	ldr	r2, [pc, #80]	@ (8002cdc <HAL_TIM_PWM_Start+0x13c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d004      	beq.n	8002c9a <HAL_TIM_PWM_Start+0xfa>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a12      	ldr	r2, [pc, #72]	@ (8002ce0 <HAL_TIM_PWM_Start+0x140>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d111      	bne.n	8002cbe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b06      	cmp	r3, #6
 8002caa:	d010      	beq.n	8002cce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cbc:	e007      	b.n	8002cce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40012c00 	.word	0x40012c00
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40000800 	.word	0x40000800

08002ce4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d109      	bne.n	8002d10 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	bf0c      	ite	eq
 8002d08:	2301      	moveq	r3, #1
 8002d0a:	2300      	movne	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e022      	b.n	8002d56 <HAL_TIM_PWM_Start_DMA+0x72>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d109      	bne.n	8002d2a <HAL_TIM_PWM_Start_DMA+0x46>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	e015      	b.n	8002d56 <HAL_TIM_PWM_Start_DMA+0x72>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d109      	bne.n	8002d44 <HAL_TIM_PWM_Start_DMA+0x60>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e008      	b.n	8002d56 <HAL_TIM_PWM_Start_DMA+0x72>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e153      	b.n	8003006 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_TIM_PWM_Start_DMA+0x94>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e022      	b.n	8002dbe <HAL_TIM_PWM_Start_DMA+0xda>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d109      	bne.n	8002d92 <HAL_TIM_PWM_Start_DMA+0xae>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	bf0c      	ite	eq
 8002d8a:	2301      	moveq	r3, #1
 8002d8c:	2300      	movne	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	e015      	b.n	8002dbe <HAL_TIM_PWM_Start_DMA+0xda>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d109      	bne.n	8002dac <HAL_TIM_PWM_Start_DMA+0xc8>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e008      	b.n	8002dbe <HAL_TIM_PWM_Start_DMA+0xda>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d024      	beq.n	8002e0c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_TIM_PWM_Start_DMA+0xea>
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e119      	b.n	8003006 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d104      	bne.n	8002de2 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002de0:	e016      	b.n	8002e10 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d104      	bne.n	8002df2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002df0:	e00e      	b.n	8002e10 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d104      	bne.n	8002e02 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e00:	e006      	b.n	8002e10 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2202      	movs	r2, #2
 8002e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e0a:	e001      	b.n	8002e10 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0fa      	b.n	8003006 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	f200 80ae 	bhi.w	8002f74 <HAL_TIM_PWM_Start_DMA+0x290>
 8002e18:	a201      	add	r2, pc, #4	@ (adr r2, 8002e20 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e55 	.word	0x08002e55
 8002e24:	08002f75 	.word	0x08002f75
 8002e28:	08002f75 	.word	0x08002f75
 8002e2c:	08002f75 	.word	0x08002f75
 8002e30:	08002e9d 	.word	0x08002e9d
 8002e34:	08002f75 	.word	0x08002f75
 8002e38:	08002f75 	.word	0x08002f75
 8002e3c:	08002f75 	.word	0x08002f75
 8002e40:	08002ee5 	.word	0x08002ee5
 8002e44:	08002f75 	.word	0x08002f75
 8002e48:	08002f75 	.word	0x08002f75
 8002e4c:	08002f75 	.word	0x08002f75
 8002e50:	08002f2d 	.word	0x08002f2d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	4a6d      	ldr	r2, [pc, #436]	@ (8003010 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002e5a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	4a6c      	ldr	r2, [pc, #432]	@ (8003014 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002e62:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	4a6b      	ldr	r2, [pc, #428]	@ (8003018 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002e6a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3334      	adds	r3, #52	@ 0x34
 8002e78:	461a      	mov	r2, r3
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	f7fe fd78 	bl	8001970 <HAL_DMA_Start_IT>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0bd      	b.n	8003006 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e98:	60da      	str	r2, [r3, #12]
      break;
 8002e9a:	e06e      	b.n	8002f7a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea0:	4a5b      	ldr	r2, [pc, #364]	@ (8003010 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002ea2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea8:	4a5a      	ldr	r2, [pc, #360]	@ (8003014 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002eaa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb0:	4a59      	ldr	r2, [pc, #356]	@ (8003018 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3338      	adds	r3, #56	@ 0x38
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	887b      	ldrh	r3, [r7, #2]
 8002ec4:	f7fe fd54 	bl	8001970 <HAL_DMA_Start_IT>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e099      	b.n	8003006 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ee0:	60da      	str	r2, [r3, #12]
      break;
 8002ee2:	e04a      	b.n	8002f7a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	4a49      	ldr	r2, [pc, #292]	@ (8003010 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002eea:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef0:	4a48      	ldr	r2, [pc, #288]	@ (8003014 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002ef2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	4a47      	ldr	r2, [pc, #284]	@ (8003018 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002efa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	333c      	adds	r3, #60	@ 0x3c
 8002f08:	461a      	mov	r2, r3
 8002f0a:	887b      	ldrh	r3, [r7, #2]
 8002f0c:	f7fe fd30 	bl	8001970 <HAL_DMA_Start_IT>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e075      	b.n	8003006 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f28:	60da      	str	r2, [r3, #12]
      break;
 8002f2a:	e026      	b.n	8002f7a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f30:	4a37      	ldr	r2, [pc, #220]	@ (8003010 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002f32:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f38:	4a36      	ldr	r2, [pc, #216]	@ (8003014 <HAL_TIM_PWM_Start_DMA+0x330>)
 8002f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f40:	4a35      	ldr	r2, [pc, #212]	@ (8003018 <HAL_TIM_PWM_Start_DMA+0x334>)
 8002f42:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3340      	adds	r3, #64	@ 0x40
 8002f50:	461a      	mov	r2, r3
 8002f52:	887b      	ldrh	r3, [r7, #2]
 8002f54:	f7fe fd0c 	bl	8001970 <HAL_DMA_Start_IT>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e051      	b.n	8003006 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f70:	60da      	str	r2, [r3, #12]
      break;
 8002f72:	e002      	b.n	8002f7a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	75fb      	strb	r3, [r7, #23]
      break;
 8002f78:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d141      	bne.n	8003004 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2201      	movs	r2, #1
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fd4f 	bl	8003a2c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a22      	ldr	r2, [pc, #136]	@ (800301c <HAL_TIM_PWM_Start_DMA+0x338>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d107      	bne.n	8002fa8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fa6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1b      	ldr	r2, [pc, #108]	@ (800301c <HAL_TIM_PWM_Start_DMA+0x338>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00e      	beq.n	8002fd0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fba:	d009      	beq.n	8002fd0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a17      	ldr	r2, [pc, #92]	@ (8003020 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a16      	ldr	r2, [pc, #88]	@ (8003024 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d111      	bne.n	8002ff4 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d010      	beq.n	8003004 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff2:	e007      	b.n	8003004 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003004:	7dfb      	ldrb	r3, [r7, #23]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	08003403 	.word	0x08003403
 8003014:	080034ab 	.word	0x080034ab
 8003018:	08003371 	.word	0x08003371
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40000400 	.word	0x40000400
 8003024:	40000800 	.word	0x40000800

08003028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003042:	2302      	movs	r3, #2
 8003044:	e0ae      	b.n	80031a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b0c      	cmp	r3, #12
 8003052:	f200 809f 	bhi.w	8003194 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003056:	a201      	add	r2, pc, #4	@ (adr r2, 800305c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	08003091 	.word	0x08003091
 8003060:	08003195 	.word	0x08003195
 8003064:	08003195 	.word	0x08003195
 8003068:	08003195 	.word	0x08003195
 800306c:	080030d1 	.word	0x080030d1
 8003070:	08003195 	.word	0x08003195
 8003074:	08003195 	.word	0x08003195
 8003078:	08003195 	.word	0x08003195
 800307c:	08003113 	.word	0x08003113
 8003080:	08003195 	.word	0x08003195
 8003084:	08003195 	.word	0x08003195
 8003088:	08003195 	.word	0x08003195
 800308c:	08003153 	.word	0x08003153
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 faaa 	bl	80035f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0208 	orr.w	r2, r2, #8
 80030aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0204 	bic.w	r2, r2, #4
 80030ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6999      	ldr	r1, [r3, #24]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	619a      	str	r2, [r3, #24]
      break;
 80030ce:	e064      	b.n	800319a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 faf0 	bl	80036bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6999      	ldr	r1, [r3, #24]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	021a      	lsls	r2, r3, #8
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	619a      	str	r2, [r3, #24]
      break;
 8003110:	e043      	b.n	800319a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fb39 	bl	8003790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0208 	orr.w	r2, r2, #8
 800312c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0204 	bic.w	r2, r2, #4
 800313c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69d9      	ldr	r1, [r3, #28]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	61da      	str	r2, [r3, #28]
      break;
 8003150:	e023      	b.n	800319a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fb83 	bl	8003864 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800316c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69da      	ldr	r2, [r3, #28]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800317c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69d9      	ldr	r1, [r3, #28]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	021a      	lsls	r2, r3, #8
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	61da      	str	r2, [r3, #28]
      break;
 8003192:	e002      	b.n	800319a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	75fb      	strb	r3, [r7, #23]
      break;
 8003198:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_TIM_ConfigClockSource+0x1c>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e0b4      	b.n	8003332 <HAL_TIM_ConfigClockSource+0x186>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003200:	d03e      	beq.n	8003280 <HAL_TIM_ConfigClockSource+0xd4>
 8003202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003206:	f200 8087 	bhi.w	8003318 <HAL_TIM_ConfigClockSource+0x16c>
 800320a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800320e:	f000 8086 	beq.w	800331e <HAL_TIM_ConfigClockSource+0x172>
 8003212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003216:	d87f      	bhi.n	8003318 <HAL_TIM_ConfigClockSource+0x16c>
 8003218:	2b70      	cmp	r3, #112	@ 0x70
 800321a:	d01a      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0xa6>
 800321c:	2b70      	cmp	r3, #112	@ 0x70
 800321e:	d87b      	bhi.n	8003318 <HAL_TIM_ConfigClockSource+0x16c>
 8003220:	2b60      	cmp	r3, #96	@ 0x60
 8003222:	d050      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003224:	2b60      	cmp	r3, #96	@ 0x60
 8003226:	d877      	bhi.n	8003318 <HAL_TIM_ConfigClockSource+0x16c>
 8003228:	2b50      	cmp	r3, #80	@ 0x50
 800322a:	d03c      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0xfa>
 800322c:	2b50      	cmp	r3, #80	@ 0x50
 800322e:	d873      	bhi.n	8003318 <HAL_TIM_ConfigClockSource+0x16c>
 8003230:	2b40      	cmp	r3, #64	@ 0x40
 8003232:	d058      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003234:	2b40      	cmp	r3, #64	@ 0x40
 8003236:	d86f      	bhi.n	8003318 <HAL_TIM_ConfigClockSource+0x16c>
 8003238:	2b30      	cmp	r3, #48	@ 0x30
 800323a:	d064      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x15a>
 800323c:	2b30      	cmp	r3, #48	@ 0x30
 800323e:	d86b      	bhi.n	8003318 <HAL_TIM_ConfigClockSource+0x16c>
 8003240:	2b20      	cmp	r3, #32
 8003242:	d060      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x15a>
 8003244:	2b20      	cmp	r3, #32
 8003246:	d867      	bhi.n	8003318 <HAL_TIM_ConfigClockSource+0x16c>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d05c      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x15a>
 800324c:	2b10      	cmp	r3, #16
 800324e:	d05a      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x15a>
 8003250:	e062      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003262:	f000 fbc4 	bl	80039ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	609a      	str	r2, [r3, #8]
      break;
 800327e:	e04f      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003290:	f000 fbad 	bl	80039ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032a2:	609a      	str	r2, [r3, #8]
      break;
 80032a4:	e03c      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b2:	461a      	mov	r2, r3
 80032b4:	f000 fb24 	bl	8003900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2150      	movs	r1, #80	@ 0x50
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fb7b 	bl	80039ba <TIM_ITRx_SetConfig>
      break;
 80032c4:	e02c      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032d2:	461a      	mov	r2, r3
 80032d4:	f000 fb42 	bl	800395c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2160      	movs	r1, #96	@ 0x60
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fb6b 	bl	80039ba <TIM_ITRx_SetConfig>
      break;
 80032e4:	e01c      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f2:	461a      	mov	r2, r3
 80032f4:	f000 fb04 	bl	8003900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2140      	movs	r1, #64	@ 0x40
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fb5b 	bl	80039ba <TIM_ITRx_SetConfig>
      break;
 8003304:	e00c      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4619      	mov	r1, r3
 8003310:	4610      	mov	r0, r2
 8003312:	f000 fb52 	bl	80039ba <TIM_ITRx_SetConfig>
      break;
 8003316:	e003      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      break;
 800331c:	e000      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800331e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003330:	7bfb      	ldrb	r3, [r7, #15]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	d107      	bne.n	8003398 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2201      	movs	r2, #1
 800338c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003396:	e02a      	b.n	80033ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d107      	bne.n	80033b2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2202      	movs	r2, #2
 80033a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033b0:	e01d      	b.n	80033ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d107      	bne.n	80033cc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2204      	movs	r2, #4
 80033c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033ca:	e010      	b.n	80033ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d107      	bne.n	80033e6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2208      	movs	r2, #8
 80033da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033e4:	e003      	b.n	80033ee <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7ff ffb5 	bl	800335e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	771a      	strb	r2, [r3, #28]
}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	429a      	cmp	r2, r3
 8003418:	d10b      	bne.n	8003432 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d136      	bne.n	8003496 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003430:	e031      	b.n	8003496 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	429a      	cmp	r2, r3
 800343a:	d10b      	bne.n	8003454 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2202      	movs	r2, #2
 8003440:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d125      	bne.n	8003496 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003452:	e020      	b.n	8003496 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	429a      	cmp	r2, r3
 800345c:	d10b      	bne.n	8003476 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2204      	movs	r2, #4
 8003462:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d114      	bne.n	8003496 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003474:	e00f      	b.n	8003496 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	429a      	cmp	r2, r3
 800347e:	d10a      	bne.n	8003496 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2208      	movs	r2, #8
 8003484:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f7ff ff4f 	bl	800333a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	771a      	strb	r2, [r3, #28]
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d103      	bne.n	80034ca <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	771a      	strb	r2, [r3, #28]
 80034c8:	e019      	b.n	80034fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d103      	bne.n	80034dc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2202      	movs	r2, #2
 80034d8:	771a      	strb	r2, [r3, #28]
 80034da:	e010      	b.n	80034fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d103      	bne.n	80034ee <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2204      	movs	r2, #4
 80034ea:	771a      	strb	r2, [r3, #28]
 80034ec:	e007      	b.n	80034fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d102      	bne.n	80034fe <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2208      	movs	r2, #8
 80034fc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff24 	bl	800334c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	771a      	strb	r2, [r3, #28]
}
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a2f      	ldr	r2, [pc, #188]	@ (80035e4 <TIM_Base_SetConfig+0xd0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00b      	beq.n	8003544 <TIM_Base_SetConfig+0x30>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003532:	d007      	beq.n	8003544 <TIM_Base_SetConfig+0x30>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a2c      	ldr	r2, [pc, #176]	@ (80035e8 <TIM_Base_SetConfig+0xd4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d003      	beq.n	8003544 <TIM_Base_SetConfig+0x30>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a2b      	ldr	r2, [pc, #172]	@ (80035ec <TIM_Base_SetConfig+0xd8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d108      	bne.n	8003556 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800354a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a22      	ldr	r2, [pc, #136]	@ (80035e4 <TIM_Base_SetConfig+0xd0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00b      	beq.n	8003576 <TIM_Base_SetConfig+0x62>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003564:	d007      	beq.n	8003576 <TIM_Base_SetConfig+0x62>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a1f      	ldr	r2, [pc, #124]	@ (80035e8 <TIM_Base_SetConfig+0xd4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d003      	beq.n	8003576 <TIM_Base_SetConfig+0x62>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a1e      	ldr	r2, [pc, #120]	@ (80035ec <TIM_Base_SetConfig+0xd8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d108      	bne.n	8003588 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800357c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a0d      	ldr	r2, [pc, #52]	@ (80035e4 <TIM_Base_SetConfig+0xd0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d103      	bne.n	80035bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f023 0201 	bic.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	611a      	str	r2, [r3, #16]
  }
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800

080035f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f023 0201 	bic.w	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800361e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0303 	bic.w	r3, r3, #3
 8003626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f023 0302 	bic.w	r3, r3, #2
 8003638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a1c      	ldr	r2, [pc, #112]	@ (80036b8 <TIM_OC1_SetConfig+0xc8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d10c      	bne.n	8003666 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f023 0308 	bic.w	r3, r3, #8
 8003652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f023 0304 	bic.w	r3, r3, #4
 8003664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a13      	ldr	r2, [pc, #76]	@ (80036b8 <TIM_OC1_SetConfig+0xc8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d111      	bne.n	8003692 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800367c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	621a      	str	r2, [r3, #32]
}
 80036ac:	bf00      	nop
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40012c00 	.word	0x40012c00

080036bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	f023 0210 	bic.w	r2, r3, #16
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	021b      	lsls	r3, r3, #8
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f023 0320 	bic.w	r3, r3, #32
 8003706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a1d      	ldr	r2, [pc, #116]	@ (800378c <TIM_OC2_SetConfig+0xd0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d10d      	bne.n	8003738 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003736:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a14      	ldr	r2, [pc, #80]	@ (800378c <TIM_OC2_SetConfig+0xd0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d113      	bne.n	8003768 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003746:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800374e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	621a      	str	r2, [r3, #32]
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	40012c00 	.word	0x40012c00

08003790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0303 	bic.w	r3, r3, #3
 80037c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003860 <TIM_OC3_SetConfig+0xd0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10d      	bne.n	800380a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a14      	ldr	r2, [pc, #80]	@ (8003860 <TIM_OC3_SetConfig+0xd0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d113      	bne.n	800383a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	621a      	str	r2, [r3, #32]
}
 8003854:	bf00      	nop
 8003856:	371c      	adds	r7, #28
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40012c00 	.word	0x40012c00

08003864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800389a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	031b      	lsls	r3, r3, #12
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a0f      	ldr	r2, [pc, #60]	@ (80038fc <TIM_OC4_SetConfig+0x98>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d109      	bne.n	80038d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	019b      	lsls	r3, r3, #6
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	621a      	str	r2, [r3, #32]
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	40012c00 	.word	0x40012c00

08003900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f023 0201 	bic.w	r2, r3, #1
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800392a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f023 030a 	bic.w	r3, r3, #10
 800393c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	621a      	str	r2, [r3, #32]
}
 8003952:	bf00      	nop
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f023 0210 	bic.w	r2, r3, #16
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	031b      	lsls	r3, r3, #12
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003998:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	621a      	str	r2, [r3, #32]
}
 80039b0:	bf00      	nop
 80039b2:	371c      	adds	r7, #28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr

080039ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b085      	sub	sp, #20
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f043 0307 	orr.w	r3, r3, #7
 80039dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b087      	sub	sp, #28
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	021a      	lsls	r2, r3, #8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	431a      	orrs	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	609a      	str	r2, [r3, #8]
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr

08003a2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	2201      	movs	r2, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a1a      	ldr	r2, [r3, #32]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	401a      	ands	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a1a      	ldr	r2, [r3, #32]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f003 031f 	and.w	r3, r3, #31
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	fa01 f303 	lsl.w	r3, r1, r3
 8003a64:	431a      	orrs	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	621a      	str	r2, [r3, #32]
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e046      	b.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a16      	ldr	r2, [pc, #88]	@ (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00e      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad8:	d009      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a12      	ldr	r2, [pc, #72]	@ (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d004      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a10      	ldr	r2, [pc, #64]	@ (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d10c      	bne.n	8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003af4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	40012c00 	.word	0x40012c00
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800

08003b30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e042      	b.n	8003bc8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fd fc2a 	bl	80013b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2224      	movs	r2, #36	@ 0x24
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fd09 	bl	800458c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ba8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d121      	bne.n	8003c2e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <HAL_UART_Transmit_IT+0x26>
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e01a      	b.n	8003c30 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	88fa      	ldrh	r2, [r7, #6]
 8003c04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	88fa      	ldrh	r2, [r7, #6]
 8003c0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2221      	movs	r2, #33	@ 0x21
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c28:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
  }
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr

08003c3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	4613      	mov	r3, r2
 8003c46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d112      	bne.n	8003c7a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_UART_Receive_IT+0x26>
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e00b      	b.n	8003c7c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fab6 	bl	80041e2 <UART_Start_Receive_IT>
 8003c76:	4603      	mov	r3, r0
 8003c78:	e000      	b.n	8003c7c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003c7a:	2302      	movs	r3, #2
  }
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b0ba      	sub	sp, #232	@ 0xe8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10f      	bne.n	8003cea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_UART_IRQHandler+0x66>
 8003cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fb93 	bl	800440e <UART_Receive_IT>
      return;
 8003ce8:	e25b      	b.n	80041a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 80de 	beq.w	8003eb0 <HAL_UART_IRQHandler+0x22c>
 8003cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d106      	bne.n	8003d0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80d1 	beq.w	8003eb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <HAL_UART_IRQHandler+0xae>
 8003d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2a:	f043 0201 	orr.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <HAL_UART_IRQHandler+0xd2>
 8003d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4e:	f043 0202 	orr.w	r2, r3, #2
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <HAL_UART_IRQHandler+0xf6>
 8003d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d72:	f043 0204 	orr.w	r2, r3, #4
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d011      	beq.n	8003daa <HAL_UART_IRQHandler+0x126>
 8003d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d105      	bne.n	8003d9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	f043 0208 	orr.w	r2, r3, #8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 81f2 	beq.w	8004198 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x14e>
 8003dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fb1e 	bl	800440e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	bf14      	ite	ne
 8003de0:	2301      	movne	r3, #1
 8003de2:	2300      	moveq	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d103      	bne.n	8003dfe <HAL_UART_IRQHandler+0x17a>
 8003df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d04f      	beq.n	8003e9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fa28 	bl	8004254 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d041      	beq.n	8003e96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3314      	adds	r3, #20
 8003e18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3314      	adds	r3, #20
 8003e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1d9      	bne.n	8003e12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d013      	beq.n	8003e8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6a:	4a7e      	ldr	r2, [pc, #504]	@ (8004064 <HAL_UART_IRQHandler+0x3e0>)
 8003e6c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fd fe18 	bl	8001aa8 <HAL_DMA_Abort_IT>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d016      	beq.n	8003eac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8c:	e00e      	b.n	8003eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f993 	bl	80041ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e94:	e00a      	b.n	8003eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f98f 	bl	80041ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9c:	e006      	b.n	8003eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f98b 	bl	80041ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003eaa:	e175      	b.n	8004198 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eac:	bf00      	nop
    return;
 8003eae:	e173      	b.n	8004198 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	f040 814f 	bne.w	8004158 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8148 	beq.w	8004158 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 8141 	beq.w	8004158 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	60bb      	str	r3, [r7, #8]
 8003eea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 80b6 	beq.w	8004068 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8145 	beq.w	800419c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	f080 813e 	bcs.w	800419c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	f000 8088 	beq.w	8004044 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f60:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1d9      	bne.n	8003f34 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3314      	adds	r3, #20
 8003f86:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3314      	adds	r3, #20
 8003fa0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fa4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003fa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003fb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e1      	bne.n	8003f80 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3314      	adds	r3, #20
 8003fc2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003fcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3314      	adds	r3, #20
 8003fdc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003fe0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fe2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003fe6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003fee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e3      	bne.n	8003fbc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	330c      	adds	r3, #12
 8004008:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004014:	f023 0310 	bic.w	r3, r3, #16
 8004018:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004026:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004028:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800402c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e3      	bne.n	8004002 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd fcf6 	bl	8001a30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004052:	b29b      	uxth	r3, r3
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	b29b      	uxth	r3, r3
 8004058:	4619      	mov	r1, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f8b6 	bl	80041cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004060:	e09c      	b.n	800419c <HAL_UART_IRQHandler+0x518>
 8004062:	bf00      	nop
 8004064:	08004319 	.word	0x08004319
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004070:	b29b      	uxth	r3, r3
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 808e 	beq.w	80041a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8089 	beq.w	80041a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	330c      	adds	r3, #12
 8004094:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004098:	e853 3f00 	ldrex	r3, [r3]
 800409c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800409e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80040b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80040b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e3      	bne.n	800408e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	623b      	str	r3, [r7, #32]
   return(result);
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3314      	adds	r3, #20
 80040e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80040ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e3      	bne.n	80040c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	60fb      	str	r3, [r7, #12]
   return(result);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0310 	bic.w	r3, r3, #16
 8004122:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	330c      	adds	r3, #12
 800412c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004130:	61fa      	str	r2, [r7, #28]
 8004132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	69b9      	ldr	r1, [r7, #24]
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	617b      	str	r3, [r7, #20]
   return(result);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e3      	bne.n	800410c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800414a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800414e:	4619      	mov	r1, r3
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f83b 	bl	80041cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004156:	e023      	b.n	80041a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800415c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004160:	2b00      	cmp	r3, #0
 8004162:	d009      	beq.n	8004178 <HAL_UART_IRQHandler+0x4f4>
 8004164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f8e5 	bl	8004340 <UART_Transmit_IT>
    return;
 8004176:	e014      	b.n	80041a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800417c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00e      	beq.n	80041a2 <HAL_UART_IRQHandler+0x51e>
 8004184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f924 	bl	80043de <UART_EndTransmit_IT>
    return;
 8004196:	e004      	b.n	80041a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004198:	bf00      	nop
 800419a:	e002      	b.n	80041a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800419c:	bf00      	nop
 800419e:	e000      	b.n	80041a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80041a0:	bf00      	nop
  }
}
 80041a2:	37e8      	adds	r7, #232	@ 0xe8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr

080041e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b085      	sub	sp, #20
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	4613      	mov	r3, r2
 80041ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	88fa      	ldrh	r2, [r7, #6]
 80041fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	88fa      	ldrh	r2, [r7, #6]
 8004200:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2222      	movs	r2, #34	@ 0x22
 800420c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d007      	beq.n	8004228 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004226:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0220 	orr.w	r2, r2, #32
 8004246:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004254:	b480      	push	{r7}
 8004256:	b095      	sub	sp, #84	@ 0x54
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800427c:	643a      	str	r2, [r7, #64]	@ 0x40
 800427e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004282:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800428a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e5      	bne.n	800425c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3314      	adds	r3, #20
 8004296:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	61fb      	str	r3, [r7, #28]
   return(result);
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3314      	adds	r3, #20
 80042ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e5      	bne.n	8004290 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d119      	bne.n	8004300 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	60bb      	str	r3, [r7, #8]
   return(result);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f023 0310 	bic.w	r3, r3, #16
 80042e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	330c      	adds	r3, #12
 80042ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ec:	61ba      	str	r2, [r7, #24]
 80042ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6979      	ldr	r1, [r7, #20]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	613b      	str	r3, [r7, #16]
   return(result);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e5      	bne.n	80042cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800430e:	bf00      	nop
 8004310:	3754      	adds	r7, #84	@ 0x54
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f7ff ff41 	bl	80041ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004338:	bf00      	nop
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b21      	cmp	r3, #33	@ 0x21
 8004352:	d13e      	bne.n	80043d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800435c:	d114      	bne.n	8004388 <UART_Transmit_IT+0x48>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d110      	bne.n	8004388 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800437a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	621a      	str	r2, [r3, #32]
 8004386:	e008      	b.n	800439a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	1c59      	adds	r1, r3, #1
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6211      	str	r1, [r2, #32]
 8004392:	781a      	ldrb	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	4619      	mov	r1, r3
 80043a8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10f      	bne.n	80043ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr

080043de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff fed2 	bl	80041a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b08c      	sub	sp, #48	@ 0x30
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b22      	cmp	r3, #34	@ 0x22
 8004420:	f040 80ae 	bne.w	8004580 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800442c:	d117      	bne.n	800445e <UART_Receive_IT+0x50>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d113      	bne.n	800445e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004436:	2300      	movs	r3, #0
 8004438:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	b29b      	uxth	r3, r3
 8004448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444c:	b29a      	uxth	r2, r3
 800444e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004450:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	1c9a      	adds	r2, r3, #2
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	629a      	str	r2, [r3, #40]	@ 0x28
 800445c:	e026      	b.n	80044ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004462:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004464:	2300      	movs	r3, #0
 8004466:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004470:	d007      	beq.n	8004482 <UART_Receive_IT+0x74>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <UART_Receive_IT+0x82>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	b2da      	uxtb	r2, r3
 800448a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	e008      	b.n	80044a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800449c:	b2da      	uxtb	r2, r3
 800449e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	4619      	mov	r1, r3
 80044ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d15d      	bne.n	800457c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0220 	bic.w	r2, r2, #32
 80044ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	2b01      	cmp	r3, #1
 8004504:	d135      	bne.n	8004572 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	613b      	str	r3, [r7, #16]
   return(result);
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f023 0310 	bic.w	r3, r3, #16
 8004522:	627b      	str	r3, [r7, #36]	@ 0x24
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	330c      	adds	r3, #12
 800452a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800452c:	623a      	str	r2, [r7, #32]
 800452e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	69f9      	ldr	r1, [r7, #28]
 8004532:	6a3a      	ldr	r2, [r7, #32]
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	61bb      	str	r3, [r7, #24]
   return(result);
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e5      	bne.n	800450c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b10      	cmp	r3, #16
 800454c:	d10a      	bne.n	8004564 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004568:	4619      	mov	r1, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fe2e 	bl	80041cc <HAL_UARTEx_RxEventCallback>
 8004570:	e002      	b.n	8004578 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fc fb7c 	bl	8000c70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	e002      	b.n	8004582 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	e000      	b.n	8004582 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004580:	2302      	movs	r3, #2
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3730      	adds	r7, #48	@ 0x30
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80045c6:	f023 030c 	bic.w	r3, r3, #12
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	430b      	orrs	r3, r1
 80045d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a2c      	ldr	r2, [pc, #176]	@ (80046a0 <UART_SetConfig+0x114>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d103      	bne.n	80045fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045f4:	f7fe f9b0 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	e002      	b.n	8004602 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045fc:	f7fe f998 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 8004600:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	009a      	lsls	r2, r3, #2
 800460c:	441a      	add	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	fbb2 f3f3 	udiv	r3, r2, r3
 8004618:	4a22      	ldr	r2, [pc, #136]	@ (80046a4 <UART_SetConfig+0x118>)
 800461a:	fba2 2303 	umull	r2, r3, r2, r3
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	0119      	lsls	r1, r3, #4
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	009a      	lsls	r2, r3, #2
 800462c:	441a      	add	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	fbb2 f2f3 	udiv	r2, r2, r3
 8004638:	4b1a      	ldr	r3, [pc, #104]	@ (80046a4 <UART_SetConfig+0x118>)
 800463a:	fba3 0302 	umull	r0, r3, r3, r2
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	2064      	movs	r0, #100	@ 0x64
 8004642:	fb00 f303 	mul.w	r3, r0, r3
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	3332      	adds	r3, #50	@ 0x32
 800464c:	4a15      	ldr	r2, [pc, #84]	@ (80046a4 <UART_SetConfig+0x118>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004658:	4419      	add	r1, r3
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009a      	lsls	r2, r3, #2
 8004664:	441a      	add	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004670:	4b0c      	ldr	r3, [pc, #48]	@ (80046a4 <UART_SetConfig+0x118>)
 8004672:	fba3 0302 	umull	r0, r3, r3, r2
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	2064      	movs	r0, #100	@ 0x64
 800467a:	fb00 f303 	mul.w	r3, r0, r3
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	3332      	adds	r3, #50	@ 0x32
 8004684:	4a07      	ldr	r2, [pc, #28]	@ (80046a4 <UART_SetConfig+0x118>)
 8004686:	fba2 2303 	umull	r2, r3, r2, r3
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	f003 020f 	and.w	r2, r3, #15
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	440a      	add	r2, r1
 8004696:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40013800 	.word	0x40013800
 80046a4:	51eb851f 	.word	0x51eb851f

080046a8 <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *hLed, TIM_HandleTypeDef *hTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	4611      	mov	r1, r2
 80046b4:	461a      	mov	r2, r3
 80046b6:	460b      	mov	r3, r1
 80046b8:	80fb      	strh	r3, [r7, #6]
 80046ba:	4613      	mov	r3, r2
 80046bc:	717b      	strb	r3, [r7, #5]
  bool answer = false;
 80046be:	2300      	movs	r3, #0
 80046c0:	75fb      	strb	r3, [r7, #23]
  uint32_t aar_value;
  do
  {
    if (hLed == NULL || hTim == NULL)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d07c      	beq.n	80047c2 <WS28XX_Init+0x11a>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d079      	beq.n	80047c2 <WS28XX_Init+0x11a>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 80046ce:	8c3b      	ldrh	r3, [r7, #32]
 80046d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046d4:	d874      	bhi.n	80047c0 <WS28XX_Init+0x118>
    {
      break;
    }
    hLed->Channel = Channel;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	797a      	ldrb	r2, [r7, #5]
 80046da:	711a      	strb	r2, [r3, #4]
    hLed->MaxPixel = Pixel;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8c3a      	ldrh	r2, [r7, #32]
 80046e0:	815a      	strh	r2, [r3, #10]
    hLed->hTim = hTim;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fb fdf0 	bl	80002d0 <__aeabi_i2f>
 80046f0:	4603      	mov	r3, r0
 80046f2:	4936      	ldr	r1, [pc, #216]	@ (80047cc <WS28XX_Init+0x124>)
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fb fef3 	bl	80004e0 <__aeabi_fdiv>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004700:	4618      	mov	r0, r3
 8004702:	f7fb fd2f 	bl	8000164 <__aeabi_fsub>
 8004706:	4603      	mov	r3, r0
 8004708:	4618      	mov	r0, r3
 800470a:	f7fb ff85 	bl	8000618 <__aeabi_f2uiz>
 800470e:	4603      	mov	r3, r0
 8004710:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(hLed->hTim ,aar_value);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(hLed->hTim, 0);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2200      	movs	r2, #0
 800472c:	629a      	str	r2, [r3, #40]	@ 0x28
    hLed->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 800472e:	6938      	ldr	r0, [r7, #16]
 8004730:	f7fb fdca 	bl	80002c8 <__aeabi_ui2f>
 8004734:	4603      	mov	r3, r0
 8004736:	4926      	ldr	r1, [pc, #152]	@ (80047d0 <WS28XX_Init+0x128>)
 8004738:	4618      	mov	r0, r3
 800473a:	f7fb fe1d 	bl	8000378 <__aeabi_fmul>
 800473e:	4603      	mov	r3, r0
 8004740:	4924      	ldr	r1, [pc, #144]	@ (80047d4 <WS28XX_Init+0x12c>)
 8004742:	4618      	mov	r0, r3
 8004744:	f7fb fecc 	bl	80004e0 <__aeabi_fdiv>
 8004748:	4603      	mov	r3, r0
 800474a:	4618      	mov	r0, r3
 800474c:	f7fb ff64 	bl	8000618 <__aeabi_f2uiz>
 8004750:	4603      	mov	r3, r0
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	80da      	strh	r2, [r3, #6]
    hLed->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8004758:	6938      	ldr	r0, [r7, #16]
 800475a:	f7fb fdb5 	bl	80002c8 <__aeabi_ui2f>
 800475e:	4603      	mov	r3, r0
 8004760:	491a      	ldr	r1, [pc, #104]	@ (80047cc <WS28XX_Init+0x124>)
 8004762:	4618      	mov	r0, r3
 8004764:	f7fb fe08 	bl	8000378 <__aeabi_fmul>
 8004768:	4603      	mov	r3, r0
 800476a:	491a      	ldr	r1, [pc, #104]	@ (80047d4 <WS28XX_Init+0x12c>)
 800476c:	4618      	mov	r0, r3
 800476e:	f7fb feb7 	bl	80004e0 <__aeabi_fdiv>
 8004772:	4603      	mov	r3, r0
 8004774:	4618      	mov	r0, r3
 8004776:	f7fb ff4f 	bl	8000618 <__aeabi_f2uiz>
 800477a:	4603      	mov	r3, r0
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	811a      	strh	r2, [r3, #8]
    memset(hLed->Pixel, 0, sizeof(hLed->Pixel));
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	330c      	adds	r3, #12
 8004786:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f000 f8cb 	bl	8004928 <memset>
    memset(hLed->Buffer, 0, sizeof(hLed->Buffer));
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8004798:	f641 0204 	movw	r2, #6148	@ 0x1804
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 f8c2 	bl	8004928 <memset>
    HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, Pixel);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	791b      	ldrb	r3, [r3, #4]
 80047ac:	4619      	mov	r1, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f503 7243 	add.w	r2, r3, #780	@ 0x30c
 80047b4:	8c3b      	ldrh	r3, [r7, #32]
 80047b6:	f7fe fa95 	bl	8002ce4 <HAL_TIM_PWM_Start_DMA>
    answer = true;
 80047ba:	2301      	movs	r3, #1
 80047bc:	75fb      	strb	r3, [r7, #23]
 80047be:	e000      	b.n	80047c2 <WS28XX_Init+0x11a>
      break;
 80047c0:	bf00      	nop
  }
  while (0);

  return answer;
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	3f4ccccd 	.word	0x3f4ccccd
 80047d0:	3ecccccd 	.word	0x3ecccccd
 80047d4:	3fa00000 	.word	0x3fa00000

080047d8 <atoi>:
 80047d8:	220a      	movs	r2, #10
 80047da:	2100      	movs	r1, #0
 80047dc:	f000 b89a 	b.w	8004914 <strtol>

080047e0 <siprintf>:
 80047e0:	b40e      	push	{r1, r2, r3}
 80047e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80047e6:	b500      	push	{lr}
 80047e8:	b09c      	sub	sp, #112	@ 0x70
 80047ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80047ec:	9002      	str	r0, [sp, #8]
 80047ee:	9006      	str	r0, [sp, #24]
 80047f0:	9107      	str	r1, [sp, #28]
 80047f2:	9104      	str	r1, [sp, #16]
 80047f4:	4808      	ldr	r0, [pc, #32]	@ (8004818 <siprintf+0x38>)
 80047f6:	4909      	ldr	r1, [pc, #36]	@ (800481c <siprintf+0x3c>)
 80047f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80047fc:	9105      	str	r1, [sp, #20]
 80047fe:	6800      	ldr	r0, [r0, #0]
 8004800:	a902      	add	r1, sp, #8
 8004802:	9301      	str	r3, [sp, #4]
 8004804:	f000 f920 	bl	8004a48 <_svfiprintf_r>
 8004808:	2200      	movs	r2, #0
 800480a:	9b02      	ldr	r3, [sp, #8]
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	b01c      	add	sp, #112	@ 0x70
 8004810:	f85d eb04 	ldr.w	lr, [sp], #4
 8004814:	b003      	add	sp, #12
 8004816:	4770      	bx	lr
 8004818:	2000000c 	.word	0x2000000c
 800481c:	ffff0208 	.word	0xffff0208

08004820 <_strtol_l.constprop.0>:
 8004820:	2b24      	cmp	r3, #36	@ 0x24
 8004822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004826:	4686      	mov	lr, r0
 8004828:	4690      	mov	r8, r2
 800482a:	d801      	bhi.n	8004830 <_strtol_l.constprop.0+0x10>
 800482c:	2b01      	cmp	r3, #1
 800482e:	d106      	bne.n	800483e <_strtol_l.constprop.0+0x1e>
 8004830:	f000 f882 	bl	8004938 <__errno>
 8004834:	2316      	movs	r3, #22
 8004836:	6003      	str	r3, [r0, #0]
 8004838:	2000      	movs	r0, #0
 800483a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483e:	460d      	mov	r5, r1
 8004840:	4833      	ldr	r0, [pc, #204]	@ (8004910 <_strtol_l.constprop.0+0xf0>)
 8004842:	462a      	mov	r2, r5
 8004844:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004848:	5d06      	ldrb	r6, [r0, r4]
 800484a:	f016 0608 	ands.w	r6, r6, #8
 800484e:	d1f8      	bne.n	8004842 <_strtol_l.constprop.0+0x22>
 8004850:	2c2d      	cmp	r4, #45	@ 0x2d
 8004852:	d12d      	bne.n	80048b0 <_strtol_l.constprop.0+0x90>
 8004854:	2601      	movs	r6, #1
 8004856:	782c      	ldrb	r4, [r5, #0]
 8004858:	1c95      	adds	r5, r2, #2
 800485a:	f033 0210 	bics.w	r2, r3, #16
 800485e:	d109      	bne.n	8004874 <_strtol_l.constprop.0+0x54>
 8004860:	2c30      	cmp	r4, #48	@ 0x30
 8004862:	d12a      	bne.n	80048ba <_strtol_l.constprop.0+0x9a>
 8004864:	782a      	ldrb	r2, [r5, #0]
 8004866:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800486a:	2a58      	cmp	r2, #88	@ 0x58
 800486c:	d125      	bne.n	80048ba <_strtol_l.constprop.0+0x9a>
 800486e:	2310      	movs	r3, #16
 8004870:	786c      	ldrb	r4, [r5, #1]
 8004872:	3502      	adds	r5, #2
 8004874:	2200      	movs	r2, #0
 8004876:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800487a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800487e:	fbbc f9f3 	udiv	r9, ip, r3
 8004882:	4610      	mov	r0, r2
 8004884:	fb03 ca19 	mls	sl, r3, r9, ip
 8004888:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800488c:	2f09      	cmp	r7, #9
 800488e:	d81b      	bhi.n	80048c8 <_strtol_l.constprop.0+0xa8>
 8004890:	463c      	mov	r4, r7
 8004892:	42a3      	cmp	r3, r4
 8004894:	dd27      	ble.n	80048e6 <_strtol_l.constprop.0+0xc6>
 8004896:	1c57      	adds	r7, r2, #1
 8004898:	d007      	beq.n	80048aa <_strtol_l.constprop.0+0x8a>
 800489a:	4581      	cmp	r9, r0
 800489c:	d320      	bcc.n	80048e0 <_strtol_l.constprop.0+0xc0>
 800489e:	d101      	bne.n	80048a4 <_strtol_l.constprop.0+0x84>
 80048a0:	45a2      	cmp	sl, r4
 80048a2:	db1d      	blt.n	80048e0 <_strtol_l.constprop.0+0xc0>
 80048a4:	2201      	movs	r2, #1
 80048a6:	fb00 4003 	mla	r0, r0, r3, r4
 80048aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048ae:	e7eb      	b.n	8004888 <_strtol_l.constprop.0+0x68>
 80048b0:	2c2b      	cmp	r4, #43	@ 0x2b
 80048b2:	bf04      	itt	eq
 80048b4:	782c      	ldrbeq	r4, [r5, #0]
 80048b6:	1c95      	addeq	r5, r2, #2
 80048b8:	e7cf      	b.n	800485a <_strtol_l.constprop.0+0x3a>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1da      	bne.n	8004874 <_strtol_l.constprop.0+0x54>
 80048be:	2c30      	cmp	r4, #48	@ 0x30
 80048c0:	bf0c      	ite	eq
 80048c2:	2308      	moveq	r3, #8
 80048c4:	230a      	movne	r3, #10
 80048c6:	e7d5      	b.n	8004874 <_strtol_l.constprop.0+0x54>
 80048c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80048cc:	2f19      	cmp	r7, #25
 80048ce:	d801      	bhi.n	80048d4 <_strtol_l.constprop.0+0xb4>
 80048d0:	3c37      	subs	r4, #55	@ 0x37
 80048d2:	e7de      	b.n	8004892 <_strtol_l.constprop.0+0x72>
 80048d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80048d8:	2f19      	cmp	r7, #25
 80048da:	d804      	bhi.n	80048e6 <_strtol_l.constprop.0+0xc6>
 80048dc:	3c57      	subs	r4, #87	@ 0x57
 80048de:	e7d8      	b.n	8004892 <_strtol_l.constprop.0+0x72>
 80048e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048e4:	e7e1      	b.n	80048aa <_strtol_l.constprop.0+0x8a>
 80048e6:	1c53      	adds	r3, r2, #1
 80048e8:	d108      	bne.n	80048fc <_strtol_l.constprop.0+0xdc>
 80048ea:	2322      	movs	r3, #34	@ 0x22
 80048ec:	4660      	mov	r0, ip
 80048ee:	f8ce 3000 	str.w	r3, [lr]
 80048f2:	f1b8 0f00 	cmp.w	r8, #0
 80048f6:	d0a0      	beq.n	800483a <_strtol_l.constprop.0+0x1a>
 80048f8:	1e69      	subs	r1, r5, #1
 80048fa:	e006      	b.n	800490a <_strtol_l.constprop.0+0xea>
 80048fc:	b106      	cbz	r6, 8004900 <_strtol_l.constprop.0+0xe0>
 80048fe:	4240      	negs	r0, r0
 8004900:	f1b8 0f00 	cmp.w	r8, #0
 8004904:	d099      	beq.n	800483a <_strtol_l.constprop.0+0x1a>
 8004906:	2a00      	cmp	r2, #0
 8004908:	d1f6      	bne.n	80048f8 <_strtol_l.constprop.0+0xd8>
 800490a:	f8c8 1000 	str.w	r1, [r8]
 800490e:	e794      	b.n	800483a <_strtol_l.constprop.0+0x1a>
 8004910:	0800528f 	.word	0x0800528f

08004914 <strtol>:
 8004914:	4613      	mov	r3, r2
 8004916:	460a      	mov	r2, r1
 8004918:	4601      	mov	r1, r0
 800491a:	4802      	ldr	r0, [pc, #8]	@ (8004924 <strtol+0x10>)
 800491c:	6800      	ldr	r0, [r0, #0]
 800491e:	f7ff bf7f 	b.w	8004820 <_strtol_l.constprop.0>
 8004922:	bf00      	nop
 8004924:	2000000c 	.word	0x2000000c

08004928 <memset>:
 8004928:	4603      	mov	r3, r0
 800492a:	4402      	add	r2, r0
 800492c:	4293      	cmp	r3, r2
 800492e:	d100      	bne.n	8004932 <memset+0xa>
 8004930:	4770      	bx	lr
 8004932:	f803 1b01 	strb.w	r1, [r3], #1
 8004936:	e7f9      	b.n	800492c <memset+0x4>

08004938 <__errno>:
 8004938:	4b01      	ldr	r3, [pc, #4]	@ (8004940 <__errno+0x8>)
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	2000000c 	.word	0x2000000c

08004944 <__libc_init_array>:
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	2600      	movs	r6, #0
 8004948:	4d0c      	ldr	r5, [pc, #48]	@ (800497c <__libc_init_array+0x38>)
 800494a:	4c0d      	ldr	r4, [pc, #52]	@ (8004980 <__libc_init_array+0x3c>)
 800494c:	1b64      	subs	r4, r4, r5
 800494e:	10a4      	asrs	r4, r4, #2
 8004950:	42a6      	cmp	r6, r4
 8004952:	d109      	bne.n	8004968 <__libc_init_array+0x24>
 8004954:	f000 fc78 	bl	8005248 <_init>
 8004958:	2600      	movs	r6, #0
 800495a:	4d0a      	ldr	r5, [pc, #40]	@ (8004984 <__libc_init_array+0x40>)
 800495c:	4c0a      	ldr	r4, [pc, #40]	@ (8004988 <__libc_init_array+0x44>)
 800495e:	1b64      	subs	r4, r4, r5
 8004960:	10a4      	asrs	r4, r4, #2
 8004962:	42a6      	cmp	r6, r4
 8004964:	d105      	bne.n	8004972 <__libc_init_array+0x2e>
 8004966:	bd70      	pop	{r4, r5, r6, pc}
 8004968:	f855 3b04 	ldr.w	r3, [r5], #4
 800496c:	4798      	blx	r3
 800496e:	3601      	adds	r6, #1
 8004970:	e7ee      	b.n	8004950 <__libc_init_array+0xc>
 8004972:	f855 3b04 	ldr.w	r3, [r5], #4
 8004976:	4798      	blx	r3
 8004978:	3601      	adds	r6, #1
 800497a:	e7f2      	b.n	8004962 <__libc_init_array+0x1e>
 800497c:	080053cc 	.word	0x080053cc
 8004980:	080053cc 	.word	0x080053cc
 8004984:	080053cc 	.word	0x080053cc
 8004988:	080053d0 	.word	0x080053d0

0800498c <__retarget_lock_acquire_recursive>:
 800498c:	4770      	bx	lr

0800498e <__retarget_lock_release_recursive>:
 800498e:	4770      	bx	lr

08004990 <__ssputs_r>:
 8004990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004994:	461f      	mov	r7, r3
 8004996:	688e      	ldr	r6, [r1, #8]
 8004998:	4682      	mov	sl, r0
 800499a:	42be      	cmp	r6, r7
 800499c:	460c      	mov	r4, r1
 800499e:	4690      	mov	r8, r2
 80049a0:	680b      	ldr	r3, [r1, #0]
 80049a2:	d82d      	bhi.n	8004a00 <__ssputs_r+0x70>
 80049a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80049ac:	d026      	beq.n	80049fc <__ssputs_r+0x6c>
 80049ae:	6965      	ldr	r5, [r4, #20]
 80049b0:	6909      	ldr	r1, [r1, #16]
 80049b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049b6:	eba3 0901 	sub.w	r9, r3, r1
 80049ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049be:	1c7b      	adds	r3, r7, #1
 80049c0:	444b      	add	r3, r9
 80049c2:	106d      	asrs	r5, r5, #1
 80049c4:	429d      	cmp	r5, r3
 80049c6:	bf38      	it	cc
 80049c8:	461d      	movcc	r5, r3
 80049ca:	0553      	lsls	r3, r2, #21
 80049cc:	d527      	bpl.n	8004a1e <__ssputs_r+0x8e>
 80049ce:	4629      	mov	r1, r5
 80049d0:	f000 f958 	bl	8004c84 <_malloc_r>
 80049d4:	4606      	mov	r6, r0
 80049d6:	b360      	cbz	r0, 8004a32 <__ssputs_r+0xa2>
 80049d8:	464a      	mov	r2, r9
 80049da:	6921      	ldr	r1, [r4, #16]
 80049dc:	f000 fbd6 	bl	800518c <memcpy>
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80049e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ea:	81a3      	strh	r3, [r4, #12]
 80049ec:	6126      	str	r6, [r4, #16]
 80049ee:	444e      	add	r6, r9
 80049f0:	6026      	str	r6, [r4, #0]
 80049f2:	463e      	mov	r6, r7
 80049f4:	6165      	str	r5, [r4, #20]
 80049f6:	eba5 0509 	sub.w	r5, r5, r9
 80049fa:	60a5      	str	r5, [r4, #8]
 80049fc:	42be      	cmp	r6, r7
 80049fe:	d900      	bls.n	8004a02 <__ssputs_r+0x72>
 8004a00:	463e      	mov	r6, r7
 8004a02:	4632      	mov	r2, r6
 8004a04:	4641      	mov	r1, r8
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	f000 fb88 	bl	800511c <memmove>
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	68a3      	ldr	r3, [r4, #8]
 8004a10:	1b9b      	subs	r3, r3, r6
 8004a12:	60a3      	str	r3, [r4, #8]
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	4433      	add	r3, r6
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1e:	462a      	mov	r2, r5
 8004a20:	f000 fb4e 	bl	80050c0 <_realloc_r>
 8004a24:	4606      	mov	r6, r0
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d1e0      	bne.n	80049ec <__ssputs_r+0x5c>
 8004a2a:	4650      	mov	r0, sl
 8004a2c:	6921      	ldr	r1, [r4, #16]
 8004a2e:	f000 fbbb 	bl	80051a8 <_free_r>
 8004a32:	230c      	movs	r3, #12
 8004a34:	f8ca 3000 	str.w	r3, [sl]
 8004a38:	89a3      	ldrh	r3, [r4, #12]
 8004a3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a42:	81a3      	strh	r3, [r4, #12]
 8004a44:	e7e9      	b.n	8004a1a <__ssputs_r+0x8a>
	...

08004a48 <_svfiprintf_r>:
 8004a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4c:	4698      	mov	r8, r3
 8004a4e:	898b      	ldrh	r3, [r1, #12]
 8004a50:	4607      	mov	r7, r0
 8004a52:	061b      	lsls	r3, r3, #24
 8004a54:	460d      	mov	r5, r1
 8004a56:	4614      	mov	r4, r2
 8004a58:	b09d      	sub	sp, #116	@ 0x74
 8004a5a:	d510      	bpl.n	8004a7e <_svfiprintf_r+0x36>
 8004a5c:	690b      	ldr	r3, [r1, #16]
 8004a5e:	b973      	cbnz	r3, 8004a7e <_svfiprintf_r+0x36>
 8004a60:	2140      	movs	r1, #64	@ 0x40
 8004a62:	f000 f90f 	bl	8004c84 <_malloc_r>
 8004a66:	6028      	str	r0, [r5, #0]
 8004a68:	6128      	str	r0, [r5, #16]
 8004a6a:	b930      	cbnz	r0, 8004a7a <_svfiprintf_r+0x32>
 8004a6c:	230c      	movs	r3, #12
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a74:	b01d      	add	sp, #116	@ 0x74
 8004a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7a:	2340      	movs	r3, #64	@ 0x40
 8004a7c:	616b      	str	r3, [r5, #20]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a82:	2320      	movs	r3, #32
 8004a84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a88:	2330      	movs	r3, #48	@ 0x30
 8004a8a:	f04f 0901 	mov.w	r9, #1
 8004a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a92:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004c2c <_svfiprintf_r+0x1e4>
 8004a96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	469a      	mov	sl, r3
 8004a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aa2:	b10a      	cbz	r2, 8004aa8 <_svfiprintf_r+0x60>
 8004aa4:	2a25      	cmp	r2, #37	@ 0x25
 8004aa6:	d1f9      	bne.n	8004a9c <_svfiprintf_r+0x54>
 8004aa8:	ebba 0b04 	subs.w	fp, sl, r4
 8004aac:	d00b      	beq.n	8004ac6 <_svfiprintf_r+0x7e>
 8004aae:	465b      	mov	r3, fp
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	f7ff ff6b 	bl	8004990 <__ssputs_r>
 8004aba:	3001      	adds	r0, #1
 8004abc:	f000 80a7 	beq.w	8004c0e <_svfiprintf_r+0x1c6>
 8004ac0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ac2:	445a      	add	r2, fp
 8004ac4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 809f 	beq.w	8004c0e <_svfiprintf_r+0x1c6>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ada:	f10a 0a01 	add.w	sl, sl, #1
 8004ade:	9304      	str	r3, [sp, #16]
 8004ae0:	9307      	str	r3, [sp, #28]
 8004ae2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ae6:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ae8:	4654      	mov	r4, sl
 8004aea:	2205      	movs	r2, #5
 8004aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af0:	484e      	ldr	r0, [pc, #312]	@ (8004c2c <_svfiprintf_r+0x1e4>)
 8004af2:	f000 fb3d 	bl	8005170 <memchr>
 8004af6:	9a04      	ldr	r2, [sp, #16]
 8004af8:	b9d8      	cbnz	r0, 8004b32 <_svfiprintf_r+0xea>
 8004afa:	06d0      	lsls	r0, r2, #27
 8004afc:	bf44      	itt	mi
 8004afe:	2320      	movmi	r3, #32
 8004b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b04:	0711      	lsls	r1, r2, #28
 8004b06:	bf44      	itt	mi
 8004b08:	232b      	movmi	r3, #43	@ 0x2b
 8004b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b12:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b14:	d015      	beq.n	8004b42 <_svfiprintf_r+0xfa>
 8004b16:	4654      	mov	r4, sl
 8004b18:	2000      	movs	r0, #0
 8004b1a:	f04f 0c0a 	mov.w	ip, #10
 8004b1e:	9a07      	ldr	r2, [sp, #28]
 8004b20:	4621      	mov	r1, r4
 8004b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b26:	3b30      	subs	r3, #48	@ 0x30
 8004b28:	2b09      	cmp	r3, #9
 8004b2a:	d94b      	bls.n	8004bc4 <_svfiprintf_r+0x17c>
 8004b2c:	b1b0      	cbz	r0, 8004b5c <_svfiprintf_r+0x114>
 8004b2e:	9207      	str	r2, [sp, #28]
 8004b30:	e014      	b.n	8004b5c <_svfiprintf_r+0x114>
 8004b32:	eba0 0308 	sub.w	r3, r0, r8
 8004b36:	fa09 f303 	lsl.w	r3, r9, r3
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	46a2      	mov	sl, r4
 8004b3e:	9304      	str	r3, [sp, #16]
 8004b40:	e7d2      	b.n	8004ae8 <_svfiprintf_r+0xa0>
 8004b42:	9b03      	ldr	r3, [sp, #12]
 8004b44:	1d19      	adds	r1, r3, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	9103      	str	r1, [sp, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	bfbb      	ittet	lt
 8004b4e:	425b      	neglt	r3, r3
 8004b50:	f042 0202 	orrlt.w	r2, r2, #2
 8004b54:	9307      	strge	r3, [sp, #28]
 8004b56:	9307      	strlt	r3, [sp, #28]
 8004b58:	bfb8      	it	lt
 8004b5a:	9204      	strlt	r2, [sp, #16]
 8004b5c:	7823      	ldrb	r3, [r4, #0]
 8004b5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b60:	d10a      	bne.n	8004b78 <_svfiprintf_r+0x130>
 8004b62:	7863      	ldrb	r3, [r4, #1]
 8004b64:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b66:	d132      	bne.n	8004bce <_svfiprintf_r+0x186>
 8004b68:	9b03      	ldr	r3, [sp, #12]
 8004b6a:	3402      	adds	r4, #2
 8004b6c:	1d1a      	adds	r2, r3, #4
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	9203      	str	r2, [sp, #12]
 8004b72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b76:	9305      	str	r3, [sp, #20]
 8004b78:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004c30 <_svfiprintf_r+0x1e8>
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	4650      	mov	r0, sl
 8004b80:	7821      	ldrb	r1, [r4, #0]
 8004b82:	f000 faf5 	bl	8005170 <memchr>
 8004b86:	b138      	cbz	r0, 8004b98 <_svfiprintf_r+0x150>
 8004b88:	2240      	movs	r2, #64	@ 0x40
 8004b8a:	9b04      	ldr	r3, [sp, #16]
 8004b8c:	eba0 000a 	sub.w	r0, r0, sl
 8004b90:	4082      	lsls	r2, r0
 8004b92:	4313      	orrs	r3, r2
 8004b94:	3401      	adds	r4, #1
 8004b96:	9304      	str	r3, [sp, #16]
 8004b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b9c:	2206      	movs	r2, #6
 8004b9e:	4825      	ldr	r0, [pc, #148]	@ (8004c34 <_svfiprintf_r+0x1ec>)
 8004ba0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ba4:	f000 fae4 	bl	8005170 <memchr>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d036      	beq.n	8004c1a <_svfiprintf_r+0x1d2>
 8004bac:	4b22      	ldr	r3, [pc, #136]	@ (8004c38 <_svfiprintf_r+0x1f0>)
 8004bae:	bb1b      	cbnz	r3, 8004bf8 <_svfiprintf_r+0x1b0>
 8004bb0:	9b03      	ldr	r3, [sp, #12]
 8004bb2:	3307      	adds	r3, #7
 8004bb4:	f023 0307 	bic.w	r3, r3, #7
 8004bb8:	3308      	adds	r3, #8
 8004bba:	9303      	str	r3, [sp, #12]
 8004bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bbe:	4433      	add	r3, r6
 8004bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bc2:	e76a      	b.n	8004a9a <_svfiprintf_r+0x52>
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	2001      	movs	r0, #1
 8004bc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bcc:	e7a8      	b.n	8004b20 <_svfiprintf_r+0xd8>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f04f 0c0a 	mov.w	ip, #10
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	3401      	adds	r4, #1
 8004bd8:	9305      	str	r3, [sp, #20]
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004be0:	3a30      	subs	r2, #48	@ 0x30
 8004be2:	2a09      	cmp	r2, #9
 8004be4:	d903      	bls.n	8004bee <_svfiprintf_r+0x1a6>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0c6      	beq.n	8004b78 <_svfiprintf_r+0x130>
 8004bea:	9105      	str	r1, [sp, #20]
 8004bec:	e7c4      	b.n	8004b78 <_svfiprintf_r+0x130>
 8004bee:	4604      	mov	r4, r0
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bf6:	e7f0      	b.n	8004bda <_svfiprintf_r+0x192>
 8004bf8:	ab03      	add	r3, sp, #12
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	462a      	mov	r2, r5
 8004bfe:	4638      	mov	r0, r7
 8004c00:	4b0e      	ldr	r3, [pc, #56]	@ (8004c3c <_svfiprintf_r+0x1f4>)
 8004c02:	a904      	add	r1, sp, #16
 8004c04:	f3af 8000 	nop.w
 8004c08:	1c42      	adds	r2, r0, #1
 8004c0a:	4606      	mov	r6, r0
 8004c0c:	d1d6      	bne.n	8004bbc <_svfiprintf_r+0x174>
 8004c0e:	89ab      	ldrh	r3, [r5, #12]
 8004c10:	065b      	lsls	r3, r3, #25
 8004c12:	f53f af2d 	bmi.w	8004a70 <_svfiprintf_r+0x28>
 8004c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c18:	e72c      	b.n	8004a74 <_svfiprintf_r+0x2c>
 8004c1a:	ab03      	add	r3, sp, #12
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	462a      	mov	r2, r5
 8004c20:	4638      	mov	r0, r7
 8004c22:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <_svfiprintf_r+0x1f4>)
 8004c24:	a904      	add	r1, sp, #16
 8004c26:	f000 f91f 	bl	8004e68 <_printf_i>
 8004c2a:	e7ed      	b.n	8004c08 <_svfiprintf_r+0x1c0>
 8004c2c:	0800538f 	.word	0x0800538f
 8004c30:	08005395 	.word	0x08005395
 8004c34:	08005399 	.word	0x08005399
 8004c38:	00000000 	.word	0x00000000
 8004c3c:	08004991 	.word	0x08004991

08004c40 <sbrk_aligned>:
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	4e0f      	ldr	r6, [pc, #60]	@ (8004c80 <sbrk_aligned+0x40>)
 8004c44:	460c      	mov	r4, r1
 8004c46:	6831      	ldr	r1, [r6, #0]
 8004c48:	4605      	mov	r5, r0
 8004c4a:	b911      	cbnz	r1, 8004c52 <sbrk_aligned+0x12>
 8004c4c:	f000 fa80 	bl	8005150 <_sbrk_r>
 8004c50:	6030      	str	r0, [r6, #0]
 8004c52:	4621      	mov	r1, r4
 8004c54:	4628      	mov	r0, r5
 8004c56:	f000 fa7b 	bl	8005150 <_sbrk_r>
 8004c5a:	1c43      	adds	r3, r0, #1
 8004c5c:	d103      	bne.n	8004c66 <sbrk_aligned+0x26>
 8004c5e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004c62:	4620      	mov	r0, r4
 8004c64:	bd70      	pop	{r4, r5, r6, pc}
 8004c66:	1cc4      	adds	r4, r0, #3
 8004c68:	f024 0403 	bic.w	r4, r4, #3
 8004c6c:	42a0      	cmp	r0, r4
 8004c6e:	d0f8      	beq.n	8004c62 <sbrk_aligned+0x22>
 8004c70:	1a21      	subs	r1, r4, r0
 8004c72:	4628      	mov	r0, r5
 8004c74:	f000 fa6c 	bl	8005150 <_sbrk_r>
 8004c78:	3001      	adds	r0, #1
 8004c7a:	d1f2      	bne.n	8004c62 <sbrk_aligned+0x22>
 8004c7c:	e7ef      	b.n	8004c5e <sbrk_aligned+0x1e>
 8004c7e:	bf00      	nop
 8004c80:	20001eb4 	.word	0x20001eb4

08004c84 <_malloc_r>:
 8004c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c88:	1ccd      	adds	r5, r1, #3
 8004c8a:	f025 0503 	bic.w	r5, r5, #3
 8004c8e:	3508      	adds	r5, #8
 8004c90:	2d0c      	cmp	r5, #12
 8004c92:	bf38      	it	cc
 8004c94:	250c      	movcc	r5, #12
 8004c96:	2d00      	cmp	r5, #0
 8004c98:	4606      	mov	r6, r0
 8004c9a:	db01      	blt.n	8004ca0 <_malloc_r+0x1c>
 8004c9c:	42a9      	cmp	r1, r5
 8004c9e:	d904      	bls.n	8004caa <_malloc_r+0x26>
 8004ca0:	230c      	movs	r3, #12
 8004ca2:	6033      	str	r3, [r6, #0]
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004caa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d80 <_malloc_r+0xfc>
 8004cae:	f000 f9fb 	bl	80050a8 <__malloc_lock>
 8004cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8004cb6:	461c      	mov	r4, r3
 8004cb8:	bb44      	cbnz	r4, 8004d0c <_malloc_r+0x88>
 8004cba:	4629      	mov	r1, r5
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	f7ff ffbf 	bl	8004c40 <sbrk_aligned>
 8004cc2:	1c43      	adds	r3, r0, #1
 8004cc4:	4604      	mov	r4, r0
 8004cc6:	d158      	bne.n	8004d7a <_malloc_r+0xf6>
 8004cc8:	f8d8 4000 	ldr.w	r4, [r8]
 8004ccc:	4627      	mov	r7, r4
 8004cce:	2f00      	cmp	r7, #0
 8004cd0:	d143      	bne.n	8004d5a <_malloc_r+0xd6>
 8004cd2:	2c00      	cmp	r4, #0
 8004cd4:	d04b      	beq.n	8004d6e <_malloc_r+0xea>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	4639      	mov	r1, r7
 8004cda:	4630      	mov	r0, r6
 8004cdc:	eb04 0903 	add.w	r9, r4, r3
 8004ce0:	f000 fa36 	bl	8005150 <_sbrk_r>
 8004ce4:	4581      	cmp	r9, r0
 8004ce6:	d142      	bne.n	8004d6e <_malloc_r+0xea>
 8004ce8:	6821      	ldr	r1, [r4, #0]
 8004cea:	4630      	mov	r0, r6
 8004cec:	1a6d      	subs	r5, r5, r1
 8004cee:	4629      	mov	r1, r5
 8004cf0:	f7ff ffa6 	bl	8004c40 <sbrk_aligned>
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	d03a      	beq.n	8004d6e <_malloc_r+0xea>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	442b      	add	r3, r5
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	bb62      	cbnz	r2, 8004d60 <_malloc_r+0xdc>
 8004d06:	f8c8 7000 	str.w	r7, [r8]
 8004d0a:	e00f      	b.n	8004d2c <_malloc_r+0xa8>
 8004d0c:	6822      	ldr	r2, [r4, #0]
 8004d0e:	1b52      	subs	r2, r2, r5
 8004d10:	d420      	bmi.n	8004d54 <_malloc_r+0xd0>
 8004d12:	2a0b      	cmp	r2, #11
 8004d14:	d917      	bls.n	8004d46 <_malloc_r+0xc2>
 8004d16:	1961      	adds	r1, r4, r5
 8004d18:	42a3      	cmp	r3, r4
 8004d1a:	6025      	str	r5, [r4, #0]
 8004d1c:	bf18      	it	ne
 8004d1e:	6059      	strne	r1, [r3, #4]
 8004d20:	6863      	ldr	r3, [r4, #4]
 8004d22:	bf08      	it	eq
 8004d24:	f8c8 1000 	streq.w	r1, [r8]
 8004d28:	5162      	str	r2, [r4, r5]
 8004d2a:	604b      	str	r3, [r1, #4]
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	f000 f9c1 	bl	80050b4 <__malloc_unlock>
 8004d32:	f104 000b 	add.w	r0, r4, #11
 8004d36:	1d23      	adds	r3, r4, #4
 8004d38:	f020 0007 	bic.w	r0, r0, #7
 8004d3c:	1ac2      	subs	r2, r0, r3
 8004d3e:	bf1c      	itt	ne
 8004d40:	1a1b      	subne	r3, r3, r0
 8004d42:	50a3      	strne	r3, [r4, r2]
 8004d44:	e7af      	b.n	8004ca6 <_malloc_r+0x22>
 8004d46:	6862      	ldr	r2, [r4, #4]
 8004d48:	42a3      	cmp	r3, r4
 8004d4a:	bf0c      	ite	eq
 8004d4c:	f8c8 2000 	streq.w	r2, [r8]
 8004d50:	605a      	strne	r2, [r3, #4]
 8004d52:	e7eb      	b.n	8004d2c <_malloc_r+0xa8>
 8004d54:	4623      	mov	r3, r4
 8004d56:	6864      	ldr	r4, [r4, #4]
 8004d58:	e7ae      	b.n	8004cb8 <_malloc_r+0x34>
 8004d5a:	463c      	mov	r4, r7
 8004d5c:	687f      	ldr	r7, [r7, #4]
 8004d5e:	e7b6      	b.n	8004cce <_malloc_r+0x4a>
 8004d60:	461a      	mov	r2, r3
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	42a3      	cmp	r3, r4
 8004d66:	d1fb      	bne.n	8004d60 <_malloc_r+0xdc>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	6053      	str	r3, [r2, #4]
 8004d6c:	e7de      	b.n	8004d2c <_malloc_r+0xa8>
 8004d6e:	230c      	movs	r3, #12
 8004d70:	4630      	mov	r0, r6
 8004d72:	6033      	str	r3, [r6, #0]
 8004d74:	f000 f99e 	bl	80050b4 <__malloc_unlock>
 8004d78:	e794      	b.n	8004ca4 <_malloc_r+0x20>
 8004d7a:	6005      	str	r5, [r0, #0]
 8004d7c:	e7d6      	b.n	8004d2c <_malloc_r+0xa8>
 8004d7e:	bf00      	nop
 8004d80:	20001eb8 	.word	0x20001eb8

08004d84 <_printf_common>:
 8004d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d88:	4616      	mov	r6, r2
 8004d8a:	4698      	mov	r8, r3
 8004d8c:	688a      	ldr	r2, [r1, #8]
 8004d8e:	690b      	ldr	r3, [r1, #16]
 8004d90:	4607      	mov	r7, r0
 8004d92:	4293      	cmp	r3, r2
 8004d94:	bfb8      	it	lt
 8004d96:	4613      	movlt	r3, r2
 8004d98:	6033      	str	r3, [r6, #0]
 8004d9a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d9e:	460c      	mov	r4, r1
 8004da0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004da4:	b10a      	cbz	r2, 8004daa <_printf_common+0x26>
 8004da6:	3301      	adds	r3, #1
 8004da8:	6033      	str	r3, [r6, #0]
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	0699      	lsls	r1, r3, #26
 8004dae:	bf42      	ittt	mi
 8004db0:	6833      	ldrmi	r3, [r6, #0]
 8004db2:	3302      	addmi	r3, #2
 8004db4:	6033      	strmi	r3, [r6, #0]
 8004db6:	6825      	ldr	r5, [r4, #0]
 8004db8:	f015 0506 	ands.w	r5, r5, #6
 8004dbc:	d106      	bne.n	8004dcc <_printf_common+0x48>
 8004dbe:	f104 0a19 	add.w	sl, r4, #25
 8004dc2:	68e3      	ldr	r3, [r4, #12]
 8004dc4:	6832      	ldr	r2, [r6, #0]
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	42ab      	cmp	r3, r5
 8004dca:	dc2b      	bgt.n	8004e24 <_printf_common+0xa0>
 8004dcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004dd0:	6822      	ldr	r2, [r4, #0]
 8004dd2:	3b00      	subs	r3, #0
 8004dd4:	bf18      	it	ne
 8004dd6:	2301      	movne	r3, #1
 8004dd8:	0692      	lsls	r2, r2, #26
 8004dda:	d430      	bmi.n	8004e3e <_printf_common+0xba>
 8004ddc:	4641      	mov	r1, r8
 8004dde:	4638      	mov	r0, r7
 8004de0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004de4:	47c8      	blx	r9
 8004de6:	3001      	adds	r0, #1
 8004de8:	d023      	beq.n	8004e32 <_printf_common+0xae>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	6922      	ldr	r2, [r4, #16]
 8004dee:	f003 0306 	and.w	r3, r3, #6
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	bf14      	ite	ne
 8004df6:	2500      	movne	r5, #0
 8004df8:	6833      	ldreq	r3, [r6, #0]
 8004dfa:	f04f 0600 	mov.w	r6, #0
 8004dfe:	bf08      	it	eq
 8004e00:	68e5      	ldreq	r5, [r4, #12]
 8004e02:	f104 041a 	add.w	r4, r4, #26
 8004e06:	bf08      	it	eq
 8004e08:	1aed      	subeq	r5, r5, r3
 8004e0a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e0e:	bf08      	it	eq
 8004e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e14:	4293      	cmp	r3, r2
 8004e16:	bfc4      	itt	gt
 8004e18:	1a9b      	subgt	r3, r3, r2
 8004e1a:	18ed      	addgt	r5, r5, r3
 8004e1c:	42b5      	cmp	r5, r6
 8004e1e:	d11a      	bne.n	8004e56 <_printf_common+0xd2>
 8004e20:	2000      	movs	r0, #0
 8004e22:	e008      	b.n	8004e36 <_printf_common+0xb2>
 8004e24:	2301      	movs	r3, #1
 8004e26:	4652      	mov	r2, sl
 8004e28:	4641      	mov	r1, r8
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	47c8      	blx	r9
 8004e2e:	3001      	adds	r0, #1
 8004e30:	d103      	bne.n	8004e3a <_printf_common+0xb6>
 8004e32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3a:	3501      	adds	r5, #1
 8004e3c:	e7c1      	b.n	8004dc2 <_printf_common+0x3e>
 8004e3e:	2030      	movs	r0, #48	@ 0x30
 8004e40:	18e1      	adds	r1, r4, r3
 8004e42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e4c:	4422      	add	r2, r4
 8004e4e:	3302      	adds	r3, #2
 8004e50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e54:	e7c2      	b.n	8004ddc <_printf_common+0x58>
 8004e56:	2301      	movs	r3, #1
 8004e58:	4622      	mov	r2, r4
 8004e5a:	4641      	mov	r1, r8
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	47c8      	blx	r9
 8004e60:	3001      	adds	r0, #1
 8004e62:	d0e6      	beq.n	8004e32 <_printf_common+0xae>
 8004e64:	3601      	adds	r6, #1
 8004e66:	e7d9      	b.n	8004e1c <_printf_common+0x98>

08004e68 <_printf_i>:
 8004e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	7e0f      	ldrb	r7, [r1, #24]
 8004e6e:	4691      	mov	r9, r2
 8004e70:	2f78      	cmp	r7, #120	@ 0x78
 8004e72:	4680      	mov	r8, r0
 8004e74:	460c      	mov	r4, r1
 8004e76:	469a      	mov	sl, r3
 8004e78:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e7e:	d807      	bhi.n	8004e90 <_printf_i+0x28>
 8004e80:	2f62      	cmp	r7, #98	@ 0x62
 8004e82:	d80a      	bhi.n	8004e9a <_printf_i+0x32>
 8004e84:	2f00      	cmp	r7, #0
 8004e86:	f000 80d3 	beq.w	8005030 <_printf_i+0x1c8>
 8004e8a:	2f58      	cmp	r7, #88	@ 0x58
 8004e8c:	f000 80ba 	beq.w	8005004 <_printf_i+0x19c>
 8004e90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e98:	e03a      	b.n	8004f10 <_printf_i+0xa8>
 8004e9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e9e:	2b15      	cmp	r3, #21
 8004ea0:	d8f6      	bhi.n	8004e90 <_printf_i+0x28>
 8004ea2:	a101      	add	r1, pc, #4	@ (adr r1, 8004ea8 <_printf_i+0x40>)
 8004ea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ea8:	08004f01 	.word	0x08004f01
 8004eac:	08004f15 	.word	0x08004f15
 8004eb0:	08004e91 	.word	0x08004e91
 8004eb4:	08004e91 	.word	0x08004e91
 8004eb8:	08004e91 	.word	0x08004e91
 8004ebc:	08004e91 	.word	0x08004e91
 8004ec0:	08004f15 	.word	0x08004f15
 8004ec4:	08004e91 	.word	0x08004e91
 8004ec8:	08004e91 	.word	0x08004e91
 8004ecc:	08004e91 	.word	0x08004e91
 8004ed0:	08004e91 	.word	0x08004e91
 8004ed4:	08005017 	.word	0x08005017
 8004ed8:	08004f3f 	.word	0x08004f3f
 8004edc:	08004fd1 	.word	0x08004fd1
 8004ee0:	08004e91 	.word	0x08004e91
 8004ee4:	08004e91 	.word	0x08004e91
 8004ee8:	08005039 	.word	0x08005039
 8004eec:	08004e91 	.word	0x08004e91
 8004ef0:	08004f3f 	.word	0x08004f3f
 8004ef4:	08004e91 	.word	0x08004e91
 8004ef8:	08004e91 	.word	0x08004e91
 8004efc:	08004fd9 	.word	0x08004fd9
 8004f00:	6833      	ldr	r3, [r6, #0]
 8004f02:	1d1a      	adds	r2, r3, #4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6032      	str	r2, [r6, #0]
 8004f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f10:	2301      	movs	r3, #1
 8004f12:	e09e      	b.n	8005052 <_printf_i+0x1ea>
 8004f14:	6833      	ldr	r3, [r6, #0]
 8004f16:	6820      	ldr	r0, [r4, #0]
 8004f18:	1d19      	adds	r1, r3, #4
 8004f1a:	6031      	str	r1, [r6, #0]
 8004f1c:	0606      	lsls	r6, r0, #24
 8004f1e:	d501      	bpl.n	8004f24 <_printf_i+0xbc>
 8004f20:	681d      	ldr	r5, [r3, #0]
 8004f22:	e003      	b.n	8004f2c <_printf_i+0xc4>
 8004f24:	0645      	lsls	r5, r0, #25
 8004f26:	d5fb      	bpl.n	8004f20 <_printf_i+0xb8>
 8004f28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f2c:	2d00      	cmp	r5, #0
 8004f2e:	da03      	bge.n	8004f38 <_printf_i+0xd0>
 8004f30:	232d      	movs	r3, #45	@ 0x2d
 8004f32:	426d      	negs	r5, r5
 8004f34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f38:	230a      	movs	r3, #10
 8004f3a:	4859      	ldr	r0, [pc, #356]	@ (80050a0 <_printf_i+0x238>)
 8004f3c:	e011      	b.n	8004f62 <_printf_i+0xfa>
 8004f3e:	6821      	ldr	r1, [r4, #0]
 8004f40:	6833      	ldr	r3, [r6, #0]
 8004f42:	0608      	lsls	r0, r1, #24
 8004f44:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f48:	d402      	bmi.n	8004f50 <_printf_i+0xe8>
 8004f4a:	0649      	lsls	r1, r1, #25
 8004f4c:	bf48      	it	mi
 8004f4e:	b2ad      	uxthmi	r5, r5
 8004f50:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f52:	6033      	str	r3, [r6, #0]
 8004f54:	bf14      	ite	ne
 8004f56:	230a      	movne	r3, #10
 8004f58:	2308      	moveq	r3, #8
 8004f5a:	4851      	ldr	r0, [pc, #324]	@ (80050a0 <_printf_i+0x238>)
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f62:	6866      	ldr	r6, [r4, #4]
 8004f64:	2e00      	cmp	r6, #0
 8004f66:	bfa8      	it	ge
 8004f68:	6821      	ldrge	r1, [r4, #0]
 8004f6a:	60a6      	str	r6, [r4, #8]
 8004f6c:	bfa4      	itt	ge
 8004f6e:	f021 0104 	bicge.w	r1, r1, #4
 8004f72:	6021      	strge	r1, [r4, #0]
 8004f74:	b90d      	cbnz	r5, 8004f7a <_printf_i+0x112>
 8004f76:	2e00      	cmp	r6, #0
 8004f78:	d04b      	beq.n	8005012 <_printf_i+0x1aa>
 8004f7a:	4616      	mov	r6, r2
 8004f7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f80:	fb03 5711 	mls	r7, r3, r1, r5
 8004f84:	5dc7      	ldrb	r7, [r0, r7]
 8004f86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f8a:	462f      	mov	r7, r5
 8004f8c:	42bb      	cmp	r3, r7
 8004f8e:	460d      	mov	r5, r1
 8004f90:	d9f4      	bls.n	8004f7c <_printf_i+0x114>
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d10b      	bne.n	8004fae <_printf_i+0x146>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	07df      	lsls	r7, r3, #31
 8004f9a:	d508      	bpl.n	8004fae <_printf_i+0x146>
 8004f9c:	6923      	ldr	r3, [r4, #16]
 8004f9e:	6861      	ldr	r1, [r4, #4]
 8004fa0:	4299      	cmp	r1, r3
 8004fa2:	bfde      	ittt	le
 8004fa4:	2330      	movle	r3, #48	@ 0x30
 8004fa6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004faa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004fae:	1b92      	subs	r2, r2, r6
 8004fb0:	6122      	str	r2, [r4, #16]
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	4640      	mov	r0, r8
 8004fb8:	f8cd a000 	str.w	sl, [sp]
 8004fbc:	aa03      	add	r2, sp, #12
 8004fbe:	f7ff fee1 	bl	8004d84 <_printf_common>
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	d14a      	bne.n	800505c <_printf_i+0x1f4>
 8004fc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fca:	b004      	add	sp, #16
 8004fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	f043 0320 	orr.w	r3, r3, #32
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	2778      	movs	r7, #120	@ 0x78
 8004fda:	4832      	ldr	r0, [pc, #200]	@ (80050a4 <_printf_i+0x23c>)
 8004fdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	6831      	ldr	r1, [r6, #0]
 8004fe4:	061f      	lsls	r7, r3, #24
 8004fe6:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fea:	d402      	bmi.n	8004ff2 <_printf_i+0x18a>
 8004fec:	065f      	lsls	r7, r3, #25
 8004fee:	bf48      	it	mi
 8004ff0:	b2ad      	uxthmi	r5, r5
 8004ff2:	6031      	str	r1, [r6, #0]
 8004ff4:	07d9      	lsls	r1, r3, #31
 8004ff6:	bf44      	itt	mi
 8004ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8004ffc:	6023      	strmi	r3, [r4, #0]
 8004ffe:	b11d      	cbz	r5, 8005008 <_printf_i+0x1a0>
 8005000:	2310      	movs	r3, #16
 8005002:	e7ab      	b.n	8004f5c <_printf_i+0xf4>
 8005004:	4826      	ldr	r0, [pc, #152]	@ (80050a0 <_printf_i+0x238>)
 8005006:	e7e9      	b.n	8004fdc <_printf_i+0x174>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	f023 0320 	bic.w	r3, r3, #32
 800500e:	6023      	str	r3, [r4, #0]
 8005010:	e7f6      	b.n	8005000 <_printf_i+0x198>
 8005012:	4616      	mov	r6, r2
 8005014:	e7bd      	b.n	8004f92 <_printf_i+0x12a>
 8005016:	6833      	ldr	r3, [r6, #0]
 8005018:	6825      	ldr	r5, [r4, #0]
 800501a:	1d18      	adds	r0, r3, #4
 800501c:	6961      	ldr	r1, [r4, #20]
 800501e:	6030      	str	r0, [r6, #0]
 8005020:	062e      	lsls	r6, r5, #24
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	d501      	bpl.n	800502a <_printf_i+0x1c2>
 8005026:	6019      	str	r1, [r3, #0]
 8005028:	e002      	b.n	8005030 <_printf_i+0x1c8>
 800502a:	0668      	lsls	r0, r5, #25
 800502c:	d5fb      	bpl.n	8005026 <_printf_i+0x1be>
 800502e:	8019      	strh	r1, [r3, #0]
 8005030:	2300      	movs	r3, #0
 8005032:	4616      	mov	r6, r2
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	e7bc      	b.n	8004fb2 <_printf_i+0x14a>
 8005038:	6833      	ldr	r3, [r6, #0]
 800503a:	2100      	movs	r1, #0
 800503c:	1d1a      	adds	r2, r3, #4
 800503e:	6032      	str	r2, [r6, #0]
 8005040:	681e      	ldr	r6, [r3, #0]
 8005042:	6862      	ldr	r2, [r4, #4]
 8005044:	4630      	mov	r0, r6
 8005046:	f000 f893 	bl	8005170 <memchr>
 800504a:	b108      	cbz	r0, 8005050 <_printf_i+0x1e8>
 800504c:	1b80      	subs	r0, r0, r6
 800504e:	6060      	str	r0, [r4, #4]
 8005050:	6863      	ldr	r3, [r4, #4]
 8005052:	6123      	str	r3, [r4, #16]
 8005054:	2300      	movs	r3, #0
 8005056:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800505a:	e7aa      	b.n	8004fb2 <_printf_i+0x14a>
 800505c:	4632      	mov	r2, r6
 800505e:	4649      	mov	r1, r9
 8005060:	4640      	mov	r0, r8
 8005062:	6923      	ldr	r3, [r4, #16]
 8005064:	47d0      	blx	sl
 8005066:	3001      	adds	r0, #1
 8005068:	d0ad      	beq.n	8004fc6 <_printf_i+0x15e>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	079b      	lsls	r3, r3, #30
 800506e:	d413      	bmi.n	8005098 <_printf_i+0x230>
 8005070:	68e0      	ldr	r0, [r4, #12]
 8005072:	9b03      	ldr	r3, [sp, #12]
 8005074:	4298      	cmp	r0, r3
 8005076:	bfb8      	it	lt
 8005078:	4618      	movlt	r0, r3
 800507a:	e7a6      	b.n	8004fca <_printf_i+0x162>
 800507c:	2301      	movs	r3, #1
 800507e:	4632      	mov	r2, r6
 8005080:	4649      	mov	r1, r9
 8005082:	4640      	mov	r0, r8
 8005084:	47d0      	blx	sl
 8005086:	3001      	adds	r0, #1
 8005088:	d09d      	beq.n	8004fc6 <_printf_i+0x15e>
 800508a:	3501      	adds	r5, #1
 800508c:	68e3      	ldr	r3, [r4, #12]
 800508e:	9903      	ldr	r1, [sp, #12]
 8005090:	1a5b      	subs	r3, r3, r1
 8005092:	42ab      	cmp	r3, r5
 8005094:	dcf2      	bgt.n	800507c <_printf_i+0x214>
 8005096:	e7eb      	b.n	8005070 <_printf_i+0x208>
 8005098:	2500      	movs	r5, #0
 800509a:	f104 0619 	add.w	r6, r4, #25
 800509e:	e7f5      	b.n	800508c <_printf_i+0x224>
 80050a0:	080053a0 	.word	0x080053a0
 80050a4:	080053b1 	.word	0x080053b1

080050a8 <__malloc_lock>:
 80050a8:	4801      	ldr	r0, [pc, #4]	@ (80050b0 <__malloc_lock+0x8>)
 80050aa:	f7ff bc6f 	b.w	800498c <__retarget_lock_acquire_recursive>
 80050ae:	bf00      	nop
 80050b0:	20001eb0 	.word	0x20001eb0

080050b4 <__malloc_unlock>:
 80050b4:	4801      	ldr	r0, [pc, #4]	@ (80050bc <__malloc_unlock+0x8>)
 80050b6:	f7ff bc6a 	b.w	800498e <__retarget_lock_release_recursive>
 80050ba:	bf00      	nop
 80050bc:	20001eb0 	.word	0x20001eb0

080050c0 <_realloc_r>:
 80050c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c4:	4680      	mov	r8, r0
 80050c6:	4615      	mov	r5, r2
 80050c8:	460c      	mov	r4, r1
 80050ca:	b921      	cbnz	r1, 80050d6 <_realloc_r+0x16>
 80050cc:	4611      	mov	r1, r2
 80050ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050d2:	f7ff bdd7 	b.w	8004c84 <_malloc_r>
 80050d6:	b92a      	cbnz	r2, 80050e4 <_realloc_r+0x24>
 80050d8:	f000 f866 	bl	80051a8 <_free_r>
 80050dc:	2400      	movs	r4, #0
 80050de:	4620      	mov	r0, r4
 80050e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050e4:	f000 f8a8 	bl	8005238 <_malloc_usable_size_r>
 80050e8:	4285      	cmp	r5, r0
 80050ea:	4606      	mov	r6, r0
 80050ec:	d802      	bhi.n	80050f4 <_realloc_r+0x34>
 80050ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80050f2:	d8f4      	bhi.n	80050de <_realloc_r+0x1e>
 80050f4:	4629      	mov	r1, r5
 80050f6:	4640      	mov	r0, r8
 80050f8:	f7ff fdc4 	bl	8004c84 <_malloc_r>
 80050fc:	4607      	mov	r7, r0
 80050fe:	2800      	cmp	r0, #0
 8005100:	d0ec      	beq.n	80050dc <_realloc_r+0x1c>
 8005102:	42b5      	cmp	r5, r6
 8005104:	462a      	mov	r2, r5
 8005106:	4621      	mov	r1, r4
 8005108:	bf28      	it	cs
 800510a:	4632      	movcs	r2, r6
 800510c:	f000 f83e 	bl	800518c <memcpy>
 8005110:	4621      	mov	r1, r4
 8005112:	4640      	mov	r0, r8
 8005114:	f000 f848 	bl	80051a8 <_free_r>
 8005118:	463c      	mov	r4, r7
 800511a:	e7e0      	b.n	80050de <_realloc_r+0x1e>

0800511c <memmove>:
 800511c:	4288      	cmp	r0, r1
 800511e:	b510      	push	{r4, lr}
 8005120:	eb01 0402 	add.w	r4, r1, r2
 8005124:	d902      	bls.n	800512c <memmove+0x10>
 8005126:	4284      	cmp	r4, r0
 8005128:	4623      	mov	r3, r4
 800512a:	d807      	bhi.n	800513c <memmove+0x20>
 800512c:	1e43      	subs	r3, r0, #1
 800512e:	42a1      	cmp	r1, r4
 8005130:	d008      	beq.n	8005144 <memmove+0x28>
 8005132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800513a:	e7f8      	b.n	800512e <memmove+0x12>
 800513c:	4601      	mov	r1, r0
 800513e:	4402      	add	r2, r0
 8005140:	428a      	cmp	r2, r1
 8005142:	d100      	bne.n	8005146 <memmove+0x2a>
 8005144:	bd10      	pop	{r4, pc}
 8005146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800514a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800514e:	e7f7      	b.n	8005140 <memmove+0x24>

08005150 <_sbrk_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	2300      	movs	r3, #0
 8005154:	4d05      	ldr	r5, [pc, #20]	@ (800516c <_sbrk_r+0x1c>)
 8005156:	4604      	mov	r4, r0
 8005158:	4608      	mov	r0, r1
 800515a:	602b      	str	r3, [r5, #0]
 800515c:	f7fb fecc 	bl	8000ef8 <_sbrk>
 8005160:	1c43      	adds	r3, r0, #1
 8005162:	d102      	bne.n	800516a <_sbrk_r+0x1a>
 8005164:	682b      	ldr	r3, [r5, #0]
 8005166:	b103      	cbz	r3, 800516a <_sbrk_r+0x1a>
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	bd38      	pop	{r3, r4, r5, pc}
 800516c:	20001ebc 	.word	0x20001ebc

08005170 <memchr>:
 8005170:	4603      	mov	r3, r0
 8005172:	b510      	push	{r4, lr}
 8005174:	b2c9      	uxtb	r1, r1
 8005176:	4402      	add	r2, r0
 8005178:	4293      	cmp	r3, r2
 800517a:	4618      	mov	r0, r3
 800517c:	d101      	bne.n	8005182 <memchr+0x12>
 800517e:	2000      	movs	r0, #0
 8005180:	e003      	b.n	800518a <memchr+0x1a>
 8005182:	7804      	ldrb	r4, [r0, #0]
 8005184:	3301      	adds	r3, #1
 8005186:	428c      	cmp	r4, r1
 8005188:	d1f6      	bne.n	8005178 <memchr+0x8>
 800518a:	bd10      	pop	{r4, pc}

0800518c <memcpy>:
 800518c:	440a      	add	r2, r1
 800518e:	4291      	cmp	r1, r2
 8005190:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005194:	d100      	bne.n	8005198 <memcpy+0xc>
 8005196:	4770      	bx	lr
 8005198:	b510      	push	{r4, lr}
 800519a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800519e:	4291      	cmp	r1, r2
 80051a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051a4:	d1f9      	bne.n	800519a <memcpy+0xe>
 80051a6:	bd10      	pop	{r4, pc}

080051a8 <_free_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4605      	mov	r5, r0
 80051ac:	2900      	cmp	r1, #0
 80051ae:	d040      	beq.n	8005232 <_free_r+0x8a>
 80051b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b4:	1f0c      	subs	r4, r1, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bfb8      	it	lt
 80051ba:	18e4      	addlt	r4, r4, r3
 80051bc:	f7ff ff74 	bl	80050a8 <__malloc_lock>
 80051c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005234 <_free_r+0x8c>)
 80051c2:	6813      	ldr	r3, [r2, #0]
 80051c4:	b933      	cbnz	r3, 80051d4 <_free_r+0x2c>
 80051c6:	6063      	str	r3, [r4, #4]
 80051c8:	6014      	str	r4, [r2, #0]
 80051ca:	4628      	mov	r0, r5
 80051cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051d0:	f7ff bf70 	b.w	80050b4 <__malloc_unlock>
 80051d4:	42a3      	cmp	r3, r4
 80051d6:	d908      	bls.n	80051ea <_free_r+0x42>
 80051d8:	6820      	ldr	r0, [r4, #0]
 80051da:	1821      	adds	r1, r4, r0
 80051dc:	428b      	cmp	r3, r1
 80051de:	bf01      	itttt	eq
 80051e0:	6819      	ldreq	r1, [r3, #0]
 80051e2:	685b      	ldreq	r3, [r3, #4]
 80051e4:	1809      	addeq	r1, r1, r0
 80051e6:	6021      	streq	r1, [r4, #0]
 80051e8:	e7ed      	b.n	80051c6 <_free_r+0x1e>
 80051ea:	461a      	mov	r2, r3
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	b10b      	cbz	r3, 80051f4 <_free_r+0x4c>
 80051f0:	42a3      	cmp	r3, r4
 80051f2:	d9fa      	bls.n	80051ea <_free_r+0x42>
 80051f4:	6811      	ldr	r1, [r2, #0]
 80051f6:	1850      	adds	r0, r2, r1
 80051f8:	42a0      	cmp	r0, r4
 80051fa:	d10b      	bne.n	8005214 <_free_r+0x6c>
 80051fc:	6820      	ldr	r0, [r4, #0]
 80051fe:	4401      	add	r1, r0
 8005200:	1850      	adds	r0, r2, r1
 8005202:	4283      	cmp	r3, r0
 8005204:	6011      	str	r1, [r2, #0]
 8005206:	d1e0      	bne.n	80051ca <_free_r+0x22>
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	4408      	add	r0, r1
 800520e:	6010      	str	r0, [r2, #0]
 8005210:	6053      	str	r3, [r2, #4]
 8005212:	e7da      	b.n	80051ca <_free_r+0x22>
 8005214:	d902      	bls.n	800521c <_free_r+0x74>
 8005216:	230c      	movs	r3, #12
 8005218:	602b      	str	r3, [r5, #0]
 800521a:	e7d6      	b.n	80051ca <_free_r+0x22>
 800521c:	6820      	ldr	r0, [r4, #0]
 800521e:	1821      	adds	r1, r4, r0
 8005220:	428b      	cmp	r3, r1
 8005222:	bf01      	itttt	eq
 8005224:	6819      	ldreq	r1, [r3, #0]
 8005226:	685b      	ldreq	r3, [r3, #4]
 8005228:	1809      	addeq	r1, r1, r0
 800522a:	6021      	streq	r1, [r4, #0]
 800522c:	6063      	str	r3, [r4, #4]
 800522e:	6054      	str	r4, [r2, #4]
 8005230:	e7cb      	b.n	80051ca <_free_r+0x22>
 8005232:	bd38      	pop	{r3, r4, r5, pc}
 8005234:	20001eb8 	.word	0x20001eb8

08005238 <_malloc_usable_size_r>:
 8005238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800523c:	1f18      	subs	r0, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	bfbc      	itt	lt
 8005242:	580b      	ldrlt	r3, [r1, r0]
 8005244:	18c0      	addlt	r0, r0, r3
 8005246:	4770      	bx	lr

08005248 <_init>:
 8005248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524a:	bf00      	nop
 800524c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524e:	bc08      	pop	{r3}
 8005250:	469e      	mov	lr, r3
 8005252:	4770      	bx	lr

08005254 <_fini>:
 8005254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005256:	bf00      	nop
 8005258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525a:	bc08      	pop	{r3}
 800525c:	469e      	mov	lr, r3
 800525e:	4770      	bx	lr
