
turnstile_stm_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005578  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08005684  08005684  00006684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058e8  080058e8  00007188  2**0
                  CONTENTS
  4 .ARM          00000008  080058e8  080058e8  000068e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058f0  080058f0  00007188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058f0  080058f0  000068f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058f4  080058f4  000068f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  20000000  080058f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e7c  20000188  08005a80  00007188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002004  08005a80  00008004  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dab7  00000000  00000000  000071b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025cc  00000000  00000000  00014c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00017238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abb  00000000  00000000  00018008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186ba  00000000  00000000  00018ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100e0  00000000  00000000  0003117d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b553  00000000  00000000  0004125d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc7b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eac  00000000  00000000  000cc7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000d06a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	0800566c 	.word	0x0800566c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	0800566c 	.word	0x0800566c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_DMA_Init+0x38>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a0b      	ldr	r2, [pc, #44]	@ (8000690 <MX_DMA_Init+0x38>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6153      	str	r3, [r2, #20]
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_DMA_Init+0x38>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	2010      	movs	r0, #16
 800067c:	f001 fa09 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000680:	2010      	movs	r0, #16
 8000682:	f001 fa22 	bl	8001aca <HAL_NVIC_EnableIRQ>

}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a8:	4b42      	ldr	r3, [pc, #264]	@ (80007b4 <MX_GPIO_Init+0x120>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a41      	ldr	r2, [pc, #260]	@ (80007b4 <MX_GPIO_Init+0x120>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b3f      	ldr	r3, [pc, #252]	@ (80007b4 <MX_GPIO_Init+0x120>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0310 	and.w	r3, r3, #16
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c0:	4b3c      	ldr	r3, [pc, #240]	@ (80007b4 <MX_GPIO_Init+0x120>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a3b      	ldr	r2, [pc, #236]	@ (80007b4 <MX_GPIO_Init+0x120>)
 80006c6:	f043 0320 	orr.w	r3, r3, #32
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b39      	ldr	r3, [pc, #228]	@ (80007b4 <MX_GPIO_Init+0x120>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0320 	and.w	r3, r3, #32
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b36      	ldr	r3, [pc, #216]	@ (80007b4 <MX_GPIO_Init+0x120>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a35      	ldr	r2, [pc, #212]	@ (80007b4 <MX_GPIO_Init+0x120>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b33      	ldr	r3, [pc, #204]	@ (80007b4 <MX_GPIO_Init+0x120>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	4b30      	ldr	r3, [pc, #192]	@ (80007b4 <MX_GPIO_Init+0x120>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a2f      	ldr	r2, [pc, #188]	@ (80007b4 <MX_GPIO_Init+0x120>)
 80006f6:	f043 0308 	orr.w	r3, r3, #8
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b2d      	ldr	r3, [pc, #180]	@ (80007b4 <MX_GPIO_Init+0x120>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2120      	movs	r1, #32
 800070c:	482a      	ldr	r0, [pc, #168]	@ (80007b8 <MX_GPIO_Init+0x124>)
 800070e:	f001 fe1d 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000718:	4828      	ldr	r0, [pc, #160]	@ (80007bc <MX_GPIO_Init+0x128>)
 800071a:	f001 fe17 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC2 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_2;
 800071e:	f242 0304 	movw	r3, #8196	@ 0x2004
 8000722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000724:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <MX_GPIO_Init+0x12c>)
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	4619      	mov	r1, r3
 8000732:	4822      	ldr	r0, [pc, #136]	@ (80007bc <MX_GPIO_Init+0x128>)
 8000734:	f001 fc86 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Limit2_Pin;
 8000738:	2308      	movs	r3, #8
 800073a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800073c:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <MX_GPIO_Init+0x12c>)
 800073e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000740:	2301      	movs	r3, #1
 8000742:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Limit2_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	4619      	mov	r1, r3
 800074a:	481c      	ldr	r0, [pc, #112]	@ (80007bc <MX_GPIO_Init+0x128>)
 800074c:	f001 fc7a 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000750:	2320      	movs	r3, #32
 8000752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	4619      	mov	r1, r3
 8000766:	4814      	ldr	r0, [pc, #80]	@ (80007b8 <MX_GPIO_Init+0x124>)
 8000768:	f001 fc6c 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800076c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2302      	movs	r3, #2
 800077c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	4619      	mov	r1, r3
 8000784:	480d      	ldr	r0, [pc, #52]	@ (80007bc <MX_GPIO_Init+0x128>)
 8000786:	f001 fc5d 	bl	8002044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2008      	movs	r0, #8
 8000790:	f001 f97f 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000794:	2008      	movs	r0, #8
 8000796:	f001 f998 	bl	8001aca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2009      	movs	r0, #9
 80007a0:	f001 f977 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80007a4:	2009      	movs	r0, #9
 80007a6:	f001 f990 	bl	8001aca <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3720      	adds	r7, #32
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40010800 	.word	0x40010800
 80007bc:	40011000 	.word	0x40011000
 80007c0:	10110000 	.word	0x10110000

080007c4 <Draw_Arrow>:
        return (row * LED_COLS / 2) + (LED_COLS / 2 - 1 - col);
    }
}

/* Function to draw the arrow */
void Draw_Arrow(WS28XX_HandleTypeDef *ws, int color, int brightness) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 26; i++) {
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	e01a      	b.n	800080c <Draw_Arrow+0x48>
        if (arrow[i] >= 16 && arrow[i] <= 239) {
 80007d6:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <Draw_Arrow+0x5c>)
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007de:	2b0f      	cmp	r3, #15
 80007e0:	dd11      	ble.n	8000806 <Draw_Arrow+0x42>
 80007e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000820 <Draw_Arrow+0x5c>)
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ea:	2bef      	cmp	r3, #239	@ 0xef
 80007ec:	dc0b      	bgt.n	8000806 <Draw_Arrow+0x42>
            WS28XX_SetPixel_RGBW_565(ws, arrow[i], color, brightness);
 80007ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000820 <Draw_Arrow+0x5c>)
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f6:	b299      	uxth	r1, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f004 f913 	bl	8004a2c <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 26; i++) {
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	3301      	adds	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	2b19      	cmp	r3, #25
 8000810:	dde1      	ble.n	80007d6 <Draw_Arrow+0x12>
        }
    }
    WS28XX_Update(ws);
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f004 f97e 	bl	8004b14 <WS28XX_Update>
}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000000 	.word	0x20000000

08000824 <Clear_Arrow>:

/* Function to clear the arrow */
void Clear_Arrow(WS28XX_HandleTypeDef *ws) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 26; i++) {
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	e018      	b.n	8000864 <Clear_Arrow+0x40>
        if (arrow[i] >= 16 && arrow[i] <= 239) {
 8000832:	4a11      	ldr	r2, [pc, #68]	@ (8000878 <Clear_Arrow+0x54>)
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083a:	2b0f      	cmp	r3, #15
 800083c:	dd0f      	ble.n	800085e <Clear_Arrow+0x3a>
 800083e:	4a0e      	ldr	r2, [pc, #56]	@ (8000878 <Clear_Arrow+0x54>)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000846:	2bef      	cmp	r3, #239	@ 0xef
 8000848:	dc09      	bgt.n	800085e <Clear_Arrow+0x3a>
            WS28XX_SetPixel_RGBW_565(ws, arrow[i], COLOR_RGB565_BLACK, 0);
 800084a:	4a0b      	ldr	r2, [pc, #44]	@ (8000878 <Clear_Arrow+0x54>)
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000852:	b299      	uxth	r1, r3
 8000854:	2300      	movs	r3, #0
 8000856:	2200      	movs	r2, #0
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f004 f8e7 	bl	8004a2c <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 26; i++) {
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b19      	cmp	r3, #25
 8000868:	dde3      	ble.n	8000832 <Clear_Arrow+0xe>
        }
    }
    WS28XX_Update(ws);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f004 f952 	bl	8004b14 <WS28XX_Update>
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000000 	.word	0x20000000

0800087c <Shift_Arrow>:



/* Function to shift the arrow forward */
void Shift_Arrow() {
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
    for (int i = 0; i < 26; i++) {
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	e028      	b.n	80008da <Shift_Arrow+0x5e>
        arrow[i] += 8;
 8000888:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <Shift_Arrow+0x70>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000890:	f103 0208 	add.w	r2, r3, #8
 8000894:	4915      	ldr	r1, [pc, #84]	@ (80008ec <Shift_Arrow+0x70>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (arrow[i] >= 240) {
 800089c:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <Shift_Arrow+0x70>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a4:	2bef      	cmp	r3, #239	@ 0xef
 80008a6:	dd15      	ble.n	80008d4 <Shift_Arrow+0x58>
            arrow[i] = arrow[i] % 240 + 16; // Ensure arrow stays within valid indices
 80008a8:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <Shift_Arrow+0x70>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <Shift_Arrow+0x74>)
 80008b2:	fb83 1302 	smull	r1, r3, r3, r2
 80008b6:	4413      	add	r3, r2
 80008b8:	11d9      	asrs	r1, r3, #7
 80008ba:	17d3      	asrs	r3, r2, #31
 80008bc:	1ac9      	subs	r1, r1, r3
 80008be:	460b      	mov	r3, r1
 80008c0:	011b      	lsls	r3, r3, #4
 80008c2:	1a5b      	subs	r3, r3, r1
 80008c4:	011b      	lsls	r3, r3, #4
 80008c6:	1ad1      	subs	r1, r2, r3
 80008c8:	f101 0210 	add.w	r2, r1, #16
 80008cc:	4907      	ldr	r1, [pc, #28]	@ (80008ec <Shift_Arrow+0x70>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 26; i++) {
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3301      	adds	r3, #1
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b19      	cmp	r3, #25
 80008de:	ddd3      	ble.n	8000888 <Shift_Arrow+0xc>
        }
    }
}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	20000000 	.word	0x20000000
 80008f0:	88888889 	.word	0x88888889

080008f4 <Draw_Strips>:

/* Function to draw the strips */
void Draw_Strips(WS28XX_HandleTypeDef *ws, int color, int brightness) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
    for (int i = 240; i <= 255; i++) {
 8000900:	23f0      	movs	r3, #240	@ 0xf0
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	e00b      	b.n	800091e <Draw_Strips+0x2a>
        WS28XX_SetPixel_RGBW_565(ws, i, color, brightness);
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	b299      	uxth	r1, r3
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	b29a      	uxth	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f004 f88a 	bl	8004a2c <WS28XX_SetPixel_RGBW_565>
    for (int i = 240; i <= 255; i++) {
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3301      	adds	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	2bff      	cmp	r3, #255	@ 0xff
 8000922:	ddf0      	ble.n	8000906 <Draw_Strips+0x12>
    }
    for (int i = 0; i <= 15; i++) {
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	e00b      	b.n	8000942 <Draw_Strips+0x4e>
        WS28XX_SetPixel_RGBW_565(ws, i, color, brightness);
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	b299      	uxth	r1, r3
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	b29a      	uxth	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	68f8      	ldr	r0, [r7, #12]
 8000938:	f004 f878 	bl	8004a2c <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i <= 15; i++) {
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	3301      	adds	r3, #1
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	2b0f      	cmp	r3, #15
 8000946:	ddf0      	ble.n	800092a <Draw_Strips+0x36>
    }
    WS28XX_Update(ws);
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f004 f8e3 	bl	8004b14 <WS28XX_Update>
}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <Draw_Cross>:

/* Function to draw the "X" shapes */
void Draw_Cross(WS28XX_HandleTypeDef *ws, int *cross, int color, int brightness) {
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 16; i++) {
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	e00f      	b.n	800098a <Draw_Cross+0x34>
        WS28XX_SetPixel_RGBW_565(ws, cross[i], color, brightness);
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	4413      	add	r3, r2
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	b299      	uxth	r1, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	b29a      	uxth	r2, r3
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f004 f854 	bl	8004a2c <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 16; i++) {
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3301      	adds	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	ddec      	ble.n	800096a <Draw_Cross+0x14>
    }
    WS28XX_Update(ws);
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f004 f8bf 	bl	8004b14 <WS28XX_Update>
}
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <Clear_Cross>:

/* Function to clear the "X" shapes */
void Clear_Cross(WS28XX_HandleTypeDef *ws, int *cross) {
 800099e:	b580      	push	{r7, lr}
 80009a0:	b084      	sub	sp, #16
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 16; i++) {
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e00d      	b.n	80009ca <Clear_Cross+0x2c>
        WS28XX_SetPixel_RGBW_565(ws, cross[i], COLOR_RGB565_BLACK, 0);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	683a      	ldr	r2, [r7, #0]
 80009b4:	4413      	add	r3, r2
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	b299      	uxth	r1, r3
 80009ba:	2300      	movs	r3, #0
 80009bc:	2200      	movs	r2, #0
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f004 f834 	bl	8004a2c <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 16; i++) {
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3301      	adds	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	ddee      	ble.n	80009ae <Clear_Cross+0x10>
    }
    WS28XX_Update(ws);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f004 f89f 	bl	8004b14 <WS28XX_Update>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <Arrow_Animation>:

/* Function for arrow animation */
void Arrow_Animation(uint8_t reset) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
    static uint32_t lastUpdate = 0;
    static uint8_t initialized = 0;

    if (reset) {
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d008      	beq.n	8000a02 <Arrow_Animation+0x22>
        initialized = 0;
 80009f0:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <Arrow_Animation+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
        lastUpdate = HAL_GetTick();
 80009f6:	f000 ff47 	bl	8001888 <HAL_GetTick>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a16      	ldr	r2, [pc, #88]	@ (8000a58 <Arrow_Animation+0x78>)
 80009fe:	6013      	str	r3, [r2, #0]
        return;
 8000a00:	e024      	b.n	8000a4c <Arrow_Animation+0x6c>
    }

    // Initialize on first call
    if (!initialized) {
 8000a02:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <Arrow_Animation+0x74>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d108      	bne.n	8000a1c <Arrow_Animation+0x3c>
        Draw_Strips(&ws, COLOR_RGB565_CYAN, 255);
 8000a0a:	22ff      	movs	r2, #255	@ 0xff
 8000a0c:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000a10:	4812      	ldr	r0, [pc, #72]	@ (8000a5c <Arrow_Animation+0x7c>)
 8000a12:	f7ff ff6f 	bl	80008f4 <Draw_Strips>
        initialized = 1;
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <Arrow_Animation+0x74>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
    }

    // Update animation based on DELAY_TIME
    if (HAL_GetTick() - lastUpdate >= DELAY_TIME) {
 8000a1c:	f000 ff34 	bl	8001888 <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <Arrow_Animation+0x78>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	2b31      	cmp	r3, #49	@ 0x31
 8000a2a:	d90f      	bls.n	8000a4c <Arrow_Animation+0x6c>
        lastUpdate = HAL_GetTick();
 8000a2c:	f000 ff2c 	bl	8001888 <HAL_GetTick>
 8000a30:	4603      	mov	r3, r0
 8000a32:	4a09      	ldr	r2, [pc, #36]	@ (8000a58 <Arrow_Animation+0x78>)
 8000a34:	6013      	str	r3, [r2, #0]

        Clear_Arrow(&ws);
 8000a36:	4809      	ldr	r0, [pc, #36]	@ (8000a5c <Arrow_Animation+0x7c>)
 8000a38:	f7ff fef4 	bl	8000824 <Clear_Arrow>
        Shift_Arrow();
 8000a3c:	f7ff ff1e 	bl	800087c <Shift_Arrow>
        Draw_Arrow(&ws, COLOR_RGB565_GREEN, 255);
 8000a40:	22ff      	movs	r2, #255	@ 0xff
 8000a42:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <Arrow_Animation+0x7c>)
 8000a48:	f7ff febc 	bl	80007c4 <Draw_Arrow>
    }
}
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20001cf0 	.word	0x20001cf0
 8000a58:	20001cf4 	.word	0x20001cf4
 8000a5c:	200001a4 	.word	0x200001a4

08000a60 <Cross_Animation>:

/* Function for cross animation */
void Cross_Animation(uint8_t reset) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
    static uint32_t lastUpdate = 0;
    static uint8_t isOn = 0;
    static uint8_t initialized = 0;

    if (reset) {
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d00b      	beq.n	8000a88 <Cross_Animation+0x28>
        initialized = 0;
 8000a70:	4b2a      	ldr	r3, [pc, #168]	@ (8000b1c <Cross_Animation+0xbc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
        isOn = 0;
 8000a76:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <Cross_Animation+0xc0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
        lastUpdate = HAL_GetTick();
 8000a7c:	f000 ff04 	bl	8001888 <HAL_GetTick>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4a28      	ldr	r2, [pc, #160]	@ (8000b24 <Cross_Animation+0xc4>)
 8000a84:	6013      	str	r3, [r2, #0]
        return;
 8000a86:	e046      	b.n	8000b16 <Cross_Animation+0xb6>
    }

    // Initialize on first call
    if (!initialized) {
 8000a88:	4b24      	ldr	r3, [pc, #144]	@ (8000b1c <Cross_Animation+0xbc>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d108      	bne.n	8000aa2 <Cross_Animation+0x42>
        Draw_Strips(&ws, COLOR_RGB565_CYAN, 255);
 8000a90:	22ff      	movs	r2, #255	@ 0xff
 8000a92:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000a96:	4824      	ldr	r0, [pc, #144]	@ (8000b28 <Cross_Animation+0xc8>)
 8000a98:	f7ff ff2c 	bl	80008f4 <Draw_Strips>
        initialized = 1;
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <Cross_Animation+0xbc>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
    }

    // Toggle the cross based on BLINK_DELAY
    if (HAL_GetTick() - lastUpdate >= BLINK_DELAY) {
 8000aa2:	f000 fef1 	bl	8001888 <HAL_GetTick>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <Cross_Animation+0xc4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ab2:	d330      	bcc.n	8000b16 <Cross_Animation+0xb6>
        lastUpdate = HAL_GetTick();
 8000ab4:	f000 fee8 	bl	8001888 <HAL_GetTick>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4a1a      	ldr	r2, [pc, #104]	@ (8000b24 <Cross_Animation+0xc4>)
 8000abc:	6013      	str	r3, [r2, #0]

        if (isOn) {
 8000abe:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <Cross_Animation+0xc0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d00f      	beq.n	8000ae6 <Cross_Animation+0x86>
            Clear_Cross(&ws, topCross);
 8000ac6:	4919      	ldr	r1, [pc, #100]	@ (8000b2c <Cross_Animation+0xcc>)
 8000ac8:	4817      	ldr	r0, [pc, #92]	@ (8000b28 <Cross_Animation+0xc8>)
 8000aca:	f7ff ff68 	bl	800099e <Clear_Cross>
            Clear_Cross(&ws, middleCross);
 8000ace:	4918      	ldr	r1, [pc, #96]	@ (8000b30 <Cross_Animation+0xd0>)
 8000ad0:	4815      	ldr	r0, [pc, #84]	@ (8000b28 <Cross_Animation+0xc8>)
 8000ad2:	f7ff ff64 	bl	800099e <Clear_Cross>
            Clear_Cross(&ws, bottomCross);
 8000ad6:	4917      	ldr	r1, [pc, #92]	@ (8000b34 <Cross_Animation+0xd4>)
 8000ad8:	4813      	ldr	r0, [pc, #76]	@ (8000b28 <Cross_Animation+0xc8>)
 8000ada:	f7ff ff60 	bl	800099e <Clear_Cross>
            isOn = 0;
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <Cross_Animation+0xc0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	e017      	b.n	8000b16 <Cross_Animation+0xb6>
        } else {
            Draw_Cross(&ws, topCross, COLOR_RGB565_RED, 255);
 8000ae6:	23ff      	movs	r3, #255	@ 0xff
 8000ae8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000aec:	490f      	ldr	r1, [pc, #60]	@ (8000b2c <Cross_Animation+0xcc>)
 8000aee:	480e      	ldr	r0, [pc, #56]	@ (8000b28 <Cross_Animation+0xc8>)
 8000af0:	f7ff ff31 	bl	8000956 <Draw_Cross>
            Draw_Cross(&ws, middleCross, COLOR_RGB565_RED, 255);
 8000af4:	23ff      	movs	r3, #255	@ 0xff
 8000af6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000afa:	490d      	ldr	r1, [pc, #52]	@ (8000b30 <Cross_Animation+0xd0>)
 8000afc:	480a      	ldr	r0, [pc, #40]	@ (8000b28 <Cross_Animation+0xc8>)
 8000afe:	f7ff ff2a 	bl	8000956 <Draw_Cross>
            Draw_Cross(&ws, bottomCross, COLOR_RGB565_RED, 255);
 8000b02:	23ff      	movs	r3, #255	@ 0xff
 8000b04:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000b08:	490a      	ldr	r1, [pc, #40]	@ (8000b34 <Cross_Animation+0xd4>)
 8000b0a:	4807      	ldr	r0, [pc, #28]	@ (8000b28 <Cross_Animation+0xc8>)
 8000b0c:	f7ff ff23 	bl	8000956 <Draw_Cross>
            isOn = 1;
 8000b10:	4b03      	ldr	r3, [pc, #12]	@ (8000b20 <Cross_Animation+0xc0>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20001cf8 	.word	0x20001cf8
 8000b20:	20001cf9 	.word	0x20001cf9
 8000b24:	20001cfc 	.word	0x20001cfc
 8000b28:	200001a4 	.word	0x200001a4
 8000b2c:	20000068 	.word	0x20000068
 8000b30:	200000a8 	.word	0x200000a8
 8000b34:	200000e8 	.word	0x200000e8

08000b38 <Speed_Control>:



//MOTOR CONTROL FUNCTIONS
void Speed_Control(int a)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, a);
 8000b40:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <Speed_Control+0x1c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20001d54 	.word	0x20001d54

08000b58 <Direction>:

void Direction(int a)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	if(a==1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d10b      	bne.n	8000b7e <Direction+0x26>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b6c:	480d      	ldr	r0, [pc, #52]	@ (8000ba4 <Direction+0x4c>)
 8000b6e:	f001 fbed 	bl	800234c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b78:	480a      	ldr	r0, [pc, #40]	@ (8000ba4 <Direction+0x4c>)
 8000b7a:	f001 fbe7 	bl	800234c <HAL_GPIO_WritePin>

	}
	if(a==0)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10b      	bne.n	8000b9c <Direction+0x44>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b8a:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <Direction+0x4c>)
 8000b8c:	f001 fbde 	bl	800234c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b96:	4803      	ldr	r0, [pc, #12]	@ (8000ba4 <Direction+0x4c>)
 8000b98:	f001 fbd8 	bl	800234c <HAL_GPIO_WritePin>
	}
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40011000 	.word	0x40011000

08000ba8 <encoder>:

void encoder(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
    counter++;
 8000bac:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <encoder+0x2c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	4a08      	ldr	r2, [pc, #32]	@ (8000bd4 <encoder+0x2c>)
 8000bb4:	6013      	str	r3, [r2, #0]
    if(counter == target_counter)
 8000bb6:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <encoder+0x2c>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <encoder+0x30>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d105      	bne.n	8000bce <encoder+0x26>
    {
        Speed_Control(0); // Stop the motor
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f7ff ffb8 	bl	8000b38 <Speed_Control>
        counter = 0;      // Reset counter for next operation
 8000bc8:	4b02      	ldr	r3, [pc, #8]	@ (8000bd4 <encoder+0x2c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
        //door_movement_complete = 1; // Indicate movement is complete
    }
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20001cec 	.word	0x20001cec
 8000bd8:	20000128 	.word	0x20000128

08000bdc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_2) // Replace with your encoder GPIO pin
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d101      	bne.n	8000bf0 <HAL_GPIO_EXTI_Callback+0x14>
    {
        encoder();
 8000bec:	f7ff ffdc 	bl	8000ba8 <encoder>
    }
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <quarter_cycle_open>:

void quarter_cycle_open(int source)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
    if(source == 1){
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d103      	bne.n	8000c0e <quarter_cycle_open+0x16>
        Direction(0);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f7ff ffa6 	bl	8000b58 <Direction>
 8000c0c:	e005      	b.n	8000c1a <quarter_cycle_open+0x22>
    }
    else if(source == 2){
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d102      	bne.n	8000c1a <quarter_cycle_open+0x22>
        Direction(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f7ff ff9f 	bl	8000b58 <Direction>
    }
    Speed_Control(1000); // Start motor
 8000c1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c1e:	f7ff ff8b 	bl	8000b38 <Speed_Control>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <quarter_cycle_closed>:

void quarter_cycle_closed(int source)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
    if(source == 1){
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d103      	bne.n	8000c40 <quarter_cycle_closed+0x16>
        Direction(1);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f7ff ff8d 	bl	8000b58 <Direction>
 8000c3e:	e005      	b.n	8000c4c <quarter_cycle_closed+0x22>
    }
    else if(source == 2){
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d102      	bne.n	8000c4c <quarter_cycle_closed+0x22>
        Direction(0);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f7ff ff86 	bl	8000b58 <Direction>
    }
    Speed_Control(1000); // Start motor
 8000c4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c50:	f7ff ff72 	bl	8000b38 <Speed_Control>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <ready_state>:



//STATE FUNCTIONS

void ready_state(void){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    static uint8_t state_initialized = 0;

    if(state_initialized == 0){
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <ready_state+0x38>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d105      	bne.n	8000c74 <ready_state+0x18>
        // Reset the arrow animation
        Arrow_Animation(1); // Reset animation
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff feb9 	bl	80009e0 <Arrow_Animation>
        state_initialized = 1;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <ready_state+0x38>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
    }

    // Call the Arrow Animation function
    Arrow_Animation(0); // Continue animation
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff feb3 	bl	80009e0 <Arrow_Animation>

    // Check if data has been received
    if(flag_rev == 1){
 8000c7a:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <ready_state+0x3c>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d105      	bne.n	8000c8e <ready_state+0x32>
        state_initialized = 0; // Reset for next time
 8000c82:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <ready_state+0x38>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
        currentState = STATE_READING; // Transition to Reading State
 8000c88:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <ready_state+0x40>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
    }
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20001d00 	.word	0x20001d00
 8000c98:	20001ce6 	.word	0x20001ce6
 8000c9c:	20001cb4 	.word	0x20001cb4

08000ca0 <reading_state>:

void reading_state(void){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
    if(flag_rev == 1){
 8000ca4:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <reading_state+0x50>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d10c      	bne.n	8000cc6 <reading_state+0x26>
        HAL_UART_Transmit_IT(&huart3, (uint8_t *)usermsg, strlen(usermsg));
 8000cac:	4811      	ldr	r0, [pc, #68]	@ (8000cf4 <reading_state+0x54>)
 8000cae:	f7ff fa4d 	bl	800014c <strlen>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	490e      	ldr	r1, [pc, #56]	@ (8000cf4 <reading_state+0x54>)
 8000cba:	480f      	ldr	r0, [pc, #60]	@ (8000cf8 <reading_state+0x58>)
 8000cbc:	f003 f888 	bl	8003dd0 <HAL_UART_Transmit_IT>
        flag_rev = 0;
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <reading_state+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(1000); // Delay as needed
 8000cc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cca:	f000 fde7 	bl	800189c <HAL_Delay>
    }
    else if(flagFailure == 1){
        flagFailure = 0;
        currentState = STATE_CLOSED; // Transition to Closed State
    }*/
    if(intresponseData == 1){
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <reading_state+0x5c>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d103      	bne.n	8000cde <reading_state+0x3e>
    	currentState = STATE_OPEN;
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <reading_state+0x60>)
 8000cd8:	2202      	movs	r2, #2
 8000cda:	701a      	strb	r2, [r3, #0]
    }
    else if(intresponseData == 2){
    	currentState = STATE_OPEN;
    }
}
 8000cdc:	e006      	b.n	8000cec <reading_state+0x4c>
    else if(intresponseData == 2){
 8000cde:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <reading_state+0x5c>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d102      	bne.n	8000cec <reading_state+0x4c>
    	currentState = STATE_OPEN;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <reading_state+0x60>)
 8000ce8:	2202      	movs	r2, #2
 8000cea:	701a      	strb	r2, [r3, #0]
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20001ce6 	.word	0x20001ce6
 8000cf4:	20001cd8 	.word	0x20001cd8
 8000cf8:	20001e70 	.word	0x20001e70
 8000cfc:	20001ce9 	.word	0x20001ce9
 8000d00:	20001cb4 	.word	0x20001cb4

08000d04 <open_state>:

void open_state(void){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	quarter_cycle_open(uart_source);
 8000d08:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <open_state+0x2c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff73 	bl	8000bf8 <quarter_cycle_open>
	HAL_Delay(5000);
 8000d12:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000d16:	f000 fdc1 	bl	800189c <HAL_Delay>
	quarter_cycle_closed(uart_source);
 8000d1a:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <open_state+0x2c>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff83 	bl	8000c2a <quarter_cycle_closed>
	currentState = STATE_READY;
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <open_state+0x30>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20001ce7 	.word	0x20001ce7
 8000d34:	20001cb4 	.word	0x20001cb4

08000d38 <closed_state>:

void closed_state(void){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
    static uint8_t state_initialized = 0;
    static uint32_t timestamp = 0;

    if(state_initialized == 0){
 8000d3c:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <closed_state+0x54>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10a      	bne.n	8000d5a <closed_state+0x22>
        // Reset the cross animation
        Cross_Animation(1); // Pass 1 to reset
 8000d44:	2001      	movs	r0, #1
 8000d46:	f7ff fe8b 	bl	8000a60 <Cross_Animation>
        timestamp = HAL_GetTick(); // Record time
 8000d4a:	f000 fd9d 	bl	8001888 <HAL_GetTick>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4a0f      	ldr	r2, [pc, #60]	@ (8000d90 <closed_state+0x58>)
 8000d52:	6013      	str	r3, [r2, #0]
        state_initialized = 1;
 8000d54:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <closed_state+0x54>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
    }

    // Call the Cross Animation function
    Cross_Animation(0); // Pass 0 to continue animation
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff fe80 	bl	8000a60 <Cross_Animation>

    // Wait for some time (e.g., 3 seconds)
    if(HAL_GetTick() - timestamp >= 3000){
 8000d60:	f000 fd92 	bl	8001888 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <closed_state+0x58>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d908      	bls.n	8000d86 <closed_state+0x4e>
        // Clear cross
        Cross_Animation(1); // Reset animation for next time
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff fe73 	bl	8000a60 <Cross_Animation>
        state_initialized = 0;
 8000d7a:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <closed_state+0x54>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
        currentState = STATE_READY; // Transition back to Ready State
 8000d80:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <closed_state+0x5c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
    }
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20001d01 	.word	0x20001d01
 8000d90:	20001d04 	.word	0x20001d04
 8000d94:	20001cb4 	.word	0x20001cb4

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9e:	f000 fd1b 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da2:	f000 f863 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da6:	f7ff fc75 	bl	8000694 <MX_GPIO_Init>
  MX_DMA_Init();
 8000daa:	f7ff fc55 	bl	8000658 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000dae:	f000 fbcd 	bl	800154c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000db2:	f000 fa0f 	bl	80011d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000db6:	f000 fa67 	bl	8001288 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000dba:	f000 fb9d 	bl	80014f8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000dbe:	f000 fbef 	bl	80015a0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8000dc2:	4821      	ldr	r0, [pc, #132]	@ (8000e48 <main+0xb0>)
 8000dc4:	f001 ff52 	bl	8002c6c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000dc8:	2100      	movs	r1, #0
 8000dca:	481f      	ldr	r0, [pc, #124]	@ (8000e48 <main+0xb0>)
 8000dcc:	f001 ffe8 	bl	8002da0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 8000dd0:	481e      	ldr	r0, [pc, #120]	@ (8000e4c <main+0xb4>)
 8000dd2:	f001 ff4b 	bl	8002c6c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	481c      	ldr	r0, [pc, #112]	@ (8000e4c <main+0xb4>)
 8000dda:	f001 ffe1 	bl	8002da0 <HAL_TIM_PWM_Start>
  WS28XX_Init(&ws, &htim3, 72, TIM_CHANNEL_1, 256);
 8000dde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2300      	movs	r3, #0
 8000de6:	2248      	movs	r2, #72	@ 0x48
 8000de8:	4918      	ldr	r1, [pc, #96]	@ (8000e4c <main+0xb4>)
 8000dea:	4819      	ldr	r0, [pc, #100]	@ (8000e50 <main+0xb8>)
 8000dec:	f003 fd86 	bl	80048fc <WS28XX_Init>


  // Start UART reception for RFID Reader (USART1)
  HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));
 8000df0:	220e      	movs	r2, #14
 8000df2:	4918      	ldr	r1, [pc, #96]	@ (8000e54 <main+0xbc>)
 8000df4:	4818      	ldr	r0, [pc, #96]	@ (8000e58 <main+0xc0>)
 8000df6:	f003 f820 	bl	8003e3a <HAL_UART_Receive_IT>

  // Start UART reception for Additional UART (USART2)
  HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));
 8000dfa:	220e      	movs	r2, #14
 8000dfc:	4915      	ldr	r1, [pc, #84]	@ (8000e54 <main+0xbc>)
 8000dfe:	4817      	ldr	r0, [pc, #92]	@ (8000e5c <main+0xc4>)
 8000e00:	f003 f81b 	bl	8003e3a <HAL_UART_Receive_IT>

  // Start UART reception for NOS response (USART3)
  HAL_UART_Receive_IT(&huart3, &responseData, 1);
 8000e04:	2201      	movs	r2, #1
 8000e06:	4916      	ldr	r1, [pc, #88]	@ (8000e60 <main+0xc8>)
 8000e08:	4816      	ldr	r0, [pc, #88]	@ (8000e64 <main+0xcc>)
 8000e0a:	f003 f816 	bl	8003e3a <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		switch (currentState)
 8000e0e:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <main+0xd0>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d816      	bhi.n	8000e44 <main+0xac>
 8000e16:	a201      	add	r2, pc, #4	@ (adr r2, 8000e1c <main+0x84>)
 8000e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1c:	08000e2d 	.word	0x08000e2d
 8000e20:	08000e33 	.word	0x08000e33
 8000e24:	08000e39 	.word	0x08000e39
 8000e28:	08000e3f 	.word	0x08000e3f
		{
			case STATE_READY:
				ready_state();
 8000e2c:	f7ff ff16 	bl	8000c5c <ready_state>
				break;
 8000e30:	e009      	b.n	8000e46 <main+0xae>
			case STATE_READING:
				reading_state();
 8000e32:	f7ff ff35 	bl	8000ca0 <reading_state>
				break;
 8000e36:	e006      	b.n	8000e46 <main+0xae>
			case STATE_OPEN:
				open_state();
 8000e38:	f7ff ff64 	bl	8000d04 <open_state>
				break;
 8000e3c:	e003      	b.n	8000e46 <main+0xae>
			case STATE_CLOSED:
				closed_state();
 8000e3e:	f7ff ff7b 	bl	8000d38 <closed_state>
				break;
 8000e42:	e000      	b.n	8000e46 <main+0xae>
			// Leave other states empty for now
			default:
				break;
 8000e44:	bf00      	nop
		switch (currentState)
 8000e46:	e7e2      	b.n	8000e0e <main+0x76>
 8000e48:	20001d54 	.word	0x20001d54
 8000e4c:	20001d0c 	.word	0x20001d0c
 8000e50:	200001a4 	.word	0x200001a4
 8000e54:	20001cb8 	.word	0x20001cb8
 8000e58:	20001de0 	.word	0x20001de0
 8000e5c:	20001e28 	.word	0x20001e28
 8000e60:	20001ce8 	.word	0x20001ce8
 8000e64:	20001e70 	.word	0x20001e70
 8000e68:	20001cb4 	.word	0x20001cb4

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b090      	sub	sp, #64	@ 0x40
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	2228      	movs	r2, #40	@ 0x28
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 ff66 	bl	8004d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e92:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000eaa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb0:	f107 0318 	add.w	r3, r7, #24
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fa79 	bl	80023ac <HAL_RCC_OscConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ec0:	f000 f8b2 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ed4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2102      	movs	r1, #2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 fce6 	bl	80028b0 <HAL_RCC_ClockConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000eea:	f000 f89d 	bl	8001028 <Error_Handler>
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3740      	adds	r7, #64	@ 0x40
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) { // Data received from USART1
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a3a      	ldr	r2, [pc, #232]	@ (8000ff0 <HAL_UART_RxCpltCallback+0xf8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d12b      	bne.n	8000f62 <HAL_UART_RxCpltCallback+0x6a>
        // Process the received data
        for (int i = 0; i < 12; i++) {
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	e00b      	b.n	8000f28 <HAL_UART_RxCpltCallback+0x30>
            processedData[i] = rxData[i + 1]; // Skip the start byte
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3301      	adds	r3, #1
 8000f14:	4a37      	ldr	r2, [pc, #220]	@ (8000ff4 <HAL_UART_RxCpltCallback+0xfc>)
 8000f16:	5cd1      	ldrb	r1, [r2, r3]
 8000f18:	4a37      	ldr	r2, [pc, #220]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x100>)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	460a      	mov	r2, r1
 8000f20:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 12; i++) {
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3301      	adds	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2b0b      	cmp	r3, #11
 8000f2c:	ddf0      	ble.n	8000f10 <HAL_UART_RxCpltCallback+0x18>
        }

        uart_source = 1;
 8000f2e:	4b33      	ldr	r3, [pc, #204]	@ (8000ffc <HAL_UART_RxCpltCallback+0x104>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
        processedData[12] = uart_source + '0';
 8000f34:	4b31      	ldr	r3, [pc, #196]	@ (8000ffc <HAL_UART_RxCpltCallback+0x104>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	3330      	adds	r3, #48	@ 0x30
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x100>)
 8000f3e:	731a      	strb	r2, [r3, #12]
        processedData[13] = '\0'; // Null-terminate the string
 8000f40:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x100>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	735a      	strb	r2, [r3, #13]

        // Use sprintf to format usermsg with identification flag
        sprintf(usermsg, "%s", processedData);
 8000f46:	4a2c      	ldr	r2, [pc, #176]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x100>)
 8000f48:	492d      	ldr	r1, [pc, #180]	@ (8001000 <HAL_UART_RxCpltCallback+0x108>)
 8000f4a:	482e      	ldr	r0, [pc, #184]	@ (8001004 <HAL_UART_RxCpltCallback+0x10c>)
 8000f4c:	f003 fe5a 	bl	8004c04 <siprintf>

        flag_rev = 1; // Set flag to indicate data has been received
 8000f50:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <HAL_UART_RxCpltCallback+0x110>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]

        // Re-enable UART reception for USART1
        HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));
 8000f56:	220e      	movs	r2, #14
 8000f58:	4926      	ldr	r1, [pc, #152]	@ (8000ff4 <HAL_UART_RxCpltCallback+0xfc>)
 8000f5a:	482c      	ldr	r0, [pc, #176]	@ (800100c <HAL_UART_RxCpltCallback+0x114>)
 8000f5c:	f002 ff6d 	bl	8003e3a <HAL_UART_Receive_IT>
        }*/

        // Re-enable UART reception for USART3
        HAL_UART_Receive_IT(&huart3, &responseData, 1);
    }
}
 8000f60:	e041      	b.n	8000fe6 <HAL_UART_RxCpltCallback+0xee>
    else if (huart->Instance == USART2) { // Data received from USART2
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a2a      	ldr	r2, [pc, #168]	@ (8001010 <HAL_UART_RxCpltCallback+0x118>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d12b      	bne.n	8000fc4 <HAL_UART_RxCpltCallback+0xcc>
        for (int i = 0; i < 12; i++) {
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	e00b      	b.n	8000f8a <HAL_UART_RxCpltCallback+0x92>
            processedData[i] = rxData[i + 1]; // Skip the start byte
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	3301      	adds	r3, #1
 8000f76:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff4 <HAL_UART_RxCpltCallback+0xfc>)
 8000f78:	5cd1      	ldrb	r1, [r2, r3]
 8000f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x100>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4413      	add	r3, r2
 8000f80:	460a      	mov	r2, r1
 8000f82:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 12; i++) {
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	3301      	adds	r3, #1
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	2b0b      	cmp	r3, #11
 8000f8e:	ddf0      	ble.n	8000f72 <HAL_UART_RxCpltCallback+0x7a>
        uart_source = 2;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <HAL_UART_RxCpltCallback+0x104>)
 8000f92:	2202      	movs	r2, #2
 8000f94:	701a      	strb	r2, [r3, #0]
		processedData[12] = uart_source + '0';
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_UART_RxCpltCallback+0x104>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	3330      	adds	r3, #48	@ 0x30
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x100>)
 8000fa0:	731a      	strb	r2, [r3, #12]
		processedData[13] = '\0'; // Null-terminate the string
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x100>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	735a      	strb	r2, [r3, #13]
        sprintf(usermsg, "%s", processedData);
 8000fa8:	4a13      	ldr	r2, [pc, #76]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x100>)
 8000faa:	4915      	ldr	r1, [pc, #84]	@ (8001000 <HAL_UART_RxCpltCallback+0x108>)
 8000fac:	4815      	ldr	r0, [pc, #84]	@ (8001004 <HAL_UART_RxCpltCallback+0x10c>)
 8000fae:	f003 fe29 	bl	8004c04 <siprintf>
        flag_rev = 1; // Set flag to indicate data has been received
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <HAL_UART_RxCpltCallback+0x110>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));
 8000fb8:	220e      	movs	r2, #14
 8000fba:	490e      	ldr	r1, [pc, #56]	@ (8000ff4 <HAL_UART_RxCpltCallback+0xfc>)
 8000fbc:	4815      	ldr	r0, [pc, #84]	@ (8001014 <HAL_UART_RxCpltCallback+0x11c>)
 8000fbe:	f002 ff3c 	bl	8003e3a <HAL_UART_Receive_IT>
}
 8000fc2:	e010      	b.n	8000fe6 <HAL_UART_RxCpltCallback+0xee>
    else if (huart->Instance == USART3) { // NOS Response (USART3)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <HAL_UART_RxCpltCallback+0x120>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10b      	bne.n	8000fe6 <HAL_UART_RxCpltCallback+0xee>
        intresponseData = atoi(&responseData);
 8000fce:	4813      	ldr	r0, [pc, #76]	@ (800101c <HAL_UART_RxCpltCallback+0x124>)
 8000fd0:	f003 fe13 	bl	8004bfa <atoi>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <HAL_UART_RxCpltCallback+0x128>)
 8000fda:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart3, &responseData, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	490f      	ldr	r1, [pc, #60]	@ (800101c <HAL_UART_RxCpltCallback+0x124>)
 8000fe0:	4810      	ldr	r0, [pc, #64]	@ (8001024 <HAL_UART_RxCpltCallback+0x12c>)
 8000fe2:	f002 ff2a 	bl	8003e3a <HAL_UART_Receive_IT>
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40013800 	.word	0x40013800
 8000ff4:	20001cb8 	.word	0x20001cb8
 8000ff8:	20001cc8 	.word	0x20001cc8
 8000ffc:	20001ce7 	.word	0x20001ce7
 8001000:	08005684 	.word	0x08005684
 8001004:	20001cd8 	.word	0x20001cd8
 8001008:	20001ce6 	.word	0x20001ce6
 800100c:	20001de0 	.word	0x20001de0
 8001010:	40004400 	.word	0x40004400
 8001014:	20001e28 	.word	0x20001e28
 8001018:	40004800 	.word	0x40004800
 800101c:	20001ce8 	.word	0x20001ce8
 8001020:	20001ce9 	.word	0x20001ce9
 8001024:	20001e70 	.word	0x20001e70

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <Error_Handler+0x8>

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <HAL_MspInit+0x5c>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <HAL_MspInit+0x5c>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6193      	str	r3, [r2, #24]
 8001046:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_MspInit+0x5c>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <HAL_MspInit+0x5c>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a0e      	ldr	r2, [pc, #56]	@ (8001090 <HAL_MspInit+0x5c>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800105c:	61d3      	str	r3, [r2, #28]
 800105e:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <HAL_MspInit+0x5c>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <HAL_MspInit+0x60>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <HAL_MspInit+0x60>)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000
 8001094:	40010000 	.word	0x40010000

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <NMI_Handler+0x4>

080010a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <MemManage_Handler+0x4>

080010b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <UsageFault_Handler+0x4>

080010c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e8:	f000 fbbc 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80010f4:	2004      	movs	r0, #4
 80010f6:	f001 f941 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}

080010fe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit2_Pin);
 8001102:	2008      	movs	r0, #8
 8001104:	f001 f93a 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <DMA1_Channel6_IRQHandler+0x10>)
 8001112:	f000 fe63 	bl	8001ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20001d9c 	.word	0x20001d9c

08001120 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <USART1_IRQHandler+0x10>)
 8001126:	f002 fead 	bl	8003e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20001de0 	.word	0x20001de0

08001134 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001138:	4802      	ldr	r0, [pc, #8]	@ (8001144 <USART2_IRQHandler+0x10>)
 800113a:	f002 fea3 	bl	8003e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20001e28 	.word	0x20001e28

08001148 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <USART3_IRQHandler+0x10>)
 800114e:	f002 fe99 	bl	8003e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20001e70 	.word	0x20001e70

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f003 fde6 	bl	8004d5c <__errno>
 8001190:	4603      	mov	r3, r0
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	@ (80011c0 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20005000 	.word	0x20005000
 80011bc:	00000400 	.word	0x00000400
 80011c0:	20001d08 	.word	0x20001d08
 80011c4:	20002008 	.word	0x20002008

080011c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	@ 0x28
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011da:	f107 0320 	add.w	r3, r7, #32
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f6:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <MX_TIM3_Init+0xac>)
 80011f8:	4a22      	ldr	r2, [pc, #136]	@ (8001284 <MX_TIM3_Init+0xb0>)
 80011fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011fc:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <MX_TIM3_Init+0xac>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <MX_TIM3_Init+0xac>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001208:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <MX_TIM3_Init+0xac>)
 800120a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800120e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <MX_TIM3_Init+0xac>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001216:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <MX_TIM3_Init+0xac>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800121c:	4818      	ldr	r0, [pc, #96]	@ (8001280 <MX_TIM3_Init+0xac>)
 800121e:	f001 fd6f 	bl	8002d00 <HAL_TIM_PWM_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001228:	f7ff fefe 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001234:	f107 0320 	add.w	r3, r7, #32
 8001238:	4619      	mov	r1, r3
 800123a:	4811      	ldr	r0, [pc, #68]	@ (8001280 <MX_TIM3_Init+0xac>)
 800123c:	f002 fd1a 	bl	8003c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001246:	f7ff feef 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124a:	2360      	movs	r3, #96	@ 0x60
 800124c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	4807      	ldr	r0, [pc, #28]	@ (8001280 <MX_TIM3_Init+0xac>)
 8001262:	f001 ffe1 	bl	8003228 <HAL_TIM_PWM_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800126c:	f7ff fedc 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001270:	4803      	ldr	r0, [pc, #12]	@ (8001280 <MX_TIM3_Init+0xac>)
 8001272:	f000 f8ed 	bl	8001450 <HAL_TIM_MspPostInit>

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	@ 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20001d0c 	.word	0x20001d0c
 8001284:	40000400 	.word	0x40000400

08001288 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08e      	sub	sp, #56	@ 0x38
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
 80012b4:	615a      	str	r2, [r3, #20]
 80012b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012b8:	4b2c      	ldr	r3, [pc, #176]	@ (800136c <MX_TIM4_Init+0xe4>)
 80012ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001370 <MX_TIM4_Init+0xe8>)
 80012bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012be:	4b2b      	ldr	r3, [pc, #172]	@ (800136c <MX_TIM4_Init+0xe4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b29      	ldr	r3, [pc, #164]	@ (800136c <MX_TIM4_Init+0xe4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80012ca:	4b28      	ldr	r3, [pc, #160]	@ (800136c <MX_TIM4_Init+0xe4>)
 80012cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b26      	ldr	r3, [pc, #152]	@ (800136c <MX_TIM4_Init+0xe4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b24      	ldr	r3, [pc, #144]	@ (800136c <MX_TIM4_Init+0xe4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012de:	4823      	ldr	r0, [pc, #140]	@ (800136c <MX_TIM4_Init+0xe4>)
 80012e0:	f001 fc74 	bl	8002bcc <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80012ea:	f7ff fe9d 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012f8:	4619      	mov	r1, r3
 80012fa:	481c      	ldr	r0, [pc, #112]	@ (800136c <MX_TIM4_Init+0xe4>)
 80012fc:	f002 f856 	bl	80033ac <HAL_TIM_ConfigClockSource>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001306:	f7ff fe8f 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800130a:	4818      	ldr	r0, [pc, #96]	@ (800136c <MX_TIM4_Init+0xe4>)
 800130c:	f001 fcf8 	bl	8002d00 <HAL_TIM_PWM_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001316:	f7ff fe87 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	4619      	mov	r1, r3
 8001328:	4810      	ldr	r0, [pc, #64]	@ (800136c <MX_TIM4_Init+0xe4>)
 800132a:	f002 fca3 	bl	8003c74 <HAL_TIMEx_MasterConfigSynchronization>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001334:	f7ff fe78 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001338:	2360      	movs	r3, #96	@ 0x60
 800133a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	4619      	mov	r1, r3
 800134e:	4807      	ldr	r0, [pc, #28]	@ (800136c <MX_TIM4_Init+0xe4>)
 8001350:	f001 ff6a 	bl	8003228 <HAL_TIM_PWM_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800135a:	f7ff fe65 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800135e:	4803      	ldr	r0, [pc, #12]	@ (800136c <MX_TIM4_Init+0xe4>)
 8001360:	f000 f876 	bl	8001450 <HAL_TIM_MspPostInit>

}
 8001364:	bf00      	nop
 8001366:	3738      	adds	r7, #56	@ 0x38
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20001d54 	.word	0x20001d54
 8001370:	40000800 	.word	0x40000800

08001374 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a20      	ldr	r2, [pc, #128]	@ (8001404 <HAL_TIM_PWM_MspInit+0x90>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d139      	bne.n	80013fa <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001386:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <HAL_TIM_PWM_MspInit+0x94>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a1f      	ldr	r2, [pc, #124]	@ (8001408 <HAL_TIM_PWM_MspInit+0x94>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <HAL_TIM_PWM_MspInit+0x94>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 800139e:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <HAL_TIM_PWM_MspInit+0x98>)
 80013a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001410 <HAL_TIM_PWM_MspInit+0x9c>)
 80013a2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013a4:	4b19      	ldr	r3, [pc, #100]	@ (800140c <HAL_TIM_PWM_MspInit+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80013aa:	4b18      	ldr	r3, [pc, #96]	@ (800140c <HAL_TIM_PWM_MspInit+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80013b0:	4b16      	ldr	r3, [pc, #88]	@ (800140c <HAL_TIM_PWM_MspInit+0x98>)
 80013b2:	2280      	movs	r2, #128	@ 0x80
 80013b4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <HAL_TIM_PWM_MspInit+0x98>)
 80013b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013bc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013be:	4b13      	ldr	r3, [pc, #76]	@ (800140c <HAL_TIM_PWM_MspInit+0x98>)
 80013c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013c4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80013c6:	4b11      	ldr	r3, [pc, #68]	@ (800140c <HAL_TIM_PWM_MspInit+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <HAL_TIM_PWM_MspInit+0x98>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80013d2:	480e      	ldr	r0, [pc, #56]	@ (800140c <HAL_TIM_PWM_MspInit+0x98>)
 80013d4:	f000 fb94 	bl	8001b00 <HAL_DMA_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 80013de:	f7ff fe23 	bl	8001028 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a09      	ldr	r2, [pc, #36]	@ (800140c <HAL_TIM_PWM_MspInit+0x98>)
 80013e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80013e8:	4a08      	ldr	r2, [pc, #32]	@ (800140c <HAL_TIM_PWM_MspInit+0x98>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a06      	ldr	r2, [pc, #24]	@ (800140c <HAL_TIM_PWM_MspInit+0x98>)
 80013f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80013f4:	4a05      	ldr	r2, [pc, #20]	@ (800140c <HAL_TIM_PWM_MspInit+0x98>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40000400 	.word	0x40000400
 8001408:	40021000 	.word	0x40021000
 800140c:	20001d9c 	.word	0x20001d9c
 8001410:	4002006c 	.word	0x4002006c

08001414 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <HAL_TIM_Base_MspInit+0x34>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d10b      	bne.n	800143e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <HAL_TIM_Base_MspInit+0x38>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	4a08      	ldr	r2, [pc, #32]	@ (800144c <HAL_TIM_Base_MspInit+0x38>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	61d3      	str	r3, [r2, #28]
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_TIM_Base_MspInit+0x38>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	40000800 	.word	0x40000800
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a1e      	ldr	r2, [pc, #120]	@ (80014e4 <HAL_TIM_MspPostInit+0x94>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d118      	bne.n	80014a2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b1d      	ldr	r3, [pc, #116]	@ (80014e8 <HAL_TIM_MspPostInit+0x98>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a1c      	ldr	r2, [pc, #112]	@ (80014e8 <HAL_TIM_MspPostInit+0x98>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <HAL_TIM_MspPostInit+0x98>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001488:	2340      	movs	r3, #64	@ 0x40
 800148a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2302      	movs	r3, #2
 8001492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	4619      	mov	r1, r3
 800149a:	4814      	ldr	r0, [pc, #80]	@ (80014ec <HAL_TIM_MspPostInit+0x9c>)
 800149c:	f000 fdd2 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014a0:	e01c      	b.n	80014dc <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM4)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <HAL_TIM_MspPostInit+0xa0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d117      	bne.n	80014dc <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ac:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <HAL_TIM_MspPostInit+0x98>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a0d      	ldr	r2, [pc, #52]	@ (80014e8 <HAL_TIM_MspPostInit+0x98>)
 80014b2:	f043 0308 	orr.w	r3, r3, #8
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_TIM_MspPostInit+0x98>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014c4:	2340      	movs	r3, #64	@ 0x40
 80014c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	4619      	mov	r1, r3
 80014d6:	4807      	ldr	r0, [pc, #28]	@ (80014f4 <HAL_TIM_MspPostInit+0xa4>)
 80014d8:	f000 fdb4 	bl	8002044 <HAL_GPIO_Init>
}
 80014dc:	bf00      	nop
 80014de:	3720      	adds	r7, #32
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40000400 	.word	0x40000400
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010800 	.word	0x40010800
 80014f0:	40000800 	.word	0x40000800
 80014f4:	40010c00 	.word	0x40010c00

080014f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MX_USART1_UART_Init+0x4c>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	@ (8001548 <MX_USART1_UART_Init+0x50>)
 8001500:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <MX_USART1_UART_Init+0x4c>)
 8001504:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001508:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <MX_USART1_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <MX_USART1_UART_Init+0x4c>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <MX_USART1_UART_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800151c:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <MX_USART1_UART_Init+0x4c>)
 800151e:	220c      	movs	r2, #12
 8001520:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001522:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <MX_USART1_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <MX_USART1_UART_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_USART1_UART_Init+0x4c>)
 8001530:	f002 fbfe 	bl	8003d30 <HAL_UART_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800153a:	f7ff fd75 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20001de0 	.word	0x20001de0
 8001548:	40013800 	.word	0x40013800

0800154c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <MX_USART2_UART_Init+0x4c>)
 8001552:	4a12      	ldr	r2, [pc, #72]	@ (800159c <MX_USART2_UART_Init+0x50>)
 8001554:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <MX_USART2_UART_Init+0x4c>)
 8001558:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800155c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <MX_USART2_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <MX_USART2_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <MX_USART2_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <MX_USART2_UART_Init+0x4c>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <MX_USART2_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <MX_USART2_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	@ (8001598 <MX_USART2_UART_Init+0x4c>)
 8001584:	f002 fbd4 	bl	8003d30 <HAL_UART_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800158e:	f7ff fd4b 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20001e28 	.word	0x20001e28
 800159c:	40004400 	.word	0x40004400

080015a0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <MX_USART3_UART_Init+0x50>)
 80015a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015d8:	f002 fbaa 	bl	8003d30 <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015e2:	f7ff fd21 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20001e70 	.word	0x20001e70
 80015f0:	40004800 	.word	0x40004800

080015f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08c      	sub	sp, #48	@ 0x30
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0320 	add.w	r3, r7, #32
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a59      	ldr	r2, [pc, #356]	@ (8001774 <HAL_UART_MspInit+0x180>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d13a      	bne.n	800168a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001614:	4b58      	ldr	r3, [pc, #352]	@ (8001778 <HAL_UART_MspInit+0x184>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a57      	ldr	r2, [pc, #348]	@ (8001778 <HAL_UART_MspInit+0x184>)
 800161a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b55      	ldr	r3, [pc, #340]	@ (8001778 <HAL_UART_MspInit+0x184>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162c:	4b52      	ldr	r3, [pc, #328]	@ (8001778 <HAL_UART_MspInit+0x184>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a51      	ldr	r2, [pc, #324]	@ (8001778 <HAL_UART_MspInit+0x184>)
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b4f      	ldr	r3, [pc, #316]	@ (8001778 <HAL_UART_MspInit+0x184>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001644:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0320 	add.w	r3, r7, #32
 8001656:	4619      	mov	r1, r3
 8001658:	4848      	ldr	r0, [pc, #288]	@ (800177c <HAL_UART_MspInit+0x188>)
 800165a:	f000 fcf3 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800165e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 0320 	add.w	r3, r7, #32
 8001670:	4619      	mov	r1, r3
 8001672:	4842      	ldr	r0, [pc, #264]	@ (800177c <HAL_UART_MspInit+0x188>)
 8001674:	f000 fce6 	bl	8002044 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	2025      	movs	r0, #37	@ 0x25
 800167e:	f000 fa08 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001682:	2025      	movs	r0, #37	@ 0x25
 8001684:	f000 fa21 	bl	8001aca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001688:	e070      	b.n	800176c <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART2)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a3c      	ldr	r2, [pc, #240]	@ (8001780 <HAL_UART_MspInit+0x18c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d12c      	bne.n	80016ee <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001694:	4b38      	ldr	r3, [pc, #224]	@ (8001778 <HAL_UART_MspInit+0x184>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	4a37      	ldr	r2, [pc, #220]	@ (8001778 <HAL_UART_MspInit+0x184>)
 800169a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800169e:	61d3      	str	r3, [r2, #28]
 80016a0:	4b35      	ldr	r3, [pc, #212]	@ (8001778 <HAL_UART_MspInit+0x184>)
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b32      	ldr	r3, [pc, #200]	@ (8001778 <HAL_UART_MspInit+0x184>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a31      	ldr	r2, [pc, #196]	@ (8001778 <HAL_UART_MspInit+0x184>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001778 <HAL_UART_MspInit+0x184>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016c4:	230c      	movs	r3, #12
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2302      	movs	r3, #2
 80016ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	4619      	mov	r1, r3
 80016d6:	4829      	ldr	r0, [pc, #164]	@ (800177c <HAL_UART_MspInit+0x188>)
 80016d8:	f000 fcb4 	bl	8002044 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	2026      	movs	r0, #38	@ 0x26
 80016e2:	f000 f9d6 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016e6:	2026      	movs	r0, #38	@ 0x26
 80016e8:	f000 f9ef 	bl	8001aca <HAL_NVIC_EnableIRQ>
}
 80016ec:	e03e      	b.n	800176c <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART3)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a24      	ldr	r2, [pc, #144]	@ (8001784 <HAL_UART_MspInit+0x190>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d139      	bne.n	800176c <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001778 <HAL_UART_MspInit+0x184>)
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001778 <HAL_UART_MspInit+0x184>)
 80016fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001702:	61d3      	str	r3, [r2, #28]
 8001704:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <HAL_UART_MspInit+0x184>)
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001710:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <HAL_UART_MspInit+0x184>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a18      	ldr	r2, [pc, #96]	@ (8001778 <HAL_UART_MspInit+0x184>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <HAL_UART_MspInit+0x184>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	4619      	mov	r1, r3
 800173c:	4812      	ldr	r0, [pc, #72]	@ (8001788 <HAL_UART_MspInit+0x194>)
 800173e:	f000 fc81 	bl	8002044 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001742:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	4619      	mov	r1, r3
 8001756:	480c      	ldr	r0, [pc, #48]	@ (8001788 <HAL_UART_MspInit+0x194>)
 8001758:	f000 fc74 	bl	8002044 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	2027      	movs	r0, #39	@ 0x27
 8001762:	f000 f996 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001766:	2027      	movs	r0, #39	@ 0x27
 8001768:	f000 f9af 	bl	8001aca <HAL_NVIC_EnableIRQ>
}
 800176c:	bf00      	nop
 800176e:	3730      	adds	r7, #48	@ 0x30
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40013800 	.word	0x40013800
 8001778:	40021000 	.word	0x40021000
 800177c:	40010800 	.word	0x40010800
 8001780:	40004400 	.word	0x40004400
 8001784:	40004800 	.word	0x40004800
 8001788:	40010c00 	.word	0x40010c00

0800178c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800178c:	f7ff fd1c 	bl	80011c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001790:	480b      	ldr	r0, [pc, #44]	@ (80017c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001792:	490c      	ldr	r1, [pc, #48]	@ (80017c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001794:	4a0c      	ldr	r2, [pc, #48]	@ (80017c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a09      	ldr	r2, [pc, #36]	@ (80017cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017a8:	4c09      	ldr	r4, [pc, #36]	@ (80017d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b6:	f003 fad7 	bl	8004d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ba:	f7ff faed 	bl	8000d98 <main>
  bx lr
 80017be:	4770      	bx	lr
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80017c8:	080058f8 	.word	0x080058f8
  ldr r2, =_sbss
 80017cc:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80017d0:	20002004 	.word	0x20002004

080017d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC1_2_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017dc:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <HAL_Init+0x28>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a07      	ldr	r2, [pc, #28]	@ (8001800 <HAL_Init+0x28>)
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 f947 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ee:	2000      	movs	r0, #0
 80017f0:	f000 f808 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f4:	f7ff fc1e 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40022000 	.word	0x40022000

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_InitTick+0x54>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b12      	ldr	r3, [pc, #72]	@ (800185c <HAL_InitTick+0x58>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f95f 	bl	8001ae6 <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00e      	b.n	8001850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80a      	bhi.n	800184e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001840:	f000 f927 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4a06      	ldr	r2, [pc, #24]	@ (8001860 <HAL_InitTick+0x5c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2000012c 	.word	0x2000012c
 800185c:	20000134 	.word	0x20000134
 8001860:	20000130 	.word	0x20000130

08001864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <HAL_IncTick+0x1c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_IncTick+0x20>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a03      	ldr	r2, [pc, #12]	@ (8001884 <HAL_IncTick+0x20>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	20000134 	.word	0x20000134
 8001884:	20001eb8 	.word	0x20001eb8

08001888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b02      	ldr	r3, [pc, #8]	@ (8001898 <HAL_GetTick+0x10>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	20001eb8 	.word	0x20001eb8

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff fff0 	bl	8001888 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018b4:	d005      	beq.n	80018c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b6:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <HAL_Delay+0x44>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018c2:	bf00      	nop
 80018c4:	f7ff ffe0 	bl	8001888 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8f7      	bhi.n	80018c4 <HAL_Delay+0x28>
  {
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000134 	.word	0x20000134

080018e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800190c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	2b00      	cmp	r3, #0
 8001958:	db0b      	blt.n	8001972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	4906      	ldr	r1, [pc, #24]	@ (800197c <__NVIC_EnableIRQ+0x34>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	2001      	movs	r0, #1
 800196a:	fa00 f202 	lsl.w	r2, r0, r2
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	@ (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	@ (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	@ 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	@ 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a5c:	f7ff ff90 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff2d 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff42 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff90 	bl	80019d4 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5f 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff35 	bl	8001948 <__NVIC_EnableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffa2 	bl	8001a38 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e043      	b.n	8001b9e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ba8 <HAL_DMA_Init+0xa8>)
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a22      	ldr	r2, [pc, #136]	@ (8001bac <HAL_DMA_Init+0xac>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	091b      	lsrs	r3, r3, #4
 8001b28:	009a      	lsls	r2, r3, #2
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb0 <HAL_DMA_Init+0xb0>)
 8001b32:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b4a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001b4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	bffdfff8 	.word	0xbffdfff8
 8001bac:	cccccccd 	.word	0xcccccccd
 8001bb0:	40020000 	.word	0x40020000

08001bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_DMA_Start_IT+0x20>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e04b      	b.n	8001c6c <HAL_DMA_Start_IT+0xb8>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d13a      	bne.n	8001c5e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0201 	bic.w	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	68b9      	ldr	r1, [r7, #8]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 f9eb 	bl	8001fe8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d008      	beq.n	8001c2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 020e 	orr.w	r2, r2, #14
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	e00f      	b.n	8001c4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0204 	bic.w	r2, r2, #4
 8001c3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 020a 	orr.w	r2, r2, #10
 8001c4a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e005      	b.n	8001c6a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c66:	2302      	movs	r3, #2
 8001c68:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d008      	beq.n	8001c9e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2204      	movs	r2, #4
 8001c90:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e020      	b.n	8001ce0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 020e 	bic.w	r2, r2, #14
 8001cac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ccc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d005      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2204      	movs	r2, #4
 8001d08:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	e051      	b.n	8001db4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 020e 	bic.w	r2, r2, #14
 8001d1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a22      	ldr	r2, [pc, #136]	@ (8001dc0 <HAL_DMA_Abort_IT+0xd4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d029      	beq.n	8001d8e <HAL_DMA_Abort_IT+0xa2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a21      	ldr	r2, [pc, #132]	@ (8001dc4 <HAL_DMA_Abort_IT+0xd8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d022      	beq.n	8001d8a <HAL_DMA_Abort_IT+0x9e>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc8 <HAL_DMA_Abort_IT+0xdc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01a      	beq.n	8001d84 <HAL_DMA_Abort_IT+0x98>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a1e      	ldr	r2, [pc, #120]	@ (8001dcc <HAL_DMA_Abort_IT+0xe0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d012      	beq.n	8001d7e <HAL_DMA_Abort_IT+0x92>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd0 <HAL_DMA_Abort_IT+0xe4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00a      	beq.n	8001d78 <HAL_DMA_Abort_IT+0x8c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd4 <HAL_DMA_Abort_IT+0xe8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d102      	bne.n	8001d72 <HAL_DMA_Abort_IT+0x86>
 8001d6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d70:	e00e      	b.n	8001d90 <HAL_DMA_Abort_IT+0xa4>
 8001d72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d76:	e00b      	b.n	8001d90 <HAL_DMA_Abort_IT+0xa4>
 8001d78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d7c:	e008      	b.n	8001d90 <HAL_DMA_Abort_IT+0xa4>
 8001d7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d82:	e005      	b.n	8001d90 <HAL_DMA_Abort_IT+0xa4>
 8001d84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d88:	e002      	b.n	8001d90 <HAL_DMA_Abort_IT+0xa4>
 8001d8a:	2310      	movs	r3, #16
 8001d8c:	e000      	b.n	8001d90 <HAL_DMA_Abort_IT+0xa4>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	4a11      	ldr	r2, [pc, #68]	@ (8001dd8 <HAL_DMA_Abort_IT+0xec>)
 8001d92:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	4798      	blx	r3
    } 
  }
  return status;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40020008 	.word	0x40020008
 8001dc4:	4002001c 	.word	0x4002001c
 8001dc8:	40020030 	.word	0x40020030
 8001dcc:	40020044 	.word	0x40020044
 8001dd0:	40020058 	.word	0x40020058
 8001dd4:	4002006c 	.word	0x4002006c
 8001dd8:	40020000 	.word	0x40020000

08001ddc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	2204      	movs	r2, #4
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d04f      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xc8>
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d04a      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0204 	bic.w	r2, r2, #4
 8001e2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a66      	ldr	r2, [pc, #408]	@ (8001fcc <HAL_DMA_IRQHandler+0x1f0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d029      	beq.n	8001e8a <HAL_DMA_IRQHandler+0xae>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a65      	ldr	r2, [pc, #404]	@ (8001fd0 <HAL_DMA_IRQHandler+0x1f4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d022      	beq.n	8001e86 <HAL_DMA_IRQHandler+0xaa>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a63      	ldr	r2, [pc, #396]	@ (8001fd4 <HAL_DMA_IRQHandler+0x1f8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01a      	beq.n	8001e80 <HAL_DMA_IRQHandler+0xa4>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a62      	ldr	r2, [pc, #392]	@ (8001fd8 <HAL_DMA_IRQHandler+0x1fc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d012      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x9e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a60      	ldr	r2, [pc, #384]	@ (8001fdc <HAL_DMA_IRQHandler+0x200>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00a      	beq.n	8001e74 <HAL_DMA_IRQHandler+0x98>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a5f      	ldr	r2, [pc, #380]	@ (8001fe0 <HAL_DMA_IRQHandler+0x204>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d102      	bne.n	8001e6e <HAL_DMA_IRQHandler+0x92>
 8001e68:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e6c:	e00e      	b.n	8001e8c <HAL_DMA_IRQHandler+0xb0>
 8001e6e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001e72:	e00b      	b.n	8001e8c <HAL_DMA_IRQHandler+0xb0>
 8001e74:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001e78:	e008      	b.n	8001e8c <HAL_DMA_IRQHandler+0xb0>
 8001e7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e7e:	e005      	b.n	8001e8c <HAL_DMA_IRQHandler+0xb0>
 8001e80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e84:	e002      	b.n	8001e8c <HAL_DMA_IRQHandler+0xb0>
 8001e86:	2340      	movs	r3, #64	@ 0x40
 8001e88:	e000      	b.n	8001e8c <HAL_DMA_IRQHandler+0xb0>
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	4a55      	ldr	r2, [pc, #340]	@ (8001fe4 <HAL_DMA_IRQHandler+0x208>)
 8001e8e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 8094 	beq.w	8001fc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001ea2:	e08e      	b.n	8001fc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d056      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x186>
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d051      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10b      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 020a 	bic.w	r2, r2, #10
 8001eda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a38      	ldr	r2, [pc, #224]	@ (8001fcc <HAL_DMA_IRQHandler+0x1f0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d029      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x166>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a37      	ldr	r2, [pc, #220]	@ (8001fd0 <HAL_DMA_IRQHandler+0x1f4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d022      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x162>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a35      	ldr	r2, [pc, #212]	@ (8001fd4 <HAL_DMA_IRQHandler+0x1f8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d01a      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x15c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a34      	ldr	r2, [pc, #208]	@ (8001fd8 <HAL_DMA_IRQHandler+0x1fc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d012      	beq.n	8001f32 <HAL_DMA_IRQHandler+0x156>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a32      	ldr	r2, [pc, #200]	@ (8001fdc <HAL_DMA_IRQHandler+0x200>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00a      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x150>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a31      	ldr	r2, [pc, #196]	@ (8001fe0 <HAL_DMA_IRQHandler+0x204>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d102      	bne.n	8001f26 <HAL_DMA_IRQHandler+0x14a>
 8001f20:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f24:	e00e      	b.n	8001f44 <HAL_DMA_IRQHandler+0x168>
 8001f26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f2a:	e00b      	b.n	8001f44 <HAL_DMA_IRQHandler+0x168>
 8001f2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f30:	e008      	b.n	8001f44 <HAL_DMA_IRQHandler+0x168>
 8001f32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f36:	e005      	b.n	8001f44 <HAL_DMA_IRQHandler+0x168>
 8001f38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f3c:	e002      	b.n	8001f44 <HAL_DMA_IRQHandler+0x168>
 8001f3e:	2320      	movs	r3, #32
 8001f40:	e000      	b.n	8001f44 <HAL_DMA_IRQHandler+0x168>
 8001f42:	2302      	movs	r3, #2
 8001f44:	4a27      	ldr	r2, [pc, #156]	@ (8001fe4 <HAL_DMA_IRQHandler+0x208>)
 8001f46:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d034      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f60:	e02f      	b.n	8001fc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	2208      	movs	r2, #8
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d028      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x1e8>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d023      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 020e 	bic.w	r2, r2, #14
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d004      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
    }
  }
  return;
 8001fc2:	bf00      	nop
 8001fc4:	bf00      	nop
}
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40020008 	.word	0x40020008
 8001fd0:	4002001c 	.word	0x4002001c
 8001fd4:	40020030 	.word	0x40020030
 8001fd8:	40020044 	.word	0x40020044
 8001fdc:	40020058 	.word	0x40020058
 8001fe0:	4002006c 	.word	0x4002006c
 8001fe4:	40020000 	.word	0x40020000

08001fe8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffe:	2101      	movs	r1, #1
 8002000:	fa01 f202 	lsl.w	r2, r1, r2
 8002004:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b10      	cmp	r3, #16
 8002014:	d108      	bne.n	8002028 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002026:	e007      	b.n	8002038 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	60da      	str	r2, [r3, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
	...

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b08b      	sub	sp, #44	@ 0x2c
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002056:	e169      	b.n	800232c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002058:	2201      	movs	r2, #1
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	429a      	cmp	r2, r3
 8002072:	f040 8158 	bne.w	8002326 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4a9a      	ldr	r2, [pc, #616]	@ (80022e4 <HAL_GPIO_Init+0x2a0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d05e      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 8002080:	4a98      	ldr	r2, [pc, #608]	@ (80022e4 <HAL_GPIO_Init+0x2a0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d875      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 8002086:	4a98      	ldr	r2, [pc, #608]	@ (80022e8 <HAL_GPIO_Init+0x2a4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d058      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 800208c:	4a96      	ldr	r2, [pc, #600]	@ (80022e8 <HAL_GPIO_Init+0x2a4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d86f      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 8002092:	4a96      	ldr	r2, [pc, #600]	@ (80022ec <HAL_GPIO_Init+0x2a8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d052      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 8002098:	4a94      	ldr	r2, [pc, #592]	@ (80022ec <HAL_GPIO_Init+0x2a8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d869      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 800209e:	4a94      	ldr	r2, [pc, #592]	@ (80022f0 <HAL_GPIO_Init+0x2ac>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d04c      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 80020a4:	4a92      	ldr	r2, [pc, #584]	@ (80022f0 <HAL_GPIO_Init+0x2ac>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d863      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020aa:	4a92      	ldr	r2, [pc, #584]	@ (80022f4 <HAL_GPIO_Init+0x2b0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d046      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 80020b0:	4a90      	ldr	r2, [pc, #576]	@ (80022f4 <HAL_GPIO_Init+0x2b0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d85d      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020b6:	2b12      	cmp	r3, #18
 80020b8:	d82a      	bhi.n	8002110 <HAL_GPIO_Init+0xcc>
 80020ba:	2b12      	cmp	r3, #18
 80020bc:	d859      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020be:	a201      	add	r2, pc, #4	@ (adr r2, 80020c4 <HAL_GPIO_Init+0x80>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	0800213f 	.word	0x0800213f
 80020c8:	08002119 	.word	0x08002119
 80020cc:	0800212b 	.word	0x0800212b
 80020d0:	0800216d 	.word	0x0800216d
 80020d4:	08002173 	.word	0x08002173
 80020d8:	08002173 	.word	0x08002173
 80020dc:	08002173 	.word	0x08002173
 80020e0:	08002173 	.word	0x08002173
 80020e4:	08002173 	.word	0x08002173
 80020e8:	08002173 	.word	0x08002173
 80020ec:	08002173 	.word	0x08002173
 80020f0:	08002173 	.word	0x08002173
 80020f4:	08002173 	.word	0x08002173
 80020f8:	08002173 	.word	0x08002173
 80020fc:	08002173 	.word	0x08002173
 8002100:	08002173 	.word	0x08002173
 8002104:	08002173 	.word	0x08002173
 8002108:	08002121 	.word	0x08002121
 800210c:	08002135 	.word	0x08002135
 8002110:	4a79      	ldr	r2, [pc, #484]	@ (80022f8 <HAL_GPIO_Init+0x2b4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002116:	e02c      	b.n	8002172 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	623b      	str	r3, [r7, #32]
          break;
 800211e:	e029      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	3304      	adds	r3, #4
 8002126:	623b      	str	r3, [r7, #32]
          break;
 8002128:	e024      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	3308      	adds	r3, #8
 8002130:	623b      	str	r3, [r7, #32]
          break;
 8002132:	e01f      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	330c      	adds	r3, #12
 800213a:	623b      	str	r3, [r7, #32]
          break;
 800213c:	e01a      	b.n	8002174 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002146:	2304      	movs	r3, #4
 8002148:	623b      	str	r3, [r7, #32]
          break;
 800214a:	e013      	b.n	8002174 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002154:	2308      	movs	r3, #8
 8002156:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	611a      	str	r2, [r3, #16]
          break;
 800215e:	e009      	b.n	8002174 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002160:	2308      	movs	r3, #8
 8002162:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	615a      	str	r2, [r3, #20]
          break;
 800216a:	e003      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
          break;
 8002170:	e000      	b.n	8002174 <HAL_GPIO_Init+0x130>
          break;
 8002172:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2bff      	cmp	r3, #255	@ 0xff
 8002178:	d801      	bhi.n	800217e <HAL_GPIO_Init+0x13a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	e001      	b.n	8002182 <HAL_GPIO_Init+0x13e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3304      	adds	r3, #4
 8002182:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2bff      	cmp	r3, #255	@ 0xff
 8002188:	d802      	bhi.n	8002190 <HAL_GPIO_Init+0x14c>
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	e002      	b.n	8002196 <HAL_GPIO_Init+0x152>
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	3b08      	subs	r3, #8
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	210f      	movs	r1, #15
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	401a      	ands	r2, r3
 80021a8:	6a39      	ldr	r1, [r7, #32]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	431a      	orrs	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80b1 	beq.w	8002326 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021c4:	4b4d      	ldr	r3, [pc, #308]	@ (80022fc <HAL_GPIO_Init+0x2b8>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	@ (80022fc <HAL_GPIO_Init+0x2b8>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b4a      	ldr	r3, [pc, #296]	@ (80022fc <HAL_GPIO_Init+0x2b8>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021dc:	4a48      	ldr	r2, [pc, #288]	@ (8002300 <HAL_GPIO_Init+0x2bc>)
 80021de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a40      	ldr	r2, [pc, #256]	@ (8002304 <HAL_GPIO_Init+0x2c0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d013      	beq.n	8002230 <HAL_GPIO_Init+0x1ec>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a3f      	ldr	r2, [pc, #252]	@ (8002308 <HAL_GPIO_Init+0x2c4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00d      	beq.n	800222c <HAL_GPIO_Init+0x1e8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a3e      	ldr	r2, [pc, #248]	@ (800230c <HAL_GPIO_Init+0x2c8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d007      	beq.n	8002228 <HAL_GPIO_Init+0x1e4>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3d      	ldr	r2, [pc, #244]	@ (8002310 <HAL_GPIO_Init+0x2cc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d101      	bne.n	8002224 <HAL_GPIO_Init+0x1e0>
 8002220:	2303      	movs	r3, #3
 8002222:	e006      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002224:	2304      	movs	r3, #4
 8002226:	e004      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002228:	2302      	movs	r3, #2
 800222a:	e002      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002230:	2300      	movs	r3, #0
 8002232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002234:	f002 0203 	and.w	r2, r2, #3
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	4093      	lsls	r3, r2
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002242:	492f      	ldr	r1, [pc, #188]	@ (8002300 <HAL_GPIO_Init+0x2bc>)
 8002244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800225c:	4b2d      	ldr	r3, [pc, #180]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	492c      	ldr	r1, [pc, #176]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800226a:	4b2a      	ldr	r3, [pc, #168]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	43db      	mvns	r3, r3
 8002272:	4928      	ldr	r1, [pc, #160]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 8002274:	4013      	ands	r3, r2
 8002276:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002284:	4b23      	ldr	r3, [pc, #140]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	4922      	ldr	r1, [pc, #136]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	60cb      	str	r3, [r1, #12]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002292:	4b20      	ldr	r3, [pc, #128]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	491e      	ldr	r1, [pc, #120]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 800229c:	4013      	ands	r3, r2
 800229e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022ac:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	4918      	ldr	r1, [pc, #96]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022ba:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4914      	ldr	r1, [pc, #80]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d021      	beq.n	8002318 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	490e      	ldr	r1, [pc, #56]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
 80022e0:	e021      	b.n	8002326 <HAL_GPIO_Init+0x2e2>
 80022e2:	bf00      	nop
 80022e4:	10320000 	.word	0x10320000
 80022e8:	10310000 	.word	0x10310000
 80022ec:	10220000 	.word	0x10220000
 80022f0:	10210000 	.word	0x10210000
 80022f4:	10120000 	.word	0x10120000
 80022f8:	10110000 	.word	0x10110000
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010000 	.word	0x40010000
 8002304:	40010800 	.word	0x40010800
 8002308:	40010c00 	.word	0x40010c00
 800230c:	40011000 	.word	0x40011000
 8002310:	40011400 	.word	0x40011400
 8002314:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_GPIO_Init+0x304>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	43db      	mvns	r3, r3
 8002320:	4909      	ldr	r1, [pc, #36]	@ (8002348 <HAL_GPIO_Init+0x304>)
 8002322:	4013      	ands	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	3301      	adds	r3, #1
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	f47f ae8e 	bne.w	8002058 <HAL_GPIO_Init+0x14>
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	372c      	adds	r7, #44	@ 0x2c
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002368:	e003      	b.n	8002372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	611a      	str	r2, [r3, #16]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002386:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002392:	4a05      	ldr	r2, [pc, #20]	@ (80023a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe fc1e 	bl	8000bdc <HAL_GPIO_EXTI_Callback>
  }
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40010400 	.word	0x40010400

080023ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e272      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8087 	beq.w	80024da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023cc:	4b92      	ldr	r3, [pc, #584]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d00c      	beq.n	80023f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d112      	bne.n	800240a <HAL_RCC_OscConfig+0x5e>
 80023e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f0:	d10b      	bne.n	800240a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f2:	4b89      	ldr	r3, [pc, #548]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d06c      	beq.n	80024d8 <HAL_RCC_OscConfig+0x12c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d168      	bne.n	80024d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e24c      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002412:	d106      	bne.n	8002422 <HAL_RCC_OscConfig+0x76>
 8002414:	4b80      	ldr	r3, [pc, #512]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a7f      	ldr	r2, [pc, #508]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800241a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	e02e      	b.n	8002480 <HAL_RCC_OscConfig+0xd4>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0x98>
 800242a:	4b7b      	ldr	r3, [pc, #492]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a7a      	ldr	r2, [pc, #488]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b78      	ldr	r3, [pc, #480]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a77      	ldr	r2, [pc, #476]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800243c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0xd4>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0xbc>
 800244e:	4b72      	ldr	r3, [pc, #456]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a71      	ldr	r2, [pc, #452]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b6f      	ldr	r3, [pc, #444]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a6e      	ldr	r2, [pc, #440]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0xd4>
 8002468:	4b6b      	ldr	r3, [pc, #428]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a6a      	ldr	r2, [pc, #424]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b68      	ldr	r3, [pc, #416]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a67      	ldr	r2, [pc, #412]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800247e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff f9fe 	bl	8001888 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff f9fa 	bl	8001888 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	@ 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e200      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0xe4>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff f9ea 	bl	8001888 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff f9e6 	bl	8001888 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	@ 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1ec      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	4b53      	ldr	r3, [pc, #332]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x10c>
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d063      	beq.n	80025ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024f2:	4b49      	ldr	r3, [pc, #292]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d11c      	bne.n	8002538 <HAL_RCC_OscConfig+0x18c>
 80024fe:	4b46      	ldr	r3, [pc, #280]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d116      	bne.n	8002538 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	4b43      	ldr	r3, [pc, #268]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_RCC_OscConfig+0x176>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e1c0      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002522:	4b3d      	ldr	r3, [pc, #244]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4939      	ldr	r1, [pc, #228]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	e03a      	b.n	80025ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002540:	4b36      	ldr	r3, [pc, #216]	@ (800261c <HAL_RCC_OscConfig+0x270>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7ff f99f 	bl	8001888 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254e:	f7ff f99b 	bl	8001888 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e1a1      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	4b2d      	ldr	r3, [pc, #180]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b2a      	ldr	r3, [pc, #168]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4927      	ldr	r1, [pc, #156]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
 8002580:	e015      	b.n	80025ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	4b26      	ldr	r3, [pc, #152]	@ (800261c <HAL_RCC_OscConfig+0x270>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff f97e 	bl	8001888 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002590:	f7ff f97a 	bl	8001888 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e180      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d03a      	beq.n	8002630 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d019      	beq.n	80025f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c2:	4b17      	ldr	r3, [pc, #92]	@ (8002620 <HAL_RCC_OscConfig+0x274>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c8:	f7ff f95e 	bl	8001888 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d0:	f7ff f95a 	bl	8001888 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e160      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f000 face 	bl	8002b90 <RCC_Delay>
 80025f4:	e01c      	b.n	8002630 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <HAL_RCC_OscConfig+0x274>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fc:	f7ff f944 	bl	8001888 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002602:	e00f      	b.n	8002624 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002604:	f7ff f940 	bl	8001888 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d908      	bls.n	8002624 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e146      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	42420000 	.word	0x42420000
 8002620:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	4b92      	ldr	r3, [pc, #584]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1e9      	bne.n	8002604 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80a6 	beq.w	800278a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002642:	4b8b      	ldr	r3, [pc, #556]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10d      	bne.n	800266a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	4b88      	ldr	r3, [pc, #544]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	4a87      	ldr	r2, [pc, #540]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002658:	61d3      	str	r3, [r2, #28]
 800265a:	4b85      	ldr	r3, [pc, #532]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002666:	2301      	movs	r3, #1
 8002668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266a:	4b82      	ldr	r3, [pc, #520]	@ (8002874 <HAL_RCC_OscConfig+0x4c8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d118      	bne.n	80026a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002676:	4b7f      	ldr	r3, [pc, #508]	@ (8002874 <HAL_RCC_OscConfig+0x4c8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a7e      	ldr	r2, [pc, #504]	@ (8002874 <HAL_RCC_OscConfig+0x4c8>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002682:	f7ff f901 	bl	8001888 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268a:	f7ff f8fd 	bl	8001888 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b64      	cmp	r3, #100	@ 0x64
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e103      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	4b75      	ldr	r3, [pc, #468]	@ (8002874 <HAL_RCC_OscConfig+0x4c8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x312>
 80026b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6213      	str	r3, [r2, #32]
 80026bc:	e02d      	b.n	800271a <HAL_RCC_OscConfig+0x36e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x334>
 80026c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	4a69      	ldr	r2, [pc, #420]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	6213      	str	r3, [r2, #32]
 80026d2:	4b67      	ldr	r3, [pc, #412]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4a66      	ldr	r2, [pc, #408]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	f023 0304 	bic.w	r3, r3, #4
 80026dc:	6213      	str	r3, [r2, #32]
 80026de:	e01c      	b.n	800271a <HAL_RCC_OscConfig+0x36e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x356>
 80026e8:	4b61      	ldr	r3, [pc, #388]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a60      	ldr	r2, [pc, #384]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6213      	str	r3, [r2, #32]
 80026f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6213      	str	r3, [r2, #32]
 8002700:	e00b      	b.n	800271a <HAL_RCC_OscConfig+0x36e>
 8002702:	4b5b      	ldr	r3, [pc, #364]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4a5a      	ldr	r2, [pc, #360]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	6213      	str	r3, [r2, #32]
 800270e:	4b58      	ldr	r3, [pc, #352]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a57      	ldr	r2, [pc, #348]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d015      	beq.n	800274e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002722:	f7ff f8b1 	bl	8001888 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7ff f8ad 	bl	8001888 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0b1      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	4b4b      	ldr	r3, [pc, #300]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ee      	beq.n	800272a <HAL_RCC_OscConfig+0x37e>
 800274c:	e014      	b.n	8002778 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274e:	f7ff f89b 	bl	8001888 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002754:	e00a      	b.n	800276c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7ff f897 	bl	8001888 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e09b      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276c:	4b40      	ldr	r3, [pc, #256]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ee      	bne.n	8002756 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d105      	bne.n	800278a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277e:	4b3c      	ldr	r3, [pc, #240]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a3b      	ldr	r2, [pc, #236]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002788:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 8087 	beq.w	80028a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002794:	4b36      	ldr	r3, [pc, #216]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b08      	cmp	r3, #8
 800279e:	d061      	beq.n	8002864 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d146      	bne.n	8002836 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a8:	4b33      	ldr	r3, [pc, #204]	@ (8002878 <HAL_RCC_OscConfig+0x4cc>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ae:	f7ff f86b 	bl	8001888 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b6:	f7ff f867 	bl	8001888 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e06d      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c8:	4b29      	ldr	r3, [pc, #164]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027dc:	d108      	bne.n	80027f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027de:	4b24      	ldr	r3, [pc, #144]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	4921      	ldr	r1, [pc, #132]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a19      	ldr	r1, [r3, #32]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	430b      	orrs	r3, r1
 8002802:	491b      	ldr	r1, [pc, #108]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_RCC_OscConfig+0x4cc>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7ff f83b 	bl	8001888 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002816:	f7ff f837 	bl	8001888 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e03d      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002828:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x46a>
 8002834:	e035      	b.n	80028a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <HAL_RCC_OscConfig+0x4cc>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7ff f824 	bl	8001888 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7ff f820 	bl	8001888 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e026      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x498>
 8002862:	e01e      	b.n	80028a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d107      	bne.n	800287c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e019      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
 8002870:	40021000 	.word	0x40021000
 8002874:	40007000 	.word	0x40007000
 8002878:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800287c:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_RCC_OscConfig+0x500>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	429a      	cmp	r2, r3
 800288e:	d106      	bne.n	800289e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d001      	beq.n	80028a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000

080028b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0d0      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d910      	bls.n	80028f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d2:	4b67      	ldr	r3, [pc, #412]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 0207 	bic.w	r2, r3, #7
 80028da:	4965      	ldr	r1, [pc, #404]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b63      	ldr	r3, [pc, #396]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0b8      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d020      	beq.n	8002942 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800290c:	4b59      	ldr	r3, [pc, #356]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4a58      	ldr	r2, [pc, #352]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002916:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002924:	4b53      	ldr	r3, [pc, #332]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a52      	ldr	r2, [pc, #328]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800292e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002930:	4b50      	ldr	r3, [pc, #320]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	494d      	ldr	r1, [pc, #308]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d040      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d107      	bne.n	8002966 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	4b47      	ldr	r3, [pc, #284]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d115      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e07f      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296e:	4b41      	ldr	r3, [pc, #260]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e073      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06b      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800298e:	4b39      	ldr	r3, [pc, #228]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f023 0203 	bic.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4936      	ldr	r1, [pc, #216]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a0:	f7fe ff72 	bl	8001888 <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	e00a      	b.n	80029be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f7fe ff6e 	bl	8001888 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e053      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	4b2d      	ldr	r3, [pc, #180]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 020c 	and.w	r2, r3, #12
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d1eb      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029d0:	4b27      	ldr	r3, [pc, #156]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d210      	bcs.n	8002a00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b24      	ldr	r3, [pc, #144]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0207 	bic.w	r2, r3, #7
 80029e6:	4922      	ldr	r1, [pc, #136]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b20      	ldr	r3, [pc, #128]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e032      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a0c:	4b19      	ldr	r3, [pc, #100]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4916      	ldr	r1, [pc, #88]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a2a:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	490e      	ldr	r1, [pc, #56]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a3e:	f000 f821 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002a42:	4602      	mov	r2, r0
 8002a44:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	490a      	ldr	r1, [pc, #40]	@ (8002a78 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	5ccb      	ldrb	r3, [r1, r3]
 8002a52:	fa22 f303 	lsr.w	r3, r2, r3
 8002a56:	4a09      	ldr	r2, [pc, #36]	@ (8002a7c <HAL_RCC_ClockConfig+0x1cc>)
 8002a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a5a:	4b09      	ldr	r3, [pc, #36]	@ (8002a80 <HAL_RCC_ClockConfig+0x1d0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fed0 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40021000 	.word	0x40021000
 8002a78:	08005688 	.word	0x08005688
 8002a7c:	2000012c 	.word	0x2000012c
 8002a80:	20000130 	.word	0x20000130

08002a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d002      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x30>
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d003      	beq.n	8002aba <HAL_RCC_GetSysClockFreq+0x36>
 8002ab2:	e027      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ab4:	4b19      	ldr	r3, [pc, #100]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ab6:	613b      	str	r3, [r7, #16]
      break;
 8002ab8:	e027      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	0c9b      	lsrs	r3, r3, #18
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	4a17      	ldr	r2, [pc, #92]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ac4:	5cd3      	ldrb	r3, [r2, r3]
 8002ac6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d010      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ad2:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	0c5b      	lsrs	r3, r3, #17
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	4a11      	ldr	r2, [pc, #68]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ae6:	fb03 f202 	mul.w	r2, r3, r2
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	e004      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a0c      	ldr	r2, [pc, #48]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	613b      	str	r3, [r7, #16]
      break;
 8002b02:	e002      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b06:	613b      	str	r3, [r7, #16]
      break;
 8002b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b0a:	693b      	ldr	r3, [r7, #16]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	007a1200 	.word	0x007a1200
 8002b20:	080056a0 	.word	0x080056a0
 8002b24:	080056b0 	.word	0x080056b0
 8002b28:	003d0900 	.word	0x003d0900

08002b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b30:	4b02      	ldr	r3, [pc, #8]	@ (8002b3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	2000012c 	.word	0x2000012c

08002b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b44:	f7ff fff2 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4903      	ldr	r1, [pc, #12]	@ (8002b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000
 8002b64:	08005698 	.word	0x08005698

08002b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b6c:	f7ff ffde 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	0adb      	lsrs	r3, r3, #11
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4903      	ldr	r1, [pc, #12]	@ (8002b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	08005698 	.word	0x08005698

08002b90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b98:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <RCC_Delay+0x34>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc8 <RCC_Delay+0x38>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	0a5b      	lsrs	r3, r3, #9
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bac:	bf00      	nop
  }
  while (Delay --);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1e5a      	subs	r2, r3, #1
 8002bb2:	60fa      	str	r2, [r7, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f9      	bne.n	8002bac <RCC_Delay+0x1c>
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	2000012c 	.word	0x2000012c
 8002bc8:	10624dd3 	.word	0x10624dd3

08002bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e041      	b.n	8002c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe fc0e 	bl	8001414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f000 fd82 	bl	8003714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d001      	beq.n	8002c84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e032      	b.n	8002cea <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a18      	ldr	r2, [pc, #96]	@ (8002cf4 <HAL_TIM_Base_Start+0x88>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00e      	beq.n	8002cb4 <HAL_TIM_Base_Start+0x48>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c9e:	d009      	beq.n	8002cb4 <HAL_TIM_Base_Start+0x48>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a14      	ldr	r2, [pc, #80]	@ (8002cf8 <HAL_TIM_Base_Start+0x8c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_TIM_Base_Start+0x48>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a13      	ldr	r2, [pc, #76]	@ (8002cfc <HAL_TIM_Base_Start+0x90>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d111      	bne.n	8002cd8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b06      	cmp	r3, #6
 8002cc4:	d010      	beq.n	8002ce8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd6:	e007      	b.n	8002ce8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40000800 	.word	0x40000800

08002d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e041      	b.n	8002d96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe fb24 	bl	8001374 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4610      	mov	r0, r2
 8002d40:	f000 fce8 	bl	8003714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <HAL_TIM_PWM_Start+0x24>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e022      	b.n	8002e0a <HAL_TIM_PWM_Start+0x6a>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d109      	bne.n	8002dde <HAL_TIM_PWM_Start+0x3e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	e015      	b.n	8002e0a <HAL_TIM_PWM_Start+0x6a>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d109      	bne.n	8002df8 <HAL_TIM_PWM_Start+0x58>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e008      	b.n	8002e0a <HAL_TIM_PWM_Start+0x6a>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e05e      	b.n	8002ed0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d104      	bne.n	8002e22 <HAL_TIM_PWM_Start+0x82>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e20:	e013      	b.n	8002e4a <HAL_TIM_PWM_Start+0xaa>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_PWM_Start+0x92>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e30:	e00b      	b.n	8002e4a <HAL_TIM_PWM_Start+0xaa>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_PWM_Start+0xa2>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e40:	e003      	b.n	8002e4a <HAL_TIM_PWM_Start+0xaa>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	6839      	ldr	r1, [r7, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 feea 	bl	8003c2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed8 <HAL_TIM_PWM_Start+0x138>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d107      	bne.n	8002e72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a18      	ldr	r2, [pc, #96]	@ (8002ed8 <HAL_TIM_PWM_Start+0x138>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00e      	beq.n	8002e9a <HAL_TIM_PWM_Start+0xfa>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e84:	d009      	beq.n	8002e9a <HAL_TIM_PWM_Start+0xfa>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a14      	ldr	r2, [pc, #80]	@ (8002edc <HAL_TIM_PWM_Start+0x13c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d004      	beq.n	8002e9a <HAL_TIM_PWM_Start+0xfa>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a12      	ldr	r2, [pc, #72]	@ (8002ee0 <HAL_TIM_PWM_Start+0x140>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d111      	bne.n	8002ebe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b06      	cmp	r3, #6
 8002eaa:	d010      	beq.n	8002ece <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebc:	e007      	b.n	8002ece <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40012c00 	.word	0x40012c00
 8002edc:	40000400 	.word	0x40000400
 8002ee0:	40000800 	.word	0x40000800

08002ee4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	e022      	b.n	8002f56 <HAL_TIM_PWM_Start_DMA+0x72>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d109      	bne.n	8002f2a <HAL_TIM_PWM_Start_DMA+0x46>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	e015      	b.n	8002f56 <HAL_TIM_PWM_Start_DMA+0x72>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d109      	bne.n	8002f44 <HAL_TIM_PWM_Start_DMA+0x60>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e008      	b.n	8002f56 <HAL_TIM_PWM_Start_DMA+0x72>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e153      	b.n	8003206 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d109      	bne.n	8002f78 <HAL_TIM_PWM_Start_DMA+0x94>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	e022      	b.n	8002fbe <HAL_TIM_PWM_Start_DMA+0xda>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d109      	bne.n	8002f92 <HAL_TIM_PWM_Start_DMA+0xae>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	bf0c      	ite	eq
 8002f8a:	2301      	moveq	r3, #1
 8002f8c:	2300      	movne	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	e015      	b.n	8002fbe <HAL_TIM_PWM_Start_DMA+0xda>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d109      	bne.n	8002fac <HAL_TIM_PWM_Start_DMA+0xc8>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e008      	b.n	8002fbe <HAL_TIM_PWM_Start_DMA+0xda>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2301      	moveq	r3, #1
 8002fba:	2300      	movne	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d024      	beq.n	800300c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_TIM_PWM_Start_DMA+0xea>
 8002fc8:	887b      	ldrh	r3, [r7, #2]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e119      	b.n	8003206 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d104      	bne.n	8002fe2 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fe0:	e016      	b.n	8003010 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d104      	bne.n	8002ff2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ff0:	e00e      	b.n	8003010 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d104      	bne.n	8003002 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003000:	e006      	b.n	8003010 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2202      	movs	r2, #2
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800300a:	e001      	b.n	8003010 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0fa      	b.n	8003206 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2b0c      	cmp	r3, #12
 8003014:	f200 80ae 	bhi.w	8003174 <HAL_TIM_PWM_Start_DMA+0x290>
 8003018:	a201      	add	r2, pc, #4	@ (adr r2, 8003020 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800301a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301e:	bf00      	nop
 8003020:	08003055 	.word	0x08003055
 8003024:	08003175 	.word	0x08003175
 8003028:	08003175 	.word	0x08003175
 800302c:	08003175 	.word	0x08003175
 8003030:	0800309d 	.word	0x0800309d
 8003034:	08003175 	.word	0x08003175
 8003038:	08003175 	.word	0x08003175
 800303c:	08003175 	.word	0x08003175
 8003040:	080030e5 	.word	0x080030e5
 8003044:	08003175 	.word	0x08003175
 8003048:	08003175 	.word	0x08003175
 800304c:	08003175 	.word	0x08003175
 8003050:	0800312d 	.word	0x0800312d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	4a6d      	ldr	r2, [pc, #436]	@ (8003210 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800305a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	4a6c      	ldr	r2, [pc, #432]	@ (8003214 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003062:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	4a6b      	ldr	r2, [pc, #428]	@ (8003218 <HAL_TIM_PWM_Start_DMA+0x334>)
 800306a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3334      	adds	r3, #52	@ 0x34
 8003078:	461a      	mov	r2, r3
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	f7fe fd9a 	bl	8001bb4 <HAL_DMA_Start_IT>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0bd      	b.n	8003206 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003098:	60da      	str	r2, [r3, #12]
      break;
 800309a:	e06e      	b.n	800317a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	4a5b      	ldr	r2, [pc, #364]	@ (8003210 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80030a2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003214 <HAL_TIM_PWM_Start_DMA+0x330>)
 80030aa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b0:	4a59      	ldr	r2, [pc, #356]	@ (8003218 <HAL_TIM_PWM_Start_DMA+0x334>)
 80030b2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3338      	adds	r3, #56	@ 0x38
 80030c0:	461a      	mov	r2, r3
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	f7fe fd76 	bl	8001bb4 <HAL_DMA_Start_IT>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e099      	b.n	8003206 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030e0:	60da      	str	r2, [r3, #12]
      break;
 80030e2:	e04a      	b.n	800317a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e8:	4a49      	ldr	r2, [pc, #292]	@ (8003210 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80030ea:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	4a48      	ldr	r2, [pc, #288]	@ (8003214 <HAL_TIM_PWM_Start_DMA+0x330>)
 80030f2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f8:	4a47      	ldr	r2, [pc, #284]	@ (8003218 <HAL_TIM_PWM_Start_DMA+0x334>)
 80030fa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	333c      	adds	r3, #60	@ 0x3c
 8003108:	461a      	mov	r2, r3
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	f7fe fd52 	bl	8001bb4 <HAL_DMA_Start_IT>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e075      	b.n	8003206 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003128:	60da      	str	r2, [r3, #12]
      break;
 800312a:	e026      	b.n	800317a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003130:	4a37      	ldr	r2, [pc, #220]	@ (8003210 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003132:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003138:	4a36      	ldr	r2, [pc, #216]	@ (8003214 <HAL_TIM_PWM_Start_DMA+0x330>)
 800313a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	4a35      	ldr	r2, [pc, #212]	@ (8003218 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003142:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3340      	adds	r3, #64	@ 0x40
 8003150:	461a      	mov	r2, r3
 8003152:	887b      	ldrh	r3, [r7, #2]
 8003154:	f7fe fd2e 	bl	8001bb4 <HAL_DMA_Start_IT>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e051      	b.n	8003206 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003170:	60da      	str	r2, [r3, #12]
      break;
 8003172:	e002      	b.n	800317a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	75fb      	strb	r3, [r7, #23]
      break;
 8003178:	bf00      	nop
  }

  if (status == HAL_OK)
 800317a:	7dfb      	ldrb	r3, [r7, #23]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d141      	bne.n	8003204 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2201      	movs	r2, #1
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fd4f 	bl	8003c2c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a22      	ldr	r2, [pc, #136]	@ (800321c <HAL_TIM_PWM_Start_DMA+0x338>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d107      	bne.n	80031a8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1b      	ldr	r2, [pc, #108]	@ (800321c <HAL_TIM_PWM_Start_DMA+0x338>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00e      	beq.n	80031d0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ba:	d009      	beq.n	80031d0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a17      	ldr	r2, [pc, #92]	@ (8003220 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d004      	beq.n	80031d0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a16      	ldr	r2, [pc, #88]	@ (8003224 <HAL_TIM_PWM_Start_DMA+0x340>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d111      	bne.n	80031f4 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d010      	beq.n	8003204 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f2:	e007      	b.n	8003204 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003204:	7dfb      	ldrb	r3, [r7, #23]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	08003603 	.word	0x08003603
 8003214:	080036ab 	.word	0x080036ab
 8003218:	08003571 	.word	0x08003571
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40000400 	.word	0x40000400
 8003224:	40000800 	.word	0x40000800

08003228 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003242:	2302      	movs	r3, #2
 8003244:	e0ae      	b.n	80033a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b0c      	cmp	r3, #12
 8003252:	f200 809f 	bhi.w	8003394 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003256:	a201      	add	r2, pc, #4	@ (adr r2, 800325c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325c:	08003291 	.word	0x08003291
 8003260:	08003395 	.word	0x08003395
 8003264:	08003395 	.word	0x08003395
 8003268:	08003395 	.word	0x08003395
 800326c:	080032d1 	.word	0x080032d1
 8003270:	08003395 	.word	0x08003395
 8003274:	08003395 	.word	0x08003395
 8003278:	08003395 	.word	0x08003395
 800327c:	08003313 	.word	0x08003313
 8003280:	08003395 	.word	0x08003395
 8003284:	08003395 	.word	0x08003395
 8003288:	08003395 	.word	0x08003395
 800328c:	08003353 	.word	0x08003353
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 faaa 	bl	80037f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0208 	orr.w	r2, r2, #8
 80032aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0204 	bic.w	r2, r2, #4
 80032ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6999      	ldr	r1, [r3, #24]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	619a      	str	r2, [r3, #24]
      break;
 80032ce:	e064      	b.n	800339a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 faf0 	bl	80038bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6999      	ldr	r1, [r3, #24]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	021a      	lsls	r2, r3, #8
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	619a      	str	r2, [r3, #24]
      break;
 8003310:	e043      	b.n	800339a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fb39 	bl	8003990 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69da      	ldr	r2, [r3, #28]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0208 	orr.w	r2, r2, #8
 800332c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0204 	bic.w	r2, r2, #4
 800333c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69d9      	ldr	r1, [r3, #28]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	61da      	str	r2, [r3, #28]
      break;
 8003350:	e023      	b.n	800339a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fb83 	bl	8003a64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800336c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800337c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69d9      	ldr	r1, [r3, #28]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	021a      	lsls	r2, r3, #8
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	61da      	str	r2, [r3, #28]
      break;
 8003392:	e002      	b.n	800339a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	75fb      	strb	r3, [r7, #23]
      break;
 8003398:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_TIM_ConfigClockSource+0x1c>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e0b4      	b.n	8003532 <HAL_TIM_ConfigClockSource+0x186>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80033e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003400:	d03e      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0xd4>
 8003402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003406:	f200 8087 	bhi.w	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 800340a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800340e:	f000 8086 	beq.w	800351e <HAL_TIM_ConfigClockSource+0x172>
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003416:	d87f      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 8003418:	2b70      	cmp	r3, #112	@ 0x70
 800341a:	d01a      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0xa6>
 800341c:	2b70      	cmp	r3, #112	@ 0x70
 800341e:	d87b      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 8003420:	2b60      	cmp	r3, #96	@ 0x60
 8003422:	d050      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003424:	2b60      	cmp	r3, #96	@ 0x60
 8003426:	d877      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 8003428:	2b50      	cmp	r3, #80	@ 0x50
 800342a:	d03c      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0xfa>
 800342c:	2b50      	cmp	r3, #80	@ 0x50
 800342e:	d873      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 8003430:	2b40      	cmp	r3, #64	@ 0x40
 8003432:	d058      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003434:	2b40      	cmp	r3, #64	@ 0x40
 8003436:	d86f      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 8003438:	2b30      	cmp	r3, #48	@ 0x30
 800343a:	d064      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15a>
 800343c:	2b30      	cmp	r3, #48	@ 0x30
 800343e:	d86b      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 8003440:	2b20      	cmp	r3, #32
 8003442:	d060      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15a>
 8003444:	2b20      	cmp	r3, #32
 8003446:	d867      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d05c      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15a>
 800344c:	2b10      	cmp	r3, #16
 800344e:	d05a      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15a>
 8003450:	e062      	b.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003462:	f000 fbc4 	bl	8003bee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003474:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	609a      	str	r2, [r3, #8]
      break;
 800347e:	e04f      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003490:	f000 fbad 	bl	8003bee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034a2:	609a      	str	r2, [r3, #8]
      break;
 80034a4:	e03c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b2:	461a      	mov	r2, r3
 80034b4:	f000 fb24 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2150      	movs	r1, #80	@ 0x50
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fb7b 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 80034c4:	e02c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034d2:	461a      	mov	r2, r3
 80034d4:	f000 fb42 	bl	8003b5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2160      	movs	r1, #96	@ 0x60
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fb6b 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 80034e4:	e01c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f2:	461a      	mov	r2, r3
 80034f4:	f000 fb04 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2140      	movs	r1, #64	@ 0x40
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fb5b 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 8003504:	e00c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f000 fb52 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 8003516:	e003      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      break;
 800351c:	e000      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800351e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003530:	7bfb      	ldrb	r3, [r7, #15]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr

0800355e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	d107      	bne.n	8003598 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003596:	e02a      	b.n	80035ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d107      	bne.n	80035b2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2202      	movs	r2, #2
 80035a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b0:	e01d      	b.n	80035ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d107      	bne.n	80035cc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2204      	movs	r2, #4
 80035c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035ca:	e010      	b.n	80035ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d107      	bne.n	80035e6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2208      	movs	r2, #8
 80035da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035e4:	e003      	b.n	80035ee <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff ffb5 	bl	800355e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	771a      	strb	r2, [r3, #28]
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	429a      	cmp	r2, r3
 8003618:	d10b      	bne.n	8003632 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d136      	bne.n	8003696 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003630:	e031      	b.n	8003696 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	d10b      	bne.n	8003654 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2202      	movs	r2, #2
 8003640:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d125      	bne.n	8003696 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003652:	e020      	b.n	8003696 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	d10b      	bne.n	8003676 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2204      	movs	r2, #4
 8003662:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d114      	bne.n	8003696 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003674:	e00f      	b.n	8003696 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	d10a      	bne.n	8003696 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2208      	movs	r2, #8
 8003684:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f7ff ff4f 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	771a      	strb	r2, [r3, #28]
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d103      	bne.n	80036ca <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	771a      	strb	r2, [r3, #28]
 80036c8:	e019      	b.n	80036fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d103      	bne.n	80036dc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2202      	movs	r2, #2
 80036d8:	771a      	strb	r2, [r3, #28]
 80036da:	e010      	b.n	80036fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d103      	bne.n	80036ee <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2204      	movs	r2, #4
 80036ea:	771a      	strb	r2, [r3, #28]
 80036ec:	e007      	b.n	80036fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d102      	bne.n	80036fe <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2208      	movs	r2, #8
 80036fc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7ff ff24 	bl	800354c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	771a      	strb	r2, [r3, #28]
}
 800370a:	bf00      	nop
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a2f      	ldr	r2, [pc, #188]	@ (80037e4 <TIM_Base_SetConfig+0xd0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00b      	beq.n	8003744 <TIM_Base_SetConfig+0x30>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003732:	d007      	beq.n	8003744 <TIM_Base_SetConfig+0x30>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a2c      	ldr	r2, [pc, #176]	@ (80037e8 <TIM_Base_SetConfig+0xd4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d003      	beq.n	8003744 <TIM_Base_SetConfig+0x30>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a2b      	ldr	r2, [pc, #172]	@ (80037ec <TIM_Base_SetConfig+0xd8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d108      	bne.n	8003756 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800374a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a22      	ldr	r2, [pc, #136]	@ (80037e4 <TIM_Base_SetConfig+0xd0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00b      	beq.n	8003776 <TIM_Base_SetConfig+0x62>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003764:	d007      	beq.n	8003776 <TIM_Base_SetConfig+0x62>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a1f      	ldr	r2, [pc, #124]	@ (80037e8 <TIM_Base_SetConfig+0xd4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d003      	beq.n	8003776 <TIM_Base_SetConfig+0x62>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a1e      	ldr	r2, [pc, #120]	@ (80037ec <TIM_Base_SetConfig+0xd8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d108      	bne.n	8003788 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800377c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a0d      	ldr	r2, [pc, #52]	@ (80037e4 <TIM_Base_SetConfig+0xd0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d103      	bne.n	80037bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f023 0201 	bic.w	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	611a      	str	r2, [r3, #16]
  }
}
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40000800 	.word	0x40000800

080037f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f023 0201 	bic.w	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800381e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0303 	bic.w	r3, r3, #3
 8003826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f023 0302 	bic.w	r3, r3, #2
 8003838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a1c      	ldr	r2, [pc, #112]	@ (80038b8 <TIM_OC1_SetConfig+0xc8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10c      	bne.n	8003866 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f023 0308 	bic.w	r3, r3, #8
 8003852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a13      	ldr	r2, [pc, #76]	@ (80038b8 <TIM_OC1_SetConfig+0xc8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d111      	bne.n	8003892 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800387c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	621a      	str	r2, [r3, #32]
}
 80038ac:	bf00      	nop
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40012c00 	.word	0x40012c00

080038bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f023 0210 	bic.w	r2, r3, #16
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f023 0320 	bic.w	r3, r3, #32
 8003906:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a1d      	ldr	r2, [pc, #116]	@ (800398c <TIM_OC2_SetConfig+0xd0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d10d      	bne.n	8003938 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4313      	orrs	r3, r2
 800392e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003936:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a14      	ldr	r2, [pc, #80]	@ (800398c <TIM_OC2_SetConfig+0xd0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d113      	bne.n	8003968 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800394e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr
 800398c:	40012c00 	.word	0x40012c00

08003990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0303 	bic.w	r3, r3, #3
 80039c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a60 <TIM_OC3_SetConfig+0xd0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d10d      	bne.n	8003a0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a14      	ldr	r2, [pc, #80]	@ (8003a60 <TIM_OC3_SetConfig+0xd0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d113      	bne.n	8003a3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	621a      	str	r2, [r3, #32]
}
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40012c00 	.word	0x40012c00

08003a64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003aae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	031b      	lsls	r3, r3, #12
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a0f      	ldr	r2, [pc, #60]	@ (8003afc <TIM_OC4_SetConfig+0x98>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d109      	bne.n	8003ad8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003aca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	019b      	lsls	r3, r3, #6
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	621a      	str	r2, [r3, #32]
}
 8003af2:	bf00      	nop
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	40012c00 	.word	0x40012c00

08003b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 0201 	bic.w	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 030a 	bic.w	r3, r3, #10
 8003b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f023 0210 	bic.w	r2, r3, #16
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	031b      	lsls	r3, r3, #12
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	621a      	str	r2, [r3, #32]
}
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr

08003bba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f043 0307 	orr.w	r3, r3, #7
 8003bdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	609a      	str	r2, [r3, #8]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b087      	sub	sp, #28
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	021a      	lsls	r2, r3, #8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	431a      	orrs	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	609a      	str	r2, [r3, #8]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	2201      	movs	r2, #1
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1a      	ldr	r2, [r3, #32]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	401a      	ands	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a1a      	ldr	r2, [r3, #32]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 031f 	and.w	r3, r3, #31
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	431a      	orrs	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e046      	b.n	8003d1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a16      	ldr	r2, [pc, #88]	@ (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00e      	beq.n	8003cee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd8:	d009      	beq.n	8003cee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a12      	ldr	r2, [pc, #72]	@ (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a10      	ldr	r2, [pc, #64]	@ (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d10c      	bne.n	8003d08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40000800 	.word	0x40000800

08003d30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e042      	b.n	8003dc8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fd fc4c 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2224      	movs	r2, #36	@ 0x24
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fd09 	bl	800478c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003da8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d121      	bne.n	8003e2e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <HAL_UART_Transmit_IT+0x26>
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e01a      	b.n	8003e30 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	88fa      	ldrh	r2, [r7, #6]
 8003e0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2221      	movs	r2, #33	@ 0x21
 8003e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e28:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e000      	b.n	8003e30 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003e2e:	2302      	movs	r3, #2
  }
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr

08003e3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	4613      	mov	r3, r2
 8003e46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d112      	bne.n	8003e7a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_UART_Receive_IT+0x26>
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e00b      	b.n	8003e7c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fab6 	bl	80043e2 <UART_Start_Receive_IT>
 8003e76:	4603      	mov	r3, r0
 8003e78:	e000      	b.n	8003e7c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
  }
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b0ba      	sub	sp, #232	@ 0xe8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10f      	bne.n	8003eea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <HAL_UART_IRQHandler+0x66>
 8003ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fb93 	bl	800460e <UART_Receive_IT>
      return;
 8003ee8:	e25b      	b.n	80043a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80de 	beq.w	80040b0 <HAL_UART_IRQHandler+0x22c>
 8003ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d106      	bne.n	8003f0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80d1 	beq.w	80040b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00b      	beq.n	8003f32 <HAL_UART_IRQHandler+0xae>
 8003f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <HAL_UART_IRQHandler+0xd2>
 8003f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	f043 0202 	orr.w	r2, r3, #2
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <HAL_UART_IRQHandler+0xf6>
 8003f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f72:	f043 0204 	orr.w	r2, r3, #4
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d011      	beq.n	8003faa <HAL_UART_IRQHandler+0x126>
 8003f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d105      	bne.n	8003f9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	f043 0208 	orr.w	r2, r3, #8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 81f2 	beq.w	8004398 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x14e>
 8003fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fb1e 	bl	800460e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <HAL_UART_IRQHandler+0x17a>
 8003ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d04f      	beq.n	800409e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa28 	bl	8004454 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d041      	beq.n	8004096 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3314      	adds	r3, #20
 8004018:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004028:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800402c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004030:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3314      	adds	r3, #20
 800403a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800403e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004042:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800404a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1d9      	bne.n	8004012 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d013      	beq.n	800408e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406a:	4a7e      	ldr	r2, [pc, #504]	@ (8004264 <HAL_UART_IRQHandler+0x3e0>)
 800406c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004072:	4618      	mov	r0, r3
 8004074:	f7fd fe3a 	bl	8001cec <HAL_DMA_Abort_IT>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d016      	beq.n	80040ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004088:	4610      	mov	r0, r2
 800408a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800408c:	e00e      	b.n	80040ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f993 	bl	80043ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004094:	e00a      	b.n	80040ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f98f 	bl	80043ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	e006      	b.n	80040ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f98b 	bl	80043ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040aa:	e175      	b.n	8004398 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	bf00      	nop
    return;
 80040ae:	e173      	b.n	8004398 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	f040 814f 	bne.w	8004358 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 8148 	beq.w	8004358 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8141 	beq.w	8004358 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80b6 	beq.w	8004268 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004108:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 8145 	beq.w	800439c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800411a:	429a      	cmp	r2, r3
 800411c:	f080 813e 	bcs.w	800439c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004126:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b20      	cmp	r3, #32
 8004130:	f000 8088 	beq.w	8004244 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800414a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800414e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004152:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004160:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004164:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800416c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004178:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1d9      	bne.n	8004134 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3314      	adds	r3, #20
 8004186:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800418a:	e853 3f00 	ldrex	r3, [r3]
 800418e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004190:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004192:	f023 0301 	bic.w	r3, r3, #1
 8004196:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3314      	adds	r3, #20
 80041a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041a4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041b0:	e841 2300 	strex	r3, r2, [r1]
 80041b4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e1      	bne.n	8004180 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3314      	adds	r3, #20
 80041c2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3314      	adds	r3, #20
 80041dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041e0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041e8:	e841 2300 	strex	r3, r2, [r1]
 80041ec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e3      	bne.n	80041bc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004214:	f023 0310 	bic.w	r3, r3, #16
 8004218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004226:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004228:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800422c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e3      	bne.n	8004202 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423e:	4618      	mov	r0, r3
 8004240:	f7fd fd18 	bl	8001c74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004252:	b29b      	uxth	r3, r3
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	b29b      	uxth	r3, r3
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f8b6 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004260:	e09c      	b.n	800439c <HAL_UART_IRQHandler+0x518>
 8004262:	bf00      	nop
 8004264:	08004519 	.word	0x08004519
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004270:	b29b      	uxth	r3, r3
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 808e 	beq.w	80043a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 8089 	beq.w	80043a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800429e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80042b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e3      	bne.n	800428e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	623b      	str	r3, [r7, #32]
   return(result);
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3314      	adds	r3, #20
 80042e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80042ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e3      	bne.n	80042c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	60fb      	str	r3, [r7, #12]
   return(result);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0310 	bic.w	r3, r3, #16
 8004322:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004330:	61fa      	str	r2, [r7, #28]
 8004332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	69b9      	ldr	r1, [r7, #24]
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	617b      	str	r3, [r7, #20]
   return(result);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e3      	bne.n	800430c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800434a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f83b 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004356:	e023      	b.n	80043a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004360:	2b00      	cmp	r3, #0
 8004362:	d009      	beq.n	8004378 <HAL_UART_IRQHandler+0x4f4>
 8004364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f8e5 	bl	8004540 <UART_Transmit_IT>
    return;
 8004376:	e014      	b.n	80043a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800437c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00e      	beq.n	80043a2 <HAL_UART_IRQHandler+0x51e>
 8004384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f924 	bl	80045de <UART_EndTransmit_IT>
    return;
 8004396:	e004      	b.n	80043a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004398:	bf00      	nop
 800439a:	e002      	b.n	80043a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800439c:	bf00      	nop
 800439e:	e000      	b.n	80043a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80043a0:	bf00      	nop
  }
}
 80043a2:	37e8      	adds	r7, #232	@ 0xe8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr

080043ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr

080043e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	4613      	mov	r3, r2
 80043ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	88fa      	ldrh	r2, [r7, #6]
 80043fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	88fa      	ldrh	r2, [r7, #6]
 8004400:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2222      	movs	r2, #34	@ 0x22
 800440c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004426:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0220 	orr.w	r2, r2, #32
 8004446:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004454:	b480      	push	{r7}
 8004456:	b095      	sub	sp, #84	@ 0x54
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800447c:	643a      	str	r2, [r7, #64]	@ 0x40
 800447e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004482:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800448a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3314      	adds	r3, #20
 80044ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e5      	bne.n	8004490 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d119      	bne.n	8004500 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	60bb      	str	r3, [r7, #8]
   return(result);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f023 0310 	bic.w	r3, r3, #16
 80044e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044ec:	61ba      	str	r2, [r7, #24]
 80044ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6979      	ldr	r1, [r7, #20]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	613b      	str	r3, [r7, #16]
   return(result);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800450e:	bf00      	nop
 8004510:	3754      	adds	r7, #84	@ 0x54
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f7ff ff41 	bl	80043ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b21      	cmp	r3, #33	@ 0x21
 8004552:	d13e      	bne.n	80045d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455c:	d114      	bne.n	8004588 <UART_Transmit_IT+0x48>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d110      	bne.n	8004588 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800457a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	1c9a      	adds	r2, r3, #2
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	621a      	str	r2, [r3, #32]
 8004586:	e008      	b.n	800459a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	1c59      	adds	r1, r3, #1
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6211      	str	r1, [r2, #32]
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	4619      	mov	r1, r3
 80045a8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10f      	bne.n	80045ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
  }
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	bc80      	pop	{r7}
 80045dc:	4770      	bx	lr

080045de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff fed2 	bl	80043a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b08c      	sub	sp, #48	@ 0x30
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b22      	cmp	r3, #34	@ 0x22
 8004620:	f040 80ae 	bne.w	8004780 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800462c:	d117      	bne.n	800465e <UART_Receive_IT+0x50>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d113      	bne.n	800465e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004636:	2300      	movs	r3, #0
 8004638:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	b29b      	uxth	r3, r3
 8004648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464c:	b29a      	uxth	r2, r3
 800464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004650:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004656:	1c9a      	adds	r2, r3, #2
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	@ 0x28
 800465c:	e026      	b.n	80046ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004662:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004670:	d007      	beq.n	8004682 <UART_Receive_IT+0x74>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <UART_Receive_IT+0x82>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	b2da      	uxtb	r2, r3
 800468a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	e008      	b.n	80046a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800469c:	b2da      	uxtb	r2, r3
 800469e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	4619      	mov	r1, r3
 80046ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d15d      	bne.n	800477c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0220 	bic.w	r2, r2, #32
 80046ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004702:	2b01      	cmp	r3, #1
 8004704:	d135      	bne.n	8004772 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	613b      	str	r3, [r7, #16]
   return(result);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f023 0310 	bic.w	r3, r3, #16
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472c:	623a      	str	r2, [r7, #32]
 800472e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	69f9      	ldr	r1, [r7, #28]
 8004732:	6a3a      	ldr	r2, [r7, #32]
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	61bb      	str	r3, [r7, #24]
   return(result);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e5      	bne.n	800470c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b10      	cmp	r3, #16
 800474c:	d10a      	bne.n	8004764 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fe2e 	bl	80043cc <HAL_UARTEx_RxEventCallback>
 8004770:	e002      	b.n	8004778 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fc fbc0 	bl	8000ef8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	e002      	b.n	8004782 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	e000      	b.n	8004782 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004780:	2302      	movs	r3, #2
  }
}
 8004782:	4618      	mov	r0, r3
 8004784:	3730      	adds	r7, #48	@ 0x30
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80047c6:	f023 030c 	bic.w	r3, r3, #12
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	430b      	orrs	r3, r1
 80047d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a2c      	ldr	r2, [pc, #176]	@ (80048a0 <UART_SetConfig+0x114>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d103      	bne.n	80047fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047f4:	f7fe f9b8 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	e002      	b.n	8004802 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047fc:	f7fe f9a0 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 8004800:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	009a      	lsls	r2, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	4a22      	ldr	r2, [pc, #136]	@ (80048a4 <UART_SetConfig+0x118>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	0119      	lsls	r1, r3, #4
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009a      	lsls	r2, r3, #2
 800482c:	441a      	add	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	fbb2 f2f3 	udiv	r2, r2, r3
 8004838:	4b1a      	ldr	r3, [pc, #104]	@ (80048a4 <UART_SetConfig+0x118>)
 800483a:	fba3 0302 	umull	r0, r3, r3, r2
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	2064      	movs	r0, #100	@ 0x64
 8004842:	fb00 f303 	mul.w	r3, r0, r3
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	3332      	adds	r3, #50	@ 0x32
 800484c:	4a15      	ldr	r2, [pc, #84]	@ (80048a4 <UART_SetConfig+0x118>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004858:	4419      	add	r1, r3
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009a      	lsls	r2, r3, #2
 8004864:	441a      	add	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004870:	4b0c      	ldr	r3, [pc, #48]	@ (80048a4 <UART_SetConfig+0x118>)
 8004872:	fba3 0302 	umull	r0, r3, r3, r2
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	2064      	movs	r0, #100	@ 0x64
 800487a:	fb00 f303 	mul.w	r3, r0, r3
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	3332      	adds	r3, #50	@ 0x32
 8004884:	4a07      	ldr	r2, [pc, #28]	@ (80048a4 <UART_SetConfig+0x118>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	f003 020f 	and.w	r2, r3, #15
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	440a      	add	r2, r1
 8004896:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004898:	bf00      	nop
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40013800 	.word	0x40013800
 80048a4:	51eb851f 	.word	0x51eb851f

080048a8 <WS28XX_Delay>:
void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed);

/***********************************************************************************************************/

void WS28XX_Delay(uint32_t Delay)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
#if WS28XX_RTOS == WS28XX_RTOS_DISABLE
  HAL_Delay(Delay);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7fc fff3 	bl	800189c <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 80048b6:	bf00      	nop
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <WS28XX_Lock>:

/***********************************************************************************************************/

void WS28XX_Lock(WS28XX_HandleTypeDef *hLed)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  while (hLed->Lock)
 80048c6:	e002      	b.n	80048ce <WS28XX_Lock+0x10>
  {
    WS28XX_Delay(1);
 80048c8:	2001      	movs	r0, #1
 80048ca:	f7ff ffed 	bl	80048a8 <WS28XX_Delay>
  while (hLed->Lock)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	795b      	ldrb	r3, [r3, #5]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f8      	bne.n	80048c8 <WS28XX_Lock+0xa>
  }
  hLed->Lock = 1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	715a      	strb	r2, [r3, #5]
}
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <WS28XX_UnLock>:

/***********************************************************************************************************/

void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  hLed->Lock = 0;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	715a      	strb	r2, [r3, #5]
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *hLed, TIM_HandleTypeDef *hTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	4611      	mov	r1, r2
 8004908:	461a      	mov	r2, r3
 800490a:	460b      	mov	r3, r1
 800490c:	80fb      	strh	r3, [r7, #6]
 800490e:	4613      	mov	r3, r2
 8004910:	717b      	strb	r3, [r7, #5]
  bool answer = false;
 8004912:	2300      	movs	r3, #0
 8004914:	75fb      	strb	r3, [r7, #23]
  uint32_t aar_value;
  do
  {
    if (hLed == NULL || hTim == NULL)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d07c      	beq.n	8004a16 <WS28XX_Init+0x11a>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d079      	beq.n	8004a16 <WS28XX_Init+0x11a>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 8004922:	8c3b      	ldrh	r3, [r7, #32]
 8004924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004928:	d874      	bhi.n	8004a14 <WS28XX_Init+0x118>
    {
      break;
    }
    hLed->Channel = Channel;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	797a      	ldrb	r2, [r7, #5]
 800492e:	711a      	strb	r2, [r3, #4]
    hLed->MaxPixel = Pixel;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8c3a      	ldrh	r2, [r7, #32]
 8004934:	815a      	strh	r2, [r3, #10]
    hLed->hTim = hTim;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fb fcc6 	bl	80002d0 <__aeabi_i2f>
 8004944:	4603      	mov	r3, r0
 8004946:	4936      	ldr	r1, [pc, #216]	@ (8004a20 <WS28XX_Init+0x124>)
 8004948:	4618      	mov	r0, r3
 800494a:	f7fb fdc9 	bl	80004e0 <__aeabi_fdiv>
 800494e:	4603      	mov	r3, r0
 8004950:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004954:	4618      	mov	r0, r3
 8004956:	f7fb fc05 	bl	8000164 <__aeabi_fsub>
 800495a:	4603      	mov	r3, r0
 800495c:	4618      	mov	r0, r3
 800495e:	f7fb fe5b 	bl	8000618 <__aeabi_f2uiz>
 8004962:	4603      	mov	r3, r0
 8004964:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(hLed->hTim ,aar_value);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(hLed->hTim, 0);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2200      	movs	r2, #0
 8004980:	629a      	str	r2, [r3, #40]	@ 0x28
    hLed->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8004982:	6938      	ldr	r0, [r7, #16]
 8004984:	f7fb fca0 	bl	80002c8 <__aeabi_ui2f>
 8004988:	4603      	mov	r3, r0
 800498a:	4926      	ldr	r1, [pc, #152]	@ (8004a24 <WS28XX_Init+0x128>)
 800498c:	4618      	mov	r0, r3
 800498e:	f7fb fcf3 	bl	8000378 <__aeabi_fmul>
 8004992:	4603      	mov	r3, r0
 8004994:	4924      	ldr	r1, [pc, #144]	@ (8004a28 <WS28XX_Init+0x12c>)
 8004996:	4618      	mov	r0, r3
 8004998:	f7fb fda2 	bl	80004e0 <__aeabi_fdiv>
 800499c:	4603      	mov	r3, r0
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fb fe3a 	bl	8000618 <__aeabi_f2uiz>
 80049a4:	4603      	mov	r3, r0
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	80da      	strh	r2, [r3, #6]
    hLed->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 80049ac:	6938      	ldr	r0, [r7, #16]
 80049ae:	f7fb fc8b 	bl	80002c8 <__aeabi_ui2f>
 80049b2:	4603      	mov	r3, r0
 80049b4:	491a      	ldr	r1, [pc, #104]	@ (8004a20 <WS28XX_Init+0x124>)
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fb fcde 	bl	8000378 <__aeabi_fmul>
 80049bc:	4603      	mov	r3, r0
 80049be:	491a      	ldr	r1, [pc, #104]	@ (8004a28 <WS28XX_Init+0x12c>)
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fb fd8d 	bl	80004e0 <__aeabi_fdiv>
 80049c6:	4603      	mov	r3, r0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fb fe25 	bl	8000618 <__aeabi_f2uiz>
 80049ce:	4603      	mov	r3, r0
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	811a      	strh	r2, [r3, #8]
    memset(hLed->Pixel, 0, sizeof(hLed->Pixel));
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	330c      	adds	r3, #12
 80049da:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 f9b3 	bl	8004d4c <memset>
    memset(hLed->Buffer, 0, sizeof(hLed->Buffer));
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 80049ec:	f641 0204 	movw	r2, #6148	@ 0x1804
 80049f0:	2100      	movs	r1, #0
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 f9aa 	bl	8004d4c <memset>
    HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, Pixel);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	791b      	ldrb	r3, [r3, #4]
 8004a00:	4619      	mov	r1, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f503 7243 	add.w	r2, r3, #780	@ 0x30c
 8004a08:	8c3b      	ldrh	r3, [r7, #32]
 8004a0a:	f7fe fa6b 	bl	8002ee4 <HAL_TIM_PWM_Start_DMA>
    answer = true;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
 8004a12:	e000      	b.n	8004a16 <WS28XX_Init+0x11a>
      break;
 8004a14:	bf00      	nop
  }
  while (0);

  return answer;
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	3f4ccccd 	.word	0x3f4ccccd
 8004a24:	3ecccccd 	.word	0x3ecccccd
 8004a28:	3fa00000 	.word	0x3fa00000

08004a2c <WS28XX_SetPixel_RGBW_565>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_565(WS28XX_HandleTypeDef *hLed, uint16_t Pixel, uint16_t Color, uint8_t Brightness)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	4608      	mov	r0, r1
 8004a36:	4611      	mov	r1, r2
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	817b      	strh	r3, [r7, #10]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	813b      	strh	r3, [r7, #8]
 8004a42:	4613      	mov	r3, r2
 8004a44:	71fb      	strb	r3, [r7, #7]
  bool answer = true;
 8004a46:	2301      	movs	r3, #1
 8004a48:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= hLed->MaxPixel)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	895b      	ldrh	r3, [r3, #10]
 8004a4e:	897a      	ldrh	r2, [r7, #10]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d302      	bcc.n	8004a5a <WS28XX_SetPixel_RGBW_565+0x2e>
    {
      answer = false;
 8004a54:	2300      	movs	r3, #0
 8004a56:	75fb      	strb	r3, [r7, #23]
      break;
 8004a58:	e051      	b.n	8004afe <WS28XX_SetPixel_RGBW_565+0xd2>
    }
    Red = ((Color >> 8) & 0xF8) * Brightness / 255;
 8004a5a:	893b      	ldrh	r3, [r7, #8]
 8004a5c:	0a1b      	lsrs	r3, r3, #8
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8004a64:	79fa      	ldrb	r2, [r7, #7]
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	4a28      	ldr	r2, [pc, #160]	@ (8004b0c <WS28XX_SetPixel_RGBW_565+0xe0>)
 8004a6c:	fb82 1203 	smull	r1, r2, r2, r3
 8004a70:	441a      	add	r2, r3
 8004a72:	11d2      	asrs	r2, r2, #7
 8004a74:	17db      	asrs	r3, r3, #31
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	75bb      	strb	r3, [r7, #22]
    Green = ((Color >> 3) & 0xFC)* Brightness / 255;
 8004a7a:	893b      	ldrh	r3, [r7, #8]
 8004a7c:	08db      	lsrs	r3, r3, #3
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8004a84:	79fa      	ldrb	r2, [r7, #7]
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	4a20      	ldr	r2, [pc, #128]	@ (8004b0c <WS28XX_SetPixel_RGBW_565+0xe0>)
 8004a8c:	fb82 1203 	smull	r1, r2, r2, r3
 8004a90:	441a      	add	r2, r3
 8004a92:	11d2      	asrs	r2, r2, #7
 8004a94:	17db      	asrs	r3, r3, #31
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	757b      	strb	r3, [r7, #21]
    Blue = ((Color << 3) & 0xF8) * Brightness / 255;
 8004a9a:	893b      	ldrh	r3, [r7, #8]
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	79fa      	ldrb	r2, [r7, #7]
 8004aa2:	fb02 f303 	mul.w	r3, r2, r3
 8004aa6:	4a19      	ldr	r2, [pc, #100]	@ (8004b0c <WS28XX_SetPixel_RGBW_565+0xe0>)
 8004aa8:	fb82 1203 	smull	r1, r2, r2, r3
 8004aac:	441a      	add	r2, r3
 8004aae:	11d2      	asrs	r2, r2, #7
 8004ab0:	17db      	asrs	r3, r3, #31
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 8004ab6:	7d7b      	ldrb	r3, [r7, #21]
 8004ab8:	897a      	ldrh	r2, [r7, #10]
 8004aba:	4915      	ldr	r1, [pc, #84]	@ (8004b10 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8004abc:	5cc8      	ldrb	r0, [r1, r3]
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	4413      	add	r3, r2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	330c      	adds	r3, #12
 8004aca:	4602      	mov	r2, r0
 8004acc:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 8004ace:	7dbb      	ldrb	r3, [r7, #22]
 8004ad0:	897a      	ldrh	r2, [r7, #10]
 8004ad2:	490f      	ldr	r1, [pc, #60]	@ (8004b10 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8004ad4:	5cc8      	ldrb	r0, [r1, r3]
 8004ad6:	68f9      	ldr	r1, [r7, #12]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	4413      	add	r3, r2
 8004ade:	440b      	add	r3, r1
 8004ae0:	330d      	adds	r3, #13
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 8004ae6:	7d3b      	ldrb	r3, [r7, #20]
 8004ae8:	897a      	ldrh	r2, [r7, #10]
 8004aea:	4909      	ldr	r1, [pc, #36]	@ (8004b10 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8004aec:	5cc8      	ldrb	r0, [r1, r3]
 8004aee:	68f9      	ldr	r1, [r7, #12]
 8004af0:	4613      	mov	r3, r2
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	4413      	add	r3, r2
 8004af6:	440b      	add	r3, r1
 8004af8:	330e      	adds	r3, #14
 8004afa:	4602      	mov	r2, r0
 8004afc:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bc80      	pop	{r7}
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	80808081 	.word	0x80808081
 8004b10:	080056b4 	.word	0x080056b4

08004b14 <WS28XX_Update>:
  * @param  *hLed: Pointer to WS28XX_hLedTypeDef structure
  *
  * @retval bool: true or false
  */
bool WS28XX_Update(WS28XX_HandleTypeDef *hLed)
{
 8004b14:	b590      	push	{r4, r7, lr}
 8004b16:	b089      	sub	sp, #36	@ 0x24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  bool answer = true;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	77fb      	strb	r3, [r7, #31]
  uint32_t i = 2;
 8004b20:	2302      	movs	r3, #2
 8004b22:	61bb      	str	r3, [r7, #24]
  WS28XX_Lock(hLed);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff feca 	bl	80048be <WS28XX_Lock>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	82fb      	strh	r3, [r7, #22]
 8004b2e:	e03e      	b.n	8004bae <WS28XX_Update+0x9a>
  {
    for (int rgb = 0; rgb < 3; rgb ++)
 8004b30:	2300      	movs	r3, #0
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	e035      	b.n	8004ba2 <WS28XX_Update+0x8e>
    {
      for (int b = 7; b >= 0 ; b--)
 8004b36:	2307      	movs	r3, #7
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	e02c      	b.n	8004b96 <WS28XX_Update+0x82>
      {
        if ((hLed->Pixel[pixel][rgb] & (1 << b)) == 0)
 8004b3c:	8afa      	ldrh	r2, [r7, #22]
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	4413      	add	r3, r2
 8004b46:	18ca      	adds	r2, r1, r3
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	fa42 f303 	asr.w	r3, r2, r3
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <WS28XX_Update+0x62>
        {
          hLed->Buffer[i] = hLed->Pulse0;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	88db      	ldrh	r3, [r3, #6]
 8004b64:	b2d9      	uxtb	r1, r3
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8004b70:	460a      	mov	r2, r1
 8004b72:	701a      	strb	r2, [r3, #0]
 8004b74:	e009      	b.n	8004b8a <WS28XX_Update+0x76>
        }
        else
        {
          hLed->Buffer[i] = hLed->Pulse1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	891b      	ldrh	r3, [r3, #8]
 8004b7a:	b2d9      	uxtb	r1, r3
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8004b86:	460a      	mov	r2, r1
 8004b88:	701a      	strb	r2, [r3, #0]
        }
        i++;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	61bb      	str	r3, [r7, #24]
      for (int b = 7; b >= 0 ; b--)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	dacf      	bge.n	8004b3c <WS28XX_Update+0x28>
    for (int rgb = 0; rgb < 3; rgb ++)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	ddc6      	ble.n	8004b36 <WS28XX_Update+0x22>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 8004ba8:	8afb      	ldrh	r3, [r7, #22]
 8004baa:	3301      	adds	r3, #1
 8004bac:	82fb      	strh	r3, [r7, #22]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	895b      	ldrh	r3, [r3, #10]
 8004bb2:	8afa      	ldrh	r2, [r7, #22]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d3bb      	bcc.n	8004b30 <WS28XX_Update+0x1c>
      }
    }
  }
  if (HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, (hLed->MaxPixel * 24) + 4) != HAL_OK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	791b      	ldrb	r3, [r3, #4]
 8004bc0:	461c      	mov	r4, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f503 7243 	add.w	r2, r3, #780	@ 0x30c
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	895b      	ldrh	r3, [r3, #10]
 8004bcc:	4619      	mov	r1, r3
 8004bce:	0049      	lsls	r1, r1, #1
 8004bd0:	440b      	add	r3, r1
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	4621      	mov	r1, r4
 8004bdc:	f7fe f982 	bl	8002ee4 <HAL_TIM_PWM_Start_DMA>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <WS28XX_Update+0xd6>
  {
    answer = false;
 8004be6:	2300      	movs	r3, #0
 8004be8:	77fb      	strb	r3, [r7, #31]
  }
  WS28XX_UnLock(hLed);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fe7a 	bl	80048e4 <WS28XX_UnLock>
  return answer;
 8004bf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3724      	adds	r7, #36	@ 0x24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd90      	pop	{r4, r7, pc}

08004bfa <atoi>:
 8004bfa:	220a      	movs	r2, #10
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	f000 b89b 	b.w	8004d38 <strtol>
	...

08004c04 <siprintf>:
 8004c04:	b40e      	push	{r1, r2, r3}
 8004c06:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c0a:	b500      	push	{lr}
 8004c0c:	b09c      	sub	sp, #112	@ 0x70
 8004c0e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004c10:	9002      	str	r0, [sp, #8]
 8004c12:	9006      	str	r0, [sp, #24]
 8004c14:	9107      	str	r1, [sp, #28]
 8004c16:	9104      	str	r1, [sp, #16]
 8004c18:	4808      	ldr	r0, [pc, #32]	@ (8004c3c <siprintf+0x38>)
 8004c1a:	4909      	ldr	r1, [pc, #36]	@ (8004c40 <siprintf+0x3c>)
 8004c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c20:	9105      	str	r1, [sp, #20]
 8004c22:	6800      	ldr	r0, [r0, #0]
 8004c24:	a902      	add	r1, sp, #8
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	f000 f920 	bl	8004e6c <_svfiprintf_r>
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	9b02      	ldr	r3, [sp, #8]
 8004c30:	701a      	strb	r2, [r3, #0]
 8004c32:	b01c      	add	sp, #112	@ 0x70
 8004c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c38:	b003      	add	sp, #12
 8004c3a:	4770      	bx	lr
 8004c3c:	20000138 	.word	0x20000138
 8004c40:	ffff0208 	.word	0xffff0208

08004c44 <_strtol_l.constprop.0>:
 8004c44:	2b24      	cmp	r3, #36	@ 0x24
 8004c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c4a:	4686      	mov	lr, r0
 8004c4c:	4690      	mov	r8, r2
 8004c4e:	d801      	bhi.n	8004c54 <_strtol_l.constprop.0+0x10>
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d106      	bne.n	8004c62 <_strtol_l.constprop.0+0x1e>
 8004c54:	f000 f882 	bl	8004d5c <__errno>
 8004c58:	2316      	movs	r3, #22
 8004c5a:	6003      	str	r3, [r0, #0]
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c62:	460d      	mov	r5, r1
 8004c64:	4833      	ldr	r0, [pc, #204]	@ (8004d34 <_strtol_l.constprop.0+0xf0>)
 8004c66:	462a      	mov	r2, r5
 8004c68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c6c:	5d06      	ldrb	r6, [r0, r4]
 8004c6e:	f016 0608 	ands.w	r6, r6, #8
 8004c72:	d1f8      	bne.n	8004c66 <_strtol_l.constprop.0+0x22>
 8004c74:	2c2d      	cmp	r4, #45	@ 0x2d
 8004c76:	d12d      	bne.n	8004cd4 <_strtol_l.constprop.0+0x90>
 8004c78:	2601      	movs	r6, #1
 8004c7a:	782c      	ldrb	r4, [r5, #0]
 8004c7c:	1c95      	adds	r5, r2, #2
 8004c7e:	f033 0210 	bics.w	r2, r3, #16
 8004c82:	d109      	bne.n	8004c98 <_strtol_l.constprop.0+0x54>
 8004c84:	2c30      	cmp	r4, #48	@ 0x30
 8004c86:	d12a      	bne.n	8004cde <_strtol_l.constprop.0+0x9a>
 8004c88:	782a      	ldrb	r2, [r5, #0]
 8004c8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004c8e:	2a58      	cmp	r2, #88	@ 0x58
 8004c90:	d125      	bne.n	8004cde <_strtol_l.constprop.0+0x9a>
 8004c92:	2310      	movs	r3, #16
 8004c94:	786c      	ldrb	r4, [r5, #1]
 8004c96:	3502      	adds	r5, #2
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004c9e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8004ca2:	fbbc f9f3 	udiv	r9, ip, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	fb03 ca19 	mls	sl, r3, r9, ip
 8004cac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004cb0:	2f09      	cmp	r7, #9
 8004cb2:	d81b      	bhi.n	8004cec <_strtol_l.constprop.0+0xa8>
 8004cb4:	463c      	mov	r4, r7
 8004cb6:	42a3      	cmp	r3, r4
 8004cb8:	dd27      	ble.n	8004d0a <_strtol_l.constprop.0+0xc6>
 8004cba:	1c57      	adds	r7, r2, #1
 8004cbc:	d007      	beq.n	8004cce <_strtol_l.constprop.0+0x8a>
 8004cbe:	4581      	cmp	r9, r0
 8004cc0:	d320      	bcc.n	8004d04 <_strtol_l.constprop.0+0xc0>
 8004cc2:	d101      	bne.n	8004cc8 <_strtol_l.constprop.0+0x84>
 8004cc4:	45a2      	cmp	sl, r4
 8004cc6:	db1d      	blt.n	8004d04 <_strtol_l.constprop.0+0xc0>
 8004cc8:	2201      	movs	r2, #1
 8004cca:	fb00 4003 	mla	r0, r0, r3, r4
 8004cce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cd2:	e7eb      	b.n	8004cac <_strtol_l.constprop.0+0x68>
 8004cd4:	2c2b      	cmp	r4, #43	@ 0x2b
 8004cd6:	bf04      	itt	eq
 8004cd8:	782c      	ldrbeq	r4, [r5, #0]
 8004cda:	1c95      	addeq	r5, r2, #2
 8004cdc:	e7cf      	b.n	8004c7e <_strtol_l.constprop.0+0x3a>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1da      	bne.n	8004c98 <_strtol_l.constprop.0+0x54>
 8004ce2:	2c30      	cmp	r4, #48	@ 0x30
 8004ce4:	bf0c      	ite	eq
 8004ce6:	2308      	moveq	r3, #8
 8004ce8:	230a      	movne	r3, #10
 8004cea:	e7d5      	b.n	8004c98 <_strtol_l.constprop.0+0x54>
 8004cec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004cf0:	2f19      	cmp	r7, #25
 8004cf2:	d801      	bhi.n	8004cf8 <_strtol_l.constprop.0+0xb4>
 8004cf4:	3c37      	subs	r4, #55	@ 0x37
 8004cf6:	e7de      	b.n	8004cb6 <_strtol_l.constprop.0+0x72>
 8004cf8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004cfc:	2f19      	cmp	r7, #25
 8004cfe:	d804      	bhi.n	8004d0a <_strtol_l.constprop.0+0xc6>
 8004d00:	3c57      	subs	r4, #87	@ 0x57
 8004d02:	e7d8      	b.n	8004cb6 <_strtol_l.constprop.0+0x72>
 8004d04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d08:	e7e1      	b.n	8004cce <_strtol_l.constprop.0+0x8a>
 8004d0a:	1c53      	adds	r3, r2, #1
 8004d0c:	d108      	bne.n	8004d20 <_strtol_l.constprop.0+0xdc>
 8004d0e:	2322      	movs	r3, #34	@ 0x22
 8004d10:	4660      	mov	r0, ip
 8004d12:	f8ce 3000 	str.w	r3, [lr]
 8004d16:	f1b8 0f00 	cmp.w	r8, #0
 8004d1a:	d0a0      	beq.n	8004c5e <_strtol_l.constprop.0+0x1a>
 8004d1c:	1e69      	subs	r1, r5, #1
 8004d1e:	e006      	b.n	8004d2e <_strtol_l.constprop.0+0xea>
 8004d20:	b106      	cbz	r6, 8004d24 <_strtol_l.constprop.0+0xe0>
 8004d22:	4240      	negs	r0, r0
 8004d24:	f1b8 0f00 	cmp.w	r8, #0
 8004d28:	d099      	beq.n	8004c5e <_strtol_l.constprop.0+0x1a>
 8004d2a:	2a00      	cmp	r2, #0
 8004d2c:	d1f6      	bne.n	8004d1c <_strtol_l.constprop.0+0xd8>
 8004d2e:	f8c8 1000 	str.w	r1, [r8]
 8004d32:	e794      	b.n	8004c5e <_strtol_l.constprop.0+0x1a>
 8004d34:	080057b5 	.word	0x080057b5

08004d38 <strtol>:
 8004d38:	4613      	mov	r3, r2
 8004d3a:	460a      	mov	r2, r1
 8004d3c:	4601      	mov	r1, r0
 8004d3e:	4802      	ldr	r0, [pc, #8]	@ (8004d48 <strtol+0x10>)
 8004d40:	6800      	ldr	r0, [r0, #0]
 8004d42:	f7ff bf7f 	b.w	8004c44 <_strtol_l.constprop.0>
 8004d46:	bf00      	nop
 8004d48:	20000138 	.word	0x20000138

08004d4c <memset>:
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4402      	add	r2, r0
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d100      	bne.n	8004d56 <memset+0xa>
 8004d54:	4770      	bx	lr
 8004d56:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5a:	e7f9      	b.n	8004d50 <memset+0x4>

08004d5c <__errno>:
 8004d5c:	4b01      	ldr	r3, [pc, #4]	@ (8004d64 <__errno+0x8>)
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000138 	.word	0x20000138

08004d68 <__libc_init_array>:
 8004d68:	b570      	push	{r4, r5, r6, lr}
 8004d6a:	2600      	movs	r6, #0
 8004d6c:	4d0c      	ldr	r5, [pc, #48]	@ (8004da0 <__libc_init_array+0x38>)
 8004d6e:	4c0d      	ldr	r4, [pc, #52]	@ (8004da4 <__libc_init_array+0x3c>)
 8004d70:	1b64      	subs	r4, r4, r5
 8004d72:	10a4      	asrs	r4, r4, #2
 8004d74:	42a6      	cmp	r6, r4
 8004d76:	d109      	bne.n	8004d8c <__libc_init_array+0x24>
 8004d78:	f000 fc78 	bl	800566c <_init>
 8004d7c:	2600      	movs	r6, #0
 8004d7e:	4d0a      	ldr	r5, [pc, #40]	@ (8004da8 <__libc_init_array+0x40>)
 8004d80:	4c0a      	ldr	r4, [pc, #40]	@ (8004dac <__libc_init_array+0x44>)
 8004d82:	1b64      	subs	r4, r4, r5
 8004d84:	10a4      	asrs	r4, r4, #2
 8004d86:	42a6      	cmp	r6, r4
 8004d88:	d105      	bne.n	8004d96 <__libc_init_array+0x2e>
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
 8004d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d90:	4798      	blx	r3
 8004d92:	3601      	adds	r6, #1
 8004d94:	e7ee      	b.n	8004d74 <__libc_init_array+0xc>
 8004d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d9a:	4798      	blx	r3
 8004d9c:	3601      	adds	r6, #1
 8004d9e:	e7f2      	b.n	8004d86 <__libc_init_array+0x1e>
 8004da0:	080058f0 	.word	0x080058f0
 8004da4:	080058f0 	.word	0x080058f0
 8004da8:	080058f0 	.word	0x080058f0
 8004dac:	080058f4 	.word	0x080058f4

08004db0 <__retarget_lock_acquire_recursive>:
 8004db0:	4770      	bx	lr

08004db2 <__retarget_lock_release_recursive>:
 8004db2:	4770      	bx	lr

08004db4 <__ssputs_r>:
 8004db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db8:	461f      	mov	r7, r3
 8004dba:	688e      	ldr	r6, [r1, #8]
 8004dbc:	4682      	mov	sl, r0
 8004dbe:	42be      	cmp	r6, r7
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	4690      	mov	r8, r2
 8004dc4:	680b      	ldr	r3, [r1, #0]
 8004dc6:	d82d      	bhi.n	8004e24 <__ssputs_r+0x70>
 8004dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004dd0:	d026      	beq.n	8004e20 <__ssputs_r+0x6c>
 8004dd2:	6965      	ldr	r5, [r4, #20]
 8004dd4:	6909      	ldr	r1, [r1, #16]
 8004dd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dda:	eba3 0901 	sub.w	r9, r3, r1
 8004dde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004de2:	1c7b      	adds	r3, r7, #1
 8004de4:	444b      	add	r3, r9
 8004de6:	106d      	asrs	r5, r5, #1
 8004de8:	429d      	cmp	r5, r3
 8004dea:	bf38      	it	cc
 8004dec:	461d      	movcc	r5, r3
 8004dee:	0553      	lsls	r3, r2, #21
 8004df0:	d527      	bpl.n	8004e42 <__ssputs_r+0x8e>
 8004df2:	4629      	mov	r1, r5
 8004df4:	f000 f958 	bl	80050a8 <_malloc_r>
 8004df8:	4606      	mov	r6, r0
 8004dfa:	b360      	cbz	r0, 8004e56 <__ssputs_r+0xa2>
 8004dfc:	464a      	mov	r2, r9
 8004dfe:	6921      	ldr	r1, [r4, #16]
 8004e00:	f000 fbd6 	bl	80055b0 <memcpy>
 8004e04:	89a3      	ldrh	r3, [r4, #12]
 8004e06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	6126      	str	r6, [r4, #16]
 8004e12:	444e      	add	r6, r9
 8004e14:	6026      	str	r6, [r4, #0]
 8004e16:	463e      	mov	r6, r7
 8004e18:	6165      	str	r5, [r4, #20]
 8004e1a:	eba5 0509 	sub.w	r5, r5, r9
 8004e1e:	60a5      	str	r5, [r4, #8]
 8004e20:	42be      	cmp	r6, r7
 8004e22:	d900      	bls.n	8004e26 <__ssputs_r+0x72>
 8004e24:	463e      	mov	r6, r7
 8004e26:	4632      	mov	r2, r6
 8004e28:	4641      	mov	r1, r8
 8004e2a:	6820      	ldr	r0, [r4, #0]
 8004e2c:	f000 fb88 	bl	8005540 <memmove>
 8004e30:	2000      	movs	r0, #0
 8004e32:	68a3      	ldr	r3, [r4, #8]
 8004e34:	1b9b      	subs	r3, r3, r6
 8004e36:	60a3      	str	r3, [r4, #8]
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	4433      	add	r3, r6
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e42:	462a      	mov	r2, r5
 8004e44:	f000 fb4e 	bl	80054e4 <_realloc_r>
 8004e48:	4606      	mov	r6, r0
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d1e0      	bne.n	8004e10 <__ssputs_r+0x5c>
 8004e4e:	4650      	mov	r0, sl
 8004e50:	6921      	ldr	r1, [r4, #16]
 8004e52:	f000 fbbb 	bl	80055cc <_free_r>
 8004e56:	230c      	movs	r3, #12
 8004e58:	f8ca 3000 	str.w	r3, [sl]
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e66:	81a3      	strh	r3, [r4, #12]
 8004e68:	e7e9      	b.n	8004e3e <__ssputs_r+0x8a>
	...

08004e6c <_svfiprintf_r>:
 8004e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e70:	4698      	mov	r8, r3
 8004e72:	898b      	ldrh	r3, [r1, #12]
 8004e74:	4607      	mov	r7, r0
 8004e76:	061b      	lsls	r3, r3, #24
 8004e78:	460d      	mov	r5, r1
 8004e7a:	4614      	mov	r4, r2
 8004e7c:	b09d      	sub	sp, #116	@ 0x74
 8004e7e:	d510      	bpl.n	8004ea2 <_svfiprintf_r+0x36>
 8004e80:	690b      	ldr	r3, [r1, #16]
 8004e82:	b973      	cbnz	r3, 8004ea2 <_svfiprintf_r+0x36>
 8004e84:	2140      	movs	r1, #64	@ 0x40
 8004e86:	f000 f90f 	bl	80050a8 <_malloc_r>
 8004e8a:	6028      	str	r0, [r5, #0]
 8004e8c:	6128      	str	r0, [r5, #16]
 8004e8e:	b930      	cbnz	r0, 8004e9e <_svfiprintf_r+0x32>
 8004e90:	230c      	movs	r3, #12
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e98:	b01d      	add	sp, #116	@ 0x74
 8004e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e9e:	2340      	movs	r3, #64	@ 0x40
 8004ea0:	616b      	str	r3, [r5, #20]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ea6:	2320      	movs	r3, #32
 8004ea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004eac:	2330      	movs	r3, #48	@ 0x30
 8004eae:	f04f 0901 	mov.w	r9, #1
 8004eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eb6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005050 <_svfiprintf_r+0x1e4>
 8004eba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ebe:	4623      	mov	r3, r4
 8004ec0:	469a      	mov	sl, r3
 8004ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ec6:	b10a      	cbz	r2, 8004ecc <_svfiprintf_r+0x60>
 8004ec8:	2a25      	cmp	r2, #37	@ 0x25
 8004eca:	d1f9      	bne.n	8004ec0 <_svfiprintf_r+0x54>
 8004ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ed0:	d00b      	beq.n	8004eea <_svfiprintf_r+0x7e>
 8004ed2:	465b      	mov	r3, fp
 8004ed4:	4622      	mov	r2, r4
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	4638      	mov	r0, r7
 8004eda:	f7ff ff6b 	bl	8004db4 <__ssputs_r>
 8004ede:	3001      	adds	r0, #1
 8004ee0:	f000 80a7 	beq.w	8005032 <_svfiprintf_r+0x1c6>
 8004ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ee6:	445a      	add	r2, fp
 8004ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004eea:	f89a 3000 	ldrb.w	r3, [sl]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 809f 	beq.w	8005032 <_svfiprintf_r+0x1c6>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004efe:	f10a 0a01 	add.w	sl, sl, #1
 8004f02:	9304      	str	r3, [sp, #16]
 8004f04:	9307      	str	r3, [sp, #28]
 8004f06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f0c:	4654      	mov	r4, sl
 8004f0e:	2205      	movs	r2, #5
 8004f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f14:	484e      	ldr	r0, [pc, #312]	@ (8005050 <_svfiprintf_r+0x1e4>)
 8004f16:	f000 fb3d 	bl	8005594 <memchr>
 8004f1a:	9a04      	ldr	r2, [sp, #16]
 8004f1c:	b9d8      	cbnz	r0, 8004f56 <_svfiprintf_r+0xea>
 8004f1e:	06d0      	lsls	r0, r2, #27
 8004f20:	bf44      	itt	mi
 8004f22:	2320      	movmi	r3, #32
 8004f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f28:	0711      	lsls	r1, r2, #28
 8004f2a:	bf44      	itt	mi
 8004f2c:	232b      	movmi	r3, #43	@ 0x2b
 8004f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f32:	f89a 3000 	ldrb.w	r3, [sl]
 8004f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f38:	d015      	beq.n	8004f66 <_svfiprintf_r+0xfa>
 8004f3a:	4654      	mov	r4, sl
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	f04f 0c0a 	mov.w	ip, #10
 8004f42:	9a07      	ldr	r2, [sp, #28]
 8004f44:	4621      	mov	r1, r4
 8004f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f4a:	3b30      	subs	r3, #48	@ 0x30
 8004f4c:	2b09      	cmp	r3, #9
 8004f4e:	d94b      	bls.n	8004fe8 <_svfiprintf_r+0x17c>
 8004f50:	b1b0      	cbz	r0, 8004f80 <_svfiprintf_r+0x114>
 8004f52:	9207      	str	r2, [sp, #28]
 8004f54:	e014      	b.n	8004f80 <_svfiprintf_r+0x114>
 8004f56:	eba0 0308 	sub.w	r3, r0, r8
 8004f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	46a2      	mov	sl, r4
 8004f62:	9304      	str	r3, [sp, #16]
 8004f64:	e7d2      	b.n	8004f0c <_svfiprintf_r+0xa0>
 8004f66:	9b03      	ldr	r3, [sp, #12]
 8004f68:	1d19      	adds	r1, r3, #4
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	9103      	str	r1, [sp, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bfbb      	ittet	lt
 8004f72:	425b      	neglt	r3, r3
 8004f74:	f042 0202 	orrlt.w	r2, r2, #2
 8004f78:	9307      	strge	r3, [sp, #28]
 8004f7a:	9307      	strlt	r3, [sp, #28]
 8004f7c:	bfb8      	it	lt
 8004f7e:	9204      	strlt	r2, [sp, #16]
 8004f80:	7823      	ldrb	r3, [r4, #0]
 8004f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f84:	d10a      	bne.n	8004f9c <_svfiprintf_r+0x130>
 8004f86:	7863      	ldrb	r3, [r4, #1]
 8004f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f8a:	d132      	bne.n	8004ff2 <_svfiprintf_r+0x186>
 8004f8c:	9b03      	ldr	r3, [sp, #12]
 8004f8e:	3402      	adds	r4, #2
 8004f90:	1d1a      	adds	r2, r3, #4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	9203      	str	r2, [sp, #12]
 8004f96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f9a:	9305      	str	r3, [sp, #20]
 8004f9c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005054 <_svfiprintf_r+0x1e8>
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	4650      	mov	r0, sl
 8004fa4:	7821      	ldrb	r1, [r4, #0]
 8004fa6:	f000 faf5 	bl	8005594 <memchr>
 8004faa:	b138      	cbz	r0, 8004fbc <_svfiprintf_r+0x150>
 8004fac:	2240      	movs	r2, #64	@ 0x40
 8004fae:	9b04      	ldr	r3, [sp, #16]
 8004fb0:	eba0 000a 	sub.w	r0, r0, sl
 8004fb4:	4082      	lsls	r2, r0
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	3401      	adds	r4, #1
 8004fba:	9304      	str	r3, [sp, #16]
 8004fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc0:	2206      	movs	r2, #6
 8004fc2:	4825      	ldr	r0, [pc, #148]	@ (8005058 <_svfiprintf_r+0x1ec>)
 8004fc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fc8:	f000 fae4 	bl	8005594 <memchr>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d036      	beq.n	800503e <_svfiprintf_r+0x1d2>
 8004fd0:	4b22      	ldr	r3, [pc, #136]	@ (800505c <_svfiprintf_r+0x1f0>)
 8004fd2:	bb1b      	cbnz	r3, 800501c <_svfiprintf_r+0x1b0>
 8004fd4:	9b03      	ldr	r3, [sp, #12]
 8004fd6:	3307      	adds	r3, #7
 8004fd8:	f023 0307 	bic.w	r3, r3, #7
 8004fdc:	3308      	adds	r3, #8
 8004fde:	9303      	str	r3, [sp, #12]
 8004fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fe2:	4433      	add	r3, r6
 8004fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fe6:	e76a      	b.n	8004ebe <_svfiprintf_r+0x52>
 8004fe8:	460c      	mov	r4, r1
 8004fea:	2001      	movs	r0, #1
 8004fec:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ff0:	e7a8      	b.n	8004f44 <_svfiprintf_r+0xd8>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f04f 0c0a 	mov.w	ip, #10
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	3401      	adds	r4, #1
 8004ffc:	9305      	str	r3, [sp, #20]
 8004ffe:	4620      	mov	r0, r4
 8005000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005004:	3a30      	subs	r2, #48	@ 0x30
 8005006:	2a09      	cmp	r2, #9
 8005008:	d903      	bls.n	8005012 <_svfiprintf_r+0x1a6>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0c6      	beq.n	8004f9c <_svfiprintf_r+0x130>
 800500e:	9105      	str	r1, [sp, #20]
 8005010:	e7c4      	b.n	8004f9c <_svfiprintf_r+0x130>
 8005012:	4604      	mov	r4, r0
 8005014:	2301      	movs	r3, #1
 8005016:	fb0c 2101 	mla	r1, ip, r1, r2
 800501a:	e7f0      	b.n	8004ffe <_svfiprintf_r+0x192>
 800501c:	ab03      	add	r3, sp, #12
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	462a      	mov	r2, r5
 8005022:	4638      	mov	r0, r7
 8005024:	4b0e      	ldr	r3, [pc, #56]	@ (8005060 <_svfiprintf_r+0x1f4>)
 8005026:	a904      	add	r1, sp, #16
 8005028:	f3af 8000 	nop.w
 800502c:	1c42      	adds	r2, r0, #1
 800502e:	4606      	mov	r6, r0
 8005030:	d1d6      	bne.n	8004fe0 <_svfiprintf_r+0x174>
 8005032:	89ab      	ldrh	r3, [r5, #12]
 8005034:	065b      	lsls	r3, r3, #25
 8005036:	f53f af2d 	bmi.w	8004e94 <_svfiprintf_r+0x28>
 800503a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800503c:	e72c      	b.n	8004e98 <_svfiprintf_r+0x2c>
 800503e:	ab03      	add	r3, sp, #12
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	462a      	mov	r2, r5
 8005044:	4638      	mov	r0, r7
 8005046:	4b06      	ldr	r3, [pc, #24]	@ (8005060 <_svfiprintf_r+0x1f4>)
 8005048:	a904      	add	r1, sp, #16
 800504a:	f000 f91f 	bl	800528c <_printf_i>
 800504e:	e7ed      	b.n	800502c <_svfiprintf_r+0x1c0>
 8005050:	080058b5 	.word	0x080058b5
 8005054:	080058bb 	.word	0x080058bb
 8005058:	080058bf 	.word	0x080058bf
 800505c:	00000000 	.word	0x00000000
 8005060:	08004db5 	.word	0x08004db5

08005064 <sbrk_aligned>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	4e0f      	ldr	r6, [pc, #60]	@ (80050a4 <sbrk_aligned+0x40>)
 8005068:	460c      	mov	r4, r1
 800506a:	6831      	ldr	r1, [r6, #0]
 800506c:	4605      	mov	r5, r0
 800506e:	b911      	cbnz	r1, 8005076 <sbrk_aligned+0x12>
 8005070:	f000 fa80 	bl	8005574 <_sbrk_r>
 8005074:	6030      	str	r0, [r6, #0]
 8005076:	4621      	mov	r1, r4
 8005078:	4628      	mov	r0, r5
 800507a:	f000 fa7b 	bl	8005574 <_sbrk_r>
 800507e:	1c43      	adds	r3, r0, #1
 8005080:	d103      	bne.n	800508a <sbrk_aligned+0x26>
 8005082:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005086:	4620      	mov	r0, r4
 8005088:	bd70      	pop	{r4, r5, r6, pc}
 800508a:	1cc4      	adds	r4, r0, #3
 800508c:	f024 0403 	bic.w	r4, r4, #3
 8005090:	42a0      	cmp	r0, r4
 8005092:	d0f8      	beq.n	8005086 <sbrk_aligned+0x22>
 8005094:	1a21      	subs	r1, r4, r0
 8005096:	4628      	mov	r0, r5
 8005098:	f000 fa6c 	bl	8005574 <_sbrk_r>
 800509c:	3001      	adds	r0, #1
 800509e:	d1f2      	bne.n	8005086 <sbrk_aligned+0x22>
 80050a0:	e7ef      	b.n	8005082 <sbrk_aligned+0x1e>
 80050a2:	bf00      	nop
 80050a4:	20001ff8 	.word	0x20001ff8

080050a8 <_malloc_r>:
 80050a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050ac:	1ccd      	adds	r5, r1, #3
 80050ae:	f025 0503 	bic.w	r5, r5, #3
 80050b2:	3508      	adds	r5, #8
 80050b4:	2d0c      	cmp	r5, #12
 80050b6:	bf38      	it	cc
 80050b8:	250c      	movcc	r5, #12
 80050ba:	2d00      	cmp	r5, #0
 80050bc:	4606      	mov	r6, r0
 80050be:	db01      	blt.n	80050c4 <_malloc_r+0x1c>
 80050c0:	42a9      	cmp	r1, r5
 80050c2:	d904      	bls.n	80050ce <_malloc_r+0x26>
 80050c4:	230c      	movs	r3, #12
 80050c6:	6033      	str	r3, [r6, #0]
 80050c8:	2000      	movs	r0, #0
 80050ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051a4 <_malloc_r+0xfc>
 80050d2:	f000 f9fb 	bl	80054cc <__malloc_lock>
 80050d6:	f8d8 3000 	ldr.w	r3, [r8]
 80050da:	461c      	mov	r4, r3
 80050dc:	bb44      	cbnz	r4, 8005130 <_malloc_r+0x88>
 80050de:	4629      	mov	r1, r5
 80050e0:	4630      	mov	r0, r6
 80050e2:	f7ff ffbf 	bl	8005064 <sbrk_aligned>
 80050e6:	1c43      	adds	r3, r0, #1
 80050e8:	4604      	mov	r4, r0
 80050ea:	d158      	bne.n	800519e <_malloc_r+0xf6>
 80050ec:	f8d8 4000 	ldr.w	r4, [r8]
 80050f0:	4627      	mov	r7, r4
 80050f2:	2f00      	cmp	r7, #0
 80050f4:	d143      	bne.n	800517e <_malloc_r+0xd6>
 80050f6:	2c00      	cmp	r4, #0
 80050f8:	d04b      	beq.n	8005192 <_malloc_r+0xea>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	4639      	mov	r1, r7
 80050fe:	4630      	mov	r0, r6
 8005100:	eb04 0903 	add.w	r9, r4, r3
 8005104:	f000 fa36 	bl	8005574 <_sbrk_r>
 8005108:	4581      	cmp	r9, r0
 800510a:	d142      	bne.n	8005192 <_malloc_r+0xea>
 800510c:	6821      	ldr	r1, [r4, #0]
 800510e:	4630      	mov	r0, r6
 8005110:	1a6d      	subs	r5, r5, r1
 8005112:	4629      	mov	r1, r5
 8005114:	f7ff ffa6 	bl	8005064 <sbrk_aligned>
 8005118:	3001      	adds	r0, #1
 800511a:	d03a      	beq.n	8005192 <_malloc_r+0xea>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	442b      	add	r3, r5
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	f8d8 3000 	ldr.w	r3, [r8]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	bb62      	cbnz	r2, 8005184 <_malloc_r+0xdc>
 800512a:	f8c8 7000 	str.w	r7, [r8]
 800512e:	e00f      	b.n	8005150 <_malloc_r+0xa8>
 8005130:	6822      	ldr	r2, [r4, #0]
 8005132:	1b52      	subs	r2, r2, r5
 8005134:	d420      	bmi.n	8005178 <_malloc_r+0xd0>
 8005136:	2a0b      	cmp	r2, #11
 8005138:	d917      	bls.n	800516a <_malloc_r+0xc2>
 800513a:	1961      	adds	r1, r4, r5
 800513c:	42a3      	cmp	r3, r4
 800513e:	6025      	str	r5, [r4, #0]
 8005140:	bf18      	it	ne
 8005142:	6059      	strne	r1, [r3, #4]
 8005144:	6863      	ldr	r3, [r4, #4]
 8005146:	bf08      	it	eq
 8005148:	f8c8 1000 	streq.w	r1, [r8]
 800514c:	5162      	str	r2, [r4, r5]
 800514e:	604b      	str	r3, [r1, #4]
 8005150:	4630      	mov	r0, r6
 8005152:	f000 f9c1 	bl	80054d8 <__malloc_unlock>
 8005156:	f104 000b 	add.w	r0, r4, #11
 800515a:	1d23      	adds	r3, r4, #4
 800515c:	f020 0007 	bic.w	r0, r0, #7
 8005160:	1ac2      	subs	r2, r0, r3
 8005162:	bf1c      	itt	ne
 8005164:	1a1b      	subne	r3, r3, r0
 8005166:	50a3      	strne	r3, [r4, r2]
 8005168:	e7af      	b.n	80050ca <_malloc_r+0x22>
 800516a:	6862      	ldr	r2, [r4, #4]
 800516c:	42a3      	cmp	r3, r4
 800516e:	bf0c      	ite	eq
 8005170:	f8c8 2000 	streq.w	r2, [r8]
 8005174:	605a      	strne	r2, [r3, #4]
 8005176:	e7eb      	b.n	8005150 <_malloc_r+0xa8>
 8005178:	4623      	mov	r3, r4
 800517a:	6864      	ldr	r4, [r4, #4]
 800517c:	e7ae      	b.n	80050dc <_malloc_r+0x34>
 800517e:	463c      	mov	r4, r7
 8005180:	687f      	ldr	r7, [r7, #4]
 8005182:	e7b6      	b.n	80050f2 <_malloc_r+0x4a>
 8005184:	461a      	mov	r2, r3
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	42a3      	cmp	r3, r4
 800518a:	d1fb      	bne.n	8005184 <_malloc_r+0xdc>
 800518c:	2300      	movs	r3, #0
 800518e:	6053      	str	r3, [r2, #4]
 8005190:	e7de      	b.n	8005150 <_malloc_r+0xa8>
 8005192:	230c      	movs	r3, #12
 8005194:	4630      	mov	r0, r6
 8005196:	6033      	str	r3, [r6, #0]
 8005198:	f000 f99e 	bl	80054d8 <__malloc_unlock>
 800519c:	e794      	b.n	80050c8 <_malloc_r+0x20>
 800519e:	6005      	str	r5, [r0, #0]
 80051a0:	e7d6      	b.n	8005150 <_malloc_r+0xa8>
 80051a2:	bf00      	nop
 80051a4:	20001ffc 	.word	0x20001ffc

080051a8 <_printf_common>:
 80051a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ac:	4616      	mov	r6, r2
 80051ae:	4698      	mov	r8, r3
 80051b0:	688a      	ldr	r2, [r1, #8]
 80051b2:	690b      	ldr	r3, [r1, #16]
 80051b4:	4607      	mov	r7, r0
 80051b6:	4293      	cmp	r3, r2
 80051b8:	bfb8      	it	lt
 80051ba:	4613      	movlt	r3, r2
 80051bc:	6033      	str	r3, [r6, #0]
 80051be:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051c2:	460c      	mov	r4, r1
 80051c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051c8:	b10a      	cbz	r2, 80051ce <_printf_common+0x26>
 80051ca:	3301      	adds	r3, #1
 80051cc:	6033      	str	r3, [r6, #0]
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	0699      	lsls	r1, r3, #26
 80051d2:	bf42      	ittt	mi
 80051d4:	6833      	ldrmi	r3, [r6, #0]
 80051d6:	3302      	addmi	r3, #2
 80051d8:	6033      	strmi	r3, [r6, #0]
 80051da:	6825      	ldr	r5, [r4, #0]
 80051dc:	f015 0506 	ands.w	r5, r5, #6
 80051e0:	d106      	bne.n	80051f0 <_printf_common+0x48>
 80051e2:	f104 0a19 	add.w	sl, r4, #25
 80051e6:	68e3      	ldr	r3, [r4, #12]
 80051e8:	6832      	ldr	r2, [r6, #0]
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	42ab      	cmp	r3, r5
 80051ee:	dc2b      	bgt.n	8005248 <_printf_common+0xa0>
 80051f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051f4:	6822      	ldr	r2, [r4, #0]
 80051f6:	3b00      	subs	r3, #0
 80051f8:	bf18      	it	ne
 80051fa:	2301      	movne	r3, #1
 80051fc:	0692      	lsls	r2, r2, #26
 80051fe:	d430      	bmi.n	8005262 <_printf_common+0xba>
 8005200:	4641      	mov	r1, r8
 8005202:	4638      	mov	r0, r7
 8005204:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005208:	47c8      	blx	r9
 800520a:	3001      	adds	r0, #1
 800520c:	d023      	beq.n	8005256 <_printf_common+0xae>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	6922      	ldr	r2, [r4, #16]
 8005212:	f003 0306 	and.w	r3, r3, #6
 8005216:	2b04      	cmp	r3, #4
 8005218:	bf14      	ite	ne
 800521a:	2500      	movne	r5, #0
 800521c:	6833      	ldreq	r3, [r6, #0]
 800521e:	f04f 0600 	mov.w	r6, #0
 8005222:	bf08      	it	eq
 8005224:	68e5      	ldreq	r5, [r4, #12]
 8005226:	f104 041a 	add.w	r4, r4, #26
 800522a:	bf08      	it	eq
 800522c:	1aed      	subeq	r5, r5, r3
 800522e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005232:	bf08      	it	eq
 8005234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005238:	4293      	cmp	r3, r2
 800523a:	bfc4      	itt	gt
 800523c:	1a9b      	subgt	r3, r3, r2
 800523e:	18ed      	addgt	r5, r5, r3
 8005240:	42b5      	cmp	r5, r6
 8005242:	d11a      	bne.n	800527a <_printf_common+0xd2>
 8005244:	2000      	movs	r0, #0
 8005246:	e008      	b.n	800525a <_printf_common+0xb2>
 8005248:	2301      	movs	r3, #1
 800524a:	4652      	mov	r2, sl
 800524c:	4641      	mov	r1, r8
 800524e:	4638      	mov	r0, r7
 8005250:	47c8      	blx	r9
 8005252:	3001      	adds	r0, #1
 8005254:	d103      	bne.n	800525e <_printf_common+0xb6>
 8005256:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800525a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525e:	3501      	adds	r5, #1
 8005260:	e7c1      	b.n	80051e6 <_printf_common+0x3e>
 8005262:	2030      	movs	r0, #48	@ 0x30
 8005264:	18e1      	adds	r1, r4, r3
 8005266:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005270:	4422      	add	r2, r4
 8005272:	3302      	adds	r3, #2
 8005274:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005278:	e7c2      	b.n	8005200 <_printf_common+0x58>
 800527a:	2301      	movs	r3, #1
 800527c:	4622      	mov	r2, r4
 800527e:	4641      	mov	r1, r8
 8005280:	4638      	mov	r0, r7
 8005282:	47c8      	blx	r9
 8005284:	3001      	adds	r0, #1
 8005286:	d0e6      	beq.n	8005256 <_printf_common+0xae>
 8005288:	3601      	adds	r6, #1
 800528a:	e7d9      	b.n	8005240 <_printf_common+0x98>

0800528c <_printf_i>:
 800528c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005290:	7e0f      	ldrb	r7, [r1, #24]
 8005292:	4691      	mov	r9, r2
 8005294:	2f78      	cmp	r7, #120	@ 0x78
 8005296:	4680      	mov	r8, r0
 8005298:	460c      	mov	r4, r1
 800529a:	469a      	mov	sl, r3
 800529c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800529e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052a2:	d807      	bhi.n	80052b4 <_printf_i+0x28>
 80052a4:	2f62      	cmp	r7, #98	@ 0x62
 80052a6:	d80a      	bhi.n	80052be <_printf_i+0x32>
 80052a8:	2f00      	cmp	r7, #0
 80052aa:	f000 80d3 	beq.w	8005454 <_printf_i+0x1c8>
 80052ae:	2f58      	cmp	r7, #88	@ 0x58
 80052b0:	f000 80ba 	beq.w	8005428 <_printf_i+0x19c>
 80052b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052bc:	e03a      	b.n	8005334 <_printf_i+0xa8>
 80052be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052c2:	2b15      	cmp	r3, #21
 80052c4:	d8f6      	bhi.n	80052b4 <_printf_i+0x28>
 80052c6:	a101      	add	r1, pc, #4	@ (adr r1, 80052cc <_printf_i+0x40>)
 80052c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052cc:	08005325 	.word	0x08005325
 80052d0:	08005339 	.word	0x08005339
 80052d4:	080052b5 	.word	0x080052b5
 80052d8:	080052b5 	.word	0x080052b5
 80052dc:	080052b5 	.word	0x080052b5
 80052e0:	080052b5 	.word	0x080052b5
 80052e4:	08005339 	.word	0x08005339
 80052e8:	080052b5 	.word	0x080052b5
 80052ec:	080052b5 	.word	0x080052b5
 80052f0:	080052b5 	.word	0x080052b5
 80052f4:	080052b5 	.word	0x080052b5
 80052f8:	0800543b 	.word	0x0800543b
 80052fc:	08005363 	.word	0x08005363
 8005300:	080053f5 	.word	0x080053f5
 8005304:	080052b5 	.word	0x080052b5
 8005308:	080052b5 	.word	0x080052b5
 800530c:	0800545d 	.word	0x0800545d
 8005310:	080052b5 	.word	0x080052b5
 8005314:	08005363 	.word	0x08005363
 8005318:	080052b5 	.word	0x080052b5
 800531c:	080052b5 	.word	0x080052b5
 8005320:	080053fd 	.word	0x080053fd
 8005324:	6833      	ldr	r3, [r6, #0]
 8005326:	1d1a      	adds	r2, r3, #4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6032      	str	r2, [r6, #0]
 800532c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005330:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005334:	2301      	movs	r3, #1
 8005336:	e09e      	b.n	8005476 <_printf_i+0x1ea>
 8005338:	6833      	ldr	r3, [r6, #0]
 800533a:	6820      	ldr	r0, [r4, #0]
 800533c:	1d19      	adds	r1, r3, #4
 800533e:	6031      	str	r1, [r6, #0]
 8005340:	0606      	lsls	r6, r0, #24
 8005342:	d501      	bpl.n	8005348 <_printf_i+0xbc>
 8005344:	681d      	ldr	r5, [r3, #0]
 8005346:	e003      	b.n	8005350 <_printf_i+0xc4>
 8005348:	0645      	lsls	r5, r0, #25
 800534a:	d5fb      	bpl.n	8005344 <_printf_i+0xb8>
 800534c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005350:	2d00      	cmp	r5, #0
 8005352:	da03      	bge.n	800535c <_printf_i+0xd0>
 8005354:	232d      	movs	r3, #45	@ 0x2d
 8005356:	426d      	negs	r5, r5
 8005358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800535c:	230a      	movs	r3, #10
 800535e:	4859      	ldr	r0, [pc, #356]	@ (80054c4 <_printf_i+0x238>)
 8005360:	e011      	b.n	8005386 <_printf_i+0xfa>
 8005362:	6821      	ldr	r1, [r4, #0]
 8005364:	6833      	ldr	r3, [r6, #0]
 8005366:	0608      	lsls	r0, r1, #24
 8005368:	f853 5b04 	ldr.w	r5, [r3], #4
 800536c:	d402      	bmi.n	8005374 <_printf_i+0xe8>
 800536e:	0649      	lsls	r1, r1, #25
 8005370:	bf48      	it	mi
 8005372:	b2ad      	uxthmi	r5, r5
 8005374:	2f6f      	cmp	r7, #111	@ 0x6f
 8005376:	6033      	str	r3, [r6, #0]
 8005378:	bf14      	ite	ne
 800537a:	230a      	movne	r3, #10
 800537c:	2308      	moveq	r3, #8
 800537e:	4851      	ldr	r0, [pc, #324]	@ (80054c4 <_printf_i+0x238>)
 8005380:	2100      	movs	r1, #0
 8005382:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005386:	6866      	ldr	r6, [r4, #4]
 8005388:	2e00      	cmp	r6, #0
 800538a:	bfa8      	it	ge
 800538c:	6821      	ldrge	r1, [r4, #0]
 800538e:	60a6      	str	r6, [r4, #8]
 8005390:	bfa4      	itt	ge
 8005392:	f021 0104 	bicge.w	r1, r1, #4
 8005396:	6021      	strge	r1, [r4, #0]
 8005398:	b90d      	cbnz	r5, 800539e <_printf_i+0x112>
 800539a:	2e00      	cmp	r6, #0
 800539c:	d04b      	beq.n	8005436 <_printf_i+0x1aa>
 800539e:	4616      	mov	r6, r2
 80053a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80053a4:	fb03 5711 	mls	r7, r3, r1, r5
 80053a8:	5dc7      	ldrb	r7, [r0, r7]
 80053aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053ae:	462f      	mov	r7, r5
 80053b0:	42bb      	cmp	r3, r7
 80053b2:	460d      	mov	r5, r1
 80053b4:	d9f4      	bls.n	80053a0 <_printf_i+0x114>
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d10b      	bne.n	80053d2 <_printf_i+0x146>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	07df      	lsls	r7, r3, #31
 80053be:	d508      	bpl.n	80053d2 <_printf_i+0x146>
 80053c0:	6923      	ldr	r3, [r4, #16]
 80053c2:	6861      	ldr	r1, [r4, #4]
 80053c4:	4299      	cmp	r1, r3
 80053c6:	bfde      	ittt	le
 80053c8:	2330      	movle	r3, #48	@ 0x30
 80053ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053ce:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80053d2:	1b92      	subs	r2, r2, r6
 80053d4:	6122      	str	r2, [r4, #16]
 80053d6:	464b      	mov	r3, r9
 80053d8:	4621      	mov	r1, r4
 80053da:	4640      	mov	r0, r8
 80053dc:	f8cd a000 	str.w	sl, [sp]
 80053e0:	aa03      	add	r2, sp, #12
 80053e2:	f7ff fee1 	bl	80051a8 <_printf_common>
 80053e6:	3001      	adds	r0, #1
 80053e8:	d14a      	bne.n	8005480 <_printf_i+0x1f4>
 80053ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053ee:	b004      	add	sp, #16
 80053f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	f043 0320 	orr.w	r3, r3, #32
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	2778      	movs	r7, #120	@ 0x78
 80053fe:	4832      	ldr	r0, [pc, #200]	@ (80054c8 <_printf_i+0x23c>)
 8005400:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	6831      	ldr	r1, [r6, #0]
 8005408:	061f      	lsls	r7, r3, #24
 800540a:	f851 5b04 	ldr.w	r5, [r1], #4
 800540e:	d402      	bmi.n	8005416 <_printf_i+0x18a>
 8005410:	065f      	lsls	r7, r3, #25
 8005412:	bf48      	it	mi
 8005414:	b2ad      	uxthmi	r5, r5
 8005416:	6031      	str	r1, [r6, #0]
 8005418:	07d9      	lsls	r1, r3, #31
 800541a:	bf44      	itt	mi
 800541c:	f043 0320 	orrmi.w	r3, r3, #32
 8005420:	6023      	strmi	r3, [r4, #0]
 8005422:	b11d      	cbz	r5, 800542c <_printf_i+0x1a0>
 8005424:	2310      	movs	r3, #16
 8005426:	e7ab      	b.n	8005380 <_printf_i+0xf4>
 8005428:	4826      	ldr	r0, [pc, #152]	@ (80054c4 <_printf_i+0x238>)
 800542a:	e7e9      	b.n	8005400 <_printf_i+0x174>
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	f023 0320 	bic.w	r3, r3, #32
 8005432:	6023      	str	r3, [r4, #0]
 8005434:	e7f6      	b.n	8005424 <_printf_i+0x198>
 8005436:	4616      	mov	r6, r2
 8005438:	e7bd      	b.n	80053b6 <_printf_i+0x12a>
 800543a:	6833      	ldr	r3, [r6, #0]
 800543c:	6825      	ldr	r5, [r4, #0]
 800543e:	1d18      	adds	r0, r3, #4
 8005440:	6961      	ldr	r1, [r4, #20]
 8005442:	6030      	str	r0, [r6, #0]
 8005444:	062e      	lsls	r6, r5, #24
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	d501      	bpl.n	800544e <_printf_i+0x1c2>
 800544a:	6019      	str	r1, [r3, #0]
 800544c:	e002      	b.n	8005454 <_printf_i+0x1c8>
 800544e:	0668      	lsls	r0, r5, #25
 8005450:	d5fb      	bpl.n	800544a <_printf_i+0x1be>
 8005452:	8019      	strh	r1, [r3, #0]
 8005454:	2300      	movs	r3, #0
 8005456:	4616      	mov	r6, r2
 8005458:	6123      	str	r3, [r4, #16]
 800545a:	e7bc      	b.n	80053d6 <_printf_i+0x14a>
 800545c:	6833      	ldr	r3, [r6, #0]
 800545e:	2100      	movs	r1, #0
 8005460:	1d1a      	adds	r2, r3, #4
 8005462:	6032      	str	r2, [r6, #0]
 8005464:	681e      	ldr	r6, [r3, #0]
 8005466:	6862      	ldr	r2, [r4, #4]
 8005468:	4630      	mov	r0, r6
 800546a:	f000 f893 	bl	8005594 <memchr>
 800546e:	b108      	cbz	r0, 8005474 <_printf_i+0x1e8>
 8005470:	1b80      	subs	r0, r0, r6
 8005472:	6060      	str	r0, [r4, #4]
 8005474:	6863      	ldr	r3, [r4, #4]
 8005476:	6123      	str	r3, [r4, #16]
 8005478:	2300      	movs	r3, #0
 800547a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800547e:	e7aa      	b.n	80053d6 <_printf_i+0x14a>
 8005480:	4632      	mov	r2, r6
 8005482:	4649      	mov	r1, r9
 8005484:	4640      	mov	r0, r8
 8005486:	6923      	ldr	r3, [r4, #16]
 8005488:	47d0      	blx	sl
 800548a:	3001      	adds	r0, #1
 800548c:	d0ad      	beq.n	80053ea <_printf_i+0x15e>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	079b      	lsls	r3, r3, #30
 8005492:	d413      	bmi.n	80054bc <_printf_i+0x230>
 8005494:	68e0      	ldr	r0, [r4, #12]
 8005496:	9b03      	ldr	r3, [sp, #12]
 8005498:	4298      	cmp	r0, r3
 800549a:	bfb8      	it	lt
 800549c:	4618      	movlt	r0, r3
 800549e:	e7a6      	b.n	80053ee <_printf_i+0x162>
 80054a0:	2301      	movs	r3, #1
 80054a2:	4632      	mov	r2, r6
 80054a4:	4649      	mov	r1, r9
 80054a6:	4640      	mov	r0, r8
 80054a8:	47d0      	blx	sl
 80054aa:	3001      	adds	r0, #1
 80054ac:	d09d      	beq.n	80053ea <_printf_i+0x15e>
 80054ae:	3501      	adds	r5, #1
 80054b0:	68e3      	ldr	r3, [r4, #12]
 80054b2:	9903      	ldr	r1, [sp, #12]
 80054b4:	1a5b      	subs	r3, r3, r1
 80054b6:	42ab      	cmp	r3, r5
 80054b8:	dcf2      	bgt.n	80054a0 <_printf_i+0x214>
 80054ba:	e7eb      	b.n	8005494 <_printf_i+0x208>
 80054bc:	2500      	movs	r5, #0
 80054be:	f104 0619 	add.w	r6, r4, #25
 80054c2:	e7f5      	b.n	80054b0 <_printf_i+0x224>
 80054c4:	080058c6 	.word	0x080058c6
 80054c8:	080058d7 	.word	0x080058d7

080054cc <__malloc_lock>:
 80054cc:	4801      	ldr	r0, [pc, #4]	@ (80054d4 <__malloc_lock+0x8>)
 80054ce:	f7ff bc6f 	b.w	8004db0 <__retarget_lock_acquire_recursive>
 80054d2:	bf00      	nop
 80054d4:	20001ff4 	.word	0x20001ff4

080054d8 <__malloc_unlock>:
 80054d8:	4801      	ldr	r0, [pc, #4]	@ (80054e0 <__malloc_unlock+0x8>)
 80054da:	f7ff bc6a 	b.w	8004db2 <__retarget_lock_release_recursive>
 80054de:	bf00      	nop
 80054e0:	20001ff4 	.word	0x20001ff4

080054e4 <_realloc_r>:
 80054e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e8:	4680      	mov	r8, r0
 80054ea:	4615      	mov	r5, r2
 80054ec:	460c      	mov	r4, r1
 80054ee:	b921      	cbnz	r1, 80054fa <_realloc_r+0x16>
 80054f0:	4611      	mov	r1, r2
 80054f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054f6:	f7ff bdd7 	b.w	80050a8 <_malloc_r>
 80054fa:	b92a      	cbnz	r2, 8005508 <_realloc_r+0x24>
 80054fc:	f000 f866 	bl	80055cc <_free_r>
 8005500:	2400      	movs	r4, #0
 8005502:	4620      	mov	r0, r4
 8005504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005508:	f000 f8a8 	bl	800565c <_malloc_usable_size_r>
 800550c:	4285      	cmp	r5, r0
 800550e:	4606      	mov	r6, r0
 8005510:	d802      	bhi.n	8005518 <_realloc_r+0x34>
 8005512:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005516:	d8f4      	bhi.n	8005502 <_realloc_r+0x1e>
 8005518:	4629      	mov	r1, r5
 800551a:	4640      	mov	r0, r8
 800551c:	f7ff fdc4 	bl	80050a8 <_malloc_r>
 8005520:	4607      	mov	r7, r0
 8005522:	2800      	cmp	r0, #0
 8005524:	d0ec      	beq.n	8005500 <_realloc_r+0x1c>
 8005526:	42b5      	cmp	r5, r6
 8005528:	462a      	mov	r2, r5
 800552a:	4621      	mov	r1, r4
 800552c:	bf28      	it	cs
 800552e:	4632      	movcs	r2, r6
 8005530:	f000 f83e 	bl	80055b0 <memcpy>
 8005534:	4621      	mov	r1, r4
 8005536:	4640      	mov	r0, r8
 8005538:	f000 f848 	bl	80055cc <_free_r>
 800553c:	463c      	mov	r4, r7
 800553e:	e7e0      	b.n	8005502 <_realloc_r+0x1e>

08005540 <memmove>:
 8005540:	4288      	cmp	r0, r1
 8005542:	b510      	push	{r4, lr}
 8005544:	eb01 0402 	add.w	r4, r1, r2
 8005548:	d902      	bls.n	8005550 <memmove+0x10>
 800554a:	4284      	cmp	r4, r0
 800554c:	4623      	mov	r3, r4
 800554e:	d807      	bhi.n	8005560 <memmove+0x20>
 8005550:	1e43      	subs	r3, r0, #1
 8005552:	42a1      	cmp	r1, r4
 8005554:	d008      	beq.n	8005568 <memmove+0x28>
 8005556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800555a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800555e:	e7f8      	b.n	8005552 <memmove+0x12>
 8005560:	4601      	mov	r1, r0
 8005562:	4402      	add	r2, r0
 8005564:	428a      	cmp	r2, r1
 8005566:	d100      	bne.n	800556a <memmove+0x2a>
 8005568:	bd10      	pop	{r4, pc}
 800556a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800556e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005572:	e7f7      	b.n	8005564 <memmove+0x24>

08005574 <_sbrk_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	2300      	movs	r3, #0
 8005578:	4d05      	ldr	r5, [pc, #20]	@ (8005590 <_sbrk_r+0x1c>)
 800557a:	4604      	mov	r4, r0
 800557c:	4608      	mov	r0, r1
 800557e:	602b      	str	r3, [r5, #0]
 8005580:	f7fb fdec 	bl	800115c <_sbrk>
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	d102      	bne.n	800558e <_sbrk_r+0x1a>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	b103      	cbz	r3, 800558e <_sbrk_r+0x1a>
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	bd38      	pop	{r3, r4, r5, pc}
 8005590:	20002000 	.word	0x20002000

08005594 <memchr>:
 8005594:	4603      	mov	r3, r0
 8005596:	b510      	push	{r4, lr}
 8005598:	b2c9      	uxtb	r1, r1
 800559a:	4402      	add	r2, r0
 800559c:	4293      	cmp	r3, r2
 800559e:	4618      	mov	r0, r3
 80055a0:	d101      	bne.n	80055a6 <memchr+0x12>
 80055a2:	2000      	movs	r0, #0
 80055a4:	e003      	b.n	80055ae <memchr+0x1a>
 80055a6:	7804      	ldrb	r4, [r0, #0]
 80055a8:	3301      	adds	r3, #1
 80055aa:	428c      	cmp	r4, r1
 80055ac:	d1f6      	bne.n	800559c <memchr+0x8>
 80055ae:	bd10      	pop	{r4, pc}

080055b0 <memcpy>:
 80055b0:	440a      	add	r2, r1
 80055b2:	4291      	cmp	r1, r2
 80055b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80055b8:	d100      	bne.n	80055bc <memcpy+0xc>
 80055ba:	4770      	bx	lr
 80055bc:	b510      	push	{r4, lr}
 80055be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055c2:	4291      	cmp	r1, r2
 80055c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055c8:	d1f9      	bne.n	80055be <memcpy+0xe>
 80055ca:	bd10      	pop	{r4, pc}

080055cc <_free_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	4605      	mov	r5, r0
 80055d0:	2900      	cmp	r1, #0
 80055d2:	d040      	beq.n	8005656 <_free_r+0x8a>
 80055d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d8:	1f0c      	subs	r4, r1, #4
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bfb8      	it	lt
 80055de:	18e4      	addlt	r4, r4, r3
 80055e0:	f7ff ff74 	bl	80054cc <__malloc_lock>
 80055e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005658 <_free_r+0x8c>)
 80055e6:	6813      	ldr	r3, [r2, #0]
 80055e8:	b933      	cbnz	r3, 80055f8 <_free_r+0x2c>
 80055ea:	6063      	str	r3, [r4, #4]
 80055ec:	6014      	str	r4, [r2, #0]
 80055ee:	4628      	mov	r0, r5
 80055f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055f4:	f7ff bf70 	b.w	80054d8 <__malloc_unlock>
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	d908      	bls.n	800560e <_free_r+0x42>
 80055fc:	6820      	ldr	r0, [r4, #0]
 80055fe:	1821      	adds	r1, r4, r0
 8005600:	428b      	cmp	r3, r1
 8005602:	bf01      	itttt	eq
 8005604:	6819      	ldreq	r1, [r3, #0]
 8005606:	685b      	ldreq	r3, [r3, #4]
 8005608:	1809      	addeq	r1, r1, r0
 800560a:	6021      	streq	r1, [r4, #0]
 800560c:	e7ed      	b.n	80055ea <_free_r+0x1e>
 800560e:	461a      	mov	r2, r3
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	b10b      	cbz	r3, 8005618 <_free_r+0x4c>
 8005614:	42a3      	cmp	r3, r4
 8005616:	d9fa      	bls.n	800560e <_free_r+0x42>
 8005618:	6811      	ldr	r1, [r2, #0]
 800561a:	1850      	adds	r0, r2, r1
 800561c:	42a0      	cmp	r0, r4
 800561e:	d10b      	bne.n	8005638 <_free_r+0x6c>
 8005620:	6820      	ldr	r0, [r4, #0]
 8005622:	4401      	add	r1, r0
 8005624:	1850      	adds	r0, r2, r1
 8005626:	4283      	cmp	r3, r0
 8005628:	6011      	str	r1, [r2, #0]
 800562a:	d1e0      	bne.n	80055ee <_free_r+0x22>
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	4408      	add	r0, r1
 8005632:	6010      	str	r0, [r2, #0]
 8005634:	6053      	str	r3, [r2, #4]
 8005636:	e7da      	b.n	80055ee <_free_r+0x22>
 8005638:	d902      	bls.n	8005640 <_free_r+0x74>
 800563a:	230c      	movs	r3, #12
 800563c:	602b      	str	r3, [r5, #0]
 800563e:	e7d6      	b.n	80055ee <_free_r+0x22>
 8005640:	6820      	ldr	r0, [r4, #0]
 8005642:	1821      	adds	r1, r4, r0
 8005644:	428b      	cmp	r3, r1
 8005646:	bf01      	itttt	eq
 8005648:	6819      	ldreq	r1, [r3, #0]
 800564a:	685b      	ldreq	r3, [r3, #4]
 800564c:	1809      	addeq	r1, r1, r0
 800564e:	6021      	streq	r1, [r4, #0]
 8005650:	6063      	str	r3, [r4, #4]
 8005652:	6054      	str	r4, [r2, #4]
 8005654:	e7cb      	b.n	80055ee <_free_r+0x22>
 8005656:	bd38      	pop	{r3, r4, r5, pc}
 8005658:	20001ffc 	.word	0x20001ffc

0800565c <_malloc_usable_size_r>:
 800565c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005660:	1f18      	subs	r0, r3, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	bfbc      	itt	lt
 8005666:	580b      	ldrlt	r3, [r1, r0]
 8005668:	18c0      	addlt	r0, r0, r3
 800566a:	4770      	bx	lr

0800566c <_init>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	bf00      	nop
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr

08005678 <_fini>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	bf00      	nop
 800567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567e:	bc08      	pop	{r3}
 8005680:	469e      	mov	lr, r3
 8005682:	4770      	bx	lr
