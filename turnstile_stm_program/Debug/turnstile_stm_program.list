
turnstile_stm_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080062d0  080062d0  000072d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006478  08006478  000083ec  2**0
                  CONTENTS
  4 .ARM          00000008  08006478  08006478  00007478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006480  08006480  000083ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006480  08006480  00007480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006484  08006484  00007484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003ec  20000000  08006488  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004134  200003ec  08006874  000083ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004520  08006874  00008520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000083ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e53c  00000000  00000000  00008415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027bd  00000000  00000000  00016951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00019110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b53  00000000  00000000  00019fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018989  00000000  00000000  0001aaf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d32  00000000  00000000  0003347c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bfe4  00000000  00000000  000441ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0192  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004198  00000000  00000000  000d01d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000d4370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200003ec 	.word	0x200003ec
 8000128:	00000000 	.word	0x00000000
 800012c:	080062b8 	.word	0x080062b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200003f0 	.word	0x200003f0
 8000148:	080062b8 	.word	0x080062b8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <strcmp>:
 800015c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000164:	2a01      	cmp	r2, #1
 8000166:	bf28      	it	cs
 8000168:	429a      	cmpcs	r2, r3
 800016a:	d0f7      	beq.n	800015c <strcmp>
 800016c:	1ad0      	subs	r0, r2, r3
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__aeabi_f2uiz>:
 800062c:	0042      	lsls	r2, r0, #1
 800062e:	d20e      	bcs.n	800064e <__aeabi_f2uiz+0x22>
 8000630:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000634:	d30b      	bcc.n	800064e <__aeabi_f2uiz+0x22>
 8000636:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800063a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800063e:	d409      	bmi.n	8000654 <__aeabi_f2uiz+0x28>
 8000640:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000644:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000648:	fa23 f002 	lsr.w	r0, r3, r2
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr
 8000654:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000658:	d101      	bne.n	800065e <__aeabi_f2uiz+0x32>
 800065a:	0242      	lsls	r2, r0, #9
 800065c:	d102      	bne.n	8000664 <__aeabi_f2uiz+0x38>
 800065e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000662:	4770      	bx	lr
 8000664:	f04f 0000 	mov.w	r0, #0
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000672:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <MX_DMA_Init+0x48>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a0f      	ldr	r2, [pc, #60]	@ (80006b4 <MX_DMA_Init+0x48>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <MX_DMA_Init+0x48>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	200f      	movs	r0, #15
 8000690:	f001 ff51 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000694:	200f      	movs	r0, #15
 8000696:	f001 ff6a 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2010      	movs	r0, #16
 80006a0:	f001 ff49 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006a4:	2010      	movs	r0, #16
 80006a6:	f001 ff62 	bl	800256e <HAL_NVIC_EnableIRQ>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000

080006b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006cc:	4b52      	ldr	r3, [pc, #328]	@ (8000818 <MX_GPIO_Init+0x160>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a51      	ldr	r2, [pc, #324]	@ (8000818 <MX_GPIO_Init+0x160>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b4f      	ldr	r3, [pc, #316]	@ (8000818 <MX_GPIO_Init+0x160>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0310 	and.w	r3, r3, #16
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e4:	4b4c      	ldr	r3, [pc, #304]	@ (8000818 <MX_GPIO_Init+0x160>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a4b      	ldr	r2, [pc, #300]	@ (8000818 <MX_GPIO_Init+0x160>)
 80006ea:	f043 0320 	orr.w	r3, r3, #32
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b49      	ldr	r3, [pc, #292]	@ (8000818 <MX_GPIO_Init+0x160>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0320 	and.w	r3, r3, #32
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b46      	ldr	r3, [pc, #280]	@ (8000818 <MX_GPIO_Init+0x160>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a45      	ldr	r2, [pc, #276]	@ (8000818 <MX_GPIO_Init+0x160>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b43      	ldr	r3, [pc, #268]	@ (8000818 <MX_GPIO_Init+0x160>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000714:	4b40      	ldr	r3, [pc, #256]	@ (8000818 <MX_GPIO_Init+0x160>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a3f      	ldr	r2, [pc, #252]	@ (8000818 <MX_GPIO_Init+0x160>)
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b3d      	ldr	r3, [pc, #244]	@ (8000818 <MX_GPIO_Init+0x160>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0308 	and.w	r3, r3, #8
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IR_PULSE_GEN_Pin|Direction2_Pin|Direction1_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f240 3101 	movw	r1, #769	@ 0x301
 8000732:	483a      	ldr	r0, [pc, #232]	@ (800081c <MX_GPIO_Init+0x164>)
 8000734:	f002 fb60 	bl	8002df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2120      	movs	r1, #32
 800073c:	4838      	ldr	r0, [pc, #224]	@ (8000820 <MX_GPIO_Init+0x168>)
 800073e:	f002 fb5b 	bl	8002df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2180      	movs	r1, #128	@ 0x80
 8000746:	4837      	ldr	r0, [pc, #220]	@ (8000824 <MX_GPIO_Init+0x16c>)
 8000748:	f002 fb56 	bl	8002df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|IR1_Pin|Encoder_Pin|IR_2_Pin
 800074c:	f242 03fe 	movw	r3, #8446	@ 0x20fe
 8000750:	613b      	str	r3, [r7, #16]
                          |IR_3_Pin|IR_4_Pin|IR_5_Pin|IR_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000752:	4b35      	ldr	r3, [pc, #212]	@ (8000828 <MX_GPIO_Init+0x170>)
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4619      	mov	r1, r3
 8000760:	482e      	ldr	r0, [pc, #184]	@ (800081c <MX_GPIO_Init+0x164>)
 8000762:	f002 f9c5 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IR_PULSE_GEN_Pin|Direction2_Pin|Direction1_Pin;
 8000766:	f240 3301 	movw	r3, #769	@ 0x301
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2302      	movs	r3, #2
 8000776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	4619      	mov	r1, r3
 800077e:	4827      	ldr	r0, [pc, #156]	@ (800081c <MX_GPIO_Init+0x164>)
 8000780:	f002 f9b6 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000784:	2320      	movs	r3, #32
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2302      	movs	r3, #2
 8000792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4619      	mov	r1, r3
 800079a:	4821      	ldr	r0, [pc, #132]	@ (8000820 <MX_GPIO_Init+0x168>)
 800079c:	f002 f9a8 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Limit_2A_Pin|Limit_2B_Pin;
 80007a0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80007a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a6:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <MX_GPIO_Init+0x170>)
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	4619      	mov	r1, r3
 80007b4:	481b      	ldr	r0, [pc, #108]	@ (8000824 <MX_GPIO_Init+0x16c>)
 80007b6:	f002 f99b 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Limit_1A_Pin|Limit_1B_Pin;
 80007ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c0:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <MX_GPIO_Init+0x170>)
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	4619      	mov	r1, r3
 80007ce:	4813      	ldr	r0, [pc, #76]	@ (800081c <MX_GPIO_Init+0x164>)
 80007d0:	f002 f98e 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007d4:	2380      	movs	r3, #128	@ 0x80
 80007d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2302      	movs	r3, #2
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4619      	mov	r1, r3
 80007ea:	480e      	ldr	r0, [pc, #56]	@ (8000824 <MX_GPIO_Init+0x16c>)
 80007ec:	f002 f980 	bl	8002af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	2008      	movs	r0, #8
 80007f6:	f001 fe9e 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007fa:	2008      	movs	r0, #8
 80007fc:	f001 feb7 	bl	800256e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	2028      	movs	r0, #40	@ 0x28
 8000806:	f001 fe96 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800080a:	2028      	movs	r0, #40	@ 0x28
 800080c:	f001 feaf 	bl	800256e <HAL_NVIC_EnableIRQ>

}
 8000810:	bf00      	nop
 8000812:	3720      	adds	r7, #32
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40021000 	.word	0x40021000
 800081c:	40011000 	.word	0x40011000
 8000820:	40010800 	.word	0x40010800
 8000824:	40010c00 	.word	0x40010c00
 8000828:	10110000 	.word	0x10110000

0800082c <Draw_Arrow>:
const int entryStripSize = sizeof(entryStrip) / sizeof(entryStrip[0]);
const int exitStripSize = sizeof(exitStrip) / sizeof(exitStrip[0]);
const int entryRFIDSize = sizeof(entryRFID) / sizeof(entryRFID[0]);
const int exitRFIDSize = sizeof(exitRFID) / sizeof(exitRFID[0]);
/* Function to draw the arrow on a specified strip */
void Draw_Arrow(WS28XX_HandleTypeDef *ws, int *arrow, int color) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 26; i++) {
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e010      	b.n	8000860 <Draw_Arrow+0x34>
        WS28XX_SetPixel_RGBW_565(ws, arrow[i], color, brightness);
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	4413      	add	r3, r2
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	b299      	uxth	r1, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	b29a      	uxth	r2, r3
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <Draw_Arrow+0x48>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	68f8      	ldr	r0, [r7, #12]
 8000856:	f004 ff63 	bl	8005720 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 26; i++) {
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3301      	adds	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	2b19      	cmp	r3, #25
 8000864:	ddeb      	ble.n	800083e <Draw_Arrow+0x12>
    }
    WS28XX_Update(ws);
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f004 ffce 	bl	8005808 <WS28XX_Update>
}
 800086c:	bf00      	nop
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000004 	.word	0x20000004

08000878 <Clear_Arrow>:

void Clear_Arrow(WS28XX_HandleTypeDef *ws, int *arrow) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 26; i++) {
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	e00d      	b.n	80008a4 <Clear_Arrow+0x2c>
        WS28XX_SetPixel_RGBW_565(ws, arrow[i], COLOR_RGB565_BLACK, 0);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	4413      	add	r3, r2
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	b299      	uxth	r1, r3
 8000894:	2300      	movs	r3, #0
 8000896:	2200      	movs	r2, #0
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f004 ff41 	bl	8005720 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 26; i++) {
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3301      	adds	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b19      	cmp	r3, #25
 80008a8:	ddee      	ble.n	8000888 <Clear_Arrow+0x10>
    }
    WS28XX_Update(ws);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f004 ffac 	bl	8005808 <WS28XX_Update>
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <Shift_Arrow_EntryMatrix>:

/* Function to shift the arrow forward by one row, limited to the first strip */
void Shift_Arrow_EntryMatrix(int *arrow) {
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 26; i++) {
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	e023      	b.n	800090e <Shift_Arrow_EntryMatrix+0x56>
        arrow[i] += 8;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	440b      	add	r3, r1
 80008d8:	3208      	adds	r2, #8
 80008da:	601a      	str	r2, [r3, #0]
        if (arrow[i] >= 256) {  // Wrap around if out of bounds in the entry matrix (0–255)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	4413      	add	r3, r2
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2bff      	cmp	r3, #255	@ 0xff
 80008e8:	dd0e      	ble.n	8000908 <Shift_Arrow_EntryMatrix+0x50>
            arrow[i] = arrow[i] % 256;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	68fa      	ldr	r2, [r7, #12]
 80008f6:	0092      	lsls	r2, r2, #2
 80008f8:	6879      	ldr	r1, [r7, #4]
 80008fa:	440a      	add	r2, r1
 80008fc:	4259      	negs	r1, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	b2c9      	uxtb	r1, r1
 8000902:	bf58      	it	pl
 8000904:	424b      	negpl	r3, r1
 8000906:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < 26; i++) {
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b19      	cmp	r3, #25
 8000912:	ddd8      	ble.n	80008c6 <Shift_Arrow_EntryMatrix+0xe>
        }
    }
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <Shift_Arrow_ExitMatrix>:

/* Function to shift the arrow forward by one row, limited to the second strip */
void Shift_Arrow_ExitMatrix(int *arrow) {
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 26; i++) {
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e029      	b.n	8000982 <Shift_Arrow_ExitMatrix+0x62>
        arrow[i] += 8;  // Move forward by 8 (to the next row)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	440b      	add	r3, r1
 8000940:	3208      	adds	r2, #8
 8000942:	601a      	str	r2, [r3, #0]
        if (arrow[i] >= 578) {  // Wrap around if the index exceeds the maximum address (577)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	4413      	add	r3, r2
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f240 2241 	movw	r2, #577	@ 0x241
 8000952:	4293      	cmp	r3, r2
 8000954:	dd12      	ble.n	800097c <Shift_Arrow_ExitMatrix+0x5c>
            arrow[i] = 322 + ((arrow[i] - 322) % 256);  // Rebase to 0, wrap, and re-add the base offset
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8000964:	425a      	negs	r2, r3
 8000966:	b2db      	uxtb	r3, r3
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	bf58      	it	pl
 800096c:	4253      	negpl	r3, r2
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	0092      	lsls	r2, r2, #2
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	440a      	add	r2, r1
 8000976:	f503 73a1 	add.w	r3, r3, #322	@ 0x142
 800097a:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < 26; i++) {
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	3301      	adds	r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	2b19      	cmp	r3, #25
 8000986:	ddd2      	ble.n	800092e <Shift_Arrow_ExitMatrix+0xe>
        }
    }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <Led_Strip>:

void Led_Strip(WS28XX_HandleTypeDef *ws, int *strip, int strip_size, char *color) {
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b087      	sub	sp, #28
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	603b      	str	r3, [r7, #0]
    uint16_t selected_color; // Variable to hold the selected color value

    // Determine the color based on the input string
    if (strcmp(color, "red") == 0) {
 80009a2:	4929      	ldr	r1, [pc, #164]	@ (8000a48 <Led_Strip+0xb4>)
 80009a4:	6838      	ldr	r0, [r7, #0]
 80009a6:	f7ff fbd9 	bl	800015c <strcmp>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d103      	bne.n	80009b8 <Led_Strip+0x24>
        selected_color = COLOR_RGB565_RED;
 80009b0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80009b4:	82fb      	strh	r3, [r7, #22]
 80009b6:	e01d      	b.n	80009f4 <Led_Strip+0x60>
    } else if (strcmp(color, "blue") == 0) {
 80009b8:	4924      	ldr	r1, [pc, #144]	@ (8000a4c <Led_Strip+0xb8>)
 80009ba:	6838      	ldr	r0, [r7, #0]
 80009bc:	f7ff fbce 	bl	800015c <strcmp>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d102      	bne.n	80009cc <Led_Strip+0x38>
        selected_color = COLOR_RGB565_BLUE;
 80009c6:	231f      	movs	r3, #31
 80009c8:	82fb      	strh	r3, [r7, #22]
 80009ca:	e013      	b.n	80009f4 <Led_Strip+0x60>
    } else if (strcmp(color, "green") == 0) {
 80009cc:	4920      	ldr	r1, [pc, #128]	@ (8000a50 <Led_Strip+0xbc>)
 80009ce:	6838      	ldr	r0, [r7, #0]
 80009d0:	f7ff fbc4 	bl	800015c <strcmp>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d103      	bne.n	80009e2 <Led_Strip+0x4e>
        selected_color = COLOR_RGB565_GREEN;
 80009da:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80009de:	82fb      	strh	r3, [r7, #22]
 80009e0:	e008      	b.n	80009f4 <Led_Strip+0x60>
    } else if (strcmp(color, "off") == 0) {
 80009e2:	491c      	ldr	r1, [pc, #112]	@ (8000a54 <Led_Strip+0xc0>)
 80009e4:	6838      	ldr	r0, [r7, #0]
 80009e6:	f7ff fbb9 	bl	800015c <strcmp>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d126      	bne.n	8000a3e <Led_Strip+0xaa>
        selected_color = COLOR_RGB565_BLACK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	82fb      	strh	r3, [r7, #22]
    } else {
        return; // Invalid color; do nothing
    }

    // Set the color for each LED in the strip
    for (int i = 0; i < strip_size; i++) {
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	e019      	b.n	8000a2e <Led_Strip+0x9a>
        WS28XX_SetPixel_RGBW_565(ws, strip[i], selected_color, (strcmp(color, "off") == 0) ? 0 : brightness);
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	4413      	add	r3, r2
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	b29c      	uxth	r4, r3
 8000a06:	4913      	ldr	r1, [pc, #76]	@ (8000a54 <Led_Strip+0xc0>)
 8000a08:	6838      	ldr	r0, [r7, #0]
 8000a0a:	f7ff fba7 	bl	800015c <strcmp>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d003      	beq.n	8000a1c <Led_Strip+0x88>
 8000a14:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <Led_Strip+0xc4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	e000      	b.n	8000a1e <Led_Strip+0x8a>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	8afa      	ldrh	r2, [r7, #22]
 8000a20:	4621      	mov	r1, r4
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f004 fe7c 	bl	8005720 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < strip_size; i++) {
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	dbe1      	blt.n	80009fa <Led_Strip+0x66>
    }

    // Update the LED strip
    WS28XX_Update(ws);
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f004 fee6 	bl	8005808 <WS28XX_Update>
 8000a3c:	e000      	b.n	8000a40 <Led_Strip+0xac>
        return; // Invalid color; do nothing
 8000a3e:	bf00      	nop
}
 8000a40:	371c      	adds	r7, #28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd90      	pop	{r4, r7, pc}
 8000a46:	bf00      	nop
 8000a48:	080062d0 	.word	0x080062d0
 8000a4c:	080062d4 	.word	0x080062d4
 8000a50:	080062dc 	.word	0x080062dc
 8000a54:	080062e4 	.word	0x080062e4
 8000a58:	20000004 	.word	0x20000004

08000a5c <Draw_Cross>:

/* Function to animate the cross pattern */
void Draw_Cross(WS28XX_HandleTypeDef *ws, int *top, int *middle, int *bottom, int color) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
 8000a68:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 16; i++) {
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	e02c      	b.n	8000aca <Draw_Cross+0x6e>
        WS28XX_SetPixel_RGBW_565(ws, top[i], color, brightness);
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	4413      	add	r3, r2
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	b299      	uxth	r1, r3
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <Draw_Cross+0x84>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f004 fe4a 	bl	8005720 <WS28XX_SetPixel_RGBW_565>
        WS28XX_SetPixel_RGBW_565(ws, middle[i], color, brightness);
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	4413      	add	r3, r2
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	b299      	uxth	r1, r3
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <Draw_Cross+0x84>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f004 fe3c 	bl	8005720 <WS28XX_SetPixel_RGBW_565>
        WS28XX_SetPixel_RGBW_565(ws, bottom[i], color, brightness);
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	b299      	uxth	r1, r3
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <Draw_Cross+0x84>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f004 fe2e 	bl	8005720 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 16; i++) {
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	ddcf      	ble.n	8000a70 <Draw_Cross+0x14>
    }
    WS28XX_Update(ws);
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f004 fe99 	bl	8005808 <WS28XX_Update>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <Clear_Cross>:

void Clear_Cross(WS28XX_HandleTypeDef *ws, int *top, int *middle, int *bottom) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
 8000af0:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 16; i++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	e023      	b.n	8000b40 <Clear_Cross+0x5c>
        WS28XX_SetPixel_RGBW_565(ws, top[i], COLOR_RGB565_BLACK, 0);
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	4413      	add	r3, r2
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	b299      	uxth	r1, r3
 8000b04:	2300      	movs	r3, #0
 8000b06:	2200      	movs	r2, #0
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f004 fe09 	bl	8005720 <WS28XX_SetPixel_RGBW_565>
        WS28XX_SetPixel_RGBW_565(ws, middle[i], COLOR_RGB565_BLACK, 0);
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	b299      	uxth	r1, r3
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f004 fdfe 	bl	8005720 <WS28XX_SetPixel_RGBW_565>
        WS28XX_SetPixel_RGBW_565(ws, bottom[i], COLOR_RGB565_BLACK, 0);
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	b299      	uxth	r1, r3
 8000b30:	2300      	movs	r3, #0
 8000b32:	2200      	movs	r2, #0
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f004 fdf3 	bl	8005720 <WS28XX_SetPixel_RGBW_565>
    for (int i = 0; i < 16; i++) {
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	2b0f      	cmp	r3, #15
 8000b44:	ddd8      	ble.n	8000af8 <Clear_Cross+0x14>
    }
    WS28XX_Update(ws);
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f004 fe5e 	bl	8005808 <WS28XX_Update>
}
 8000b4c:	bf00      	nop
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <Clear_All_Animations>:

/* Function to clear all animations on both strips */
void Clear_All_Animations(WS28XX_HandleTypeDef *ws) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
    Clear_Arrow(ws, arrow_entry_matrix);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4918      	ldr	r1, [pc, #96]	@ (8000bc0 <Clear_All_Animations+0x6c>)
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fe89 	bl	8000878 <Clear_Arrow>
    Clear_Arrow(ws, arrow_exit_matrix);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4916      	ldr	r1, [pc, #88]	@ (8000bc4 <Clear_All_Animations+0x70>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fe84 	bl	8000878 <Clear_Arrow>
    Clear_Cross(ws, topCross_entry_matrix, middleCross_entry_matrix, bottomCross_entry_matrix);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <Clear_All_Animations+0x74>)
 8000b74:	4a15      	ldr	r2, [pc, #84]	@ (8000bcc <Clear_All_Animations+0x78>)
 8000b76:	4916      	ldr	r1, [pc, #88]	@ (8000bd0 <Clear_All_Animations+0x7c>)
 8000b78:	f7ff ffb4 	bl	8000ae4 <Clear_Cross>
    Clear_Cross(ws, topCross_exit_matrix, middleCross_exit_matrix, bottomCross_exit_matrix);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <Clear_All_Animations+0x80>)
 8000b80:	4a15      	ldr	r2, [pc, #84]	@ (8000bd8 <Clear_All_Animations+0x84>)
 8000b82:	4916      	ldr	r1, [pc, #88]	@ (8000bdc <Clear_All_Animations+0x88>)
 8000b84:	f7ff ffae 	bl	8000ae4 <Clear_Cross>
    Led_Strip(&ws, entryStrip, entryStripSize, "off");
 8000b88:	2213      	movs	r2, #19
 8000b8a:	1d38      	adds	r0, r7, #4
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <Clear_All_Animations+0x8c>)
 8000b8e:	4915      	ldr	r1, [pc, #84]	@ (8000be4 <Clear_All_Animations+0x90>)
 8000b90:	f7ff ff00 	bl	8000994 <Led_Strip>
    Led_Strip(&ws, entryRFID, entryRFIDSize, "off");
 8000b94:	2214      	movs	r2, #20
 8000b96:	1d38      	adds	r0, r7, #4
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <Clear_All_Animations+0x8c>)
 8000b9a:	4913      	ldr	r1, [pc, #76]	@ (8000be8 <Clear_All_Animations+0x94>)
 8000b9c:	f7ff fefa 	bl	8000994 <Led_Strip>
    Led_Strip(&ws, exitStrip, exitStripSize, "off");
 8000ba0:	2213      	movs	r2, #19
 8000ba2:	1d38      	adds	r0, r7, #4
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <Clear_All_Animations+0x8c>)
 8000ba6:	4911      	ldr	r1, [pc, #68]	@ (8000bec <Clear_All_Animations+0x98>)
 8000ba8:	f7ff fef4 	bl	8000994 <Led_Strip>
    Led_Strip(&ws, exitRFID, exitRFIDSize, "off");
 8000bac:	2214      	movs	r2, #20
 8000bae:	1d38      	adds	r0, r7, #4
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <Clear_All_Animations+0x8c>)
 8000bb2:	490f      	ldr	r1, [pc, #60]	@ (8000bf0 <Clear_All_Animations+0x9c>)
 8000bb4:	f7ff feee 	bl	8000994 <Led_Strip>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000070 	.word	0x20000070
 8000bc8:	20000158 	.word	0x20000158
 8000bcc:	20000118 	.word	0x20000118
 8000bd0:	200000d8 	.word	0x200000d8
 8000bd4:	20000218 	.word	0x20000218
 8000bd8:	200001d8 	.word	0x200001d8
 8000bdc:	20000198 	.word	0x20000198
 8000be0:	080062e4 	.word	0x080062e4
 8000be4:	20000258 	.word	0x20000258
 8000be8:	200002f0 	.word	0x200002f0
 8000bec:	200002a4 	.word	0x200002a4
 8000bf0:	20000340 	.word	0x20000340

08000bf4 <Entry_Granted_Animation>:


void Entry_Granted_Animation(WS28XX_HandleTypeDef *ws) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af02      	add	r7, sp, #8
 8000bfa:	6078      	str	r0, [r7, #4]
    static uint32_t last_update_time = 0;

    if (HAL_GetTick() - last_update_time >= DELAY_TIME) {
 8000bfc:	f001 fb80 	bl	8002300 <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	4b29      	ldr	r3, [pc, #164]	@ (8000ca8 <Entry_Granted_Animation+0xb4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	2b63      	cmp	r3, #99	@ 0x63
 8000c0a:	d949      	bls.n	8000ca0 <Entry_Granted_Animation+0xac>
        last_update_time = HAL_GetTick();
 8000c0c:	f001 fb78 	bl	8002300 <HAL_GetTick>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a25      	ldr	r2, [pc, #148]	@ (8000ca8 <Entry_Granted_Animation+0xb4>)
 8000c14:	6013      	str	r3, [r2, #0]

        Clear_Arrow(ws, arrow_entry_matrix);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4924      	ldr	r1, [pc, #144]	@ (8000cac <Entry_Granted_Animation+0xb8>)
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fe2c 	bl	8000878 <Clear_Arrow>
        Shift_Arrow_EntryMatrix(arrow_entry_matrix);
 8000c20:	4822      	ldr	r0, [pc, #136]	@ (8000cac <Entry_Granted_Animation+0xb8>)
 8000c22:	f7ff fe49 	bl	80008b8 <Shift_Arrow_EntryMatrix>
        Draw_Arrow(ws, arrow_entry_matrix, COLOR_RGB565_GREEN);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000c2c:	491f      	ldr	r1, [pc, #124]	@ (8000cac <Entry_Granted_Animation+0xb8>)
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fdfc 	bl	800082c <Draw_Arrow>

        Led_Strip(&ws, entryStrip, entryStripSize, "green");
 8000c34:	2213      	movs	r2, #19
 8000c36:	1d38      	adds	r0, r7, #4
 8000c38:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <Entry_Granted_Animation+0xbc>)
 8000c3a:	491e      	ldr	r1, [pc, #120]	@ (8000cb4 <Entry_Granted_Animation+0xc0>)
 8000c3c:	f7ff feaa 	bl	8000994 <Led_Strip>
        Led_Strip(&ws, entryRFID, entryRFIDSize, "green");
 8000c40:	2214      	movs	r2, #20
 8000c42:	1d38      	adds	r0, r7, #4
 8000c44:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <Entry_Granted_Animation+0xbc>)
 8000c46:	491c      	ldr	r1, [pc, #112]	@ (8000cb8 <Entry_Granted_Animation+0xc4>)
 8000c48:	f7ff fea4 	bl	8000994 <Led_Strip>
        Led_Strip(&ws, exitStrip, exitStripSize, "red");
 8000c4c:	2213      	movs	r2, #19
 8000c4e:	1d38      	adds	r0, r7, #4
 8000c50:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <Entry_Granted_Animation+0xc8>)
 8000c52:	491b      	ldr	r1, [pc, #108]	@ (8000cc0 <Entry_Granted_Animation+0xcc>)
 8000c54:	f7ff fe9e 	bl	8000994 <Led_Strip>
        Led_Strip(&ws, exitRFID, exitRFIDSize, "red");
 8000c58:	2214      	movs	r2, #20
 8000c5a:	1d38      	adds	r0, r7, #4
 8000c5c:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <Entry_Granted_Animation+0xc8>)
 8000c5e:	4919      	ldr	r1, [pc, #100]	@ (8000cc4 <Entry_Granted_Animation+0xd0>)
 8000c60:	f7ff fe98 	bl	8000994 <Led_Strip>

        if (cross_state) {
 8000c64:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <Entry_Granted_Animation+0xd4>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d009      	beq.n	8000c80 <Entry_Granted_Animation+0x8c>
            Draw_Cross(ws, topCross_exit_matrix, middleCross_exit_matrix, bottomCross_exit_matrix, COLOR_RGB565_RED);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <Entry_Granted_Animation+0xd8>)
 8000c76:	4a16      	ldr	r2, [pc, #88]	@ (8000cd0 <Entry_Granted_Animation+0xdc>)
 8000c78:	4916      	ldr	r1, [pc, #88]	@ (8000cd4 <Entry_Granted_Animation+0xe0>)
 8000c7a:	f7ff feef 	bl	8000a5c <Draw_Cross>
 8000c7e:	e005      	b.n	8000c8c <Entry_Granted_Animation+0x98>
        } else {
            Clear_Cross(ws, topCross_exit_matrix, middleCross_exit_matrix, bottomCross_exit_matrix);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <Entry_Granted_Animation+0xd8>)
 8000c84:	4a12      	ldr	r2, [pc, #72]	@ (8000cd0 <Entry_Granted_Animation+0xdc>)
 8000c86:	4913      	ldr	r1, [pc, #76]	@ (8000cd4 <Entry_Granted_Animation+0xe0>)
 8000c88:	f7ff ff2c 	bl	8000ae4 <Clear_Cross>
        }
        cross_state = !cross_state;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <Entry_Granted_Animation+0xd4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	bf0c      	ite	eq
 8000c94:	2301      	moveq	r3, #1
 8000c96:	2300      	movne	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <Entry_Granted_Animation+0xd4>)
 8000c9e:	601a      	str	r2, [r3, #0]
    }
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20004164 	.word	0x20004164
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	080062dc 	.word	0x080062dc
 8000cb4:	20000258 	.word	0x20000258
 8000cb8:	200002f0 	.word	0x200002f0
 8000cbc:	080062d0 	.word	0x080062d0
 8000cc0:	200002a4 	.word	0x200002a4
 8000cc4:	20000340 	.word	0x20000340
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000218 	.word	0x20000218
 8000cd0:	200001d8 	.word	0x200001d8
 8000cd4:	20000198 	.word	0x20000198

08000cd8 <Exit_Granted_Animation>:


void Exit_Granted_Animation(WS28XX_HandleTypeDef *ws) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	6078      	str	r0, [r7, #4]
    static uint32_t last_update_time = 0;

    if (HAL_GetTick() - last_update_time >= DELAY_TIME) {
 8000ce0:	f001 fb0e 	bl	8002300 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	4b29      	ldr	r3, [pc, #164]	@ (8000d8c <Exit_Granted_Animation+0xb4>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	2b63      	cmp	r3, #99	@ 0x63
 8000cee:	d949      	bls.n	8000d84 <Exit_Granted_Animation+0xac>
        last_update_time = HAL_GetTick();
 8000cf0:	f001 fb06 	bl	8002300 <HAL_GetTick>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4a25      	ldr	r2, [pc, #148]	@ (8000d8c <Exit_Granted_Animation+0xb4>)
 8000cf8:	6013      	str	r3, [r2, #0]

        if (cross_state) {
 8000cfa:	4b25      	ldr	r3, [pc, #148]	@ (8000d90 <Exit_Granted_Animation+0xb8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d009      	beq.n	8000d16 <Exit_Granted_Animation+0x3e>
            Draw_Cross(ws, topCross_entry_matrix, middleCross_entry_matrix, bottomCross_entry_matrix, COLOR_RGB565_RED);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	4b22      	ldr	r3, [pc, #136]	@ (8000d94 <Exit_Granted_Animation+0xbc>)
 8000d0c:	4a22      	ldr	r2, [pc, #136]	@ (8000d98 <Exit_Granted_Animation+0xc0>)
 8000d0e:	4923      	ldr	r1, [pc, #140]	@ (8000d9c <Exit_Granted_Animation+0xc4>)
 8000d10:	f7ff fea4 	bl	8000a5c <Draw_Cross>
 8000d14:	e005      	b.n	8000d22 <Exit_Granted_Animation+0x4a>
        } else {
            Clear_Cross(ws, topCross_entry_matrix, middleCross_entry_matrix, bottomCross_entry_matrix);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <Exit_Granted_Animation+0xbc>)
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000d98 <Exit_Granted_Animation+0xc0>)
 8000d1c:	491f      	ldr	r1, [pc, #124]	@ (8000d9c <Exit_Granted_Animation+0xc4>)
 8000d1e:	f7ff fee1 	bl	8000ae4 <Clear_Cross>
        }
        cross_state = !cross_state;
 8000d22:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <Exit_Granted_Animation+0xb8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bf0c      	ite	eq
 8000d2a:	2301      	moveq	r3, #1
 8000d2c:	2300      	movne	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <Exit_Granted_Animation+0xb8>)
 8000d34:	601a      	str	r2, [r3, #0]

        Led_Strip(&ws, entryStrip, entryStripSize, "red");
 8000d36:	2213      	movs	r2, #19
 8000d38:	1d38      	adds	r0, r7, #4
 8000d3a:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <Exit_Granted_Animation+0xc8>)
 8000d3c:	4919      	ldr	r1, [pc, #100]	@ (8000da4 <Exit_Granted_Animation+0xcc>)
 8000d3e:	f7ff fe29 	bl	8000994 <Led_Strip>
        Led_Strip(&ws, entryRFID, entryRFIDSize, "red");
 8000d42:	2214      	movs	r2, #20
 8000d44:	1d38      	adds	r0, r7, #4
 8000d46:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <Exit_Granted_Animation+0xc8>)
 8000d48:	4917      	ldr	r1, [pc, #92]	@ (8000da8 <Exit_Granted_Animation+0xd0>)
 8000d4a:	f7ff fe23 	bl	8000994 <Led_Strip>
        Led_Strip(&ws, exitStrip, exitStripSize, "green");
 8000d4e:	2213      	movs	r2, #19
 8000d50:	1d38      	adds	r0, r7, #4
 8000d52:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <Exit_Granted_Animation+0xd4>)
 8000d54:	4916      	ldr	r1, [pc, #88]	@ (8000db0 <Exit_Granted_Animation+0xd8>)
 8000d56:	f7ff fe1d 	bl	8000994 <Led_Strip>
        Led_Strip(&ws, exitRFID, exitRFIDSize, "green");
 8000d5a:	2214      	movs	r2, #20
 8000d5c:	1d38      	adds	r0, r7, #4
 8000d5e:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <Exit_Granted_Animation+0xd4>)
 8000d60:	4914      	ldr	r1, [pc, #80]	@ (8000db4 <Exit_Granted_Animation+0xdc>)
 8000d62:	f7ff fe17 	bl	8000994 <Led_Strip>

        Clear_Arrow(ws, arrow_exit_matrix);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4913      	ldr	r1, [pc, #76]	@ (8000db8 <Exit_Granted_Animation+0xe0>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fd84 	bl	8000878 <Clear_Arrow>
        Shift_Arrow_ExitMatrix(arrow_exit_matrix);
 8000d70:	4811      	ldr	r0, [pc, #68]	@ (8000db8 <Exit_Granted_Animation+0xe0>)
 8000d72:	f7ff fdd5 	bl	8000920 <Shift_Arrow_ExitMatrix>
        Draw_Arrow(ws, arrow_exit_matrix, COLOR_RGB565_GREEN);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000d7c:	490e      	ldr	r1, [pc, #56]	@ (8000db8 <Exit_Granted_Animation+0xe0>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fd54 	bl	800082c <Draw_Arrow>
    }
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20004168 	.word	0x20004168
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000158 	.word	0x20000158
 8000d98:	20000118 	.word	0x20000118
 8000d9c:	200000d8 	.word	0x200000d8
 8000da0:	080062d0 	.word	0x080062d0
 8000da4:	20000258 	.word	0x20000258
 8000da8:	200002f0 	.word	0x200002f0
 8000dac:	080062dc 	.word	0x080062dc
 8000db0:	200002a4 	.word	0x200002a4
 8000db4:	20000340 	.word	0x20000340
 8000db8:	20000070 	.word	0x20000070

08000dbc <Ready_State_Animation>:

/* Function 3: Arrow animation on both strips */
void Ready_State_Animation(WS28XX_HandleTypeDef *ws) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    static uint32_t last_update_time = 0;

    if (HAL_GetTick() - last_update_time >= DELAY_TIME) {
 8000dc4:	f001 fa9c 	bl	8002300 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <Ready_State_Animation+0x98>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b63      	cmp	r3, #99	@ 0x63
 8000dd2:	d93a      	bls.n	8000e4a <Ready_State_Animation+0x8e>
        last_update_time = HAL_GetTick();
 8000dd4:	f001 fa94 	bl	8002300 <HAL_GetTick>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4a1e      	ldr	r2, [pc, #120]	@ (8000e54 <Ready_State_Animation+0x98>)
 8000ddc:	6013      	str	r3, [r2, #0]

        Led_Strip(&ws, entryStrip, entryStripSize, "blue");
 8000dde:	2213      	movs	r2, #19
 8000de0:	1d38      	adds	r0, r7, #4
 8000de2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e58 <Ready_State_Animation+0x9c>)
 8000de4:	491d      	ldr	r1, [pc, #116]	@ (8000e5c <Ready_State_Animation+0xa0>)
 8000de6:	f7ff fdd5 	bl	8000994 <Led_Strip>
        Led_Strip(&ws, entryRFID, entryRFIDSize, "blue");
 8000dea:	2214      	movs	r2, #20
 8000dec:	1d38      	adds	r0, r7, #4
 8000dee:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <Ready_State_Animation+0x9c>)
 8000df0:	491b      	ldr	r1, [pc, #108]	@ (8000e60 <Ready_State_Animation+0xa4>)
 8000df2:	f7ff fdcf 	bl	8000994 <Led_Strip>
        Led_Strip(&ws, exitStrip, exitStripSize, "blue");
 8000df6:	2213      	movs	r2, #19
 8000df8:	1d38      	adds	r0, r7, #4
 8000dfa:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <Ready_State_Animation+0x9c>)
 8000dfc:	4919      	ldr	r1, [pc, #100]	@ (8000e64 <Ready_State_Animation+0xa8>)
 8000dfe:	f7ff fdc9 	bl	8000994 <Led_Strip>
        Led_Strip(&ws, exitRFID, exitRFIDSize, "blue");
 8000e02:	2214      	movs	r2, #20
 8000e04:	1d38      	adds	r0, r7, #4
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <Ready_State_Animation+0x9c>)
 8000e08:	4917      	ldr	r1, [pc, #92]	@ (8000e68 <Ready_State_Animation+0xac>)
 8000e0a:	f7ff fdc3 	bl	8000994 <Led_Strip>

        Clear_Arrow(ws, arrow_entry_matrix);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4916      	ldr	r1, [pc, #88]	@ (8000e6c <Ready_State_Animation+0xb0>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fd30 	bl	8000878 <Clear_Arrow>
        Shift_Arrow_EntryMatrix(arrow_entry_matrix);
 8000e18:	4814      	ldr	r0, [pc, #80]	@ (8000e6c <Ready_State_Animation+0xb0>)
 8000e1a:	f7ff fd4d 	bl	80008b8 <Shift_Arrow_EntryMatrix>
        Draw_Arrow(ws, arrow_entry_matrix, COLOR_RGB565_GREEN);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000e24:	4911      	ldr	r1, [pc, #68]	@ (8000e6c <Ready_State_Animation+0xb0>)
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fd00 	bl	800082c <Draw_Arrow>

        Clear_Arrow(ws, arrow_exit_matrix);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4910      	ldr	r1, [pc, #64]	@ (8000e70 <Ready_State_Animation+0xb4>)
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fd21 	bl	8000878 <Clear_Arrow>
        Shift_Arrow_ExitMatrix(arrow_exit_matrix);
 8000e36:	480e      	ldr	r0, [pc, #56]	@ (8000e70 <Ready_State_Animation+0xb4>)
 8000e38:	f7ff fd72 	bl	8000920 <Shift_Arrow_ExitMatrix>
        Draw_Arrow(ws, arrow_exit_matrix, COLOR_RGB565_GREEN);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000e42:	490b      	ldr	r1, [pc, #44]	@ (8000e70 <Ready_State_Animation+0xb4>)
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fcf1 	bl	800082c <Draw_Arrow>
    }
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000416c 	.word	0x2000416c
 8000e58:	080062d4 	.word	0x080062d4
 8000e5c:	20000258 	.word	0x20000258
 8000e60:	200002f0 	.word	0x200002f0
 8000e64:	200002a4 	.word	0x200002a4
 8000e68:	20000340 	.word	0x20000340
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000070 	.word	0x20000070

08000e74 <Access_Denied_Animation>:

/* Function 4: Cross animation on both strips */
void Access_Denied_Animation(WS28XX_HandleTypeDef *ws) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	6078      	str	r0, [r7, #4]
    static uint32_t last_update_time = 0;

    if (HAL_GetTick() - last_update_time >= DELAY_TIME) {
 8000e7c:	f001 fa40 	bl	8002300 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	4b29      	ldr	r3, [pc, #164]	@ (8000f28 <Access_Denied_Animation+0xb4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b63      	cmp	r3, #99	@ 0x63
 8000e8a:	d949      	bls.n	8000f20 <Access_Denied_Animation+0xac>
        last_update_time = HAL_GetTick();
 8000e8c:	f001 fa38 	bl	8002300 <HAL_GetTick>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a25      	ldr	r2, [pc, #148]	@ (8000f28 <Access_Denied_Animation+0xb4>)
 8000e94:	6013      	str	r3, [r2, #0]

        if (cross_state) {
 8000e96:	4b25      	ldr	r3, [pc, #148]	@ (8000f2c <Access_Denied_Animation+0xb8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d012      	beq.n	8000ec4 <Access_Denied_Animation+0x50>
            Draw_Cross(ws, topCross_entry_matrix, middleCross_entry_matrix, bottomCross_entry_matrix, COLOR_RGB565_RED);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	4b22      	ldr	r3, [pc, #136]	@ (8000f30 <Access_Denied_Animation+0xbc>)
 8000ea8:	4a22      	ldr	r2, [pc, #136]	@ (8000f34 <Access_Denied_Animation+0xc0>)
 8000eaa:	4923      	ldr	r1, [pc, #140]	@ (8000f38 <Access_Denied_Animation+0xc4>)
 8000eac:	f7ff fdd6 	bl	8000a5c <Draw_Cross>
            Draw_Cross(ws, topCross_exit_matrix, middleCross_exit_matrix, bottomCross_exit_matrix, COLOR_RGB565_RED);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <Access_Denied_Animation+0xc8>)
 8000eba:	4a21      	ldr	r2, [pc, #132]	@ (8000f40 <Access_Denied_Animation+0xcc>)
 8000ebc:	4921      	ldr	r1, [pc, #132]	@ (8000f44 <Access_Denied_Animation+0xd0>)
 8000ebe:	f7ff fdcd 	bl	8000a5c <Draw_Cross>
 8000ec2:	e00b      	b.n	8000edc <Access_Denied_Animation+0x68>
        } else {
            Clear_Cross(ws, topCross_entry_matrix, middleCross_entry_matrix, bottomCross_entry_matrix);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <Access_Denied_Animation+0xbc>)
 8000ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f34 <Access_Denied_Animation+0xc0>)
 8000eca:	491b      	ldr	r1, [pc, #108]	@ (8000f38 <Access_Denied_Animation+0xc4>)
 8000ecc:	f7ff fe0a 	bl	8000ae4 <Clear_Cross>
            Clear_Cross(ws, topCross_exit_matrix, middleCross_exit_matrix, bottomCross_exit_matrix);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <Access_Denied_Animation+0xc8>)
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f40 <Access_Denied_Animation+0xcc>)
 8000ed6:	491b      	ldr	r1, [pc, #108]	@ (8000f44 <Access_Denied_Animation+0xd0>)
 8000ed8:	f7ff fe04 	bl	8000ae4 <Clear_Cross>
        }
        cross_state = !cross_state;
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <Access_Denied_Animation+0xb8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	bf0c      	ite	eq
 8000ee4:	2301      	moveq	r3, #1
 8000ee6:	2300      	movne	r3, #0
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <Access_Denied_Animation+0xb8>)
 8000eee:	601a      	str	r2, [r3, #0]

        Led_Strip(&ws, entryStrip, entryStripSize, "red");
 8000ef0:	2213      	movs	r2, #19
 8000ef2:	1d38      	adds	r0, r7, #4
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <Access_Denied_Animation+0xd4>)
 8000ef6:	4915      	ldr	r1, [pc, #84]	@ (8000f4c <Access_Denied_Animation+0xd8>)
 8000ef8:	f7ff fd4c 	bl	8000994 <Led_Strip>
        Led_Strip(&ws, entryRFID, entryRFIDSize, "red");
 8000efc:	2214      	movs	r2, #20
 8000efe:	1d38      	adds	r0, r7, #4
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <Access_Denied_Animation+0xd4>)
 8000f02:	4913      	ldr	r1, [pc, #76]	@ (8000f50 <Access_Denied_Animation+0xdc>)
 8000f04:	f7ff fd46 	bl	8000994 <Led_Strip>
        Led_Strip(&ws, exitStrip, exitStripSize, "red");
 8000f08:	2213      	movs	r2, #19
 8000f0a:	1d38      	adds	r0, r7, #4
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <Access_Denied_Animation+0xd4>)
 8000f0e:	4911      	ldr	r1, [pc, #68]	@ (8000f54 <Access_Denied_Animation+0xe0>)
 8000f10:	f7ff fd40 	bl	8000994 <Led_Strip>
        Led_Strip(&ws, exitRFID, exitRFIDSize, "red");
 8000f14:	2214      	movs	r2, #20
 8000f16:	1d38      	adds	r0, r7, #4
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <Access_Denied_Animation+0xd4>)
 8000f1a:	490f      	ldr	r1, [pc, #60]	@ (8000f58 <Access_Denied_Animation+0xe4>)
 8000f1c:	f7ff fd3a 	bl	8000994 <Led_Strip>
    }
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20004170 	.word	0x20004170
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000158 	.word	0x20000158
 8000f34:	20000118 	.word	0x20000118
 8000f38:	200000d8 	.word	0x200000d8
 8000f3c:	20000218 	.word	0x20000218
 8000f40:	200001d8 	.word	0x200001d8
 8000f44:	20000198 	.word	0x20000198
 8000f48:	080062d0 	.word	0x080062d0
 8000f4c:	20000258 	.word	0x20000258
 8000f50:	200002f0 	.word	0x200002f0
 8000f54:	200002a4 	.word	0x200002a4
 8000f58:	20000340 	.word	0x20000340

08000f5c <CheckObjectDetection>:


// IR FUNCTIONS
int CheckObjectDetection(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
    static uint32_t last_pulse_time = 0;

    // Generate a pulse every 100 ms
    if (HAL_GetTick() - last_pulse_time >= PULSE_INTERVAL) {
 8000f62:	f001 f9cd 	bl	8002300 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <CheckObjectDetection+0x60>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b63      	cmp	r3, #99	@ 0x63
 8000f70:	d908      	bls.n	8000f84 <CheckObjectDetection+0x28>
        last_pulse_time = HAL_GetTick();
 8000f72:	f001 f9c5 	bl	8002300 <HAL_GetTick>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a10      	ldr	r2, [pc, #64]	@ (8000fbc <CheckObjectDetection+0x60>)
 8000f7a:	6013      	str	r3, [r2, #0]
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0); // Generate pulse
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	4810      	ldr	r0, [pc, #64]	@ (8000fc0 <CheckObjectDetection+0x64>)
 8000f80:	f001 ff52 	bl	8002e28 <HAL_GPIO_TogglePin>
    }

    // Check for timeout on all sensors
    for (int i = 0; i < NUM_SENSORS; i++) {
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	e00f      	b.n	8000faa <CheckObjectDetection+0x4e>
        if (HAL_GetTick() - last_pulse_received_time[i] >= OBJECT_DETECTION_TIMEOUT) {
 8000f8a:	f001 f9b9 	bl	8002300 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	490c      	ldr	r1, [pc, #48]	@ (8000fc4 <CheckObjectDetection+0x68>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f9e:	d301      	bcc.n	8000fa4 <CheckObjectDetection+0x48>
            return 1;  // Object detected (timeout)
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e006      	b.n	8000fb2 <CheckObjectDetection+0x56>
    for (int i = 0; i < NUM_SENSORS; i++) {
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b05      	cmp	r3, #5
 8000fae:	ddec      	ble.n	8000f8a <CheckObjectDetection+0x2e>
        }
    }

    return 0;  // No object detected
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20004174 	.word	0x20004174
 8000fc0:	40011000 	.word	0x40011000
 8000fc4:	2000414c 	.word	0x2000414c

08000fc8 <Speed_Control>:


//MOTOR CONTROL FUNCTIONS
void Speed_Control(int a)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, a);
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <Speed_Control+0x1c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	2000422c 	.word	0x2000422c

08000fe8 <Direction>:

void Direction(int a)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	if(a==1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d10b      	bne.n	800100e <Direction+0x26>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ffc:	480d      	ldr	r0, [pc, #52]	@ (8001034 <Direction+0x4c>)
 8000ffe:	f001 fefb 	bl	8002df8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001008:	480a      	ldr	r0, [pc, #40]	@ (8001034 <Direction+0x4c>)
 800100a:	f001 fef5 	bl	8002df8 <HAL_GPIO_WritePin>

	}
	if(a==0)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10b      	bne.n	800102c <Direction+0x44>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800101a:	4806      	ldr	r0, [pc, #24]	@ (8001034 <Direction+0x4c>)
 800101c:	f001 feec 	bl	8002df8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001026:	4803      	ldr	r0, [pc, #12]	@ (8001034 <Direction+0x4c>)
 8001028:	f001 fee6 	bl	8002df8 <HAL_GPIO_WritePin>
	}
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40011000 	.word	0x40011000

08001038 <encoder>:

void encoder(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
    counter++;
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <encoder+0x2c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <encoder+0x2c>)
 8001044:	6013      	str	r3, [r2, #0]
    if (counter == ENCODER_THRESHOLD) {
 8001046:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <encoder+0x2c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f240 223a 	movw	r2, #570	@ 0x23a
 800104e:	4293      	cmp	r3, r2
 8001050:	d105      	bne.n	800105e <encoder+0x26>
        Speed_Control(0); // Stop the motor
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff ffb8 	bl	8000fc8 <Speed_Control>
        counter = 0;      // Reset counter for next operation
 8001058:	4b02      	ldr	r3, [pc, #8]	@ (8001064 <encoder+0x2c>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
    }
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20004148 	.word	0x20004148

08001068 <HAL_GPIO_EXTI_Callback>:

const uint16_t pulse_pins[NUM_SENSORS] = {GPIO_PIN_1, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < NUM_SENSORS; i++) {
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	e011      	b.n	800109c <HAL_GPIO_EXTI_Callback+0x34>
        if (GPIO_Pin == pulse_pins[i]) {
 8001078:	4a1f      	ldr	r2, [pc, #124]	@ (80010f8 <HAL_GPIO_EXTI_Callback+0x90>)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001080:	88fa      	ldrh	r2, [r7, #6]
 8001082:	429a      	cmp	r2, r3
 8001084:	d107      	bne.n	8001096 <HAL_GPIO_EXTI_Callback+0x2e>
            last_pulse_received_time[i] = HAL_GetTick();
 8001086:	f001 f93b 	bl	8002300 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	491b      	ldr	r1, [pc, #108]	@ (80010fc <HAL_GPIO_EXTI_Callback+0x94>)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return; // Exit after updating the correct sensor
 8001094:	e02d      	b.n	80010f2 <HAL_GPIO_EXTI_Callback+0x8a>
    for (int i = 0; i < NUM_SENSORS; i++) {
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3301      	adds	r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b05      	cmp	r3, #5
 80010a0:	ddea      	ble.n	8001078 <HAL_GPIO_EXTI_Callback+0x10>
        }
    }

    // Handle encoder feedback or motor stop
    switch (GPIO_Pin) {
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010a8:	d01b      	beq.n	80010e2 <HAL_GPIO_EXTI_Callback+0x7a>
 80010aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010ae:	dc1f      	bgt.n	80010f0 <HAL_GPIO_EXTI_Callback+0x88>
 80010b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80010b4:	d015      	beq.n	80010e2 <HAL_GPIO_EXTI_Callback+0x7a>
 80010b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80010ba:	dc19      	bgt.n	80010f0 <HAL_GPIO_EXTI_Callback+0x88>
 80010bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80010c0:	d00f      	beq.n	80010e2 <HAL_GPIO_EXTI_Callback+0x7a>
 80010c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80010c6:	dc13      	bgt.n	80010f0 <HAL_GPIO_EXTI_Callback+0x88>
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_EXTI_Callback+0x6c>
 80010cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_EXTI_Callback+0x7a>
            Speed_Control(0);
            counter = 0;
            break;

        default:
            break;
 80010d2:	e00d      	b.n	80010f0 <HAL_GPIO_EXTI_Callback+0x88>
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80010d4:	2180      	movs	r1, #128	@ 0x80
 80010d6:	480a      	ldr	r0, [pc, #40]	@ (8001100 <HAL_GPIO_EXTI_Callback+0x98>)
 80010d8:	f001 fea6 	bl	8002e28 <HAL_GPIO_TogglePin>
            encoder();
 80010dc:	f7ff ffac 	bl	8001038 <encoder>
            break;
 80010e0:	e007      	b.n	80010f2 <HAL_GPIO_EXTI_Callback+0x8a>
            Speed_Control(0);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ff70 	bl	8000fc8 <Speed_Control>
            counter = 0;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_GPIO_EXTI_Callback+0x9c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
            break;
 80010ee:	e000      	b.n	80010f2 <HAL_GPIO_EXTI_Callback+0x8a>
            break;
 80010f0:	bf00      	nop
    }
}
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	0800630c 	.word	0x0800630c
 80010fc:	2000414c 	.word	0x2000414c
 8001100:	40010c00 	.word	0x40010c00
 8001104:	20004148 	.word	0x20004148

08001108 <quarter_cycle_open>:

void quarter_cycle_open(int source) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    uint32_t start_time = HAL_GetTick();  // Record the start time
 8001110:	f001 f8f6 	bl	8002300 <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]
    counter = 0;  // Reset the counter at the beginning of the operation
 8001116:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <quarter_cycle_open+0x70>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]

    // Set motor direction based on the source
    if (source == 1) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d103      	bne.n	800112a <quarter_cycle_open+0x22>
        Direction(0);  // Set direction for source 1
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff ff60 	bl	8000fe8 <Direction>
 8001128:	e005      	b.n	8001136 <quarter_cycle_open+0x2e>
    } else if (source == 2) {
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d102      	bne.n	8001136 <quarter_cycle_open+0x2e>
        Direction(1);  // Set direction for source 2
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff ff59 	bl	8000fe8 <Direction>
    }

    Speed_Control(1000);  // Start the motor with speed 1000
 8001136:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800113a:	f7ff ff45 	bl	8000fc8 <Speed_Control>

    // Monitor encoder or timeout
    while (1) {
        // Check if encoder threshold is reached
        if (counter >= ENCODER_THRESHOLD) {
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <quarter_cycle_open+0x70>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f240 2239 	movw	r2, #569	@ 0x239
 8001146:	4293      	cmp	r3, r2
 8001148:	dc09      	bgt.n	800115e <quarter_cycle_open+0x56>
            break;  // Exit the loop when the threshold is reached
        }

        // Check for timeout (3 seconds in this example)
        if (HAL_GetTick() - start_time > 3000) {
 800114a:	f001 f8d9 	bl	8002300 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001158:	4293      	cmp	r3, r2
 800115a:	d802      	bhi.n	8001162 <quarter_cycle_open+0x5a>
        if (counter >= ENCODER_THRESHOLD) {
 800115c:	e7ef      	b.n	800113e <quarter_cycle_open+0x36>
            break;  // Exit the loop when the threshold is reached
 800115e:	bf00      	nop
 8001160:	e000      	b.n	8001164 <quarter_cycle_open+0x5c>
            break;  // Exit the loop if timeout occurs
 8001162:	bf00      	nop
        }
    }

    Speed_Control(0);  // Stop the motor
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff ff2f 	bl	8000fc8 <Speed_Control>
    counter = 0;       // Reset the counter after the operation
 800116a:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <quarter_cycle_open+0x70>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20004148 	.word	0x20004148

0800117c <quarter_cycle_closed>:

void quarter_cycle_closed(int source) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
    uint32_t start_time = HAL_GetTick();  // Record the start time
 8001184:	f001 f8bc 	bl	8002300 <HAL_GetTick>
 8001188:	60f8      	str	r0, [r7, #12]

    // Set motor direction based on the source
    if (source == 1) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d103      	bne.n	8001198 <quarter_cycle_closed+0x1c>
        Direction(1);  // Set direction for source 1
 8001190:	2001      	movs	r0, #1
 8001192:	f7ff ff29 	bl	8000fe8 <Direction>
 8001196:	e005      	b.n	80011a4 <quarter_cycle_closed+0x28>
    } else if (source == 2) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d102      	bne.n	80011a4 <quarter_cycle_closed+0x28>
        Direction(0);  // Set direction for source 2
 800119e:	2000      	movs	r0, #0
 80011a0:	f7ff ff22 	bl	8000fe8 <Direction>
    }

    Speed_Control(1000);  // Start the motor with speed 1000
 80011a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011a8:	f7ff ff0e 	bl	8000fc8 <Speed_Control>

    // Monitor encoder or timeout
    while (1) {
        // Check if encoder threshold is reached
        if (counter >= ENCODER_THRESHOLD) {
 80011ac:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <quarter_cycle_closed+0x6c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f240 2239 	movw	r2, #569	@ 0x239
 80011b4:	4293      	cmp	r3, r2
 80011b6:	dc09      	bgt.n	80011cc <quarter_cycle_closed+0x50>
            break;  // Exit the loop when the threshold is reached
        }

        // Check for timeout (3 seconds in this example)
        if (HAL_GetTick() - start_time > 3000) {
 80011b8:	f001 f8a2 	bl	8002300 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d802      	bhi.n	80011d0 <quarter_cycle_closed+0x54>
        if (counter >= ENCODER_THRESHOLD) {
 80011ca:	e7ef      	b.n	80011ac <quarter_cycle_closed+0x30>
            break;  // Exit the loop when the threshold is reached
 80011cc:	bf00      	nop
 80011ce:	e000      	b.n	80011d2 <quarter_cycle_closed+0x56>
            break;  // Exit the loop if timeout occurs
 80011d0:	bf00      	nop
        }
    }

    Speed_Control(0);  // Stop the motor
 80011d2:	2000      	movs	r0, #0
 80011d4:	f7ff fef8 	bl	8000fc8 <Speed_Control>
    counter = 0;       // Reset the counter for the next operation
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <quarter_cycle_closed+0x6c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20004148 	.word	0x20004148

080011ec <ready_state>:


//STATE FUNCTIONS

void ready_state(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
    static uint32_t last_update_time = 0;

    if (HAL_GetTick() - last_update_time >= DELAY_TIME) {
 80011f0:	f001 f886 	bl	8002300 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <ready_state+0x38>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b63      	cmp	r3, #99	@ 0x63
 80011fe:	d90e      	bls.n	800121e <ready_state+0x32>
        last_update_time = HAL_GetTick();
 8001200:	f001 f87e 	bl	8002300 <HAL_GetTick>
 8001204:	4603      	mov	r3, r0
 8001206:	4a07      	ldr	r2, [pc, #28]	@ (8001224 <ready_state+0x38>)
 8001208:	6013      	str	r3, [r2, #0]
        Ready_State_Animation(&ws);
 800120a:	4807      	ldr	r0, [pc, #28]	@ (8001228 <ready_state+0x3c>)
 800120c:	f7ff fdd6 	bl	8000dbc <Ready_State_Animation>

        if (flag_rev == 1) {
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <ready_state+0x40>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d102      	bne.n	800121e <ready_state+0x32>
            currentState = STATE_READING;
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <ready_state+0x44>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20004178 	.word	0x20004178
 8001228:	20000408 	.word	0x20000408
 800122c:	20004142 	.word	0x20004142
 8001230:	20004110 	.word	0x20004110

08001234 <reading_state>:

void reading_state(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
    static uint32_t start_time = 0;

    if (start_time == 0) {  // Initialize timer on first call
 8001238:	4b29      	ldr	r3, [pc, #164]	@ (80012e0 <reading_state+0xac>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d104      	bne.n	800124a <reading_state+0x16>
        start_time = HAL_GetTick();
 8001240:	f001 f85e 	bl	8002300 <HAL_GetTick>
 8001244:	4603      	mov	r3, r0
 8001246:	4a26      	ldr	r2, [pc, #152]	@ (80012e0 <reading_state+0xac>)
 8001248:	6013      	str	r3, [r2, #0]
    }

    if (HAL_GetTick() - start_time >= 1000) {
 800124a:	f001 f859 	bl	8002300 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <reading_state+0xac>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800125a:	d33e      	bcc.n	80012da <reading_state+0xa6>
        // Execute logic after 1 second delay
        if (flag_rev == 1) {
 800125c:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <reading_state+0xb0>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d10c      	bne.n	800127e <reading_state+0x4a>
            HAL_UART_Transmit_IT(&huart3, (uint8_t *)usermsg, strlen(usermsg));
 8001264:	4820      	ldr	r0, [pc, #128]	@ (80012e8 <reading_state+0xb4>)
 8001266:	f7fe ff71 	bl	800014c <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	b29b      	uxth	r3, r3
 800126e:	461a      	mov	r2, r3
 8001270:	491d      	ldr	r1, [pc, #116]	@ (80012e8 <reading_state+0xb4>)
 8001272:	481e      	ldr	r0, [pc, #120]	@ (80012ec <reading_state+0xb8>)
 8001274:	f003 fbcb 	bl	8004a0e <HAL_UART_Transmit_IT>
            flag_rev = 0;
 8001278:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <reading_state+0xb0>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
        }

        // NOS Potential Responses Setup
        switch (intresponseData) {
 800127e:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <reading_state+0xbc>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b05      	cmp	r3, #5
 8001284:	d826      	bhi.n	80012d4 <reading_state+0xa0>
 8001286:	a201      	add	r2, pc, #4	@ (adr r2, 800128c <reading_state+0x58>)
 8001288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128c:	080012a5 	.word	0x080012a5
 8001290:	080012ad 	.word	0x080012ad
 8001294:	080012b5 	.word	0x080012b5
 8001298:	080012bd 	.word	0x080012bd
 800129c:	080012c5 	.word	0x080012c5
 80012a0:	080012cd 	.word	0x080012cd
            case 0: currentState = STATE_READY; break;
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <reading_state+0xc0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	e013      	b.n	80012d4 <reading_state+0xa0>
            case 1: currentState = STATE_OPEN; break;
 80012ac:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <reading_state+0xc0>)
 80012ae:	2202      	movs	r2, #2
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	e00f      	b.n	80012d4 <reading_state+0xa0>
            case 2: currentState = STATE_CLOSED; break;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <reading_state+0xc0>)
 80012b6:	2203      	movs	r2, #3
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	e00b      	b.n	80012d4 <reading_state+0xa0>
            case 3: currentState = STATE_EMERGENCY; break;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <reading_state+0xc0>)
 80012be:	2206      	movs	r2, #6
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e007      	b.n	80012d4 <reading_state+0xa0>
            case 4: currentState = STATE_SLEEP; break;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <reading_state+0xc0>)
 80012c6:	2205      	movs	r2, #5
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e003      	b.n	80012d4 <reading_state+0xa0>
            case 5: currentState = STATE_OVERCAPACITY; break;
 80012cc:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <reading_state+0xc0>)
 80012ce:	2204      	movs	r2, #4
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	bf00      	nop
        }

        start_time = 0;  // Reset timer
 80012d4:	4b02      	ldr	r3, [pc, #8]	@ (80012e0 <reading_state+0xac>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
    }
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000417c 	.word	0x2000417c
 80012e4:	20004142 	.word	0x20004142
 80012e8:	20004134 	.word	0x20004134
 80012ec:	2000438c 	.word	0x2000438c
 80012f0:	20004146 	.word	0x20004146
 80012f4:	20004110 	.word	0x20004110

080012f8 <open_state>:

void open_state(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
    static uint32_t start_time = 0;
    static int step = 0;

    if (step == 0) {
 80012fc:	4b2b      	ldr	r3, [pc, #172]	@ (80013ac <open_state+0xb4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10f      	bne.n	8001324 <open_state+0x2c>
        Clear_All_Animations(&ws);
 8001304:	482a      	ldr	r0, [pc, #168]	@ (80013b0 <open_state+0xb8>)
 8001306:	f7ff fc25 	bl	8000b54 <Clear_All_Animations>
        quarter_cycle_open(uart_source);
 800130a:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <open_state+0xbc>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fefa 	bl	8001108 <quarter_cycle_open>
        start_time = HAL_GetTick();
 8001314:	f000 fff4 	bl	8002300 <HAL_GetTick>
 8001318:	4603      	mov	r3, r0
 800131a:	4a27      	ldr	r2, [pc, #156]	@ (80013b8 <open_state+0xc0>)
 800131c:	6013      	str	r3, [r2, #0]
        step = 1;
 800131e:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <open_state+0xb4>)
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]
    }

    if (step == 1 && HAL_GetTick() - start_time >= 1000) {
 8001324:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <open_state+0xb4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d125      	bne.n	8001378 <open_state+0x80>
 800132c:	f000 ffe8 	bl	8002300 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <open_state+0xc0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800133c:	d31c      	bcc.n	8001378 <open_state+0x80>
        start_time = HAL_GetTick();
 800133e:	f000 ffdf 	bl	8002300 <HAL_GetTick>
 8001342:	4603      	mov	r3, r0
 8001344:	4a1c      	ldr	r2, [pc, #112]	@ (80013b8 <open_state+0xc0>)
 8001346:	6013      	str	r3, [r2, #0]
        if (CheckObjectDetection()) {
 8001348:	f7ff fe08 	bl	8000f5c <CheckObjectDetection>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00f      	beq.n	8001372 <open_state+0x7a>
            if (uart_source == 1) {
 8001352:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <open_state+0xbc>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d103      	bne.n	8001362 <open_state+0x6a>
                Entry_Granted_Animation(&ws);
 800135a:	4815      	ldr	r0, [pc, #84]	@ (80013b0 <open_state+0xb8>)
 800135c:	f7ff fc4a 	bl	8000bf4 <Entry_Granted_Animation>
 8001360:	e00a      	b.n	8001378 <open_state+0x80>
            } else if (uart_source == 2) {
 8001362:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <open_state+0xbc>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d106      	bne.n	8001378 <open_state+0x80>
                Exit_Granted_Animation(&ws);
 800136a:	4811      	ldr	r0, [pc, #68]	@ (80013b0 <open_state+0xb8>)
 800136c:	f7ff fcb4 	bl	8000cd8 <Exit_Granted_Animation>
 8001370:	e002      	b.n	8001378 <open_state+0x80>
            }
        } else {
            step = 2;
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <open_state+0xb4>)
 8001374:	2202      	movs	r2, #2
 8001376:	601a      	str	r2, [r3, #0]
        }
    }

    if (step == 2 && HAL_GetTick() - start_time >= 1000) {
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <open_state+0xb4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d113      	bne.n	80013a8 <open_state+0xb0>
 8001380:	f000 ffbe 	bl	8002300 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <open_state+0xc0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001390:	d30a      	bcc.n	80013a8 <open_state+0xb0>
        quarter_cycle_closed(uart_source);
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <open_state+0xbc>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fef0 	bl	800117c <quarter_cycle_closed>
        currentState = STATE_READY;
 800139c:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <open_state+0xc4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
        step = 0; // Reset step
 80013a2:	4b02      	ldr	r3, [pc, #8]	@ (80013ac <open_state+0xb4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
    }
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20004180 	.word	0x20004180
 80013b0:	20000408 	.word	0x20000408
 80013b4:	20004143 	.word	0x20004143
 80013b8:	20004184 	.word	0x20004184
 80013bc:	20004110 	.word	0x20004110

080013c0 <closed_state>:

void closed_state(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
    static uint32_t start_time = 0;

    if (start_time == 0) {
 80013c4:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <closed_state+0x48>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d107      	bne.n	80013dc <closed_state+0x1c>
        start_time = HAL_GetTick();
 80013cc:	f000 ff98 	bl	8002300 <HAL_GetTick>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001408 <closed_state+0x48>)
 80013d4:	6013      	str	r3, [r2, #0]
        Clear_All_Animations(&ws);
 80013d6:	480d      	ldr	r0, [pc, #52]	@ (800140c <closed_state+0x4c>)
 80013d8:	f7ff fbbc 	bl	8000b54 <Clear_All_Animations>
    }

    if (HAL_GetTick() - start_time < 2000) {
 80013dc:	f000 ff90 	bl	8002300 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <closed_state+0x48>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80013ec:	d203      	bcs.n	80013f6 <closed_state+0x36>
        Access_Denied_Animation(&ws);
 80013ee:	4807      	ldr	r0, [pc, #28]	@ (800140c <closed_state+0x4c>)
 80013f0:	f7ff fd40 	bl	8000e74 <Access_Denied_Animation>
    } else {
        currentState = STATE_READY;
        start_time = 0; // Reset for the next execution
    }
}
 80013f4:	e005      	b.n	8001402 <closed_state+0x42>
        currentState = STATE_READY;
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <closed_state+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
        start_time = 0; // Reset for the next execution
 80013fc:	4b02      	ldr	r3, [pc, #8]	@ (8001408 <closed_state+0x48>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20004188 	.word	0x20004188
 800140c:	20000408 	.word	0x20000408
 8001410:	20004110 	.word	0x20004110

08001414 <sleep_state>:

void sleep_state(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
    Clear_All_Animations(&ws);
 8001418:	480a      	ldr	r0, [pc, #40]	@ (8001444 <sleep_state+0x30>)
 800141a:	f7ff fb9b 	bl	8000b54 <Clear_All_Animations>
    Led_Strip(&ws, entryStrip, entryStripSize, "off");
 800141e:	2213      	movs	r2, #19
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <sleep_state+0x34>)
 8001422:	490a      	ldr	r1, [pc, #40]	@ (800144c <sleep_state+0x38>)
 8001424:	4807      	ldr	r0, [pc, #28]	@ (8001444 <sleep_state+0x30>)
 8001426:	f7ff fab5 	bl	8000994 <Led_Strip>
    Led_Strip(&ws, exitStrip, exitStripSize, "off");
 800142a:	2213      	movs	r2, #19
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <sleep_state+0x34>)
 800142e:	4908      	ldr	r1, [pc, #32]	@ (8001450 <sleep_state+0x3c>)
 8001430:	4804      	ldr	r0, [pc, #16]	@ (8001444 <sleep_state+0x30>)
 8001432:	f7ff faaf 	bl	8000994 <Led_Strip>
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001436:	2101      	movs	r1, #1
 8001438:	2000      	movs	r0, #0
 800143a:	f001 fd27 	bl	8002e8c <HAL_PWR_EnterSLEEPMode>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000408 	.word	0x20000408
 8001448:	080062e4 	.word	0x080062e4
 800144c:	20000258 	.word	0x20000258
 8001450:	200002a4 	.word	0x200002a4

08001454 <overcapacity_state>:

void overcapacity_state(void) {
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
    static uint32_t start_time = 0;

    if (start_time == 0) {
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <overcapacity_state+0x54>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d104      	bne.n	800146a <overcapacity_state+0x16>
        start_time = HAL_GetTick();
 8001460:	f000 ff4e 	bl	8002300 <HAL_GetTick>
 8001464:	4603      	mov	r3, r0
 8001466:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <overcapacity_state+0x54>)
 8001468:	6013      	str	r3, [r2, #0]
    }

    if (HAL_GetTick() - start_time < 2000) {
 800146a:	f000 ff49 	bl	8002300 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <overcapacity_state+0x54>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800147a:	d20c      	bcs.n	8001496 <overcapacity_state+0x42>
        Led_Strip(&ws, entryStrip, entryStripSize, "red");
 800147c:	2213      	movs	r2, #19
 800147e:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <overcapacity_state+0x58>)
 8001480:	490b      	ldr	r1, [pc, #44]	@ (80014b0 <overcapacity_state+0x5c>)
 8001482:	480c      	ldr	r0, [pc, #48]	@ (80014b4 <overcapacity_state+0x60>)
 8001484:	f7ff fa86 	bl	8000994 <Led_Strip>
        Led_Strip(&ws, exitStrip, exitStripSize, "red");
 8001488:	2213      	movs	r2, #19
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <overcapacity_state+0x58>)
 800148c:	490a      	ldr	r1, [pc, #40]	@ (80014b8 <overcapacity_state+0x64>)
 800148e:	4809      	ldr	r0, [pc, #36]	@ (80014b4 <overcapacity_state+0x60>)
 8001490:	f7ff fa80 	bl	8000994 <Led_Strip>
    } else {
        currentState = STATE_READY;
        start_time = 0; // Reset timer
    }
}
 8001494:	e005      	b.n	80014a2 <overcapacity_state+0x4e>
        currentState = STATE_READY;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <overcapacity_state+0x68>)
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
        start_time = 0; // Reset timer
 800149c:	4b02      	ldr	r3, [pc, #8]	@ (80014a8 <overcapacity_state+0x54>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000418c 	.word	0x2000418c
 80014ac:	080062d0 	.word	0x080062d0
 80014b0:	20000258 	.word	0x20000258
 80014b4:	20000408 	.word	0x20000408
 80014b8:	200002a4 	.word	0x200002a4
 80014bc:	20004110 	.word	0x20004110

080014c0 <emergency_state>:

void emergency_state(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
    static uint32_t last_blink_time = 0;
    static int blink_count = 0;

    if (blink_count < 10) {
 80014c4:	4b22      	ldr	r3, [pc, #136]	@ (8001550 <emergency_state+0x90>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b09      	cmp	r3, #9
 80014ca:	dc32      	bgt.n	8001532 <emergency_state+0x72>
        if (HAL_GetTick() - last_blink_time >= 500) {
 80014cc:	f000 ff18 	bl	8002300 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	4b20      	ldr	r3, [pc, #128]	@ (8001554 <emergency_state+0x94>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014dc:	d335      	bcc.n	800154a <emergency_state+0x8a>
            last_blink_time = HAL_GetTick();
 80014de:	f000 ff0f 	bl	8002300 <HAL_GetTick>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001554 <emergency_state+0x94>)
 80014e6:	6013      	str	r3, [r2, #0]
            if (blink_count % 2 == 0) {
 80014e8:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <emergency_state+0x90>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10c      	bne.n	800150e <emergency_state+0x4e>
                Led_Strip(&ws, entryStrip, entryStripSize, "red");
 80014f4:	2213      	movs	r2, #19
 80014f6:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <emergency_state+0x98>)
 80014f8:	4918      	ldr	r1, [pc, #96]	@ (800155c <emergency_state+0x9c>)
 80014fa:	4819      	ldr	r0, [pc, #100]	@ (8001560 <emergency_state+0xa0>)
 80014fc:	f7ff fa4a 	bl	8000994 <Led_Strip>
                Led_Strip(&ws, exitStrip, exitStripSize, "red");
 8001500:	2213      	movs	r2, #19
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <emergency_state+0x98>)
 8001504:	4917      	ldr	r1, [pc, #92]	@ (8001564 <emergency_state+0xa4>)
 8001506:	4816      	ldr	r0, [pc, #88]	@ (8001560 <emergency_state+0xa0>)
 8001508:	f7ff fa44 	bl	8000994 <Led_Strip>
 800150c:	e00b      	b.n	8001526 <emergency_state+0x66>
            } else {
                Led_Strip(&ws, entryStrip, entryStripSize, "off");
 800150e:	2213      	movs	r2, #19
 8001510:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <emergency_state+0xa8>)
 8001512:	4912      	ldr	r1, [pc, #72]	@ (800155c <emergency_state+0x9c>)
 8001514:	4812      	ldr	r0, [pc, #72]	@ (8001560 <emergency_state+0xa0>)
 8001516:	f7ff fa3d 	bl	8000994 <Led_Strip>
                Led_Strip(&ws, exitStrip, exitStripSize, "off");
 800151a:	2213      	movs	r2, #19
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <emergency_state+0xa8>)
 800151e:	4911      	ldr	r1, [pc, #68]	@ (8001564 <emergency_state+0xa4>)
 8001520:	480f      	ldr	r0, [pc, #60]	@ (8001560 <emergency_state+0xa0>)
 8001522:	f7ff fa37 	bl	8000994 <Led_Strip>
            }
            blink_count++;
 8001526:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <emergency_state+0x90>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3301      	adds	r3, #1
 800152c:	4a08      	ldr	r2, [pc, #32]	@ (8001550 <emergency_state+0x90>)
 800152e:	6013      	str	r3, [r2, #0]
        quarter_cycle_open(1);
        quarter_cycle_open(1);
        currentState = STATE_SLEEP;
        blink_count = 0;
    }
}
 8001530:	e00b      	b.n	800154a <emergency_state+0x8a>
        quarter_cycle_open(1);
 8001532:	2001      	movs	r0, #1
 8001534:	f7ff fde8 	bl	8001108 <quarter_cycle_open>
        quarter_cycle_open(1);
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff fde5 	bl	8001108 <quarter_cycle_open>
        currentState = STATE_SLEEP;
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <emergency_state+0xac>)
 8001540:	2205      	movs	r2, #5
 8001542:	701a      	strb	r2, [r3, #0]
        blink_count = 0;
 8001544:	4b02      	ldr	r3, [pc, #8]	@ (8001550 <emergency_state+0x90>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20004190 	.word	0x20004190
 8001554:	20004194 	.word	0x20004194
 8001558:	080062d0 	.word	0x080062d0
 800155c:	20000258 	.word	0x20000258
 8001560:	20000408 	.word	0x20000408
 8001564:	200002a4 	.word	0x200002a4
 8001568:	080062e4 	.word	0x080062e4
 800156c:	20004110 	.word	0x20004110

08001570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001576:	f000 fe6b 	bl	8002250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157a:	f000 f86f 	bl	800165c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157e:	f7ff f89b 	bl	80006b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001582:	f7ff f873 	bl	800066c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001586:	f000 fd1d 	bl	8001fc4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800158a:	f000 faf3 	bl	8001b74 <MX_TIM3_Init>
  MX_TIM4_Init();
 800158e:	f000 fb67 	bl	8001c60 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001592:	f000 fced 	bl	8001f70 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001596:	f000 fd3f 	bl	8002018 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800159a:	f000 fa75 	bl	8001a88 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 800159e:	4826      	ldr	r0, [pc, #152]	@ (8001638 <main+0xc8>)
 80015a0:	f002 f8f0 	bl	8003784 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80015a4:	2100      	movs	r1, #0
 80015a6:	4824      	ldr	r0, [pc, #144]	@ (8001638 <main+0xc8>)
 80015a8:	f002 f98e 	bl	80038c8 <HAL_TIM_PWM_Start>
  WS28XX_Init(&ws, &htim3, 72, TIM_CHANNEL_1, LED_TOTAL);
 80015ac:	f240 2342 	movw	r3, #578	@ 0x242
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2300      	movs	r3, #0
 80015b4:	2248      	movs	r2, #72	@ 0x48
 80015b6:	4921      	ldr	r1, [pc, #132]	@ (800163c <main+0xcc>)
 80015b8:	4821      	ldr	r0, [pc, #132]	@ (8001640 <main+0xd0>)
 80015ba:	f004 f817 	bl	80055ec <WS28XX_Init>


  // Start UART reception for RFID Reader (USART1)
  HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));
 80015be:	220e      	movs	r2, #14
 80015c0:	4920      	ldr	r1, [pc, #128]	@ (8001644 <main+0xd4>)
 80015c2:	4821      	ldr	r0, [pc, #132]	@ (8001648 <main+0xd8>)
 80015c4:	f003 fa58 	bl	8004a78 <HAL_UART_Receive_IT>

  // Start UART reception for Additional UART (USART2)
  HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));
 80015c8:	220e      	movs	r2, #14
 80015ca:	491e      	ldr	r1, [pc, #120]	@ (8001644 <main+0xd4>)
 80015cc:	481f      	ldr	r0, [pc, #124]	@ (800164c <main+0xdc>)
 80015ce:	f003 fa53 	bl	8004a78 <HAL_UART_Receive_IT>

  // Start UART reception for NOS response (USART3)
  HAL_UART_Receive_IT(&huart3, &responseData, 2);
 80015d2:	2202      	movs	r2, #2
 80015d4:	491e      	ldr	r1, [pc, #120]	@ (8001650 <main+0xe0>)
 80015d6:	481f      	ldr	r0, [pc, #124]	@ (8001654 <main+0xe4>)
 80015d8:	f003 fa4e 	bl	8004a78 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		switch (currentState)
 80015dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <main+0xe8>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b06      	cmp	r3, #6
 80015e2:	d826      	bhi.n	8001632 <main+0xc2>
 80015e4:	a201      	add	r2, pc, #4	@ (adr r2, 80015ec <main+0x7c>)
 80015e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ea:	bf00      	nop
 80015ec:	08001609 	.word	0x08001609
 80015f0:	0800160f 	.word	0x0800160f
 80015f4:	08001615 	.word	0x08001615
 80015f8:	0800161b 	.word	0x0800161b
 80015fc:	08001621 	.word	0x08001621
 8001600:	08001627 	.word	0x08001627
 8001604:	0800162d 	.word	0x0800162d
		{
			case STATE_READY:
				ready_state();
 8001608:	f7ff fdf0 	bl	80011ec <ready_state>
				break;
 800160c:	e012      	b.n	8001634 <main+0xc4>
			case STATE_READING:
				reading_state();
 800160e:	f7ff fe11 	bl	8001234 <reading_state>
				break;
 8001612:	e00f      	b.n	8001634 <main+0xc4>
			case STATE_OPEN:
				open_state();
 8001614:	f7ff fe70 	bl	80012f8 <open_state>
				break;
 8001618:	e00c      	b.n	8001634 <main+0xc4>
			case STATE_CLOSED:
				closed_state();
 800161a:	f7ff fed1 	bl	80013c0 <closed_state>
				break;
 800161e:	e009      	b.n	8001634 <main+0xc4>
			// Leave other states empty for now
			case STATE_OVERCAPACITY:
				overcapacity_state();
 8001620:	f7ff ff18 	bl	8001454 <overcapacity_state>
				break;
 8001624:	e006      	b.n	8001634 <main+0xc4>
			case STATE_SLEEP:
				sleep_state();
 8001626:	f7ff fef5 	bl	8001414 <sleep_state>
				break;
 800162a:	e003      	b.n	8001634 <main+0xc4>
			case STATE_EMERGENCY:
				emergency_state();
 800162c:	f7ff ff48 	bl	80014c0 <emergency_state>
				break;
 8001630:	e000      	b.n	8001634 <main+0xc4>
			default:
				break;
 8001632:	bf00      	nop
		switch (currentState)
 8001634:	e7d2      	b.n	80015dc <main+0x6c>
 8001636:	bf00      	nop
 8001638:	2000422c 	.word	0x2000422c
 800163c:	200041e4 	.word	0x200041e4
 8001640:	20000408 	.word	0x20000408
 8001644:	20004114 	.word	0x20004114
 8001648:	200042fc 	.word	0x200042fc
 800164c:	20004344 	.word	0x20004344
 8001650:	20004144 	.word	0x20004144
 8001654:	2000438c 	.word	0x2000438c
 8001658:	20004110 	.word	0x20004110

0800165c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b090      	sub	sp, #64	@ 0x40
 8001660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001662:	f107 0318 	add.w	r3, r7, #24
 8001666:	2228      	movs	r2, #40	@ 0x28
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f004 f994 	bl	8005998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800167e:	2301      	movs	r3, #1
 8001680:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001682:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800168c:	2301      	movs	r3, #1
 800168e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001690:	2302      	movs	r3, #2
 8001692:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001694:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001698:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800169a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800169e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a0:	f107 0318 	add.w	r3, r7, #24
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 fc0d 	bl	8002ec4 <HAL_RCC_OscConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016b0:	f000 f8be 	bl	8001830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b4:	230f      	movs	r3, #15
 80016b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b8:	2302      	movs	r3, #2
 80016ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2102      	movs	r1, #2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fe7a 	bl	80033c8 <HAL_RCC_ClockConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016da:	f000 f8a9 	bl	8001830 <Error_Handler>
  }
}
 80016de:	bf00      	nop
 80016e0:	3740      	adds	r7, #64	@ 0x40
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) { // Data received from USART1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a40      	ldr	r2, [pc, #256]	@ (80017f8 <HAL_UART_RxCpltCallback+0x110>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d12b      	bne.n	8001752 <HAL_UART_RxCpltCallback+0x6a>
        // Process the received data
        for (int i = 0; i < 12; i++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	e00b      	b.n	8001718 <HAL_UART_RxCpltCallback+0x30>
            processedData[i] = rxData[i + 1]; // Skip the start byte
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	3301      	adds	r3, #1
 8001704:	4a3d      	ldr	r2, [pc, #244]	@ (80017fc <HAL_UART_RxCpltCallback+0x114>)
 8001706:	5cd1      	ldrb	r1, [r2, r3]
 8001708:	4a3d      	ldr	r2, [pc, #244]	@ (8001800 <HAL_UART_RxCpltCallback+0x118>)
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	4413      	add	r3, r2
 800170e:	460a      	mov	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 12; i++) {
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3301      	adds	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	2b0b      	cmp	r3, #11
 800171c:	ddf0      	ble.n	8001700 <HAL_UART_RxCpltCallback+0x18>
        }

        uart_source = 1;
 800171e:	4b39      	ldr	r3, [pc, #228]	@ (8001804 <HAL_UART_RxCpltCallback+0x11c>)
 8001720:	2201      	movs	r2, #1
 8001722:	701a      	strb	r2, [r3, #0]
        processedData[12] = uart_source + '0';
 8001724:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <HAL_UART_RxCpltCallback+0x11c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	3330      	adds	r3, #48	@ 0x30
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b34      	ldr	r3, [pc, #208]	@ (8001800 <HAL_UART_RxCpltCallback+0x118>)
 800172e:	731a      	strb	r2, [r3, #12]
        processedData[13] = '\0'; // Null-terminate the string
 8001730:	4b33      	ldr	r3, [pc, #204]	@ (8001800 <HAL_UART_RxCpltCallback+0x118>)
 8001732:	2200      	movs	r2, #0
 8001734:	735a      	strb	r2, [r3, #13]

        // Use sprintf to format usermsg with identification flag
        sprintf(usermsg, "%s", processedData);
 8001736:	4a32      	ldr	r2, [pc, #200]	@ (8001800 <HAL_UART_RxCpltCallback+0x118>)
 8001738:	4933      	ldr	r1, [pc, #204]	@ (8001808 <HAL_UART_RxCpltCallback+0x120>)
 800173a:	4834      	ldr	r0, [pc, #208]	@ (800180c <HAL_UART_RxCpltCallback+0x124>)
 800173c:	f004 f90c 	bl	8005958 <siprintf>

        flag_rev = 1; // Set flag to indicate data has been received
 8001740:	4b33      	ldr	r3, [pc, #204]	@ (8001810 <HAL_UART_RxCpltCallback+0x128>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]

        // Re-enable UART reception for USART1
        HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));
 8001746:	220e      	movs	r2, #14
 8001748:	492c      	ldr	r1, [pc, #176]	@ (80017fc <HAL_UART_RxCpltCallback+0x114>)
 800174a:	4832      	ldr	r0, [pc, #200]	@ (8001814 <HAL_UART_RxCpltCallback+0x12c>)
 800174c:	f003 f994 	bl	8004a78 <HAL_UART_Receive_IT>
        }

        // Re-enable UART reception
        HAL_UART_Receive_IT(&huart3, responseData, 2);  // Expect 2 bytes: CMD, ID
    }
}
 8001750:	e04d      	b.n	80017ee <HAL_UART_RxCpltCallback+0x106>
    else if (huart->Instance == USART2) { // Data received from USART2
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a30      	ldr	r2, [pc, #192]	@ (8001818 <HAL_UART_RxCpltCallback+0x130>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d12b      	bne.n	80017b4 <HAL_UART_RxCpltCallback+0xcc>
        for (int i = 0; i < 12; i++) {
 800175c:	2300      	movs	r3, #0
 800175e:	61bb      	str	r3, [r7, #24]
 8001760:	e00b      	b.n	800177a <HAL_UART_RxCpltCallback+0x92>
            processedData[i] = rxData[i + 1]; // Skip the start byte
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	3301      	adds	r3, #1
 8001766:	4a25      	ldr	r2, [pc, #148]	@ (80017fc <HAL_UART_RxCpltCallback+0x114>)
 8001768:	5cd1      	ldrb	r1, [r2, r3]
 800176a:	4a25      	ldr	r2, [pc, #148]	@ (8001800 <HAL_UART_RxCpltCallback+0x118>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	4413      	add	r3, r2
 8001770:	460a      	mov	r2, r1
 8001772:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 12; i++) {
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	3301      	adds	r3, #1
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	2b0b      	cmp	r3, #11
 800177e:	ddf0      	ble.n	8001762 <HAL_UART_RxCpltCallback+0x7a>
        uart_source = 2;
 8001780:	4b20      	ldr	r3, [pc, #128]	@ (8001804 <HAL_UART_RxCpltCallback+0x11c>)
 8001782:	2202      	movs	r2, #2
 8001784:	701a      	strb	r2, [r3, #0]
		processedData[12] = uart_source + '0';
 8001786:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <HAL_UART_RxCpltCallback+0x11c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	3330      	adds	r3, #48	@ 0x30
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b1c      	ldr	r3, [pc, #112]	@ (8001800 <HAL_UART_RxCpltCallback+0x118>)
 8001790:	731a      	strb	r2, [r3, #12]
		processedData[13] = '\0'; // Null-terminate the string
 8001792:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <HAL_UART_RxCpltCallback+0x118>)
 8001794:	2200      	movs	r2, #0
 8001796:	735a      	strb	r2, [r3, #13]
        sprintf(usermsg, "%s", processedData);
 8001798:	4a19      	ldr	r2, [pc, #100]	@ (8001800 <HAL_UART_RxCpltCallback+0x118>)
 800179a:	491b      	ldr	r1, [pc, #108]	@ (8001808 <HAL_UART_RxCpltCallback+0x120>)
 800179c:	481b      	ldr	r0, [pc, #108]	@ (800180c <HAL_UART_RxCpltCallback+0x124>)
 800179e:	f004 f8db 	bl	8005958 <siprintf>
        flag_rev = 1; // Set flag to indicate data has been received
 80017a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <HAL_UART_RxCpltCallback+0x128>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, rxData, sizeof(rxData));
 80017a8:	220e      	movs	r2, #14
 80017aa:	4914      	ldr	r1, [pc, #80]	@ (80017fc <HAL_UART_RxCpltCallback+0x114>)
 80017ac:	481b      	ldr	r0, [pc, #108]	@ (800181c <HAL_UART_RxCpltCallback+0x134>)
 80017ae:	f003 f963 	bl	8004a78 <HAL_UART_Receive_IT>
}
 80017b2:	e01c      	b.n	80017ee <HAL_UART_RxCpltCallback+0x106>
    else if (huart->Instance == USART3) {  // USART3 Interrupt
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a19      	ldr	r2, [pc, #100]	@ (8001820 <HAL_UART_RxCpltCallback+0x138>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d117      	bne.n	80017ee <HAL_UART_RxCpltCallback+0x106>
        char receivedCommandChar = responseData[0];  // First character is the command
 80017be:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <HAL_UART_RxCpltCallback+0x13c>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	75fb      	strb	r3, [r7, #23]
        char receivedTurnstileIDChar = responseData[1];  // Second character is the Turnstile ID
 80017c4:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <HAL_UART_RxCpltCallback+0x13c>)
 80017c6:	785b      	ldrb	r3, [r3, #1]
 80017c8:	75bb      	strb	r3, [r7, #22]
        int receivedCommand = receivedCommandChar - '0';  // Convert Command to integer
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	3b30      	subs	r3, #48	@ 0x30
 80017ce:	613b      	str	r3, [r7, #16]
        int receivedTurnstileID = receivedTurnstileIDChar - '0';  // Convert ID to integer
 80017d0:	7dbb      	ldrb	r3, [r7, #22]
 80017d2:	3b30      	subs	r3, #48	@ 0x30
 80017d4:	60fb      	str	r3, [r7, #12]
        if (receivedTurnstileID == TURNSTILE_ID) {  // Process only if ID matches
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d103      	bne.n	80017e4 <HAL_UART_RxCpltCallback+0xfc>
            intresponseData = receivedCommand;  // Store the command
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <HAL_UART_RxCpltCallback+0x140>)
 80017e2:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart3, responseData, 2);  // Expect 2 bytes: CMD, ID
 80017e4:	2202      	movs	r2, #2
 80017e6:	490f      	ldr	r1, [pc, #60]	@ (8001824 <HAL_UART_RxCpltCallback+0x13c>)
 80017e8:	4810      	ldr	r0, [pc, #64]	@ (800182c <HAL_UART_RxCpltCallback+0x144>)
 80017ea:	f003 f945 	bl	8004a78 <HAL_UART_Receive_IT>
}
 80017ee:	bf00      	nop
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40013800 	.word	0x40013800
 80017fc:	20004114 	.word	0x20004114
 8001800:	20004124 	.word	0x20004124
 8001804:	20004143 	.word	0x20004143
 8001808:	080062e8 	.word	0x080062e8
 800180c:	20004134 	.word	0x20004134
 8001810:	20004142 	.word	0x20004142
 8001814:	200042fc 	.word	0x200042fc
 8001818:	40004400 	.word	0x40004400
 800181c:	20004344 	.word	0x20004344
 8001820:	40004800 	.word	0x40004800
 8001824:	20004144 	.word	0x20004144
 8001828:	20004146 	.word	0x20004146
 800182c:	2000438c 	.word	0x2000438c

08001830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b0a5      	sub	sp, #148	@ 0x94
 8001834:	af02      	add	r7, sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001836:	b672      	cpsid	i
}
 8001838:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    uint32_t error_start_time = HAL_GetTick();
 800183a:	f000 fd61 	bl	8002300 <HAL_GetTick>
 800183e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

    while (1) {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Indicate error
 8001842:	2180      	movs	r1, #128	@ 0x80
 8001844:	4816      	ldr	r0, [pc, #88]	@ (80018a0 <Error_Handler+0x70>)
 8001846:	f001 faef 	bl	8002e28 <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 800184a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800184e:	f000 fd61 	bl	8002314 <HAL_Delay>

        char error_msg[128];
        snprintf(error_msg, sizeof(error_msg), "Error in state: %d, time: %lu\n", currentState, HAL_GetTick());
 8001852:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <Error_Handler+0x74>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461c      	mov	r4, r3
 8001858:	f000 fd52 	bl	8002300 <HAL_GetTick>
 800185c:	4603      	mov	r3, r0
 800185e:	1d38      	adds	r0, r7, #4
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	4623      	mov	r3, r4
 8001864:	4a10      	ldr	r2, [pc, #64]	@ (80018a8 <Error_Handler+0x78>)
 8001866:	2180      	movs	r1, #128	@ 0x80
 8001868:	f004 f842 	bl	80058f0 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fc6c 	bl	800014c <strlen>
 8001874:	4603      	mov	r3, r0
 8001876:	b29a      	uxth	r2, r3
 8001878:	1d39      	adds	r1, r7, #4
 800187a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800187e:	480b      	ldr	r0, [pc, #44]	@ (80018ac <Error_Handler+0x7c>)
 8001880:	f003 f83a 	bl	80048f8 <HAL_UART_Transmit>

        if (HAL_GetTick() - error_start_time > 10000) {  // Reset system after prolonged error
 8001884:	f000 fd3c 	bl	8002300 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001894:	4293      	cmp	r3, r2
 8001896:	d9d4      	bls.n	8001842 <Error_Handler+0x12>
            HAL_NVIC_SystemReset();
 8001898:	f000 fe77 	bl	800258a <HAL_NVIC_SystemReset>
    while (1) {
 800189c:	e7d1      	b.n	8001842 <Error_Handler+0x12>
 800189e:	bf00      	nop
 80018a0:	40010c00 	.word	0x40010c00
 80018a4:	20004110 	.word	0x20004110
 80018a8:	080062ec 	.word	0x080062ec
 80018ac:	2000438c 	.word	0x2000438c

080018b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <HAL_MspInit+0x5c>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	4a14      	ldr	r2, [pc, #80]	@ (800190c <HAL_MspInit+0x5c>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6193      	str	r3, [r2, #24]
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <HAL_MspInit+0x5c>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <HAL_MspInit+0x5c>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a0e      	ldr	r2, [pc, #56]	@ (800190c <HAL_MspInit+0x5c>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d8:	61d3      	str	r3, [r2, #28]
 80018da:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <HAL_MspInit+0x5c>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <HAL_MspInit+0x60>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <HAL_MspInit+0x60>)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	40021000 	.word	0x40021000
 8001910:	40010000 	.word	0x40010000

08001914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <NMI_Handler+0x4>

0800191c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <MemManage_Handler+0x4>

0800192c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <UsageFault_Handler+0x4>

0800193c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001964:	f000 fcba 	bl	80022dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Pin);
 8001970:	2004      	movs	r0, #4
 8001972:	f001 fa73 	bl	8002e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <DMA1_Channel5_IRQHandler+0x10>)
 8001982:	f000 ff81 	bl	8002888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20004274 	.word	0x20004274

08001990 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <DMA1_Channel6_IRQHandler+0x10>)
 8001996:	f000 ff77 	bl	8002888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200042b8 	.word	0x200042b8

080019a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <USART1_IRQHandler+0x10>)
 80019aa:	f003 f88b 	bl	8004ac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200042fc 	.word	0x200042fc

080019b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <USART2_IRQHandler+0x10>)
 80019be:	f003 f881 	bl	8004ac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20004344 	.word	0x20004344

080019cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <USART3_IRQHandler+0x10>)
 80019d2:	f003 f877 	bl	8004ac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000438c 	.word	0x2000438c

080019e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_1A_Pin);
 80019e4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80019e8:	f001 fa38 	bl	8002e5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_1B_Pin);
 80019ec:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80019f0:	f001 fa34 	bl	8002e5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019f8:	f001 fa30 	bl	8002e5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_2A_Pin);
 80019fc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a00:	f001 fa2c 	bl	8002e5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_2B_Pin);
 8001a04:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001a08:	f001 fa28 	bl	8002e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	@ (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	@ (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f003 ffb2 	bl	80059a8 <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20005000 	.word	0x20005000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	20004198 	.word	0x20004198
 8001a78:	20004520 	.word	0x20004520

08001a7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08e      	sub	sp, #56	@ 0x38
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9c:	f107 0320 	add.w	r3, r7, #32
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
 8001ab4:	615a      	str	r2, [r3, #20]
 8001ab6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b70 <MX_TIM2_Init+0xe8>)
 8001aba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001abe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b70 <MX_TIM2_Init+0xe8>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b70 <MX_TIM2_Init+0xe8>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001acc:	4b28      	ldr	r3, [pc, #160]	@ (8001b70 <MX_TIM2_Init+0xe8>)
 8001ace:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ad2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	4b26      	ldr	r3, [pc, #152]	@ (8001b70 <MX_TIM2_Init+0xe8>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ada:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <MX_TIM2_Init+0xe8>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ae0:	4823      	ldr	r0, [pc, #140]	@ (8001b70 <MX_TIM2_Init+0xe8>)
 8001ae2:	f001 fdff 	bl	80036e4 <HAL_TIM_Base_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001aec:	f7ff fea0 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001af6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001afa:	4619      	mov	r1, r3
 8001afc:	481c      	ldr	r0, [pc, #112]	@ (8001b70 <MX_TIM2_Init+0xe8>)
 8001afe:	f002 f9e9 	bl	8003ed4 <HAL_TIM_ConfigClockSource>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001b08:	f7ff fe92 	bl	8001830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b0c:	4818      	ldr	r0, [pc, #96]	@ (8001b70 <MX_TIM2_Init+0xe8>)
 8001b0e:	f001 fe83 	bl	8003818 <HAL_TIM_PWM_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001b18:	f7ff fe8a 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b24:	f107 0320 	add.w	r3, r7, #32
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4811      	ldr	r0, [pc, #68]	@ (8001b70 <MX_TIM2_Init+0xe8>)
 8001b2c:	f002 fe36 	bl	800479c <HAL_TIMEx_MasterConfigSynchronization>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001b36:	f7ff fe7b 	bl	8001830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b3a:	2360      	movs	r3, #96	@ 0x60
 8001b3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4807      	ldr	r0, [pc, #28]	@ (8001b70 <MX_TIM2_Init+0xe8>)
 8001b52:	f002 f8fd 	bl	8003d50 <HAL_TIM_PWM_ConfigChannel>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001b5c:	f7ff fe68 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b60:	4803      	ldr	r0, [pc, #12]	@ (8001b70 <MX_TIM2_Init+0xe8>)
 8001b62:	f000 f993 	bl	8001e8c <HAL_TIM_MspPostInit>

}
 8001b66:	bf00      	nop
 8001b68:	3738      	adds	r7, #56	@ 0x38
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	2000419c 	.word	0x2000419c

08001b74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08e      	sub	sp, #56	@ 0x38
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	f107 0320 	add.w	r3, r7, #32
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
 8001ba0:	615a      	str	r2, [r3, #20]
 8001ba2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c58 <MX_TIM3_Init+0xe4>)
 8001ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c5c <MX_TIM3_Init+0xe8>)
 8001ba8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001baa:	4b2b      	ldr	r3, [pc, #172]	@ (8001c58 <MX_TIM3_Init+0xe4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <MX_TIM3_Init+0xe4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bb6:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <MX_TIM3_Init+0xe4>)
 8001bb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b26      	ldr	r3, [pc, #152]	@ (8001c58 <MX_TIM3_Init+0xe4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc4:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <MX_TIM3_Init+0xe4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bca:	4823      	ldr	r0, [pc, #140]	@ (8001c58 <MX_TIM3_Init+0xe4>)
 8001bcc:	f001 fd8a 	bl	80036e4 <HAL_TIM_Base_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001bd6:	f7ff fe2b 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001be0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001be4:	4619      	mov	r1, r3
 8001be6:	481c      	ldr	r0, [pc, #112]	@ (8001c58 <MX_TIM3_Init+0xe4>)
 8001be8:	f002 f974 	bl	8003ed4 <HAL_TIM_ConfigClockSource>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001bf2:	f7ff fe1d 	bl	8001830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bf6:	4818      	ldr	r0, [pc, #96]	@ (8001c58 <MX_TIM3_Init+0xe4>)
 8001bf8:	f001 fe0e 	bl	8003818 <HAL_TIM_PWM_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c02:	f7ff fe15 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c0e:	f107 0320 	add.w	r3, r7, #32
 8001c12:	4619      	mov	r1, r3
 8001c14:	4810      	ldr	r0, [pc, #64]	@ (8001c58 <MX_TIM3_Init+0xe4>)
 8001c16:	f002 fdc1 	bl	800479c <HAL_TIMEx_MasterConfigSynchronization>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c20:	f7ff fe06 	bl	8001830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c24:	2360      	movs	r3, #96	@ 0x60
 8001c26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	2200      	movs	r2, #0
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4807      	ldr	r0, [pc, #28]	@ (8001c58 <MX_TIM3_Init+0xe4>)
 8001c3c:	f002 f888 	bl	8003d50 <HAL_TIM_PWM_ConfigChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001c46:	f7ff fdf3 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c4a:	4803      	ldr	r0, [pc, #12]	@ (8001c58 <MX_TIM3_Init+0xe4>)
 8001c4c:	f000 f91e 	bl	8001e8c <HAL_TIM_MspPostInit>

}
 8001c50:	bf00      	nop
 8001c52:	3738      	adds	r7, #56	@ 0x38
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200041e4 	.word	0x200041e4
 8001c5c:	40000400 	.word	0x40000400

08001c60 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08e      	sub	sp, #56	@ 0x38
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c74:	f107 0320 	add.w	r3, r7, #32
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
 8001c8c:	615a      	str	r2, [r3, #20]
 8001c8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c90:	4b2c      	ldr	r3, [pc, #176]	@ (8001d44 <MX_TIM4_Init+0xe4>)
 8001c92:	4a2d      	ldr	r2, [pc, #180]	@ (8001d48 <MX_TIM4_Init+0xe8>)
 8001c94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c96:	4b2b      	ldr	r3, [pc, #172]	@ (8001d44 <MX_TIM4_Init+0xe4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9c:	4b29      	ldr	r3, [pc, #164]	@ (8001d44 <MX_TIM4_Init+0xe4>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001ca2:	4b28      	ldr	r3, [pc, #160]	@ (8001d44 <MX_TIM4_Init+0xe4>)
 8001ca4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ca8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001caa:	4b26      	ldr	r3, [pc, #152]	@ (8001d44 <MX_TIM4_Init+0xe4>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb0:	4b24      	ldr	r3, [pc, #144]	@ (8001d44 <MX_TIM4_Init+0xe4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cb6:	4823      	ldr	r0, [pc, #140]	@ (8001d44 <MX_TIM4_Init+0xe4>)
 8001cb8:	f001 fd14 	bl	80036e4 <HAL_TIM_Base_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001cc2:	f7ff fdb5 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ccc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	481c      	ldr	r0, [pc, #112]	@ (8001d44 <MX_TIM4_Init+0xe4>)
 8001cd4:	f002 f8fe 	bl	8003ed4 <HAL_TIM_ConfigClockSource>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001cde:	f7ff fda7 	bl	8001830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ce2:	4818      	ldr	r0, [pc, #96]	@ (8001d44 <MX_TIM4_Init+0xe4>)
 8001ce4:	f001 fd98 	bl	8003818 <HAL_TIM_PWM_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001cee:	f7ff fd9f 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cfa:	f107 0320 	add.w	r3, r7, #32
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4810      	ldr	r0, [pc, #64]	@ (8001d44 <MX_TIM4_Init+0xe4>)
 8001d02:	f002 fd4b 	bl	800479c <HAL_TIMEx_MasterConfigSynchronization>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001d0c:	f7ff fd90 	bl	8001830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d10:	2360      	movs	r3, #96	@ 0x60
 8001d12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	2200      	movs	r2, #0
 8001d24:	4619      	mov	r1, r3
 8001d26:	4807      	ldr	r0, [pc, #28]	@ (8001d44 <MX_TIM4_Init+0xe4>)
 8001d28:	f002 f812 	bl	8003d50 <HAL_TIM_PWM_ConfigChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001d32:	f7ff fd7d 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d36:	4803      	ldr	r0, [pc, #12]	@ (8001d44 <MX_TIM4_Init+0xe4>)
 8001d38:	f000 f8a8 	bl	8001e8c <HAL_TIM_MspPostInit>

}
 8001d3c:	bf00      	nop
 8001d3e:	3738      	adds	r7, #56	@ 0x38
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000422c 	.word	0x2000422c
 8001d48:	40000800 	.word	0x40000800

08001d4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d5c:	d133      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d5e:	4b44      	ldr	r3, [pc, #272]	@ (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a43      	ldr	r2, [pc, #268]	@ (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	61d3      	str	r3, [r2, #28]
 8001d6a:	4b41      	ldr	r3, [pc, #260]	@ (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001d76:	4b3f      	ldr	r3, [pc, #252]	@ (8001e74 <HAL_TIM_Base_MspInit+0x128>)
 8001d78:	4a3f      	ldr	r2, [pc, #252]	@ (8001e78 <HAL_TIM_Base_MspInit+0x12c>)
 8001d7a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e74 <HAL_TIM_Base_MspInit+0x128>)
 8001d7e:	2210      	movs	r2, #16
 8001d80:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d82:	4b3c      	ldr	r3, [pc, #240]	@ (8001e74 <HAL_TIM_Base_MspInit+0x128>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001d88:	4b3a      	ldr	r3, [pc, #232]	@ (8001e74 <HAL_TIM_Base_MspInit+0x128>)
 8001d8a:	2280      	movs	r2, #128	@ 0x80
 8001d8c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d8e:	4b39      	ldr	r3, [pc, #228]	@ (8001e74 <HAL_TIM_Base_MspInit+0x128>)
 8001d90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d94:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d96:	4b37      	ldr	r3, [pc, #220]	@ (8001e74 <HAL_TIM_Base_MspInit+0x128>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001d9c:	4b35      	ldr	r3, [pc, #212]	@ (8001e74 <HAL_TIM_Base_MspInit+0x128>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001da2:	4b34      	ldr	r3, [pc, #208]	@ (8001e74 <HAL_TIM_Base_MspInit+0x128>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001da8:	4832      	ldr	r0, [pc, #200]	@ (8001e74 <HAL_TIM_Base_MspInit+0x128>)
 8001daa:	f000 fbff 	bl	80025ac <HAL_DMA_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8001db4:	f7ff fd3c 	bl	8001830 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a2e      	ldr	r2, [pc, #184]	@ (8001e74 <HAL_TIM_Base_MspInit+0x128>)
 8001dbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8001dbe:	4a2d      	ldr	r2, [pc, #180]	@ (8001e74 <HAL_TIM_Base_MspInit+0x128>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001dc4:	e04f      	b.n	8001e66 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM3)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a2c      	ldr	r2, [pc, #176]	@ (8001e7c <HAL_TIM_Base_MspInit+0x130>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d139      	bne.n	8001e44 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dd0:	4b27      	ldr	r3, [pc, #156]	@ (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	4a26      	ldr	r2, [pc, #152]	@ (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001dd6:	f043 0302 	orr.w	r3, r3, #2
 8001dda:	61d3      	str	r3, [r2, #28]
 8001ddc:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001de8:	4b25      	ldr	r3, [pc, #148]	@ (8001e80 <HAL_TIM_Base_MspInit+0x134>)
 8001dea:	4a26      	ldr	r2, [pc, #152]	@ (8001e84 <HAL_TIM_Base_MspInit+0x138>)
 8001dec:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dee:	4b24      	ldr	r3, [pc, #144]	@ (8001e80 <HAL_TIM_Base_MspInit+0x134>)
 8001df0:	2210      	movs	r2, #16
 8001df2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df4:	4b22      	ldr	r3, [pc, #136]	@ (8001e80 <HAL_TIM_Base_MspInit+0x134>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001dfa:	4b21      	ldr	r3, [pc, #132]	@ (8001e80 <HAL_TIM_Base_MspInit+0x134>)
 8001dfc:	2280      	movs	r2, #128	@ 0x80
 8001dfe:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e00:	4b1f      	ldr	r3, [pc, #124]	@ (8001e80 <HAL_TIM_Base_MspInit+0x134>)
 8001e02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e06:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e08:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <HAL_TIM_Base_MspInit+0x134>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e80 <HAL_TIM_Base_MspInit+0x134>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001e14:	4b1a      	ldr	r3, [pc, #104]	@ (8001e80 <HAL_TIM_Base_MspInit+0x134>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001e1a:	4819      	ldr	r0, [pc, #100]	@ (8001e80 <HAL_TIM_Base_MspInit+0x134>)
 8001e1c:	f000 fbc6 	bl	80025ac <HAL_DMA_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_TIM_Base_MspInit+0xde>
      Error_Handler();
 8001e26:	f7ff fd03 	bl	8001830 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a14      	ldr	r2, [pc, #80]	@ (8001e80 <HAL_TIM_Base_MspInit+0x134>)
 8001e2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e30:	4a13      	ldr	r2, [pc, #76]	@ (8001e80 <HAL_TIM_Base_MspInit+0x134>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a11      	ldr	r2, [pc, #68]	@ (8001e80 <HAL_TIM_Base_MspInit+0x134>)
 8001e3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e3c:	4a10      	ldr	r2, [pc, #64]	@ (8001e80 <HAL_TIM_Base_MspInit+0x134>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001e42:	e010      	b.n	8001e66 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM4)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0f      	ldr	r2, [pc, #60]	@ (8001e88 <HAL_TIM_Base_MspInit+0x13c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d10b      	bne.n	8001e66 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e4e:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4a07      	ldr	r2, [pc, #28]	@ (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	61d3      	str	r3, [r2, #28]
 8001e5a:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_TIM_Base_MspInit+0x124>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	20004274 	.word	0x20004274
 8001e78:	40020058 	.word	0x40020058
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	200042b8 	.word	0x200042b8
 8001e84:	4002006c 	.word	0x4002006c
 8001e88:	40000800 	.word	0x40000800

08001e8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	@ 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0318 	add.w	r3, r7, #24
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eaa:	d118      	bne.n	8001ede <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eac:	4b2b      	ldr	r3, [pc, #172]	@ (8001f5c <HAL_TIM_MspPostInit+0xd0>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f5c <HAL_TIM_MspPostInit+0xd0>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b28      	ldr	r3, [pc, #160]	@ (8001f5c <HAL_TIM_MspPostInit+0xd0>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	f107 0318 	add.w	r3, r7, #24
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4822      	ldr	r0, [pc, #136]	@ (8001f60 <HAL_TIM_MspPostInit+0xd4>)
 8001ed8:	f000 fe0a 	bl	8002af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001edc:	e03a      	b.n	8001f54 <HAL_TIM_MspPostInit+0xc8>
  else if(timHandle->Instance==TIM3)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a20      	ldr	r2, [pc, #128]	@ (8001f64 <HAL_TIM_MspPostInit+0xd8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d118      	bne.n	8001f1a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f5c <HAL_TIM_MspPostInit+0xd0>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a1b      	ldr	r2, [pc, #108]	@ (8001f5c <HAL_TIM_MspPostInit+0xd0>)
 8001eee:	f043 0304 	orr.w	r3, r3, #4
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <HAL_TIM_MspPostInit+0xd0>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f00:	2340      	movs	r3, #64	@ 0x40
 8001f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0c:	f107 0318 	add.w	r3, r7, #24
 8001f10:	4619      	mov	r1, r3
 8001f12:	4813      	ldr	r0, [pc, #76]	@ (8001f60 <HAL_TIM_MspPostInit+0xd4>)
 8001f14:	f000 fdec 	bl	8002af0 <HAL_GPIO_Init>
}
 8001f18:	e01c      	b.n	8001f54 <HAL_TIM_MspPostInit+0xc8>
  else if(timHandle->Instance==TIM4)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <HAL_TIM_MspPostInit+0xdc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d117      	bne.n	8001f54 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f24:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <HAL_TIM_MspPostInit+0xd0>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a0c      	ldr	r2, [pc, #48]	@ (8001f5c <HAL_TIM_MspPostInit+0xd0>)
 8001f2a:	f043 0308 	orr.w	r3, r3, #8
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <HAL_TIM_MspPostInit+0xd0>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f3c:	2340      	movs	r3, #64	@ 0x40
 8001f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2302      	movs	r3, #2
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f48:	f107 0318 	add.w	r3, r7, #24
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4807      	ldr	r0, [pc, #28]	@ (8001f6c <HAL_TIM_MspPostInit+0xe0>)
 8001f50:	f000 fdce 	bl	8002af0 <HAL_GPIO_Init>
}
 8001f54:	bf00      	nop
 8001f56:	3728      	adds	r7, #40	@ 0x28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010800 	.word	0x40010800
 8001f64:	40000400 	.word	0x40000400
 8001f68:	40000800 	.word	0x40000800
 8001f6c:	40010c00 	.word	0x40010c00

08001f70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f74:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <MX_USART1_UART_Init+0x4c>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	@ (8001fc0 <MX_USART1_UART_Init+0x50>)
 8001f78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <MX_USART1_UART_Init+0x4c>)
 8001f7c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <MX_USART1_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <MX_USART1_UART_Init+0x4c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <MX_USART1_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <MX_USART1_UART_Init+0x4c>)
 8001f96:	220c      	movs	r2, #12
 8001f98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <MX_USART1_UART_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <MX_USART1_UART_Init+0x4c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	@ (8001fbc <MX_USART1_UART_Init+0x4c>)
 8001fa8:	f002 fc56 	bl	8004858 <HAL_UART_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fb2:	f7ff fc3d 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200042fc 	.word	0x200042fc
 8001fc0:	40013800 	.word	0x40013800

08001fc4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	@ (8002014 <MX_USART2_UART_Init+0x50>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001fce:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001fd0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001fd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	@ (8002010 <MX_USART2_UART_Init+0x4c>)
 8001ffc:	f002 fc2c 	bl	8004858 <HAL_UART_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002006:	f7ff fc13 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20004344 	.word	0x20004344
 8002014:	40004400 	.word	0x40004400

08002018 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800201c:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <MX_USART3_UART_Init+0x4c>)
 800201e:	4a12      	ldr	r2, [pc, #72]	@ (8002068 <MX_USART3_UART_Init+0x50>)
 8002020:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002022:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <MX_USART3_UART_Init+0x4c>)
 8002024:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002028:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800202a:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <MX_USART3_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <MX_USART3_UART_Init+0x4c>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002036:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <MX_USART3_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800203c:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <MX_USART3_UART_Init+0x4c>)
 800203e:	220c      	movs	r2, #12
 8002040:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002042:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <MX_USART3_UART_Init+0x4c>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <MX_USART3_UART_Init+0x4c>)
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800204e:	4805      	ldr	r0, [pc, #20]	@ (8002064 <MX_USART3_UART_Init+0x4c>)
 8002050:	f002 fc02 	bl	8004858 <HAL_UART_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800205a:	f7ff fbe9 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000438c 	.word	0x2000438c
 8002068:	40004800 	.word	0x40004800

0800206c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	@ 0x30
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0320 	add.w	r3, r7, #32
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a59      	ldr	r2, [pc, #356]	@ (80021ec <HAL_UART_MspInit+0x180>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d13a      	bne.n	8002102 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800208c:	4b58      	ldr	r3, [pc, #352]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a57      	ldr	r2, [pc, #348]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 8002092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b55      	ldr	r3, [pc, #340]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a4:	4b52      	ldr	r3, [pc, #328]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a51      	ldr	r2, [pc, #324]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 80020aa:	f043 0304 	orr.w	r3, r3, #4
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b4f      	ldr	r3, [pc, #316]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	f107 0320 	add.w	r3, r7, #32
 80020ce:	4619      	mov	r1, r3
 80020d0:	4848      	ldr	r0, [pc, #288]	@ (80021f4 <HAL_UART_MspInit+0x188>)
 80020d2:	f000 fd0d 	bl	8002af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 0320 	add.w	r3, r7, #32
 80020e8:	4619      	mov	r1, r3
 80020ea:	4842      	ldr	r0, [pc, #264]	@ (80021f4 <HAL_UART_MspInit+0x188>)
 80020ec:	f000 fd00 	bl	8002af0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	2025      	movs	r0, #37	@ 0x25
 80020f6:	f000 fa1e 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020fa:	2025      	movs	r0, #37	@ 0x25
 80020fc:	f000 fa37 	bl	800256e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002100:	e070      	b.n	80021e4 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a3c      	ldr	r2, [pc, #240]	@ (80021f8 <HAL_UART_MspInit+0x18c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d12c      	bne.n	8002166 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 800210c:	4b38      	ldr	r3, [pc, #224]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	4a37      	ldr	r2, [pc, #220]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 8002112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002116:	61d3      	str	r3, [r2, #28]
 8002118:	4b35      	ldr	r3, [pc, #212]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002124:	4b32      	ldr	r3, [pc, #200]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a31      	ldr	r2, [pc, #196]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b2f      	ldr	r3, [pc, #188]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800213c:	230c      	movs	r3, #12
 800213e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2302      	movs	r3, #2
 8002146:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f107 0320 	add.w	r3, r7, #32
 800214c:	4619      	mov	r1, r3
 800214e:	4829      	ldr	r0, [pc, #164]	@ (80021f4 <HAL_UART_MspInit+0x188>)
 8002150:	f000 fcce 	bl	8002af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2026      	movs	r0, #38	@ 0x26
 800215a:	f000 f9ec 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800215e:	2026      	movs	r0, #38	@ 0x26
 8002160:	f000 fa05 	bl	800256e <HAL_NVIC_EnableIRQ>
}
 8002164:	e03e      	b.n	80021e4 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART3)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a24      	ldr	r2, [pc, #144]	@ (80021fc <HAL_UART_MspInit+0x190>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d139      	bne.n	80021e4 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002170:	4b1f      	ldr	r3, [pc, #124]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	4a1e      	ldr	r2, [pc, #120]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 8002176:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800217a:	61d3      	str	r3, [r2, #28]
 800217c:	4b1c      	ldr	r3, [pc, #112]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002188:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a18      	ldr	r2, [pc, #96]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 800218e:	f043 0308 	orr.w	r3, r3, #8
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <HAL_UART_MspInit+0x184>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ae:	f107 0320 	add.w	r3, r7, #32
 80021b2:	4619      	mov	r1, r3
 80021b4:	4812      	ldr	r0, [pc, #72]	@ (8002200 <HAL_UART_MspInit+0x194>)
 80021b6:	f000 fc9b 	bl	8002af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80021ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	f107 0320 	add.w	r3, r7, #32
 80021cc:	4619      	mov	r1, r3
 80021ce:	480c      	ldr	r0, [pc, #48]	@ (8002200 <HAL_UART_MspInit+0x194>)
 80021d0:	f000 fc8e 	bl	8002af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2100      	movs	r1, #0
 80021d8:	2027      	movs	r0, #39	@ 0x27
 80021da:	f000 f9ac 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021de:	2027      	movs	r0, #39	@ 0x27
 80021e0:	f000 f9c5 	bl	800256e <HAL_NVIC_EnableIRQ>
}
 80021e4:	bf00      	nop
 80021e6:	3730      	adds	r7, #48	@ 0x30
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40013800 	.word	0x40013800
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40010800 	.word	0x40010800
 80021f8:	40004400 	.word	0x40004400
 80021fc:	40004800 	.word	0x40004800
 8002200:	40010c00 	.word	0x40010c00

08002204 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002204:	f7ff fc3a 	bl	8001a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002208:	480b      	ldr	r0, [pc, #44]	@ (8002238 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800220a:	490c      	ldr	r1, [pc, #48]	@ (800223c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800220c:	4a0c      	ldr	r2, [pc, #48]	@ (8002240 <LoopFillZerobss+0x16>)
  movs r3, #0
 800220e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002210:	e002      	b.n	8002218 <LoopCopyDataInit>

08002212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002216:	3304      	adds	r3, #4

08002218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800221c:	d3f9      	bcc.n	8002212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221e:	4a09      	ldr	r2, [pc, #36]	@ (8002244 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002220:	4c09      	ldr	r4, [pc, #36]	@ (8002248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002224:	e001      	b.n	800222a <LoopFillZerobss>

08002226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002228:	3204      	adds	r2, #4

0800222a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800222c:	d3fb      	bcc.n	8002226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800222e:	f003 fbc1 	bl	80059b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002232:	f7ff f99d 	bl	8001570 <main>
  bx lr
 8002236:	4770      	bx	lr
  ldr r0, =_sdata
 8002238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800223c:	200003ec 	.word	0x200003ec
  ldr r2, =_sidata
 8002240:	08006488 	.word	0x08006488
  ldr r2, =_sbss
 8002244:	200003ec 	.word	0x200003ec
  ldr r4, =_ebss
 8002248:	20004520 	.word	0x20004520

0800224c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800224c:	e7fe      	b.n	800224c <ADC1_2_IRQHandler>
	...

08002250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002254:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <HAL_Init+0x28>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a07      	ldr	r2, [pc, #28]	@ (8002278 <HAL_Init+0x28>)
 800225a:	f043 0310 	orr.w	r3, r3, #16
 800225e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002260:	2003      	movs	r0, #3
 8002262:	f000 f95d 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002266:	2000      	movs	r0, #0
 8002268:	f000 f808 	bl	800227c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800226c:	f7ff fb20 	bl	80018b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40022000 	.word	0x40022000

0800227c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002284:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_InitTick+0x54>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <HAL_InitTick+0x58>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002292:	fbb3 f3f1 	udiv	r3, r3, r1
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f979 	bl	8002592 <HAL_SYSTICK_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00e      	b.n	80022c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d80a      	bhi.n	80022c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b0:	2200      	movs	r2, #0
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022b8:	f000 f93d 	bl	8002536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022bc:	4a06      	ldr	r2, [pc, #24]	@ (80022d8 <HAL_InitTick+0x5c>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e000      	b.n	80022c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000390 	.word	0x20000390
 80022d4:	20000398 	.word	0x20000398
 80022d8:	20000394 	.word	0x20000394

080022dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e0:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <HAL_IncTick+0x1c>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <HAL_IncTick+0x20>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	4a03      	ldr	r2, [pc, #12]	@ (80022fc <HAL_IncTick+0x20>)
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	20000398 	.word	0x20000398
 80022fc:	200043d4 	.word	0x200043d4

08002300 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return uwTick;
 8002304:	4b02      	ldr	r3, [pc, #8]	@ (8002310 <HAL_GetTick+0x10>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	200043d4 	.word	0x200043d4

08002314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800231c:	f7ff fff0 	bl	8002300 <HAL_GetTick>
 8002320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800232c:	d005      	beq.n	800233a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <HAL_Delay+0x44>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800233a:	bf00      	nop
 800233c:	f7ff ffe0 	bl	8002300 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d8f7      	bhi.n	800233c <HAL_Delay+0x28>
  {
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000398 	.word	0x20000398

0800235c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800236c:	4b0c      	ldr	r3, [pc, #48]	@ (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002378:	4013      	ands	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002384:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800238c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238e:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60d3      	str	r3, [r2, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <__NVIC_GetPriorityGrouping+0x18>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	f003 0307 	and.w	r3, r3, #7
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db0b      	blt.n	80023ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	4906      	ldr	r1, [pc, #24]	@ (80023f4 <__NVIC_EnableIRQ+0x34>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2001      	movs	r0, #1
 80023e2:	fa00 f202 	lsl.w	r2, r0, r2
 80023e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100

080023f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	2b00      	cmp	r3, #0
 800240a:	db0a      	blt.n	8002422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	490c      	ldr	r1, [pc, #48]	@ (8002444 <__NVIC_SetPriority+0x4c>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	0112      	lsls	r2, r2, #4
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	440b      	add	r3, r1
 800241c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002420:	e00a      	b.n	8002438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4908      	ldr	r1, [pc, #32]	@ (8002448 <__NVIC_SetPriority+0x50>)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3b04      	subs	r3, #4
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	440b      	add	r3, r1
 8002436:	761a      	strb	r2, [r3, #24]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000e100 	.word	0xe000e100
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	@ 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f1c3 0307 	rsb	r3, r3, #7
 8002466:	2b04      	cmp	r3, #4
 8002468:	bf28      	it	cs
 800246a:	2304      	movcs	r3, #4
 800246c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3304      	adds	r3, #4
 8002472:	2b06      	cmp	r3, #6
 8002474:	d902      	bls.n	800247c <NVIC_EncodePriority+0x30>
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3b03      	subs	r3, #3
 800247a:	e000      	b.n	800247e <NVIC_EncodePriority+0x32>
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	401a      	ands	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002494:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	43d9      	mvns	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	4313      	orrs	r3, r2
         );
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	@ 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024b4:	f3bf 8f4f 	dsb	sy
}
 80024b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <__NVIC_SystemReset+0x24>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80024c2:	4904      	ldr	r1, [pc, #16]	@ (80024d4 <__NVIC_SystemReset+0x24>)
 80024c4:	4b04      	ldr	r3, [pc, #16]	@ (80024d8 <__NVIC_SystemReset+0x28>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80024ca:	f3bf 8f4f 	dsb	sy
}
 80024ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <__NVIC_SystemReset+0x20>
 80024d4:	e000ed00 	.word	0xe000ed00
 80024d8:	05fa0004 	.word	0x05fa0004

080024dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024ec:	d301      	bcc.n	80024f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00f      	b.n	8002512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f2:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <SysTick_Config+0x40>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fa:	210f      	movs	r1, #15
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002500:	f7ff ff7a 	bl	80023f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <SysTick_Config+0x40>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250a:	4b04      	ldr	r3, [pc, #16]	@ (800251c <SysTick_Config+0x40>)
 800250c:	2207      	movs	r2, #7
 800250e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	e000e010 	.word	0xe000e010

08002520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff17 	bl	800235c <__NVIC_SetPriorityGrouping>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002548:	f7ff ff2c 	bl	80023a4 <__NVIC_GetPriorityGrouping>
 800254c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f7ff ff7a 	bl	800244c <NVIC_EncodePriority>
 8002558:	4602      	mov	r2, r0
 800255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff49 	bl	80023f8 <__NVIC_SetPriority>
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff1f 	bl	80023c0 <__NVIC_EnableIRQ>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800258e:	f7ff ff8f 	bl	80024b0 <__NVIC_SystemReset>

08002592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ff9e 	bl	80024dc <SysTick_Config>
 80025a0:	4603      	mov	r3, r0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e043      	b.n	800264a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b22      	ldr	r3, [pc, #136]	@ (8002654 <HAL_DMA_Init+0xa8>)
 80025ca:	4413      	add	r3, r2
 80025cc:	4a22      	ldr	r2, [pc, #136]	@ (8002658 <HAL_DMA_Init+0xac>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	009a      	lsls	r2, r3, #2
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a1f      	ldr	r2, [pc, #124]	@ (800265c <HAL_DMA_Init+0xb0>)
 80025de:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025f6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80025fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002604:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002610:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	bffdfff8 	.word	0xbffdfff8
 8002658:	cccccccd 	.word	0xcccccccd
 800265c:	40020000 	.word	0x40020000

08002660 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_DMA_Start_IT+0x20>
 800267c:	2302      	movs	r3, #2
 800267e:	e04b      	b.n	8002718 <HAL_DMA_Start_IT+0xb8>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d13a      	bne.n	800270a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f9eb 	bl	8002a94 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 020e 	orr.w	r2, r2, #14
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e00f      	b.n	80026f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0204 	bic.w	r2, r2, #4
 80026e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 020a 	orr.w	r2, r2, #10
 80026f6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e005      	b.n	8002716 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002712:	2302      	movs	r3, #2
 8002714:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002716:	7dfb      	ldrb	r3, [r7, #23]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d008      	beq.n	800274a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2204      	movs	r2, #4
 800273c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e020      	b.n	800278c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 020e 	bic.w	r2, r2, #14
 8002758:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800278a:	7bfb      	ldrb	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
	...

08002798 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d005      	beq.n	80027bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2204      	movs	r2, #4
 80027b4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	e051      	b.n	8002860 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 020e 	bic.w	r2, r2, #14
 80027ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0201 	bic.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a22      	ldr	r2, [pc, #136]	@ (800286c <HAL_DMA_Abort_IT+0xd4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d029      	beq.n	800283a <HAL_DMA_Abort_IT+0xa2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a21      	ldr	r2, [pc, #132]	@ (8002870 <HAL_DMA_Abort_IT+0xd8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d022      	beq.n	8002836 <HAL_DMA_Abort_IT+0x9e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002874 <HAL_DMA_Abort_IT+0xdc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01a      	beq.n	8002830 <HAL_DMA_Abort_IT+0x98>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002878 <HAL_DMA_Abort_IT+0xe0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d012      	beq.n	800282a <HAL_DMA_Abort_IT+0x92>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a1c      	ldr	r2, [pc, #112]	@ (800287c <HAL_DMA_Abort_IT+0xe4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00a      	beq.n	8002824 <HAL_DMA_Abort_IT+0x8c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1b      	ldr	r2, [pc, #108]	@ (8002880 <HAL_DMA_Abort_IT+0xe8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d102      	bne.n	800281e <HAL_DMA_Abort_IT+0x86>
 8002818:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800281c:	e00e      	b.n	800283c <HAL_DMA_Abort_IT+0xa4>
 800281e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002822:	e00b      	b.n	800283c <HAL_DMA_Abort_IT+0xa4>
 8002824:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002828:	e008      	b.n	800283c <HAL_DMA_Abort_IT+0xa4>
 800282a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800282e:	e005      	b.n	800283c <HAL_DMA_Abort_IT+0xa4>
 8002830:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002834:	e002      	b.n	800283c <HAL_DMA_Abort_IT+0xa4>
 8002836:	2310      	movs	r3, #16
 8002838:	e000      	b.n	800283c <HAL_DMA_Abort_IT+0xa4>
 800283a:	2301      	movs	r3, #1
 800283c:	4a11      	ldr	r2, [pc, #68]	@ (8002884 <HAL_DMA_Abort_IT+0xec>)
 800283e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
    } 
  }
  return status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40020008 	.word	0x40020008
 8002870:	4002001c 	.word	0x4002001c
 8002874:	40020030 	.word	0x40020030
 8002878:	40020044 	.word	0x40020044
 800287c:	40020058 	.word	0x40020058
 8002880:	4002006c 	.word	0x4002006c
 8002884:	40020000 	.word	0x40020000

08002888 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	2204      	movs	r2, #4
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d04f      	beq.n	8002950 <HAL_DMA_IRQHandler+0xc8>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d04a      	beq.n	8002950 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0204 	bic.w	r2, r2, #4
 80028d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a66      	ldr	r2, [pc, #408]	@ (8002a78 <HAL_DMA_IRQHandler+0x1f0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d029      	beq.n	8002936 <HAL_DMA_IRQHandler+0xae>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a65      	ldr	r2, [pc, #404]	@ (8002a7c <HAL_DMA_IRQHandler+0x1f4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d022      	beq.n	8002932 <HAL_DMA_IRQHandler+0xaa>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a63      	ldr	r2, [pc, #396]	@ (8002a80 <HAL_DMA_IRQHandler+0x1f8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01a      	beq.n	800292c <HAL_DMA_IRQHandler+0xa4>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a62      	ldr	r2, [pc, #392]	@ (8002a84 <HAL_DMA_IRQHandler+0x1fc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d012      	beq.n	8002926 <HAL_DMA_IRQHandler+0x9e>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a60      	ldr	r2, [pc, #384]	@ (8002a88 <HAL_DMA_IRQHandler+0x200>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00a      	beq.n	8002920 <HAL_DMA_IRQHandler+0x98>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a5f      	ldr	r2, [pc, #380]	@ (8002a8c <HAL_DMA_IRQHandler+0x204>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d102      	bne.n	800291a <HAL_DMA_IRQHandler+0x92>
 8002914:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002918:	e00e      	b.n	8002938 <HAL_DMA_IRQHandler+0xb0>
 800291a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800291e:	e00b      	b.n	8002938 <HAL_DMA_IRQHandler+0xb0>
 8002920:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002924:	e008      	b.n	8002938 <HAL_DMA_IRQHandler+0xb0>
 8002926:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800292a:	e005      	b.n	8002938 <HAL_DMA_IRQHandler+0xb0>
 800292c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002930:	e002      	b.n	8002938 <HAL_DMA_IRQHandler+0xb0>
 8002932:	2340      	movs	r3, #64	@ 0x40
 8002934:	e000      	b.n	8002938 <HAL_DMA_IRQHandler+0xb0>
 8002936:	2304      	movs	r3, #4
 8002938:	4a55      	ldr	r2, [pc, #340]	@ (8002a90 <HAL_DMA_IRQHandler+0x208>)
 800293a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 8094 	beq.w	8002a6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800294e:	e08e      	b.n	8002a6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	2202      	movs	r2, #2
 8002956:	409a      	lsls	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d056      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x186>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d051      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10b      	bne.n	8002990 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 020a 	bic.w	r2, r2, #10
 8002986:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a38      	ldr	r2, [pc, #224]	@ (8002a78 <HAL_DMA_IRQHandler+0x1f0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d029      	beq.n	80029ee <HAL_DMA_IRQHandler+0x166>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a37      	ldr	r2, [pc, #220]	@ (8002a7c <HAL_DMA_IRQHandler+0x1f4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d022      	beq.n	80029ea <HAL_DMA_IRQHandler+0x162>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a35      	ldr	r2, [pc, #212]	@ (8002a80 <HAL_DMA_IRQHandler+0x1f8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01a      	beq.n	80029e4 <HAL_DMA_IRQHandler+0x15c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a34      	ldr	r2, [pc, #208]	@ (8002a84 <HAL_DMA_IRQHandler+0x1fc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d012      	beq.n	80029de <HAL_DMA_IRQHandler+0x156>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a32      	ldr	r2, [pc, #200]	@ (8002a88 <HAL_DMA_IRQHandler+0x200>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00a      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x150>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a31      	ldr	r2, [pc, #196]	@ (8002a8c <HAL_DMA_IRQHandler+0x204>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d102      	bne.n	80029d2 <HAL_DMA_IRQHandler+0x14a>
 80029cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80029d0:	e00e      	b.n	80029f0 <HAL_DMA_IRQHandler+0x168>
 80029d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029d6:	e00b      	b.n	80029f0 <HAL_DMA_IRQHandler+0x168>
 80029d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029dc:	e008      	b.n	80029f0 <HAL_DMA_IRQHandler+0x168>
 80029de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029e2:	e005      	b.n	80029f0 <HAL_DMA_IRQHandler+0x168>
 80029e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029e8:	e002      	b.n	80029f0 <HAL_DMA_IRQHandler+0x168>
 80029ea:	2320      	movs	r3, #32
 80029ec:	e000      	b.n	80029f0 <HAL_DMA_IRQHandler+0x168>
 80029ee:	2302      	movs	r3, #2
 80029f0:	4a27      	ldr	r2, [pc, #156]	@ (8002a90 <HAL_DMA_IRQHandler+0x208>)
 80029f2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d034      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a0c:	e02f      	b.n	8002a6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	2208      	movs	r2, #8
 8002a14:	409a      	lsls	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d028      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x1e8>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d023      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 020e 	bic.w	r2, r2, #14
 8002a36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f202 	lsl.w	r2, r1, r2
 8002a46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d004      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4798      	blx	r3
    }
  }
  return;
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
}
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40020008 	.word	0x40020008
 8002a7c:	4002001c 	.word	0x4002001c
 8002a80:	40020030 	.word	0x40020030
 8002a84:	40020044 	.word	0x40020044
 8002a88:	40020058 	.word	0x40020058
 8002a8c:	4002006c 	.word	0x4002006c
 8002a90:	40020000 	.word	0x40020000

08002a94 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aaa:	2101      	movs	r1, #1
 8002aac:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b10      	cmp	r3, #16
 8002ac0:	d108      	bne.n	8002ad4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ad2:	e007      	b.n	8002ae4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b08b      	sub	sp, #44	@ 0x2c
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002afe:	2300      	movs	r3, #0
 8002b00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b02:	e169      	b.n	8002dd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b04:	2201      	movs	r2, #1
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f040 8158 	bne.w	8002dd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4a9a      	ldr	r2, [pc, #616]	@ (8002d90 <HAL_GPIO_Init+0x2a0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d05e      	beq.n	8002bea <HAL_GPIO_Init+0xfa>
 8002b2c:	4a98      	ldr	r2, [pc, #608]	@ (8002d90 <HAL_GPIO_Init+0x2a0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d875      	bhi.n	8002c1e <HAL_GPIO_Init+0x12e>
 8002b32:	4a98      	ldr	r2, [pc, #608]	@ (8002d94 <HAL_GPIO_Init+0x2a4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d058      	beq.n	8002bea <HAL_GPIO_Init+0xfa>
 8002b38:	4a96      	ldr	r2, [pc, #600]	@ (8002d94 <HAL_GPIO_Init+0x2a4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d86f      	bhi.n	8002c1e <HAL_GPIO_Init+0x12e>
 8002b3e:	4a96      	ldr	r2, [pc, #600]	@ (8002d98 <HAL_GPIO_Init+0x2a8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d052      	beq.n	8002bea <HAL_GPIO_Init+0xfa>
 8002b44:	4a94      	ldr	r2, [pc, #592]	@ (8002d98 <HAL_GPIO_Init+0x2a8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d869      	bhi.n	8002c1e <HAL_GPIO_Init+0x12e>
 8002b4a:	4a94      	ldr	r2, [pc, #592]	@ (8002d9c <HAL_GPIO_Init+0x2ac>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d04c      	beq.n	8002bea <HAL_GPIO_Init+0xfa>
 8002b50:	4a92      	ldr	r2, [pc, #584]	@ (8002d9c <HAL_GPIO_Init+0x2ac>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d863      	bhi.n	8002c1e <HAL_GPIO_Init+0x12e>
 8002b56:	4a92      	ldr	r2, [pc, #584]	@ (8002da0 <HAL_GPIO_Init+0x2b0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d046      	beq.n	8002bea <HAL_GPIO_Init+0xfa>
 8002b5c:	4a90      	ldr	r2, [pc, #576]	@ (8002da0 <HAL_GPIO_Init+0x2b0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d85d      	bhi.n	8002c1e <HAL_GPIO_Init+0x12e>
 8002b62:	2b12      	cmp	r3, #18
 8002b64:	d82a      	bhi.n	8002bbc <HAL_GPIO_Init+0xcc>
 8002b66:	2b12      	cmp	r3, #18
 8002b68:	d859      	bhi.n	8002c1e <HAL_GPIO_Init+0x12e>
 8002b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b70 <HAL_GPIO_Init+0x80>)
 8002b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b70:	08002beb 	.word	0x08002beb
 8002b74:	08002bc5 	.word	0x08002bc5
 8002b78:	08002bd7 	.word	0x08002bd7
 8002b7c:	08002c19 	.word	0x08002c19
 8002b80:	08002c1f 	.word	0x08002c1f
 8002b84:	08002c1f 	.word	0x08002c1f
 8002b88:	08002c1f 	.word	0x08002c1f
 8002b8c:	08002c1f 	.word	0x08002c1f
 8002b90:	08002c1f 	.word	0x08002c1f
 8002b94:	08002c1f 	.word	0x08002c1f
 8002b98:	08002c1f 	.word	0x08002c1f
 8002b9c:	08002c1f 	.word	0x08002c1f
 8002ba0:	08002c1f 	.word	0x08002c1f
 8002ba4:	08002c1f 	.word	0x08002c1f
 8002ba8:	08002c1f 	.word	0x08002c1f
 8002bac:	08002c1f 	.word	0x08002c1f
 8002bb0:	08002c1f 	.word	0x08002c1f
 8002bb4:	08002bcd 	.word	0x08002bcd
 8002bb8:	08002be1 	.word	0x08002be1
 8002bbc:	4a79      	ldr	r2, [pc, #484]	@ (8002da4 <HAL_GPIO_Init+0x2b4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bc2:	e02c      	b.n	8002c1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	623b      	str	r3, [r7, #32]
          break;
 8002bca:	e029      	b.n	8002c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	623b      	str	r3, [r7, #32]
          break;
 8002bd4:	e024      	b.n	8002c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	3308      	adds	r3, #8
 8002bdc:	623b      	str	r3, [r7, #32]
          break;
 8002bde:	e01f      	b.n	8002c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	330c      	adds	r3, #12
 8002be6:	623b      	str	r3, [r7, #32]
          break;
 8002be8:	e01a      	b.n	8002c20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d102      	bne.n	8002bf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	623b      	str	r3, [r7, #32]
          break;
 8002bf6:	e013      	b.n	8002c20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c00:	2308      	movs	r3, #8
 8002c02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	611a      	str	r2, [r3, #16]
          break;
 8002c0a:	e009      	b.n	8002c20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c0c:	2308      	movs	r3, #8
 8002c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	615a      	str	r2, [r3, #20]
          break;
 8002c16:	e003      	b.n	8002c20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	623b      	str	r3, [r7, #32]
          break;
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x130>
          break;
 8002c1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2bff      	cmp	r3, #255	@ 0xff
 8002c24:	d801      	bhi.n	8002c2a <HAL_GPIO_Init+0x13a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	e001      	b.n	8002c2e <HAL_GPIO_Init+0x13e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2bff      	cmp	r3, #255	@ 0xff
 8002c34:	d802      	bhi.n	8002c3c <HAL_GPIO_Init+0x14c>
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	e002      	b.n	8002c42 <HAL_GPIO_Init+0x152>
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	3b08      	subs	r3, #8
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	210f      	movs	r1, #15
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	401a      	ands	r2, r3
 8002c54:	6a39      	ldr	r1, [r7, #32]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80b1 	beq.w	8002dd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c70:	4b4d      	ldr	r3, [pc, #308]	@ (8002da8 <HAL_GPIO_Init+0x2b8>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	4a4c      	ldr	r2, [pc, #304]	@ (8002da8 <HAL_GPIO_Init+0x2b8>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6193      	str	r3, [r2, #24]
 8002c7c:	4b4a      	ldr	r3, [pc, #296]	@ (8002da8 <HAL_GPIO_Init+0x2b8>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c88:	4a48      	ldr	r2, [pc, #288]	@ (8002dac <HAL_GPIO_Init+0x2bc>)
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	089b      	lsrs	r3, r3, #2
 8002c8e:	3302      	adds	r3, #2
 8002c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	220f      	movs	r2, #15
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a40      	ldr	r2, [pc, #256]	@ (8002db0 <HAL_GPIO_Init+0x2c0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d013      	beq.n	8002cdc <HAL_GPIO_Init+0x1ec>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a3f      	ldr	r2, [pc, #252]	@ (8002db4 <HAL_GPIO_Init+0x2c4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00d      	beq.n	8002cd8 <HAL_GPIO_Init+0x1e8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3e      	ldr	r2, [pc, #248]	@ (8002db8 <HAL_GPIO_Init+0x2c8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d007      	beq.n	8002cd4 <HAL_GPIO_Init+0x1e4>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a3d      	ldr	r2, [pc, #244]	@ (8002dbc <HAL_GPIO_Init+0x2cc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d101      	bne.n	8002cd0 <HAL_GPIO_Init+0x1e0>
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e006      	b.n	8002cde <HAL_GPIO_Init+0x1ee>
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	e004      	b.n	8002cde <HAL_GPIO_Init+0x1ee>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e002      	b.n	8002cde <HAL_GPIO_Init+0x1ee>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <HAL_GPIO_Init+0x1ee>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce0:	f002 0203 	and.w	r2, r2, #3
 8002ce4:	0092      	lsls	r2, r2, #2
 8002ce6:	4093      	lsls	r3, r2
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cee:	492f      	ldr	r1, [pc, #188]	@ (8002dac <HAL_GPIO_Init+0x2bc>)
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d006      	beq.n	8002d16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d08:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	492c      	ldr	r1, [pc, #176]	@ (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]
 8002d14:	e006      	b.n	8002d24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d16:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	4928      	ldr	r1, [pc, #160]	@ (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d006      	beq.n	8002d3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d30:	4b23      	ldr	r3, [pc, #140]	@ (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	4922      	ldr	r1, [pc, #136]	@ (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60cb      	str	r3, [r1, #12]
 8002d3c:	e006      	b.n	8002d4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d3e:	4b20      	ldr	r3, [pc, #128]	@ (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	491e      	ldr	r1, [pc, #120]	@ (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d006      	beq.n	8002d66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d58:	4b19      	ldr	r3, [pc, #100]	@ (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	4918      	ldr	r1, [pc, #96]	@ (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
 8002d64:	e006      	b.n	8002d74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d66:	4b16      	ldr	r3, [pc, #88]	@ (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	4914      	ldr	r1, [pc, #80]	@ (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d021      	beq.n	8002dc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d80:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	490e      	ldr	r1, [pc, #56]	@ (8002dc0 <HAL_GPIO_Init+0x2d0>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]
 8002d8c:	e021      	b.n	8002dd2 <HAL_GPIO_Init+0x2e2>
 8002d8e:	bf00      	nop
 8002d90:	10320000 	.word	0x10320000
 8002d94:	10310000 	.word	0x10310000
 8002d98:	10220000 	.word	0x10220000
 8002d9c:	10210000 	.word	0x10210000
 8002da0:	10120000 	.word	0x10120000
 8002da4:	10110000 	.word	0x10110000
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40010000 	.word	0x40010000
 8002db0:	40010800 	.word	0x40010800
 8002db4:	40010c00 	.word	0x40010c00
 8002db8:	40011000 	.word	0x40011000
 8002dbc:	40011400 	.word	0x40011400
 8002dc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <HAL_GPIO_Init+0x304>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	4909      	ldr	r1, [pc, #36]	@ (8002df4 <HAL_GPIO_Init+0x304>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f47f ae8e 	bne.w	8002b04 <HAL_GPIO_Init+0x14>
  }
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	372c      	adds	r7, #44	@ 0x2c
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	40010400 	.word	0x40010400

08002df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]
 8002e04:	4613      	mov	r3, r2
 8002e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e08:	787b      	ldrb	r3, [r7, #1]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e14:	e003      	b.n	8002e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e16:	887b      	ldrh	r3, [r7, #2]
 8002e18:	041a      	lsls	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	611a      	str	r2, [r3, #16]
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	041a      	lsls	r2, r3, #16
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	43d9      	mvns	r1, r3
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	400b      	ands	r3, r1
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	611a      	str	r2, [r3, #16]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr
	...

08002e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e66:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d006      	beq.n	8002e80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e72:	4a05      	ldr	r2, [pc, #20]	@ (8002e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe f8f4 	bl	8001068 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40010400 	.word	0x40010400

08002e8c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002e98:	4b09      	ldr	r3, [pc, #36]	@ (8002ec0 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	4a08      	ldr	r2, [pc, #32]	@ (8002ec0 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002e9e:	f023 0304 	bic.w	r3, r3, #4
 8002ea2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002eaa:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002eac:	e002      	b.n	8002eb4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8002eae:	bf40      	sev
    __WFE();
 8002eb0:	bf20      	wfe
    __WFE();
 8002eb2:	bf20      	wfe
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e272      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8087 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee4:	4b92      	ldr	r3, [pc, #584]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d00c      	beq.n	8002f0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ef0:	4b8f      	ldr	r3, [pc, #572]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d112      	bne.n	8002f22 <HAL_RCC_OscConfig+0x5e>
 8002efc:	4b8c      	ldr	r3, [pc, #560]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f08:	d10b      	bne.n	8002f22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0a:	4b89      	ldr	r3, [pc, #548]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d06c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x12c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d168      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e24c      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f2a:	d106      	bne.n	8002f3a <HAL_RCC_OscConfig+0x76>
 8002f2c:	4b80      	ldr	r3, [pc, #512]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a7f      	ldr	r2, [pc, #508]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	e02e      	b.n	8002f98 <HAL_RCC_OscConfig+0xd4>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x98>
 8002f42:	4b7b      	ldr	r3, [pc, #492]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a7a      	ldr	r2, [pc, #488]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	4b78      	ldr	r3, [pc, #480]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a77      	ldr	r2, [pc, #476]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e01d      	b.n	8002f98 <HAL_RCC_OscConfig+0xd4>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0xbc>
 8002f66:	4b72      	ldr	r3, [pc, #456]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a71      	ldr	r2, [pc, #452]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	4b6f      	ldr	r3, [pc, #444]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a6e      	ldr	r2, [pc, #440]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCC_OscConfig+0xd4>
 8002f80:	4b6b      	ldr	r3, [pc, #428]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a6a      	ldr	r2, [pc, #424]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	4b68      	ldr	r3, [pc, #416]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a67      	ldr	r2, [pc, #412]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d013      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7ff f9ae 	bl	8002300 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7ff f9aa 	bl	8002300 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	@ 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e200      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b5d      	ldr	r3, [pc, #372]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xe4>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7ff f99a 	bl	8002300 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7ff f996 	bl	8002300 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	@ 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e1ec      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	4b53      	ldr	r3, [pc, #332]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x10c>
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d063      	beq.n	80030c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ffe:	4b4c      	ldr	r3, [pc, #304]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800300a:	4b49      	ldr	r3, [pc, #292]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b08      	cmp	r3, #8
 8003014:	d11c      	bne.n	8003050 <HAL_RCC_OscConfig+0x18c>
 8003016:	4b46      	ldr	r3, [pc, #280]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d116      	bne.n	8003050 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003022:	4b43      	ldr	r3, [pc, #268]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <HAL_RCC_OscConfig+0x176>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d001      	beq.n	800303a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e1c0      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303a:	4b3d      	ldr	r3, [pc, #244]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4939      	ldr	r1, [pc, #228]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	e03a      	b.n	80030c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d020      	beq.n	800309a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003058:	4b36      	ldr	r3, [pc, #216]	@ (8003134 <HAL_RCC_OscConfig+0x270>)
 800305a:	2201      	movs	r2, #1
 800305c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305e:	f7ff f94f 	bl	8002300 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003066:	f7ff f94b 	bl	8002300 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e1a1      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003078:	4b2d      	ldr	r3, [pc, #180]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003084:	4b2a      	ldr	r3, [pc, #168]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4927      	ldr	r1, [pc, #156]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 8003094:	4313      	orrs	r3, r2
 8003096:	600b      	str	r3, [r1, #0]
 8003098:	e015      	b.n	80030c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800309a:	4b26      	ldr	r3, [pc, #152]	@ (8003134 <HAL_RCC_OscConfig+0x270>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7ff f92e 	bl	8002300 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a8:	f7ff f92a 	bl	8002300 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e180      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d03a      	beq.n	8003148 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d019      	beq.n	800310e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030da:	4b17      	ldr	r3, [pc, #92]	@ (8003138 <HAL_RCC_OscConfig+0x274>)
 80030dc:	2201      	movs	r2, #1
 80030de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e0:	f7ff f90e 	bl	8002300 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e8:	f7ff f90a 	bl	8002300 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e160      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003106:	2001      	movs	r0, #1
 8003108:	f000 face 	bl	80036a8 <RCC_Delay>
 800310c:	e01c      	b.n	8003148 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800310e:	4b0a      	ldr	r3, [pc, #40]	@ (8003138 <HAL_RCC_OscConfig+0x274>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003114:	f7ff f8f4 	bl	8002300 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311a:	e00f      	b.n	800313c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800311c:	f7ff f8f0 	bl	8002300 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d908      	bls.n	800313c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e146      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	42420000 	.word	0x42420000
 8003138:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	4b92      	ldr	r3, [pc, #584]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e9      	bne.n	800311c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80a6 	beq.w	80032a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003156:	2300      	movs	r3, #0
 8003158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315a:	4b8b      	ldr	r3, [pc, #556]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10d      	bne.n	8003182 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	4b88      	ldr	r3, [pc, #544]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	4a87      	ldr	r2, [pc, #540]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003170:	61d3      	str	r3, [r2, #28]
 8003172:	4b85      	ldr	r3, [pc, #532]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317e:	2301      	movs	r3, #1
 8003180:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003182:	4b82      	ldr	r3, [pc, #520]	@ (800338c <HAL_RCC_OscConfig+0x4c8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d118      	bne.n	80031c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800318e:	4b7f      	ldr	r3, [pc, #508]	@ (800338c <HAL_RCC_OscConfig+0x4c8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7e      	ldr	r2, [pc, #504]	@ (800338c <HAL_RCC_OscConfig+0x4c8>)
 8003194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319a:	f7ff f8b1 	bl	8002300 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a2:	f7ff f8ad 	bl	8002300 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b64      	cmp	r3, #100	@ 0x64
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e103      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b4:	4b75      	ldr	r3, [pc, #468]	@ (800338c <HAL_RCC_OscConfig+0x4c8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d106      	bne.n	80031d6 <HAL_RCC_OscConfig+0x312>
 80031c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6213      	str	r3, [r2, #32]
 80031d4:	e02d      	b.n	8003232 <HAL_RCC_OscConfig+0x36e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x334>
 80031de:	4b6a      	ldr	r3, [pc, #424]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4a69      	ldr	r2, [pc, #420]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6213      	str	r3, [r2, #32]
 80031ea:	4b67      	ldr	r3, [pc, #412]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a66      	ldr	r2, [pc, #408]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6213      	str	r3, [r2, #32]
 80031f6:	e01c      	b.n	8003232 <HAL_RCC_OscConfig+0x36e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b05      	cmp	r3, #5
 80031fe:	d10c      	bne.n	800321a <HAL_RCC_OscConfig+0x356>
 8003200:	4b61      	ldr	r3, [pc, #388]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4a60      	ldr	r2, [pc, #384]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	f043 0304 	orr.w	r3, r3, #4
 800320a:	6213      	str	r3, [r2, #32]
 800320c:	4b5e      	ldr	r3, [pc, #376]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	4a5d      	ldr	r2, [pc, #372]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6213      	str	r3, [r2, #32]
 8003218:	e00b      	b.n	8003232 <HAL_RCC_OscConfig+0x36e>
 800321a:	4b5b      	ldr	r3, [pc, #364]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4a5a      	ldr	r2, [pc, #360]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6213      	str	r3, [r2, #32]
 8003226:	4b58      	ldr	r3, [pc, #352]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4a57      	ldr	r2, [pc, #348]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	f023 0304 	bic.w	r3, r3, #4
 8003230:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d015      	beq.n	8003266 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323a:	f7ff f861 	bl	8002300 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	e00a      	b.n	8003258 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7ff f85d 	bl	8002300 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003250:	4293      	cmp	r3, r2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e0b1      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003258:	4b4b      	ldr	r3, [pc, #300]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0ee      	beq.n	8003242 <HAL_RCC_OscConfig+0x37e>
 8003264:	e014      	b.n	8003290 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003266:	f7ff f84b 	bl	8002300 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7ff f847 	bl	8002300 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e09b      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003284:	4b40      	ldr	r3, [pc, #256]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1ee      	bne.n	800326e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003290:	7dfb      	ldrb	r3, [r7, #23]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d105      	bne.n	80032a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003296:	4b3c      	ldr	r3, [pc, #240]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	4a3b      	ldr	r2, [pc, #236]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800329c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8087 	beq.w	80033ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ac:	4b36      	ldr	r3, [pc, #216]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d061      	beq.n	800337c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d146      	bne.n	800334e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c0:	4b33      	ldr	r3, [pc, #204]	@ (8003390 <HAL_RCC_OscConfig+0x4cc>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7ff f81b 	bl	8002300 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ce:	f7ff f817 	bl	8002300 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e06d      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e0:	4b29      	ldr	r3, [pc, #164]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f0      	bne.n	80032ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f4:	d108      	bne.n	8003308 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032f6:	4b24      	ldr	r3, [pc, #144]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	4921      	ldr	r1, [pc, #132]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003308:	4b1f      	ldr	r3, [pc, #124]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a19      	ldr	r1, [r3, #32]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	430b      	orrs	r3, r1
 800331a:	491b      	ldr	r1, [pc, #108]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	4313      	orrs	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003320:	4b1b      	ldr	r3, [pc, #108]	@ (8003390 <HAL_RCC_OscConfig+0x4cc>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7fe ffeb 	bl	8002300 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332e:	f7fe ffe7 	bl	8002300 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e03d      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003340:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x46a>
 800334c:	e035      	b.n	80033ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334e:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <HAL_RCC_OscConfig+0x4cc>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe ffd4 	bl	8002300 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7fe ffd0 	bl	8002300 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e026      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x498>
 800337a:	e01e      	b.n	80033ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d107      	bne.n	8003394 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e019      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
 8003388:	40021000 	.word	0x40021000
 800338c:	40007000 	.word	0x40007000
 8003390:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003394:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <HAL_RCC_OscConfig+0x500>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d106      	bne.n	80033b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000

080033c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0d0      	b.n	800357e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d910      	bls.n	800340c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ea:	4b67      	ldr	r3, [pc, #412]	@ (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 0207 	bic.w	r2, r3, #7
 80033f2:	4965      	ldr	r1, [pc, #404]	@ (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b63      	ldr	r3, [pc, #396]	@ (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0b8      	b.n	800357e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003424:	4b59      	ldr	r3, [pc, #356]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	4a58      	ldr	r2, [pc, #352]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800342e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800343c:	4b53      	ldr	r3, [pc, #332]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4a52      	ldr	r2, [pc, #328]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003446:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003448:	4b50      	ldr	r3, [pc, #320]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	494d      	ldr	r1, [pc, #308]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d040      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b47      	ldr	r3, [pc, #284]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d115      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e07f      	b.n	800357e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003486:	4b41      	ldr	r3, [pc, #260]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e073      	b.n	800357e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003496:	4b3d      	ldr	r3, [pc, #244]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e06b      	b.n	800357e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a6:	4b39      	ldr	r3, [pc, #228]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f023 0203 	bic.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4936      	ldr	r1, [pc, #216]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b8:	f7fe ff22 	bl	8002300 <HAL_GetTick>
 80034bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c0:	f7fe ff1e 	bl	8002300 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e053      	b.n	800357e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	4b2d      	ldr	r3, [pc, #180]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 020c 	and.w	r2, r3, #12
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d1eb      	bne.n	80034c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e8:	4b27      	ldr	r3, [pc, #156]	@ (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d210      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b24      	ldr	r3, [pc, #144]	@ (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 0207 	bic.w	r2, r3, #7
 80034fe:	4922      	ldr	r1, [pc, #136]	@ (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b20      	ldr	r3, [pc, #128]	@ (8003588 <HAL_RCC_ClockConfig+0x1c0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e032      	b.n	800357e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003524:	4b19      	ldr	r3, [pc, #100]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4916      	ldr	r1, [pc, #88]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003542:	4b12      	ldr	r3, [pc, #72]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	490e      	ldr	r1, [pc, #56]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003556:	f000 f821 	bl	800359c <HAL_RCC_GetSysClockFreq>
 800355a:	4602      	mov	r2, r0
 800355c:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	490a      	ldr	r1, [pc, #40]	@ (8003590 <HAL_RCC_ClockConfig+0x1c8>)
 8003568:	5ccb      	ldrb	r3, [r1, r3]
 800356a:	fa22 f303 	lsr.w	r3, r2, r3
 800356e:	4a09      	ldr	r2, [pc, #36]	@ (8003594 <HAL_RCC_ClockConfig+0x1cc>)
 8003570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003572:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <HAL_RCC_ClockConfig+0x1d0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe fe80 	bl	800227c <HAL_InitTick>

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40022000 	.word	0x40022000
 800358c:	40021000 	.word	0x40021000
 8003590:	08006318 	.word	0x08006318
 8003594:	20000390 	.word	0x20000390
 8003598:	20000394 	.word	0x20000394

0800359c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	2300      	movs	r3, #0
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	2300      	movs	r3, #0
 80035b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x94>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d002      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x30>
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d003      	beq.n	80035d2 <HAL_RCC_GetSysClockFreq+0x36>
 80035ca:	e027      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035cc:	4b19      	ldr	r3, [pc, #100]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ce:	613b      	str	r3, [r7, #16]
      break;
 80035d0:	e027      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	0c9b      	lsrs	r3, r3, #18
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	4a17      	ldr	r2, [pc, #92]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035dc:	5cd3      	ldrb	r3, [r2, r3]
 80035de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d010      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035ea:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x94>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	0c5b      	lsrs	r3, r3, #17
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	4a11      	ldr	r2, [pc, #68]	@ (800363c <HAL_RCC_GetSysClockFreq+0xa0>)
 80035f6:	5cd3      	ldrb	r3, [r2, r3]
 80035f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x98>)
 80035fe:	fb03 f202 	mul.w	r2, r3, r2
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e004      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a0c      	ldr	r2, [pc, #48]	@ (8003640 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	613b      	str	r3, [r7, #16]
      break;
 800361a:	e002      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800361c:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x98>)
 800361e:	613b      	str	r3, [r7, #16]
      break;
 8003620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003622:	693b      	ldr	r3, [r7, #16]
}
 8003624:	4618      	mov	r0, r3
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	007a1200 	.word	0x007a1200
 8003638:	08006330 	.word	0x08006330
 800363c:	08006340 	.word	0x08006340
 8003640:	003d0900 	.word	0x003d0900

08003644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003648:	4b02      	ldr	r3, [pc, #8]	@ (8003654 <HAL_RCC_GetHCLKFreq+0x10>)
 800364a:	681b      	ldr	r3, [r3, #0]
}
 800364c:	4618      	mov	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr
 8003654:	20000390 	.word	0x20000390

08003658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800365c:	f7ff fff2 	bl	8003644 <HAL_RCC_GetHCLKFreq>
 8003660:	4602      	mov	r2, r0
 8003662:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4903      	ldr	r1, [pc, #12]	@ (800367c <HAL_RCC_GetPCLK1Freq+0x24>)
 800366e:	5ccb      	ldrb	r3, [r1, r3]
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40021000 	.word	0x40021000
 800367c:	08006328 	.word	0x08006328

08003680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003684:	f7ff ffde 	bl	8003644 <HAL_RCC_GetHCLKFreq>
 8003688:	4602      	mov	r2, r0
 800368a:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	0adb      	lsrs	r3, r3, #11
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4903      	ldr	r1, [pc, #12]	@ (80036a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003696:	5ccb      	ldrb	r3, [r1, r3]
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40021000 	.word	0x40021000
 80036a4:	08006328 	.word	0x08006328

080036a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036b0:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <RCC_Delay+0x34>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0a      	ldr	r2, [pc, #40]	@ (80036e0 <RCC_Delay+0x38>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	0a5b      	lsrs	r3, r3, #9
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	fb02 f303 	mul.w	r3, r2, r3
 80036c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036c4:	bf00      	nop
  }
  while (Delay --);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1e5a      	subs	r2, r3, #1
 80036ca:	60fa      	str	r2, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f9      	bne.n	80036c4 <RCC_Delay+0x1c>
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	20000390 	.word	0x20000390
 80036e0:	10624dd3 	.word	0x10624dd3

080036e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e041      	b.n	800377a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fe fb1e 	bl	8001d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	4619      	mov	r1, r3
 8003722:	4610      	mov	r0, r2
 8003724:	f000 fd8a 	bl	800423c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d001      	beq.n	800379c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e032      	b.n	8003802 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a18      	ldr	r2, [pc, #96]	@ (800380c <HAL_TIM_Base_Start+0x88>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00e      	beq.n	80037cc <HAL_TIM_Base_Start+0x48>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037b6:	d009      	beq.n	80037cc <HAL_TIM_Base_Start+0x48>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a14      	ldr	r2, [pc, #80]	@ (8003810 <HAL_TIM_Base_Start+0x8c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_TIM_Base_Start+0x48>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a13      	ldr	r2, [pc, #76]	@ (8003814 <HAL_TIM_Base_Start+0x90>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d111      	bne.n	80037f0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b06      	cmp	r3, #6
 80037dc:	d010      	beq.n	8003800 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ee:	e007      	b.n	8003800 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr
 800380c:	40012c00 	.word	0x40012c00
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800

08003818 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e041      	b.n	80038ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f839 	bl	80038b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3304      	adds	r3, #4
 8003854:	4619      	mov	r1, r3
 8003856:	4610      	mov	r0, r2
 8003858:	f000 fcf0 	bl	800423c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <HAL_TIM_PWM_Start+0x24>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	bf14      	ite	ne
 80038e4:	2301      	movne	r3, #1
 80038e6:	2300      	moveq	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	e022      	b.n	8003932 <HAL_TIM_PWM_Start+0x6a>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d109      	bne.n	8003906 <HAL_TIM_PWM_Start+0x3e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	bf14      	ite	ne
 80038fe:	2301      	movne	r3, #1
 8003900:	2300      	moveq	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	e015      	b.n	8003932 <HAL_TIM_PWM_Start+0x6a>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b08      	cmp	r3, #8
 800390a:	d109      	bne.n	8003920 <HAL_TIM_PWM_Start+0x58>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	bf14      	ite	ne
 8003918:	2301      	movne	r3, #1
 800391a:	2300      	moveq	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	e008      	b.n	8003932 <HAL_TIM_PWM_Start+0x6a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	bf14      	ite	ne
 800392c:	2301      	movne	r3, #1
 800392e:	2300      	moveq	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e05e      	b.n	80039f8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <HAL_TIM_PWM_Start+0x82>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003948:	e013      	b.n	8003972 <HAL_TIM_PWM_Start+0xaa>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d104      	bne.n	800395a <HAL_TIM_PWM_Start+0x92>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003958:	e00b      	b.n	8003972 <HAL_TIM_PWM_Start+0xaa>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d104      	bne.n	800396a <HAL_TIM_PWM_Start+0xa2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003968:	e003      	b.n	8003972 <HAL_TIM_PWM_Start+0xaa>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	6839      	ldr	r1, [r7, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f000 feea 	bl	8004754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1e      	ldr	r2, [pc, #120]	@ (8003a00 <HAL_TIM_PWM_Start+0x138>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d107      	bne.n	800399a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003998:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a18      	ldr	r2, [pc, #96]	@ (8003a00 <HAL_TIM_PWM_Start+0x138>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00e      	beq.n	80039c2 <HAL_TIM_PWM_Start+0xfa>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ac:	d009      	beq.n	80039c2 <HAL_TIM_PWM_Start+0xfa>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a14      	ldr	r2, [pc, #80]	@ (8003a04 <HAL_TIM_PWM_Start+0x13c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d004      	beq.n	80039c2 <HAL_TIM_PWM_Start+0xfa>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a12      	ldr	r2, [pc, #72]	@ (8003a08 <HAL_TIM_PWM_Start+0x140>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d111      	bne.n	80039e6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b06      	cmp	r3, #6
 80039d2:	d010      	beq.n	80039f6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e4:	e007      	b.n	80039f6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0201 	orr.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40012c00 	.word	0x40012c00
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40000800 	.word	0x40000800

08003a0c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	e022      	b.n	8003a7e <HAL_TIM_PWM_Start_DMA+0x72>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d109      	bne.n	8003a52 <HAL_TIM_PWM_Start_DMA+0x46>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	bf0c      	ite	eq
 8003a4a:	2301      	moveq	r3, #1
 8003a4c:	2300      	movne	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	e015      	b.n	8003a7e <HAL_TIM_PWM_Start_DMA+0x72>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d109      	bne.n	8003a6c <HAL_TIM_PWM_Start_DMA+0x60>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	bf0c      	ite	eq
 8003a64:	2301      	moveq	r3, #1
 8003a66:	2300      	movne	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	e008      	b.n	8003a7e <HAL_TIM_PWM_Start_DMA+0x72>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	bf0c      	ite	eq
 8003a78:	2301      	moveq	r3, #1
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003a82:	2302      	movs	r3, #2
 8003a84:	e153      	b.n	8003d2e <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d109      	bne.n	8003aa0 <HAL_TIM_PWM_Start_DMA+0x94>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	e022      	b.n	8003ae6 <HAL_TIM_PWM_Start_DMA+0xda>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d109      	bne.n	8003aba <HAL_TIM_PWM_Start_DMA+0xae>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	e015      	b.n	8003ae6 <HAL_TIM_PWM_Start_DMA+0xda>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d109      	bne.n	8003ad4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e008      	b.n	8003ae6 <HAL_TIM_PWM_Start_DMA+0xda>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	bf0c      	ite	eq
 8003ae0:	2301      	moveq	r3, #1
 8003ae2:	2300      	movne	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d024      	beq.n	8003b34 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <HAL_TIM_PWM_Start_DMA+0xea>
 8003af0:	887b      	ldrh	r3, [r7, #2]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e119      	b.n	8003d2e <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d104      	bne.n	8003b0a <HAL_TIM_PWM_Start_DMA+0xfe>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b08:	e016      	b.n	8003b38 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d104      	bne.n	8003b1a <HAL_TIM_PWM_Start_DMA+0x10e>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b18:	e00e      	b.n	8003b38 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d104      	bne.n	8003b2a <HAL_TIM_PWM_Start_DMA+0x11e>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b28:	e006      	b.n	8003b38 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b32:	e001      	b.n	8003b38 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0fa      	b.n	8003d2e <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	f200 80ae 	bhi.w	8003c9c <HAL_TIM_PWM_Start_DMA+0x290>
 8003b40:	a201      	add	r2, pc, #4	@ (adr r2, 8003b48 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b7d 	.word	0x08003b7d
 8003b4c:	08003c9d 	.word	0x08003c9d
 8003b50:	08003c9d 	.word	0x08003c9d
 8003b54:	08003c9d 	.word	0x08003c9d
 8003b58:	08003bc5 	.word	0x08003bc5
 8003b5c:	08003c9d 	.word	0x08003c9d
 8003b60:	08003c9d 	.word	0x08003c9d
 8003b64:	08003c9d 	.word	0x08003c9d
 8003b68:	08003c0d 	.word	0x08003c0d
 8003b6c:	08003c9d 	.word	0x08003c9d
 8003b70:	08003c9d 	.word	0x08003c9d
 8003b74:	08003c9d 	.word	0x08003c9d
 8003b78:	08003c55 	.word	0x08003c55
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	4a6d      	ldr	r2, [pc, #436]	@ (8003d38 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003b82:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	4a6c      	ldr	r2, [pc, #432]	@ (8003d3c <HAL_TIM_PWM_Start_DMA+0x330>)
 8003b8a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	4a6b      	ldr	r2, [pc, #428]	@ (8003d40 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003b92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3334      	adds	r3, #52	@ 0x34
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	887b      	ldrh	r3, [r7, #2]
 8003ba4:	f7fe fd5c 	bl	8002660 <HAL_DMA_Start_IT>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e0bd      	b.n	8003d2e <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bc0:	60da      	str	r2, [r3, #12]
      break;
 8003bc2:	e06e      	b.n	8003ca2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc8:	4a5b      	ldr	r2, [pc, #364]	@ (8003d38 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003bca:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	4a5a      	ldr	r2, [pc, #360]	@ (8003d3c <HAL_TIM_PWM_Start_DMA+0x330>)
 8003bd2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd8:	4a59      	ldr	r2, [pc, #356]	@ (8003d40 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003bda:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3338      	adds	r3, #56	@ 0x38
 8003be8:	461a      	mov	r2, r3
 8003bea:	887b      	ldrh	r3, [r7, #2]
 8003bec:	f7fe fd38 	bl	8002660 <HAL_DMA_Start_IT>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e099      	b.n	8003d2e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c08:	60da      	str	r2, [r3, #12]
      break;
 8003c0a:	e04a      	b.n	8003ca2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c10:	4a49      	ldr	r2, [pc, #292]	@ (8003d38 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003c12:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c18:	4a48      	ldr	r2, [pc, #288]	@ (8003d3c <HAL_TIM_PWM_Start_DMA+0x330>)
 8003c1a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	4a47      	ldr	r2, [pc, #284]	@ (8003d40 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003c22:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	333c      	adds	r3, #60	@ 0x3c
 8003c30:	461a      	mov	r2, r3
 8003c32:	887b      	ldrh	r3, [r7, #2]
 8003c34:	f7fe fd14 	bl	8002660 <HAL_DMA_Start_IT>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e075      	b.n	8003d2e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c50:	60da      	str	r2, [r3, #12]
      break;
 8003c52:	e026      	b.n	8003ca2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c58:	4a37      	ldr	r2, [pc, #220]	@ (8003d38 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003c5a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	4a36      	ldr	r2, [pc, #216]	@ (8003d3c <HAL_TIM_PWM_Start_DMA+0x330>)
 8003c62:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c68:	4a35      	ldr	r2, [pc, #212]	@ (8003d40 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003c6a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3340      	adds	r3, #64	@ 0x40
 8003c78:	461a      	mov	r2, r3
 8003c7a:	887b      	ldrh	r3, [r7, #2]
 8003c7c:	f7fe fcf0 	bl	8002660 <HAL_DMA_Start_IT>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e051      	b.n	8003d2e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c98:	60da      	str	r2, [r3, #12]
      break;
 8003c9a:	e002      	b.n	8003ca2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ca2:	7dfb      	ldrb	r3, [r7, #23]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d141      	bne.n	8003d2c <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2201      	movs	r2, #1
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fd4f 	bl	8004754 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a22      	ldr	r2, [pc, #136]	@ (8003d44 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d107      	bne.n	8003cd0 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cce:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d44 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00e      	beq.n	8003cf8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce2:	d009      	beq.n	8003cf8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a17      	ldr	r2, [pc, #92]	@ (8003d48 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a16      	ldr	r2, [pc, #88]	@ (8003d4c <HAL_TIM_PWM_Start_DMA+0x340>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d111      	bne.n	8003d1c <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d010      	beq.n	8003d2c <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1a:	e007      	b.n	8003d2c <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	0800412b 	.word	0x0800412b
 8003d3c:	080041d3 	.word	0x080041d3
 8003d40:	08004099 	.word	0x08004099
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40000400 	.word	0x40000400
 8003d4c:	40000800 	.word	0x40000800

08003d50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e0ae      	b.n	8003ecc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b0c      	cmp	r3, #12
 8003d7a:	f200 809f 	bhi.w	8003ebc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d84:	08003db9 	.word	0x08003db9
 8003d88:	08003ebd 	.word	0x08003ebd
 8003d8c:	08003ebd 	.word	0x08003ebd
 8003d90:	08003ebd 	.word	0x08003ebd
 8003d94:	08003df9 	.word	0x08003df9
 8003d98:	08003ebd 	.word	0x08003ebd
 8003d9c:	08003ebd 	.word	0x08003ebd
 8003da0:	08003ebd 	.word	0x08003ebd
 8003da4:	08003e3b 	.word	0x08003e3b
 8003da8:	08003ebd 	.word	0x08003ebd
 8003dac:	08003ebd 	.word	0x08003ebd
 8003db0:	08003ebd 	.word	0x08003ebd
 8003db4:	08003e7b 	.word	0x08003e7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 faaa 	bl	8004318 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0208 	orr.w	r2, r2, #8
 8003dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699a      	ldr	r2, [r3, #24]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0204 	bic.w	r2, r2, #4
 8003de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6999      	ldr	r1, [r3, #24]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	619a      	str	r2, [r3, #24]
      break;
 8003df6:	e064      	b.n	8003ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 faf0 	bl	80043e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699a      	ldr	r2, [r3, #24]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6999      	ldr	r1, [r3, #24]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	021a      	lsls	r2, r3, #8
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	619a      	str	r2, [r3, #24]
      break;
 8003e38:	e043      	b.n	8003ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fb39 	bl	80044b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0208 	orr.w	r2, r2, #8
 8003e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69da      	ldr	r2, [r3, #28]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0204 	bic.w	r2, r2, #4
 8003e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69d9      	ldr	r1, [r3, #28]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	61da      	str	r2, [r3, #28]
      break;
 8003e78:	e023      	b.n	8003ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fb83 	bl	800458c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69da      	ldr	r2, [r3, #28]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69d9      	ldr	r1, [r3, #28]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	021a      	lsls	r2, r3, #8
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	61da      	str	r2, [r3, #28]
      break;
 8003eba:	e002      	b.n	8003ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_TIM_ConfigClockSource+0x1c>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e0b4      	b.n	800405a <HAL_TIM_ConfigClockSource+0x186>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f28:	d03e      	beq.n	8003fa8 <HAL_TIM_ConfigClockSource+0xd4>
 8003f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f2e:	f200 8087 	bhi.w	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f36:	f000 8086 	beq.w	8004046 <HAL_TIM_ConfigClockSource+0x172>
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f3e:	d87f      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f40:	2b70      	cmp	r3, #112	@ 0x70
 8003f42:	d01a      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0xa6>
 8003f44:	2b70      	cmp	r3, #112	@ 0x70
 8003f46:	d87b      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b60      	cmp	r3, #96	@ 0x60
 8003f4a:	d050      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x11a>
 8003f4c:	2b60      	cmp	r3, #96	@ 0x60
 8003f4e:	d877      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f50:	2b50      	cmp	r3, #80	@ 0x50
 8003f52:	d03c      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0xfa>
 8003f54:	2b50      	cmp	r3, #80	@ 0x50
 8003f56:	d873      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f58:	2b40      	cmp	r3, #64	@ 0x40
 8003f5a:	d058      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x13a>
 8003f5c:	2b40      	cmp	r3, #64	@ 0x40
 8003f5e:	d86f      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f60:	2b30      	cmp	r3, #48	@ 0x30
 8003f62:	d064      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x15a>
 8003f64:	2b30      	cmp	r3, #48	@ 0x30
 8003f66:	d86b      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d060      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x15a>
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d867      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d05c      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x15a>
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d05a      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x15a>
 8003f78:	e062      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f8a:	f000 fbc4 	bl	8004716 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	609a      	str	r2, [r3, #8]
      break;
 8003fa6:	e04f      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fb8:	f000 fbad 	bl	8004716 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fca:	609a      	str	r2, [r3, #8]
      break;
 8003fcc:	e03c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f000 fb24 	bl	8004628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2150      	movs	r1, #80	@ 0x50
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fb7b 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 8003fec:	e02c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f000 fb42 	bl	8004684 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2160      	movs	r1, #96	@ 0x60
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fb6b 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 800400c:	e01c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800401a:	461a      	mov	r2, r3
 800401c:	f000 fb04 	bl	8004628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2140      	movs	r1, #64	@ 0x40
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fb5b 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 800402c:	e00c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f000 fb52 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 800403e:	e003      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
      break;
 8004044:	e000      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr

08004086 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d107      	bne.n	80040c0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040be:	e02a      	b.n	8004116 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d107      	bne.n	80040da <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2202      	movs	r2, #2
 80040ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040d8:	e01d      	b.n	8004116 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d107      	bne.n	80040f4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2204      	movs	r2, #4
 80040e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040f2:	e010      	b.n	8004116 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d107      	bne.n	800410e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2208      	movs	r2, #8
 8004102:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800410c:	e003      	b.n	8004116 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f7ff ffb5 	bl	8004086 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	771a      	strb	r2, [r3, #28]
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	429a      	cmp	r2, r3
 8004140:	d10b      	bne.n	800415a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d136      	bne.n	80041be <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004158:	e031      	b.n	80041be <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d10b      	bne.n	800417c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2202      	movs	r2, #2
 8004168:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d125      	bne.n	80041be <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800417a:	e020      	b.n	80041be <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	429a      	cmp	r2, r3
 8004184:	d10b      	bne.n	800419e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2204      	movs	r2, #4
 800418a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d114      	bne.n	80041be <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800419c:	e00f      	b.n	80041be <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d10a      	bne.n	80041be <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2208      	movs	r2, #8
 80041ac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d103      	bne.n	80041be <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f7ff ff4f 	bl	8004062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	771a      	strb	r2, [r3, #28]
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041de:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d103      	bne.n	80041f2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	771a      	strb	r2, [r3, #28]
 80041f0:	e019      	b.n	8004226 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d103      	bne.n	8004204 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2202      	movs	r2, #2
 8004200:	771a      	strb	r2, [r3, #28]
 8004202:	e010      	b.n	8004226 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d103      	bne.n	8004216 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2204      	movs	r2, #4
 8004212:	771a      	strb	r2, [r3, #28]
 8004214:	e007      	b.n	8004226 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	429a      	cmp	r2, r3
 800421e:	d102      	bne.n	8004226 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2208      	movs	r2, #8
 8004224:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f7ff ff24 	bl	8004074 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	771a      	strb	r2, [r3, #28]
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a2f      	ldr	r2, [pc, #188]	@ (800430c <TIM_Base_SetConfig+0xd0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00b      	beq.n	800426c <TIM_Base_SetConfig+0x30>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800425a:	d007      	beq.n	800426c <TIM_Base_SetConfig+0x30>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a2c      	ldr	r2, [pc, #176]	@ (8004310 <TIM_Base_SetConfig+0xd4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_Base_SetConfig+0x30>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a2b      	ldr	r2, [pc, #172]	@ (8004314 <TIM_Base_SetConfig+0xd8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d108      	bne.n	800427e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a22      	ldr	r2, [pc, #136]	@ (800430c <TIM_Base_SetConfig+0xd0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0x62>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0x62>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a1f      	ldr	r2, [pc, #124]	@ (8004310 <TIM_Base_SetConfig+0xd4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0x62>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a1e      	ldr	r2, [pc, #120]	@ (8004314 <TIM_Base_SetConfig+0xd8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a0d      	ldr	r2, [pc, #52]	@ (800430c <TIM_Base_SetConfig+0xd0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d103      	bne.n	80042e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f023 0201 	bic.w	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	611a      	str	r2, [r3, #16]
  }
}
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	40012c00 	.word	0x40012c00
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800

08004318 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f023 0201 	bic.w	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0303 	bic.w	r3, r3, #3
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f023 0302 	bic.w	r3, r3, #2
 8004360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a1c      	ldr	r2, [pc, #112]	@ (80043e0 <TIM_OC1_SetConfig+0xc8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d10c      	bne.n	800438e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f023 0308 	bic.w	r3, r3, #8
 800437a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f023 0304 	bic.w	r3, r3, #4
 800438c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a13      	ldr	r2, [pc, #76]	@ (80043e0 <TIM_OC1_SetConfig+0xc8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d111      	bne.n	80043ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800439c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	621a      	str	r2, [r3, #32]
}
 80043d4:	bf00      	nop
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40012c00 	.word	0x40012c00

080043e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f023 0210 	bic.w	r2, r3, #16
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800441a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f023 0320 	bic.w	r3, r3, #32
 800442e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a1d      	ldr	r2, [pc, #116]	@ (80044b4 <TIM_OC2_SetConfig+0xd0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d10d      	bne.n	8004460 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800444a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800445e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a14      	ldr	r2, [pc, #80]	@ (80044b4 <TIM_OC2_SetConfig+0xd0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d113      	bne.n	8004490 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800446e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004476:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	40012c00 	.word	0x40012c00

080044b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0303 	bic.w	r3, r3, #3
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a1d      	ldr	r2, [pc, #116]	@ (8004588 <TIM_OC3_SetConfig+0xd0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d10d      	bne.n	8004532 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800451c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a14      	ldr	r2, [pc, #80]	@ (8004588 <TIM_OC3_SetConfig+0xd0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d113      	bne.n	8004562 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	621a      	str	r2, [r3, #32]
}
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40012c00 	.word	0x40012c00

0800458c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	031b      	lsls	r3, r3, #12
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004624 <TIM_OC4_SetConfig+0x98>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d109      	bne.n	8004600 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	019b      	lsls	r3, r3, #6
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	621a      	str	r2, [r3, #32]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr
 8004624:	40012c00 	.word	0x40012c00

08004628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f023 0201 	bic.w	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f023 030a 	bic.w	r3, r3, #10
 8004664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	621a      	str	r2, [r3, #32]
}
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f023 0210 	bic.w	r2, r3, #16
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	031b      	lsls	r3, r3, #12
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	621a      	str	r2, [r3, #32]
}
 80046d8:	bf00      	nop
 80046da:	371c      	adds	r7, #28
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr

080046e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	f043 0307 	orr.w	r3, r3, #7
 8004704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	609a      	str	r2, [r3, #8]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004716:	b480      	push	{r7}
 8004718:	b087      	sub	sp, #28
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004730:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	021a      	lsls	r2, r3, #8
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	431a      	orrs	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4313      	orrs	r3, r2
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	609a      	str	r2, [r3, #8]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr

08004754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	2201      	movs	r2, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1a      	ldr	r2, [r3, #32]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	43db      	mvns	r3, r3
 8004776:	401a      	ands	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1a      	ldr	r2, [r3, #32]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	fa01 f303 	lsl.w	r3, r1, r3
 800478c:	431a      	orrs	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	bf00      	nop
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr

0800479c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e046      	b.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a16      	ldr	r2, [pc, #88]	@ (800484c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00e      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004800:	d009      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a12      	ldr	r2, [pc, #72]	@ (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d004      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a10      	ldr	r2, [pc, #64]	@ (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d10c      	bne.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800481c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	4313      	orrs	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr
 800484c:	40012c00 	.word	0x40012c00
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800

08004858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e042      	b.n	80048f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fd fbf4 	bl	800206c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2224      	movs	r2, #36	@ 0x24
 8004888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800489a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fded 	bl	800547c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695a      	ldr	r2, [r3, #20]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	@ 0x28
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b20      	cmp	r3, #32
 8004916:	d175      	bne.n	8004a04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_UART_Transmit+0x2c>
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e06e      	b.n	8004a06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2221      	movs	r2, #33	@ 0x21
 8004932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004936:	f7fd fce3 	bl	8002300 <HAL_GetTick>
 800493a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	88fa      	ldrh	r2, [r7, #6]
 8004940:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	88fa      	ldrh	r2, [r7, #6]
 8004946:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004950:	d108      	bne.n	8004964 <HAL_UART_Transmit+0x6c>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	e003      	b.n	800496c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800496c:	e02e      	b.n	80049cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2200      	movs	r2, #0
 8004976:	2180      	movs	r1, #128	@ 0x80
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 fb52 	bl	8005022 <UART_WaitOnFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e03a      	b.n	8004a06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10b      	bne.n	80049ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	3302      	adds	r3, #2
 80049aa:	61bb      	str	r3, [r7, #24]
 80049ac:	e007      	b.n	80049be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	781a      	ldrb	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	3301      	adds	r3, #1
 80049bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1cb      	bne.n	800496e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2200      	movs	r2, #0
 80049de:	2140      	movs	r1, #64	@ 0x40
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fb1e 	bl	8005022 <UART_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e006      	b.n	8004a06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e000      	b.n	8004a06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a04:	2302      	movs	r3, #2
  }
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3720      	adds	r7, #32
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b20      	cmp	r3, #32
 8004a26:	d121      	bne.n	8004a6c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_UART_Transmit_IT+0x26>
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e01a      	b.n	8004a6e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	88fa      	ldrh	r2, [r7, #6]
 8004a42:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	88fa      	ldrh	r2, [r7, #6]
 8004a48:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2221      	movs	r2, #33	@ 0x21
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a66:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e000      	b.n	8004a6e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004a6c:	2302      	movs	r3, #2
  }
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	4613      	mov	r3, r2
 8004a84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d112      	bne.n	8004ab8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_UART_Receive_IT+0x26>
 8004a98:	88fb      	ldrh	r3, [r7, #6]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e00b      	b.n	8004aba <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004aa8:	88fb      	ldrh	r3, [r7, #6]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fb10 	bl	80050d4 <UART_Start_Receive_IT>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	e000      	b.n	8004aba <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ab8:	2302      	movs	r3, #2
  }
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b0ba      	sub	sp, #232	@ 0xe8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10f      	bne.n	8004b2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <HAL_UART_IRQHandler+0x66>
 8004b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fbec 	bl	8005300 <UART_Receive_IT>
      return;
 8004b28:	e25b      	b.n	8004fe2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 80de 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x22c>
 8004b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d106      	bne.n	8004b4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 80d1 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00b      	beq.n	8004b72 <HAL_UART_IRQHandler+0xae>
 8004b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6a:	f043 0201 	orr.w	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00b      	beq.n	8004b96 <HAL_UART_IRQHandler+0xd2>
 8004b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8e:	f043 0202 	orr.w	r2, r3, #2
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <HAL_UART_IRQHandler+0xf6>
 8004ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb2:	f043 0204 	orr.w	r2, r3, #4
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d011      	beq.n	8004bea <HAL_UART_IRQHandler+0x126>
 8004bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bca:	f003 0320 	and.w	r3, r3, #32
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d105      	bne.n	8004bde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be2:	f043 0208 	orr.w	r2, r3, #8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 81f2 	beq.w	8004fd8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <HAL_UART_IRQHandler+0x14e>
 8004c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fb77 	bl	8005300 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bf14      	ite	ne
 8004c20:	2301      	movne	r3, #1
 8004c22:	2300      	moveq	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d103      	bne.n	8004c3e <HAL_UART_IRQHandler+0x17a>
 8004c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d04f      	beq.n	8004cde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fa81 	bl	8005146 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d041      	beq.n	8004cd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3314      	adds	r3, #20
 8004c58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3314      	adds	r3, #20
 8004c7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1d9      	bne.n	8004c52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d013      	beq.n	8004cce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004caa:	4a7e      	ldr	r2, [pc, #504]	@ (8004ea4 <HAL_UART_IRQHandler+0x3e0>)
 8004cac:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fd fd70 	bl	8002798 <HAL_DMA_Abort_IT>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d016      	beq.n	8004cec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ccc:	e00e      	b.n	8004cec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f993 	bl	8004ffa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd4:	e00a      	b.n	8004cec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f98f 	bl	8004ffa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cdc:	e006      	b.n	8004cec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f98b 	bl	8004ffa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004cea:	e175      	b.n	8004fd8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cec:	bf00      	nop
    return;
 8004cee:	e173      	b.n	8004fd8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	f040 814f 	bne.w	8004f98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8148 	beq.w	8004f98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8141 	beq.w	8004f98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d16:	2300      	movs	r3, #0
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 80b6 	beq.w	8004ea8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8145 	beq.w	8004fdc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	f080 813e 	bcs.w	8004fdc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	f000 8088 	beq.w	8004e84 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004da0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004da4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004dac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1d9      	bne.n	8004d74 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3314      	adds	r3, #20
 8004dc6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004dd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3314      	adds	r3, #20
 8004de0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004de4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004de8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004dec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004df6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e1      	bne.n	8004dc0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3314      	adds	r3, #20
 8004e02:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3314      	adds	r3, #20
 8004e1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e20:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e3      	bne.n	8004dfc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e54:	f023 0310 	bic.w	r3, r3, #16
 8004e58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	330c      	adds	r3, #12
 8004e62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e66:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e68:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e3      	bne.n	8004e42 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fd fc4e 	bl	8002720 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f8b6 	bl	800500c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ea0:	e09c      	b.n	8004fdc <HAL_UART_IRQHandler+0x518>
 8004ea2:	bf00      	nop
 8004ea4:	0800520b 	.word	0x0800520b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 808e 	beq.w	8004fe0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8089 	beq.w	8004fe0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	330c      	adds	r3, #12
 8004eee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004ef2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ef4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ef8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e3      	bne.n	8004ece <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3314      	adds	r3, #20
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	623b      	str	r3, [r7, #32]
   return(result);
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3314      	adds	r3, #20
 8004f26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e3      	bne.n	8004f06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0310 	bic.w	r3, r3, #16
 8004f62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	330c      	adds	r3, #12
 8004f6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f70:	61fa      	str	r2, [r7, #28]
 8004f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	69b9      	ldr	r1, [r7, #24]
 8004f76:	69fa      	ldr	r2, [r7, #28]
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e3      	bne.n	8004f4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f83b 	bl	800500c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f96:	e023      	b.n	8004fe0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d009      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x4f4>
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f93e 	bl	8005232 <UART_Transmit_IT>
    return;
 8004fb6:	e014      	b.n	8004fe2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00e      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x51e>
 8004fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f97d 	bl	80052d0 <UART_EndTransmit_IT>
    return;
 8004fd6:	e004      	b.n	8004fe2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004fd8:	bf00      	nop
 8004fda:	e002      	b.n	8004fe2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004fdc:	bf00      	nop
 8004fde:	e000      	b.n	8004fe2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004fe0:	bf00      	nop
  }
}
 8004fe2:	37e8      	adds	r7, #232	@ 0xe8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr

08004ffa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr

08005022 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b086      	sub	sp, #24
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	603b      	str	r3, [r7, #0]
 800502e:	4613      	mov	r3, r2
 8005030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005032:	e03b      	b.n	80050ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800503a:	d037      	beq.n	80050ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503c:	f7fd f960 	bl	8002300 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	6a3a      	ldr	r2, [r7, #32]
 8005048:	429a      	cmp	r2, r3
 800504a:	d302      	bcc.n	8005052 <UART_WaitOnFlagUntilTimeout+0x30>
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e03a      	b.n	80050cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d023      	beq.n	80050ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b80      	cmp	r3, #128	@ 0x80
 8005068:	d020      	beq.n	80050ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b40      	cmp	r3, #64	@ 0x40
 800506e:	d01d      	beq.n	80050ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b08      	cmp	r3, #8
 800507c:	d116      	bne.n	80050ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f856 	bl	8005146 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2208      	movs	r2, #8
 800509e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e00f      	b.n	80050cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4013      	ands	r3, r2
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d0b4      	beq.n	8005034 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	88fa      	ldrh	r2, [r7, #6]
 80050ec:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	88fa      	ldrh	r2, [r7, #6]
 80050f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2222      	movs	r2, #34	@ 0x22
 80050fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d007      	beq.n	800511a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005118:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695a      	ldr	r2, [r3, #20]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0201 	orr.w	r2, r2, #1
 8005128:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0220 	orr.w	r2, r2, #32
 8005138:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr

08005146 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005146:	b480      	push	{r7}
 8005148:	b095      	sub	sp, #84	@ 0x54
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	330c      	adds	r3, #12
 8005154:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800515e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005160:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005164:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800516e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005170:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005174:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800517c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e5      	bne.n	800514e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3314      	adds	r3, #20
 8005188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	61fb      	str	r3, [r7, #28]
   return(result);
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	64bb      	str	r3, [r7, #72]	@ 0x48
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3314      	adds	r3, #20
 80051a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d119      	bne.n	80051f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	330c      	adds	r3, #12
 80051c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f023 0310 	bic.w	r3, r3, #16
 80051d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051de:	61ba      	str	r2, [r7, #24]
 80051e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	6979      	ldr	r1, [r7, #20]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	613b      	str	r3, [r7, #16]
   return(result);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e5      	bne.n	80051be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005200:	bf00      	nop
 8005202:	3754      	adds	r7, #84	@ 0x54
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr

0800520a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b084      	sub	sp, #16
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f7ff fee8 	bl	8004ffa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005232:	b480      	push	{r7}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b21      	cmp	r3, #33	@ 0x21
 8005244:	d13e      	bne.n	80052c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800524e:	d114      	bne.n	800527a <UART_Transmit_IT+0x48>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d110      	bne.n	800527a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800526c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	1c9a      	adds	r2, r3, #2
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	621a      	str	r2, [r3, #32]
 8005278:	e008      	b.n	800528c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	1c59      	adds	r1, r3, #1
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6211      	str	r1, [r2, #32]
 8005284:	781a      	ldrb	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29b      	uxth	r3, r3
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4619      	mov	r1, r3
 800529a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10f      	bne.n	80052c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e000      	b.n	80052c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr

080052d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff fe79 	bl	8004fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08c      	sub	sp, #48	@ 0x30
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b22      	cmp	r3, #34	@ 0x22
 8005312:	f040 80ae 	bne.w	8005472 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800531e:	d117      	bne.n	8005350 <UART_Receive_IT+0x50>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d113      	bne.n	8005350 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005328:	2300      	movs	r3, #0
 800532a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005330:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	b29b      	uxth	r3, r3
 800533a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533e:	b29a      	uxth	r2, r3
 8005340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005342:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005348:	1c9a      	adds	r2, r3, #2
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	629a      	str	r2, [r3, #40]	@ 0x28
 800534e:	e026      	b.n	800539e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005354:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005362:	d007      	beq.n	8005374 <UART_Receive_IT+0x74>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <UART_Receive_IT+0x82>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d106      	bne.n	8005382 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	b2da      	uxtb	r2, r3
 800537c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537e:	701a      	strb	r2, [r3, #0]
 8005380:	e008      	b.n	8005394 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	b2db      	uxtb	r3, r3
 800538a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800538e:	b2da      	uxtb	r2, r3
 8005390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005392:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	4619      	mov	r1, r3
 80053ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d15d      	bne.n	800546e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0220 	bic.w	r2, r2, #32
 80053c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695a      	ldr	r2, [r3, #20]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0201 	bic.w	r2, r2, #1
 80053e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d135      	bne.n	8005464 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	330c      	adds	r3, #12
 8005404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	613b      	str	r3, [r7, #16]
   return(result);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f023 0310 	bic.w	r3, r3, #16
 8005414:	627b      	str	r3, [r7, #36]	@ 0x24
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	330c      	adds	r3, #12
 800541c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800541e:	623a      	str	r2, [r7, #32]
 8005420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	69f9      	ldr	r1, [r7, #28]
 8005424:	6a3a      	ldr	r2, [r7, #32]
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	61bb      	str	r3, [r7, #24]
   return(result);
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e5      	bne.n	80053fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b10      	cmp	r3, #16
 800543e:	d10a      	bne.n	8005456 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800545a:	4619      	mov	r1, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff fdd5 	bl	800500c <HAL_UARTEx_RxEventCallback>
 8005462:	e002      	b.n	800546a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fc f93f 	bl	80016e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	e002      	b.n	8005474 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	e000      	b.n	8005474 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005472:	2302      	movs	r3, #2
  }
}
 8005474:	4618      	mov	r0, r3
 8005476:	3730      	adds	r7, #48	@ 0x30
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80054b6:	f023 030c 	bic.w	r3, r3, #12
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6812      	ldr	r2, [r2, #0]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	430b      	orrs	r3, r1
 80054c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2c      	ldr	r2, [pc, #176]	@ (8005590 <UART_SetConfig+0x114>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d103      	bne.n	80054ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80054e4:	f7fe f8cc 	bl	8003680 <HAL_RCC_GetPCLK2Freq>
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	e002      	b.n	80054f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80054ec:	f7fe f8b4 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 80054f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	009a      	lsls	r2, r3, #2
 80054fc:	441a      	add	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	fbb2 f3f3 	udiv	r3, r2, r3
 8005508:	4a22      	ldr	r2, [pc, #136]	@ (8005594 <UART_SetConfig+0x118>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	0119      	lsls	r1, r3, #4
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	009a      	lsls	r2, r3, #2
 800551c:	441a      	add	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	fbb2 f2f3 	udiv	r2, r2, r3
 8005528:	4b1a      	ldr	r3, [pc, #104]	@ (8005594 <UART_SetConfig+0x118>)
 800552a:	fba3 0302 	umull	r0, r3, r3, r2
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	2064      	movs	r0, #100	@ 0x64
 8005532:	fb00 f303 	mul.w	r3, r0, r3
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	3332      	adds	r3, #50	@ 0x32
 800553c:	4a15      	ldr	r2, [pc, #84]	@ (8005594 <UART_SetConfig+0x118>)
 800553e:	fba2 2303 	umull	r2, r3, r2, r3
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005548:	4419      	add	r1, r3
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009a      	lsls	r2, r3, #2
 8005554:	441a      	add	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005560:	4b0c      	ldr	r3, [pc, #48]	@ (8005594 <UART_SetConfig+0x118>)
 8005562:	fba3 0302 	umull	r0, r3, r3, r2
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	2064      	movs	r0, #100	@ 0x64
 800556a:	fb00 f303 	mul.w	r3, r0, r3
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	3332      	adds	r3, #50	@ 0x32
 8005574:	4a07      	ldr	r2, [pc, #28]	@ (8005594 <UART_SetConfig+0x118>)
 8005576:	fba2 2303 	umull	r2, r3, r2, r3
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	f003 020f 	and.w	r2, r3, #15
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	440a      	add	r2, r1
 8005586:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40013800 	.word	0x40013800
 8005594:	51eb851f 	.word	0x51eb851f

08005598 <WS28XX_Delay>:
void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed);

/***********************************************************************************************************/

void WS28XX_Delay(uint32_t Delay)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
#if WS28XX_RTOS == WS28XX_RTOS_DISABLE
  HAL_Delay(Delay);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7fc feb7 	bl	8002314 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <WS28XX_Lock>:

/***********************************************************************************************************/

void WS28XX_Lock(WS28XX_HandleTypeDef *hLed)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  while (hLed->Lock)
 80055b6:	e002      	b.n	80055be <WS28XX_Lock+0x10>
  {
    WS28XX_Delay(1);
 80055b8:	2001      	movs	r0, #1
 80055ba:	f7ff ffed 	bl	8005598 <WS28XX_Delay>
  while (hLed->Lock)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	795b      	ldrb	r3, [r3, #5]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f8      	bne.n	80055b8 <WS28XX_Lock+0xa>
  }
  hLed->Lock = 1;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	715a      	strb	r2, [r3, #5]
}
 80055cc:	bf00      	nop
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <WS28XX_UnLock>:

/***********************************************************************************************************/

void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  hLed->Lock = 0;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	715a      	strb	r2, [r3, #5]
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr

080055ec <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *hLed, TIM_HandleTypeDef *hTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	4611      	mov	r1, r2
 80055f8:	461a      	mov	r2, r3
 80055fa:	460b      	mov	r3, r1
 80055fc:	80fb      	strh	r3, [r7, #6]
 80055fe:	4613      	mov	r3, r2
 8005600:	717b      	strb	r3, [r7, #5]
  bool answer = false;
 8005602:	2300      	movs	r3, #0
 8005604:	75fb      	strb	r3, [r7, #23]
  uint32_t aar_value;
  do
  {
    if (hLed == NULL || hTim == NULL)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d07d      	beq.n	8005708 <WS28XX_Init+0x11c>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d07a      	beq.n	8005708 <WS28XX_Init+0x11c>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 8005612:	8c3b      	ldrh	r3, [r7, #32]
 8005614:	f240 2242 	movw	r2, #578	@ 0x242
 8005618:	4293      	cmp	r3, r2
 800561a:	d874      	bhi.n	8005706 <WS28XX_Init+0x11a>
    {
      break;
    }
    hLed->Channel = Channel;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	797a      	ldrb	r2, [r7, #5]
 8005620:	711a      	strb	r2, [r3, #4]
    hLed->MaxPixel = Pixel;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8c3a      	ldrh	r2, [r7, #32]
 8005626:	815a      	strh	r2, [r3, #10]
    hLed->hTim = hTim;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	4618      	mov	r0, r3
 8005632:	f7fa fe57 	bl	80002e4 <__aeabi_i2f>
 8005636:	4603      	mov	r3, r0
 8005638:	4936      	ldr	r1, [pc, #216]	@ (8005714 <WS28XX_Init+0x128>)
 800563a:	4618      	mov	r0, r3
 800563c:	f7fa ff5a 	bl	80004f4 <__aeabi_fdiv>
 8005640:	4603      	mov	r3, r0
 8005642:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005646:	4618      	mov	r0, r3
 8005648:	f7fa fd96 	bl	8000178 <__aeabi_fsub>
 800564c:	4603      	mov	r3, r0
 800564e:	4618      	mov	r0, r3
 8005650:	f7fa ffec 	bl	800062c <__aeabi_f2uiz>
 8005654:	4603      	mov	r3, r0
 8005656:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(hLed->hTim ,aar_value);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(hLed->hTim, 0);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2200      	movs	r2, #0
 8005672:	629a      	str	r2, [r3, #40]	@ 0x28
    hLed->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8005674:	6938      	ldr	r0, [r7, #16]
 8005676:	f7fa fe31 	bl	80002dc <__aeabi_ui2f>
 800567a:	4603      	mov	r3, r0
 800567c:	4926      	ldr	r1, [pc, #152]	@ (8005718 <WS28XX_Init+0x12c>)
 800567e:	4618      	mov	r0, r3
 8005680:	f7fa fe84 	bl	800038c <__aeabi_fmul>
 8005684:	4603      	mov	r3, r0
 8005686:	4925      	ldr	r1, [pc, #148]	@ (800571c <WS28XX_Init+0x130>)
 8005688:	4618      	mov	r0, r3
 800568a:	f7fa ff33 	bl	80004f4 <__aeabi_fdiv>
 800568e:	4603      	mov	r3, r0
 8005690:	4618      	mov	r0, r3
 8005692:	f7fa ffcb 	bl	800062c <__aeabi_f2uiz>
 8005696:	4603      	mov	r3, r0
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	80da      	strh	r2, [r3, #6]
    hLed->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 800569e:	6938      	ldr	r0, [r7, #16]
 80056a0:	f7fa fe1c 	bl	80002dc <__aeabi_ui2f>
 80056a4:	4603      	mov	r3, r0
 80056a6:	491b      	ldr	r1, [pc, #108]	@ (8005714 <WS28XX_Init+0x128>)
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fa fe6f 	bl	800038c <__aeabi_fmul>
 80056ae:	4603      	mov	r3, r0
 80056b0:	491a      	ldr	r1, [pc, #104]	@ (800571c <WS28XX_Init+0x130>)
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fa ff1e 	bl	80004f4 <__aeabi_fdiv>
 80056b8:	4603      	mov	r3, r0
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fa ffb6 	bl	800062c <__aeabi_f2uiz>
 80056c0:	4603      	mov	r3, r0
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	811a      	strh	r2, [r3, #8]
    memset(hLed->Pixel, 0, sizeof(hLed->Pixel));
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	330c      	adds	r3, #12
 80056cc:	f240 62c6 	movw	r2, #1734	@ 0x6c6
 80056d0:	2100      	movs	r1, #0
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 f960 	bl	8005998 <memset>
    memset(hLed->Buffer, 0, sizeof(hLed->Buffer));
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f203 63d2 	addw	r3, r3, #1746	@ 0x6d2
 80056de:	f243 6234 	movw	r2, #13876	@ 0x3634
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 f957 	bl	8005998 <memset>
    HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, Pixel);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	791b      	ldrb	r3, [r3, #4]
 80056f2:	4619      	mov	r1, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f203 62d2 	addw	r2, r3, #1746	@ 0x6d2
 80056fa:	8c3b      	ldrh	r3, [r7, #32]
 80056fc:	f7fe f986 	bl	8003a0c <HAL_TIM_PWM_Start_DMA>
    answer = true;
 8005700:	2301      	movs	r3, #1
 8005702:	75fb      	strb	r3, [r7, #23]
 8005704:	e000      	b.n	8005708 <WS28XX_Init+0x11c>
      break;
 8005706:	bf00      	nop
  }
  while (0);

  return answer;
 8005708:	7dfb      	ldrb	r3, [r7, #23]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	3f4ccccd 	.word	0x3f4ccccd
 8005718:	3ecccccd 	.word	0x3ecccccd
 800571c:	3fa00000 	.word	0x3fa00000

08005720 <WS28XX_SetPixel_RGBW_565>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_565(WS28XX_HandleTypeDef *hLed, uint16_t Pixel, uint16_t Color, uint8_t Brightness)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	4608      	mov	r0, r1
 800572a:	4611      	mov	r1, r2
 800572c:	461a      	mov	r2, r3
 800572e:	4603      	mov	r3, r0
 8005730:	817b      	strh	r3, [r7, #10]
 8005732:	460b      	mov	r3, r1
 8005734:	813b      	strh	r3, [r7, #8]
 8005736:	4613      	mov	r3, r2
 8005738:	71fb      	strb	r3, [r7, #7]
  bool answer = true;
 800573a:	2301      	movs	r3, #1
 800573c:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= hLed->MaxPixel)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	895b      	ldrh	r3, [r3, #10]
 8005742:	897a      	ldrh	r2, [r7, #10]
 8005744:	429a      	cmp	r2, r3
 8005746:	d302      	bcc.n	800574e <WS28XX_SetPixel_RGBW_565+0x2e>
    {
      answer = false;
 8005748:	2300      	movs	r3, #0
 800574a:	75fb      	strb	r3, [r7, #23]
      break;
 800574c:	e051      	b.n	80057f2 <WS28XX_SetPixel_RGBW_565+0xd2>
    }
    Red = ((Color >> 8) & 0xF8) * Brightness / 255;
 800574e:	893b      	ldrh	r3, [r7, #8]
 8005750:	0a1b      	lsrs	r3, r3, #8
 8005752:	b29b      	uxth	r3, r3
 8005754:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8005758:	79fa      	ldrb	r2, [r7, #7]
 800575a:	fb02 f303 	mul.w	r3, r2, r3
 800575e:	4a28      	ldr	r2, [pc, #160]	@ (8005800 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8005760:	fb82 1203 	smull	r1, r2, r2, r3
 8005764:	441a      	add	r2, r3
 8005766:	11d2      	asrs	r2, r2, #7
 8005768:	17db      	asrs	r3, r3, #31
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	75bb      	strb	r3, [r7, #22]
    Green = ((Color >> 3) & 0xFC)* Brightness / 255;
 800576e:	893b      	ldrh	r3, [r7, #8]
 8005770:	08db      	lsrs	r3, r3, #3
 8005772:	b29b      	uxth	r3, r3
 8005774:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8005778:	79fa      	ldrb	r2, [r7, #7]
 800577a:	fb02 f303 	mul.w	r3, r2, r3
 800577e:	4a20      	ldr	r2, [pc, #128]	@ (8005800 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8005780:	fb82 1203 	smull	r1, r2, r2, r3
 8005784:	441a      	add	r2, r3
 8005786:	11d2      	asrs	r2, r2, #7
 8005788:	17db      	asrs	r3, r3, #31
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	757b      	strb	r3, [r7, #21]
    Blue = ((Color << 3) & 0xF8) * Brightness / 255;
 800578e:	893b      	ldrh	r3, [r7, #8]
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	b2db      	uxtb	r3, r3
 8005794:	79fa      	ldrb	r2, [r7, #7]
 8005796:	fb02 f303 	mul.w	r3, r2, r3
 800579a:	4a19      	ldr	r2, [pc, #100]	@ (8005800 <WS28XX_SetPixel_RGBW_565+0xe0>)
 800579c:	fb82 1203 	smull	r1, r2, r2, r3
 80057a0:	441a      	add	r2, r3
 80057a2:	11d2      	asrs	r2, r2, #7
 80057a4:	17db      	asrs	r3, r3, #31
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 80057aa:	7d7b      	ldrb	r3, [r7, #21]
 80057ac:	897a      	ldrh	r2, [r7, #10]
 80057ae:	4915      	ldr	r1, [pc, #84]	@ (8005804 <WS28XX_SetPixel_RGBW_565+0xe4>)
 80057b0:	5cc8      	ldrb	r0, [r1, r3]
 80057b2:	68f9      	ldr	r1, [r7, #12]
 80057b4:	4613      	mov	r3, r2
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	4413      	add	r3, r2
 80057ba:	440b      	add	r3, r1
 80057bc:	330c      	adds	r3, #12
 80057be:	4602      	mov	r2, r0
 80057c0:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 80057c2:	7dbb      	ldrb	r3, [r7, #22]
 80057c4:	897a      	ldrh	r2, [r7, #10]
 80057c6:	490f      	ldr	r1, [pc, #60]	@ (8005804 <WS28XX_SetPixel_RGBW_565+0xe4>)
 80057c8:	5cc8      	ldrb	r0, [r1, r3]
 80057ca:	68f9      	ldr	r1, [r7, #12]
 80057cc:	4613      	mov	r3, r2
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	4413      	add	r3, r2
 80057d2:	440b      	add	r3, r1
 80057d4:	330d      	adds	r3, #13
 80057d6:	4602      	mov	r2, r0
 80057d8:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 80057da:	7d3b      	ldrb	r3, [r7, #20]
 80057dc:	897a      	ldrh	r2, [r7, #10]
 80057de:	4909      	ldr	r1, [pc, #36]	@ (8005804 <WS28XX_SetPixel_RGBW_565+0xe4>)
 80057e0:	5cc8      	ldrb	r0, [r1, r3]
 80057e2:	68f9      	ldr	r1, [r7, #12]
 80057e4:	4613      	mov	r3, r2
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	4413      	add	r3, r2
 80057ea:	440b      	add	r3, r1
 80057ec:	330e      	adds	r3, #14
 80057ee:	4602      	mov	r2, r0
 80057f0:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	371c      	adds	r7, #28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bc80      	pop	{r7}
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	80808081 	.word	0x80808081
 8005804:	08006344 	.word	0x08006344

08005808 <WS28XX_Update>:
  * @param  *hLed: Pointer to WS28XX_hLedTypeDef structure
  *
  * @retval bool: true or false
  */
bool WS28XX_Update(WS28XX_HandleTypeDef *hLed)
{
 8005808:	b590      	push	{r4, r7, lr}
 800580a:	b089      	sub	sp, #36	@ 0x24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  bool answer = true;
 8005810:	2301      	movs	r3, #1
 8005812:	77fb      	strb	r3, [r7, #31]
  uint32_t i = 2;
 8005814:	2302      	movs	r3, #2
 8005816:	61bb      	str	r3, [r7, #24]
  WS28XX_Lock(hLed);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff fec8 	bl	80055ae <WS28XX_Lock>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 800581e:	2300      	movs	r3, #0
 8005820:	82fb      	strh	r3, [r7, #22]
 8005822:	e03e      	b.n	80058a2 <WS28XX_Update+0x9a>
  {
    for (int rgb = 0; rgb < 3; rgb ++)
 8005824:	2300      	movs	r3, #0
 8005826:	613b      	str	r3, [r7, #16]
 8005828:	e035      	b.n	8005896 <WS28XX_Update+0x8e>
    {
      for (int b = 7; b >= 0 ; b--)
 800582a:	2307      	movs	r3, #7
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	e02c      	b.n	800588a <WS28XX_Update+0x82>
      {
        if ((hLed->Pixel[pixel][rgb] & (1 << b)) == 0)
 8005830:	8afa      	ldrh	r2, [r7, #22]
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	4413      	add	r3, r2
 800583a:	18ca      	adds	r2, r1, r3
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4413      	add	r3, r2
 8005840:	330c      	adds	r3, #12
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	fa42 f303 	asr.w	r3, r2, r3
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <WS28XX_Update+0x62>
        {
          hLed->Buffer[i] = hLed->Pulse0;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	88db      	ldrh	r3, [r3, #6]
 8005858:	b2d9      	uxtb	r1, r3
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	4413      	add	r3, r2
 8005860:	f203 63d2 	addw	r3, r3, #1746	@ 0x6d2
 8005864:	460a      	mov	r2, r1
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	e009      	b.n	800587e <WS28XX_Update+0x76>
        }
        else
        {
          hLed->Buffer[i] = hLed->Pulse1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	891b      	ldrh	r3, [r3, #8]
 800586e:	b2d9      	uxtb	r1, r3
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	4413      	add	r3, r2
 8005876:	f203 63d2 	addw	r3, r3, #1746	@ 0x6d2
 800587a:	460a      	mov	r2, r1
 800587c:	701a      	strb	r2, [r3, #0]
        }
        i++;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	3301      	adds	r3, #1
 8005882:	61bb      	str	r3, [r7, #24]
      for (int b = 7; b >= 0 ; b--)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3b01      	subs	r3, #1
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	dacf      	bge.n	8005830 <WS28XX_Update+0x28>
    for (int rgb = 0; rgb < 3; rgb ++)
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	3301      	adds	r3, #1
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	2b02      	cmp	r3, #2
 800589a:	ddc6      	ble.n	800582a <WS28XX_Update+0x22>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 800589c:	8afb      	ldrh	r3, [r7, #22]
 800589e:	3301      	adds	r3, #1
 80058a0:	82fb      	strh	r3, [r7, #22]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	895b      	ldrh	r3, [r3, #10]
 80058a6:	8afa      	ldrh	r2, [r7, #22]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d3bb      	bcc.n	8005824 <WS28XX_Update+0x1c>
      }
    }
  }
  if (HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, (hLed->MaxPixel * 24) + 4) != HAL_OK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	791b      	ldrb	r3, [r3, #4]
 80058b4:	461c      	mov	r4, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f203 62d2 	addw	r2, r3, #1746	@ 0x6d2
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	895b      	ldrh	r3, [r3, #10]
 80058c0:	4619      	mov	r1, r3
 80058c2:	0049      	lsls	r1, r1, #1
 80058c4:	440b      	add	r3, r1
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3304      	adds	r3, #4
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	4621      	mov	r1, r4
 80058d0:	f7fe f89c 	bl	8003a0c <HAL_TIM_PWM_Start_DMA>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <WS28XX_Update+0xd6>
  {
    answer = false;
 80058da:	2300      	movs	r3, #0
 80058dc:	77fb      	strb	r3, [r7, #31]
  }
  WS28XX_UnLock(hLed);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff fe78 	bl	80055d4 <WS28XX_UnLock>
  return answer;
 80058e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3724      	adds	r7, #36	@ 0x24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd90      	pop	{r4, r7, pc}
	...

080058f0 <sniprintf>:
 80058f0:	b40c      	push	{r2, r3}
 80058f2:	b530      	push	{r4, r5, lr}
 80058f4:	4b17      	ldr	r3, [pc, #92]	@ (8005954 <sniprintf+0x64>)
 80058f6:	1e0c      	subs	r4, r1, #0
 80058f8:	681d      	ldr	r5, [r3, #0]
 80058fa:	b09d      	sub	sp, #116	@ 0x74
 80058fc:	da08      	bge.n	8005910 <sniprintf+0x20>
 80058fe:	238b      	movs	r3, #139	@ 0x8b
 8005900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005904:	602b      	str	r3, [r5, #0]
 8005906:	b01d      	add	sp, #116	@ 0x74
 8005908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800590c:	b002      	add	sp, #8
 800590e:	4770      	bx	lr
 8005910:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005914:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005918:	bf0c      	ite	eq
 800591a:	4623      	moveq	r3, r4
 800591c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005920:	9304      	str	r3, [sp, #16]
 8005922:	9307      	str	r3, [sp, #28]
 8005924:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005928:	9002      	str	r0, [sp, #8]
 800592a:	9006      	str	r0, [sp, #24]
 800592c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005930:	4628      	mov	r0, r5
 8005932:	ab21      	add	r3, sp, #132	@ 0x84
 8005934:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005936:	a902      	add	r1, sp, #8
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	f000 f8bd 	bl	8005ab8 <_svfiprintf_r>
 800593e:	1c43      	adds	r3, r0, #1
 8005940:	bfbc      	itt	lt
 8005942:	238b      	movlt	r3, #139	@ 0x8b
 8005944:	602b      	strlt	r3, [r5, #0]
 8005946:	2c00      	cmp	r4, #0
 8005948:	d0dd      	beq.n	8005906 <sniprintf+0x16>
 800594a:	2200      	movs	r2, #0
 800594c:	9b02      	ldr	r3, [sp, #8]
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	e7d9      	b.n	8005906 <sniprintf+0x16>
 8005952:	bf00      	nop
 8005954:	2000039c 	.word	0x2000039c

08005958 <siprintf>:
 8005958:	b40e      	push	{r1, r2, r3}
 800595a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800595e:	b500      	push	{lr}
 8005960:	b09c      	sub	sp, #112	@ 0x70
 8005962:	ab1d      	add	r3, sp, #116	@ 0x74
 8005964:	9002      	str	r0, [sp, #8]
 8005966:	9006      	str	r0, [sp, #24]
 8005968:	9107      	str	r1, [sp, #28]
 800596a:	9104      	str	r1, [sp, #16]
 800596c:	4808      	ldr	r0, [pc, #32]	@ (8005990 <siprintf+0x38>)
 800596e:	4909      	ldr	r1, [pc, #36]	@ (8005994 <siprintf+0x3c>)
 8005970:	f853 2b04 	ldr.w	r2, [r3], #4
 8005974:	9105      	str	r1, [sp, #20]
 8005976:	6800      	ldr	r0, [r0, #0]
 8005978:	a902      	add	r1, sp, #8
 800597a:	9301      	str	r3, [sp, #4]
 800597c:	f000 f89c 	bl	8005ab8 <_svfiprintf_r>
 8005980:	2200      	movs	r2, #0
 8005982:	9b02      	ldr	r3, [sp, #8]
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	b01c      	add	sp, #112	@ 0x70
 8005988:	f85d eb04 	ldr.w	lr, [sp], #4
 800598c:	b003      	add	sp, #12
 800598e:	4770      	bx	lr
 8005990:	2000039c 	.word	0x2000039c
 8005994:	ffff0208 	.word	0xffff0208

08005998 <memset>:
 8005998:	4603      	mov	r3, r0
 800599a:	4402      	add	r2, r0
 800599c:	4293      	cmp	r3, r2
 800599e:	d100      	bne.n	80059a2 <memset+0xa>
 80059a0:	4770      	bx	lr
 80059a2:	f803 1b01 	strb.w	r1, [r3], #1
 80059a6:	e7f9      	b.n	800599c <memset+0x4>

080059a8 <__errno>:
 80059a8:	4b01      	ldr	r3, [pc, #4]	@ (80059b0 <__errno+0x8>)
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	2000039c 	.word	0x2000039c

080059b4 <__libc_init_array>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	2600      	movs	r6, #0
 80059b8:	4d0c      	ldr	r5, [pc, #48]	@ (80059ec <__libc_init_array+0x38>)
 80059ba:	4c0d      	ldr	r4, [pc, #52]	@ (80059f0 <__libc_init_array+0x3c>)
 80059bc:	1b64      	subs	r4, r4, r5
 80059be:	10a4      	asrs	r4, r4, #2
 80059c0:	42a6      	cmp	r6, r4
 80059c2:	d109      	bne.n	80059d8 <__libc_init_array+0x24>
 80059c4:	f000 fc78 	bl	80062b8 <_init>
 80059c8:	2600      	movs	r6, #0
 80059ca:	4d0a      	ldr	r5, [pc, #40]	@ (80059f4 <__libc_init_array+0x40>)
 80059cc:	4c0a      	ldr	r4, [pc, #40]	@ (80059f8 <__libc_init_array+0x44>)
 80059ce:	1b64      	subs	r4, r4, r5
 80059d0:	10a4      	asrs	r4, r4, #2
 80059d2:	42a6      	cmp	r6, r4
 80059d4:	d105      	bne.n	80059e2 <__libc_init_array+0x2e>
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059dc:	4798      	blx	r3
 80059de:	3601      	adds	r6, #1
 80059e0:	e7ee      	b.n	80059c0 <__libc_init_array+0xc>
 80059e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e6:	4798      	blx	r3
 80059e8:	3601      	adds	r6, #1
 80059ea:	e7f2      	b.n	80059d2 <__libc_init_array+0x1e>
 80059ec:	08006480 	.word	0x08006480
 80059f0:	08006480 	.word	0x08006480
 80059f4:	08006480 	.word	0x08006480
 80059f8:	08006484 	.word	0x08006484

080059fc <__retarget_lock_acquire_recursive>:
 80059fc:	4770      	bx	lr

080059fe <__retarget_lock_release_recursive>:
 80059fe:	4770      	bx	lr

08005a00 <__ssputs_r>:
 8005a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a04:	461f      	mov	r7, r3
 8005a06:	688e      	ldr	r6, [r1, #8]
 8005a08:	4682      	mov	sl, r0
 8005a0a:	42be      	cmp	r6, r7
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	4690      	mov	r8, r2
 8005a10:	680b      	ldr	r3, [r1, #0]
 8005a12:	d82d      	bhi.n	8005a70 <__ssputs_r+0x70>
 8005a14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a1c:	d026      	beq.n	8005a6c <__ssputs_r+0x6c>
 8005a1e:	6965      	ldr	r5, [r4, #20]
 8005a20:	6909      	ldr	r1, [r1, #16]
 8005a22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a26:	eba3 0901 	sub.w	r9, r3, r1
 8005a2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a2e:	1c7b      	adds	r3, r7, #1
 8005a30:	444b      	add	r3, r9
 8005a32:	106d      	asrs	r5, r5, #1
 8005a34:	429d      	cmp	r5, r3
 8005a36:	bf38      	it	cc
 8005a38:	461d      	movcc	r5, r3
 8005a3a:	0553      	lsls	r3, r2, #21
 8005a3c:	d527      	bpl.n	8005a8e <__ssputs_r+0x8e>
 8005a3e:	4629      	mov	r1, r5
 8005a40:	f000 f958 	bl	8005cf4 <_malloc_r>
 8005a44:	4606      	mov	r6, r0
 8005a46:	b360      	cbz	r0, 8005aa2 <__ssputs_r+0xa2>
 8005a48:	464a      	mov	r2, r9
 8005a4a:	6921      	ldr	r1, [r4, #16]
 8005a4c:	f000 fbd6 	bl	80061fc <memcpy>
 8005a50:	89a3      	ldrh	r3, [r4, #12]
 8005a52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a5a:	81a3      	strh	r3, [r4, #12]
 8005a5c:	6126      	str	r6, [r4, #16]
 8005a5e:	444e      	add	r6, r9
 8005a60:	6026      	str	r6, [r4, #0]
 8005a62:	463e      	mov	r6, r7
 8005a64:	6165      	str	r5, [r4, #20]
 8005a66:	eba5 0509 	sub.w	r5, r5, r9
 8005a6a:	60a5      	str	r5, [r4, #8]
 8005a6c:	42be      	cmp	r6, r7
 8005a6e:	d900      	bls.n	8005a72 <__ssputs_r+0x72>
 8005a70:	463e      	mov	r6, r7
 8005a72:	4632      	mov	r2, r6
 8005a74:	4641      	mov	r1, r8
 8005a76:	6820      	ldr	r0, [r4, #0]
 8005a78:	f000 fb88 	bl	800618c <memmove>
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	68a3      	ldr	r3, [r4, #8]
 8005a80:	1b9b      	subs	r3, r3, r6
 8005a82:	60a3      	str	r3, [r4, #8]
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	4433      	add	r3, r6
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8e:	462a      	mov	r2, r5
 8005a90:	f000 fb4e 	bl	8006130 <_realloc_r>
 8005a94:	4606      	mov	r6, r0
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d1e0      	bne.n	8005a5c <__ssputs_r+0x5c>
 8005a9a:	4650      	mov	r0, sl
 8005a9c:	6921      	ldr	r1, [r4, #16]
 8005a9e:	f000 fbbb 	bl	8006218 <_free_r>
 8005aa2:	230c      	movs	r3, #12
 8005aa4:	f8ca 3000 	str.w	r3, [sl]
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ab2:	81a3      	strh	r3, [r4, #12]
 8005ab4:	e7e9      	b.n	8005a8a <__ssputs_r+0x8a>
	...

08005ab8 <_svfiprintf_r>:
 8005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	4698      	mov	r8, r3
 8005abe:	898b      	ldrh	r3, [r1, #12]
 8005ac0:	4607      	mov	r7, r0
 8005ac2:	061b      	lsls	r3, r3, #24
 8005ac4:	460d      	mov	r5, r1
 8005ac6:	4614      	mov	r4, r2
 8005ac8:	b09d      	sub	sp, #116	@ 0x74
 8005aca:	d510      	bpl.n	8005aee <_svfiprintf_r+0x36>
 8005acc:	690b      	ldr	r3, [r1, #16]
 8005ace:	b973      	cbnz	r3, 8005aee <_svfiprintf_r+0x36>
 8005ad0:	2140      	movs	r1, #64	@ 0x40
 8005ad2:	f000 f90f 	bl	8005cf4 <_malloc_r>
 8005ad6:	6028      	str	r0, [r5, #0]
 8005ad8:	6128      	str	r0, [r5, #16]
 8005ada:	b930      	cbnz	r0, 8005aea <_svfiprintf_r+0x32>
 8005adc:	230c      	movs	r3, #12
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ae4:	b01d      	add	sp, #116	@ 0x74
 8005ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aea:	2340      	movs	r3, #64	@ 0x40
 8005aec:	616b      	str	r3, [r5, #20]
 8005aee:	2300      	movs	r3, #0
 8005af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005af2:	2320      	movs	r3, #32
 8005af4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005af8:	2330      	movs	r3, #48	@ 0x30
 8005afa:	f04f 0901 	mov.w	r9, #1
 8005afe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b02:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005c9c <_svfiprintf_r+0x1e4>
 8005b06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b0a:	4623      	mov	r3, r4
 8005b0c:	469a      	mov	sl, r3
 8005b0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b12:	b10a      	cbz	r2, 8005b18 <_svfiprintf_r+0x60>
 8005b14:	2a25      	cmp	r2, #37	@ 0x25
 8005b16:	d1f9      	bne.n	8005b0c <_svfiprintf_r+0x54>
 8005b18:	ebba 0b04 	subs.w	fp, sl, r4
 8005b1c:	d00b      	beq.n	8005b36 <_svfiprintf_r+0x7e>
 8005b1e:	465b      	mov	r3, fp
 8005b20:	4622      	mov	r2, r4
 8005b22:	4629      	mov	r1, r5
 8005b24:	4638      	mov	r0, r7
 8005b26:	f7ff ff6b 	bl	8005a00 <__ssputs_r>
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	f000 80a7 	beq.w	8005c7e <_svfiprintf_r+0x1c6>
 8005b30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b32:	445a      	add	r2, fp
 8005b34:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b36:	f89a 3000 	ldrb.w	r3, [sl]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 809f 	beq.w	8005c7e <_svfiprintf_r+0x1c6>
 8005b40:	2300      	movs	r3, #0
 8005b42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b4a:	f10a 0a01 	add.w	sl, sl, #1
 8005b4e:	9304      	str	r3, [sp, #16]
 8005b50:	9307      	str	r3, [sp, #28]
 8005b52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b56:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b58:	4654      	mov	r4, sl
 8005b5a:	2205      	movs	r2, #5
 8005b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b60:	484e      	ldr	r0, [pc, #312]	@ (8005c9c <_svfiprintf_r+0x1e4>)
 8005b62:	f000 fb3d 	bl	80061e0 <memchr>
 8005b66:	9a04      	ldr	r2, [sp, #16]
 8005b68:	b9d8      	cbnz	r0, 8005ba2 <_svfiprintf_r+0xea>
 8005b6a:	06d0      	lsls	r0, r2, #27
 8005b6c:	bf44      	itt	mi
 8005b6e:	2320      	movmi	r3, #32
 8005b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b74:	0711      	lsls	r1, r2, #28
 8005b76:	bf44      	itt	mi
 8005b78:	232b      	movmi	r3, #43	@ 0x2b
 8005b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b84:	d015      	beq.n	8005bb2 <_svfiprintf_r+0xfa>
 8005b86:	4654      	mov	r4, sl
 8005b88:	2000      	movs	r0, #0
 8005b8a:	f04f 0c0a 	mov.w	ip, #10
 8005b8e:	9a07      	ldr	r2, [sp, #28]
 8005b90:	4621      	mov	r1, r4
 8005b92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b96:	3b30      	subs	r3, #48	@ 0x30
 8005b98:	2b09      	cmp	r3, #9
 8005b9a:	d94b      	bls.n	8005c34 <_svfiprintf_r+0x17c>
 8005b9c:	b1b0      	cbz	r0, 8005bcc <_svfiprintf_r+0x114>
 8005b9e:	9207      	str	r2, [sp, #28]
 8005ba0:	e014      	b.n	8005bcc <_svfiprintf_r+0x114>
 8005ba2:	eba0 0308 	sub.w	r3, r0, r8
 8005ba6:	fa09 f303 	lsl.w	r3, r9, r3
 8005baa:	4313      	orrs	r3, r2
 8005bac:	46a2      	mov	sl, r4
 8005bae:	9304      	str	r3, [sp, #16]
 8005bb0:	e7d2      	b.n	8005b58 <_svfiprintf_r+0xa0>
 8005bb2:	9b03      	ldr	r3, [sp, #12]
 8005bb4:	1d19      	adds	r1, r3, #4
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	9103      	str	r1, [sp, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	bfbb      	ittet	lt
 8005bbe:	425b      	neglt	r3, r3
 8005bc0:	f042 0202 	orrlt.w	r2, r2, #2
 8005bc4:	9307      	strge	r3, [sp, #28]
 8005bc6:	9307      	strlt	r3, [sp, #28]
 8005bc8:	bfb8      	it	lt
 8005bca:	9204      	strlt	r2, [sp, #16]
 8005bcc:	7823      	ldrb	r3, [r4, #0]
 8005bce:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bd0:	d10a      	bne.n	8005be8 <_svfiprintf_r+0x130>
 8005bd2:	7863      	ldrb	r3, [r4, #1]
 8005bd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bd6:	d132      	bne.n	8005c3e <_svfiprintf_r+0x186>
 8005bd8:	9b03      	ldr	r3, [sp, #12]
 8005bda:	3402      	adds	r4, #2
 8005bdc:	1d1a      	adds	r2, r3, #4
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	9203      	str	r2, [sp, #12]
 8005be2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005be6:	9305      	str	r3, [sp, #20]
 8005be8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005ca0 <_svfiprintf_r+0x1e8>
 8005bec:	2203      	movs	r2, #3
 8005bee:	4650      	mov	r0, sl
 8005bf0:	7821      	ldrb	r1, [r4, #0]
 8005bf2:	f000 faf5 	bl	80061e0 <memchr>
 8005bf6:	b138      	cbz	r0, 8005c08 <_svfiprintf_r+0x150>
 8005bf8:	2240      	movs	r2, #64	@ 0x40
 8005bfa:	9b04      	ldr	r3, [sp, #16]
 8005bfc:	eba0 000a 	sub.w	r0, r0, sl
 8005c00:	4082      	lsls	r2, r0
 8005c02:	4313      	orrs	r3, r2
 8005c04:	3401      	adds	r4, #1
 8005c06:	9304      	str	r3, [sp, #16]
 8005c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c0c:	2206      	movs	r2, #6
 8005c0e:	4825      	ldr	r0, [pc, #148]	@ (8005ca4 <_svfiprintf_r+0x1ec>)
 8005c10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c14:	f000 fae4 	bl	80061e0 <memchr>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d036      	beq.n	8005c8a <_svfiprintf_r+0x1d2>
 8005c1c:	4b22      	ldr	r3, [pc, #136]	@ (8005ca8 <_svfiprintf_r+0x1f0>)
 8005c1e:	bb1b      	cbnz	r3, 8005c68 <_svfiprintf_r+0x1b0>
 8005c20:	9b03      	ldr	r3, [sp, #12]
 8005c22:	3307      	adds	r3, #7
 8005c24:	f023 0307 	bic.w	r3, r3, #7
 8005c28:	3308      	adds	r3, #8
 8005c2a:	9303      	str	r3, [sp, #12]
 8005c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c2e:	4433      	add	r3, r6
 8005c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c32:	e76a      	b.n	8005b0a <_svfiprintf_r+0x52>
 8005c34:	460c      	mov	r4, r1
 8005c36:	2001      	movs	r0, #1
 8005c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c3c:	e7a8      	b.n	8005b90 <_svfiprintf_r+0xd8>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f04f 0c0a 	mov.w	ip, #10
 8005c44:	4619      	mov	r1, r3
 8005c46:	3401      	adds	r4, #1
 8005c48:	9305      	str	r3, [sp, #20]
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c50:	3a30      	subs	r2, #48	@ 0x30
 8005c52:	2a09      	cmp	r2, #9
 8005c54:	d903      	bls.n	8005c5e <_svfiprintf_r+0x1a6>
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0c6      	beq.n	8005be8 <_svfiprintf_r+0x130>
 8005c5a:	9105      	str	r1, [sp, #20]
 8005c5c:	e7c4      	b.n	8005be8 <_svfiprintf_r+0x130>
 8005c5e:	4604      	mov	r4, r0
 8005c60:	2301      	movs	r3, #1
 8005c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c66:	e7f0      	b.n	8005c4a <_svfiprintf_r+0x192>
 8005c68:	ab03      	add	r3, sp, #12
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	462a      	mov	r2, r5
 8005c6e:	4638      	mov	r0, r7
 8005c70:	4b0e      	ldr	r3, [pc, #56]	@ (8005cac <_svfiprintf_r+0x1f4>)
 8005c72:	a904      	add	r1, sp, #16
 8005c74:	f3af 8000 	nop.w
 8005c78:	1c42      	adds	r2, r0, #1
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	d1d6      	bne.n	8005c2c <_svfiprintf_r+0x174>
 8005c7e:	89ab      	ldrh	r3, [r5, #12]
 8005c80:	065b      	lsls	r3, r3, #25
 8005c82:	f53f af2d 	bmi.w	8005ae0 <_svfiprintf_r+0x28>
 8005c86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c88:	e72c      	b.n	8005ae4 <_svfiprintf_r+0x2c>
 8005c8a:	ab03      	add	r3, sp, #12
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	462a      	mov	r2, r5
 8005c90:	4638      	mov	r0, r7
 8005c92:	4b06      	ldr	r3, [pc, #24]	@ (8005cac <_svfiprintf_r+0x1f4>)
 8005c94:	a904      	add	r1, sp, #16
 8005c96:	f000 f91f 	bl	8005ed8 <_printf_i>
 8005c9a:	e7ed      	b.n	8005c78 <_svfiprintf_r+0x1c0>
 8005c9c:	08006444 	.word	0x08006444
 8005ca0:	0800644a 	.word	0x0800644a
 8005ca4:	0800644e 	.word	0x0800644e
 8005ca8:	00000000 	.word	0x00000000
 8005cac:	08005a01 	.word	0x08005a01

08005cb0 <sbrk_aligned>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	4e0f      	ldr	r6, [pc, #60]	@ (8005cf0 <sbrk_aligned+0x40>)
 8005cb4:	460c      	mov	r4, r1
 8005cb6:	6831      	ldr	r1, [r6, #0]
 8005cb8:	4605      	mov	r5, r0
 8005cba:	b911      	cbnz	r1, 8005cc2 <sbrk_aligned+0x12>
 8005cbc:	f000 fa80 	bl	80061c0 <_sbrk_r>
 8005cc0:	6030      	str	r0, [r6, #0]
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f000 fa7b 	bl	80061c0 <_sbrk_r>
 8005cca:	1c43      	adds	r3, r0, #1
 8005ccc:	d103      	bne.n	8005cd6 <sbrk_aligned+0x26>
 8005cce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	bd70      	pop	{r4, r5, r6, pc}
 8005cd6:	1cc4      	adds	r4, r0, #3
 8005cd8:	f024 0403 	bic.w	r4, r4, #3
 8005cdc:	42a0      	cmp	r0, r4
 8005cde:	d0f8      	beq.n	8005cd2 <sbrk_aligned+0x22>
 8005ce0:	1a21      	subs	r1, r4, r0
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 fa6c 	bl	80061c0 <_sbrk_r>
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d1f2      	bne.n	8005cd2 <sbrk_aligned+0x22>
 8005cec:	e7ef      	b.n	8005cce <sbrk_aligned+0x1e>
 8005cee:	bf00      	nop
 8005cf0:	20004514 	.word	0x20004514

08005cf4 <_malloc_r>:
 8005cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cf8:	1ccd      	adds	r5, r1, #3
 8005cfa:	f025 0503 	bic.w	r5, r5, #3
 8005cfe:	3508      	adds	r5, #8
 8005d00:	2d0c      	cmp	r5, #12
 8005d02:	bf38      	it	cc
 8005d04:	250c      	movcc	r5, #12
 8005d06:	2d00      	cmp	r5, #0
 8005d08:	4606      	mov	r6, r0
 8005d0a:	db01      	blt.n	8005d10 <_malloc_r+0x1c>
 8005d0c:	42a9      	cmp	r1, r5
 8005d0e:	d904      	bls.n	8005d1a <_malloc_r+0x26>
 8005d10:	230c      	movs	r3, #12
 8005d12:	6033      	str	r3, [r6, #0]
 8005d14:	2000      	movs	r0, #0
 8005d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005df0 <_malloc_r+0xfc>
 8005d1e:	f000 f9fb 	bl	8006118 <__malloc_lock>
 8005d22:	f8d8 3000 	ldr.w	r3, [r8]
 8005d26:	461c      	mov	r4, r3
 8005d28:	bb44      	cbnz	r4, 8005d7c <_malloc_r+0x88>
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	f7ff ffbf 	bl	8005cb0 <sbrk_aligned>
 8005d32:	1c43      	adds	r3, r0, #1
 8005d34:	4604      	mov	r4, r0
 8005d36:	d158      	bne.n	8005dea <_malloc_r+0xf6>
 8005d38:	f8d8 4000 	ldr.w	r4, [r8]
 8005d3c:	4627      	mov	r7, r4
 8005d3e:	2f00      	cmp	r7, #0
 8005d40:	d143      	bne.n	8005dca <_malloc_r+0xd6>
 8005d42:	2c00      	cmp	r4, #0
 8005d44:	d04b      	beq.n	8005dde <_malloc_r+0xea>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	4639      	mov	r1, r7
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	eb04 0903 	add.w	r9, r4, r3
 8005d50:	f000 fa36 	bl	80061c0 <_sbrk_r>
 8005d54:	4581      	cmp	r9, r0
 8005d56:	d142      	bne.n	8005dde <_malloc_r+0xea>
 8005d58:	6821      	ldr	r1, [r4, #0]
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	1a6d      	subs	r5, r5, r1
 8005d5e:	4629      	mov	r1, r5
 8005d60:	f7ff ffa6 	bl	8005cb0 <sbrk_aligned>
 8005d64:	3001      	adds	r0, #1
 8005d66:	d03a      	beq.n	8005dde <_malloc_r+0xea>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	442b      	add	r3, r5
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	bb62      	cbnz	r2, 8005dd0 <_malloc_r+0xdc>
 8005d76:	f8c8 7000 	str.w	r7, [r8]
 8005d7a:	e00f      	b.n	8005d9c <_malloc_r+0xa8>
 8005d7c:	6822      	ldr	r2, [r4, #0]
 8005d7e:	1b52      	subs	r2, r2, r5
 8005d80:	d420      	bmi.n	8005dc4 <_malloc_r+0xd0>
 8005d82:	2a0b      	cmp	r2, #11
 8005d84:	d917      	bls.n	8005db6 <_malloc_r+0xc2>
 8005d86:	1961      	adds	r1, r4, r5
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	6025      	str	r5, [r4, #0]
 8005d8c:	bf18      	it	ne
 8005d8e:	6059      	strne	r1, [r3, #4]
 8005d90:	6863      	ldr	r3, [r4, #4]
 8005d92:	bf08      	it	eq
 8005d94:	f8c8 1000 	streq.w	r1, [r8]
 8005d98:	5162      	str	r2, [r4, r5]
 8005d9a:	604b      	str	r3, [r1, #4]
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f000 f9c1 	bl	8006124 <__malloc_unlock>
 8005da2:	f104 000b 	add.w	r0, r4, #11
 8005da6:	1d23      	adds	r3, r4, #4
 8005da8:	f020 0007 	bic.w	r0, r0, #7
 8005dac:	1ac2      	subs	r2, r0, r3
 8005dae:	bf1c      	itt	ne
 8005db0:	1a1b      	subne	r3, r3, r0
 8005db2:	50a3      	strne	r3, [r4, r2]
 8005db4:	e7af      	b.n	8005d16 <_malloc_r+0x22>
 8005db6:	6862      	ldr	r2, [r4, #4]
 8005db8:	42a3      	cmp	r3, r4
 8005dba:	bf0c      	ite	eq
 8005dbc:	f8c8 2000 	streq.w	r2, [r8]
 8005dc0:	605a      	strne	r2, [r3, #4]
 8005dc2:	e7eb      	b.n	8005d9c <_malloc_r+0xa8>
 8005dc4:	4623      	mov	r3, r4
 8005dc6:	6864      	ldr	r4, [r4, #4]
 8005dc8:	e7ae      	b.n	8005d28 <_malloc_r+0x34>
 8005dca:	463c      	mov	r4, r7
 8005dcc:	687f      	ldr	r7, [r7, #4]
 8005dce:	e7b6      	b.n	8005d3e <_malloc_r+0x4a>
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	42a3      	cmp	r3, r4
 8005dd6:	d1fb      	bne.n	8005dd0 <_malloc_r+0xdc>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	6053      	str	r3, [r2, #4]
 8005ddc:	e7de      	b.n	8005d9c <_malloc_r+0xa8>
 8005dde:	230c      	movs	r3, #12
 8005de0:	4630      	mov	r0, r6
 8005de2:	6033      	str	r3, [r6, #0]
 8005de4:	f000 f99e 	bl	8006124 <__malloc_unlock>
 8005de8:	e794      	b.n	8005d14 <_malloc_r+0x20>
 8005dea:	6005      	str	r5, [r0, #0]
 8005dec:	e7d6      	b.n	8005d9c <_malloc_r+0xa8>
 8005dee:	bf00      	nop
 8005df0:	20004518 	.word	0x20004518

08005df4 <_printf_common>:
 8005df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df8:	4616      	mov	r6, r2
 8005dfa:	4698      	mov	r8, r3
 8005dfc:	688a      	ldr	r2, [r1, #8]
 8005dfe:	690b      	ldr	r3, [r1, #16]
 8005e00:	4607      	mov	r7, r0
 8005e02:	4293      	cmp	r3, r2
 8005e04:	bfb8      	it	lt
 8005e06:	4613      	movlt	r3, r2
 8005e08:	6033      	str	r3, [r6, #0]
 8005e0a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e0e:	460c      	mov	r4, r1
 8005e10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e14:	b10a      	cbz	r2, 8005e1a <_printf_common+0x26>
 8005e16:	3301      	adds	r3, #1
 8005e18:	6033      	str	r3, [r6, #0]
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	0699      	lsls	r1, r3, #26
 8005e1e:	bf42      	ittt	mi
 8005e20:	6833      	ldrmi	r3, [r6, #0]
 8005e22:	3302      	addmi	r3, #2
 8005e24:	6033      	strmi	r3, [r6, #0]
 8005e26:	6825      	ldr	r5, [r4, #0]
 8005e28:	f015 0506 	ands.w	r5, r5, #6
 8005e2c:	d106      	bne.n	8005e3c <_printf_common+0x48>
 8005e2e:	f104 0a19 	add.w	sl, r4, #25
 8005e32:	68e3      	ldr	r3, [r4, #12]
 8005e34:	6832      	ldr	r2, [r6, #0]
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	42ab      	cmp	r3, r5
 8005e3a:	dc2b      	bgt.n	8005e94 <_printf_common+0xa0>
 8005e3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e40:	6822      	ldr	r2, [r4, #0]
 8005e42:	3b00      	subs	r3, #0
 8005e44:	bf18      	it	ne
 8005e46:	2301      	movne	r3, #1
 8005e48:	0692      	lsls	r2, r2, #26
 8005e4a:	d430      	bmi.n	8005eae <_printf_common+0xba>
 8005e4c:	4641      	mov	r1, r8
 8005e4e:	4638      	mov	r0, r7
 8005e50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e54:	47c8      	blx	r9
 8005e56:	3001      	adds	r0, #1
 8005e58:	d023      	beq.n	8005ea2 <_printf_common+0xae>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	6922      	ldr	r2, [r4, #16]
 8005e5e:	f003 0306 	and.w	r3, r3, #6
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	bf14      	ite	ne
 8005e66:	2500      	movne	r5, #0
 8005e68:	6833      	ldreq	r3, [r6, #0]
 8005e6a:	f04f 0600 	mov.w	r6, #0
 8005e6e:	bf08      	it	eq
 8005e70:	68e5      	ldreq	r5, [r4, #12]
 8005e72:	f104 041a 	add.w	r4, r4, #26
 8005e76:	bf08      	it	eq
 8005e78:	1aed      	subeq	r5, r5, r3
 8005e7a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005e7e:	bf08      	it	eq
 8005e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e84:	4293      	cmp	r3, r2
 8005e86:	bfc4      	itt	gt
 8005e88:	1a9b      	subgt	r3, r3, r2
 8005e8a:	18ed      	addgt	r5, r5, r3
 8005e8c:	42b5      	cmp	r5, r6
 8005e8e:	d11a      	bne.n	8005ec6 <_printf_common+0xd2>
 8005e90:	2000      	movs	r0, #0
 8005e92:	e008      	b.n	8005ea6 <_printf_common+0xb2>
 8005e94:	2301      	movs	r3, #1
 8005e96:	4652      	mov	r2, sl
 8005e98:	4641      	mov	r1, r8
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	47c8      	blx	r9
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d103      	bne.n	8005eaa <_printf_common+0xb6>
 8005ea2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eaa:	3501      	adds	r5, #1
 8005eac:	e7c1      	b.n	8005e32 <_printf_common+0x3e>
 8005eae:	2030      	movs	r0, #48	@ 0x30
 8005eb0:	18e1      	adds	r1, r4, r3
 8005eb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ebc:	4422      	add	r2, r4
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ec4:	e7c2      	b.n	8005e4c <_printf_common+0x58>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	4622      	mov	r2, r4
 8005eca:	4641      	mov	r1, r8
 8005ecc:	4638      	mov	r0, r7
 8005ece:	47c8      	blx	r9
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d0e6      	beq.n	8005ea2 <_printf_common+0xae>
 8005ed4:	3601      	adds	r6, #1
 8005ed6:	e7d9      	b.n	8005e8c <_printf_common+0x98>

08005ed8 <_printf_i>:
 8005ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	7e0f      	ldrb	r7, [r1, #24]
 8005ede:	4691      	mov	r9, r2
 8005ee0:	2f78      	cmp	r7, #120	@ 0x78
 8005ee2:	4680      	mov	r8, r0
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	469a      	mov	sl, r3
 8005ee8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005eea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005eee:	d807      	bhi.n	8005f00 <_printf_i+0x28>
 8005ef0:	2f62      	cmp	r7, #98	@ 0x62
 8005ef2:	d80a      	bhi.n	8005f0a <_printf_i+0x32>
 8005ef4:	2f00      	cmp	r7, #0
 8005ef6:	f000 80d3 	beq.w	80060a0 <_printf_i+0x1c8>
 8005efa:	2f58      	cmp	r7, #88	@ 0x58
 8005efc:	f000 80ba 	beq.w	8006074 <_printf_i+0x19c>
 8005f00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f08:	e03a      	b.n	8005f80 <_printf_i+0xa8>
 8005f0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f0e:	2b15      	cmp	r3, #21
 8005f10:	d8f6      	bhi.n	8005f00 <_printf_i+0x28>
 8005f12:	a101      	add	r1, pc, #4	@ (adr r1, 8005f18 <_printf_i+0x40>)
 8005f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f18:	08005f71 	.word	0x08005f71
 8005f1c:	08005f85 	.word	0x08005f85
 8005f20:	08005f01 	.word	0x08005f01
 8005f24:	08005f01 	.word	0x08005f01
 8005f28:	08005f01 	.word	0x08005f01
 8005f2c:	08005f01 	.word	0x08005f01
 8005f30:	08005f85 	.word	0x08005f85
 8005f34:	08005f01 	.word	0x08005f01
 8005f38:	08005f01 	.word	0x08005f01
 8005f3c:	08005f01 	.word	0x08005f01
 8005f40:	08005f01 	.word	0x08005f01
 8005f44:	08006087 	.word	0x08006087
 8005f48:	08005faf 	.word	0x08005faf
 8005f4c:	08006041 	.word	0x08006041
 8005f50:	08005f01 	.word	0x08005f01
 8005f54:	08005f01 	.word	0x08005f01
 8005f58:	080060a9 	.word	0x080060a9
 8005f5c:	08005f01 	.word	0x08005f01
 8005f60:	08005faf 	.word	0x08005faf
 8005f64:	08005f01 	.word	0x08005f01
 8005f68:	08005f01 	.word	0x08005f01
 8005f6c:	08006049 	.word	0x08006049
 8005f70:	6833      	ldr	r3, [r6, #0]
 8005f72:	1d1a      	adds	r2, r3, #4
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6032      	str	r2, [r6, #0]
 8005f78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f80:	2301      	movs	r3, #1
 8005f82:	e09e      	b.n	80060c2 <_printf_i+0x1ea>
 8005f84:	6833      	ldr	r3, [r6, #0]
 8005f86:	6820      	ldr	r0, [r4, #0]
 8005f88:	1d19      	adds	r1, r3, #4
 8005f8a:	6031      	str	r1, [r6, #0]
 8005f8c:	0606      	lsls	r6, r0, #24
 8005f8e:	d501      	bpl.n	8005f94 <_printf_i+0xbc>
 8005f90:	681d      	ldr	r5, [r3, #0]
 8005f92:	e003      	b.n	8005f9c <_printf_i+0xc4>
 8005f94:	0645      	lsls	r5, r0, #25
 8005f96:	d5fb      	bpl.n	8005f90 <_printf_i+0xb8>
 8005f98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f9c:	2d00      	cmp	r5, #0
 8005f9e:	da03      	bge.n	8005fa8 <_printf_i+0xd0>
 8005fa0:	232d      	movs	r3, #45	@ 0x2d
 8005fa2:	426d      	negs	r5, r5
 8005fa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fa8:	230a      	movs	r3, #10
 8005faa:	4859      	ldr	r0, [pc, #356]	@ (8006110 <_printf_i+0x238>)
 8005fac:	e011      	b.n	8005fd2 <_printf_i+0xfa>
 8005fae:	6821      	ldr	r1, [r4, #0]
 8005fb0:	6833      	ldr	r3, [r6, #0]
 8005fb2:	0608      	lsls	r0, r1, #24
 8005fb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fb8:	d402      	bmi.n	8005fc0 <_printf_i+0xe8>
 8005fba:	0649      	lsls	r1, r1, #25
 8005fbc:	bf48      	it	mi
 8005fbe:	b2ad      	uxthmi	r5, r5
 8005fc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fc2:	6033      	str	r3, [r6, #0]
 8005fc4:	bf14      	ite	ne
 8005fc6:	230a      	movne	r3, #10
 8005fc8:	2308      	moveq	r3, #8
 8005fca:	4851      	ldr	r0, [pc, #324]	@ (8006110 <_printf_i+0x238>)
 8005fcc:	2100      	movs	r1, #0
 8005fce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fd2:	6866      	ldr	r6, [r4, #4]
 8005fd4:	2e00      	cmp	r6, #0
 8005fd6:	bfa8      	it	ge
 8005fd8:	6821      	ldrge	r1, [r4, #0]
 8005fda:	60a6      	str	r6, [r4, #8]
 8005fdc:	bfa4      	itt	ge
 8005fde:	f021 0104 	bicge.w	r1, r1, #4
 8005fe2:	6021      	strge	r1, [r4, #0]
 8005fe4:	b90d      	cbnz	r5, 8005fea <_printf_i+0x112>
 8005fe6:	2e00      	cmp	r6, #0
 8005fe8:	d04b      	beq.n	8006082 <_printf_i+0x1aa>
 8005fea:	4616      	mov	r6, r2
 8005fec:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ff0:	fb03 5711 	mls	r7, r3, r1, r5
 8005ff4:	5dc7      	ldrb	r7, [r0, r7]
 8005ff6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ffa:	462f      	mov	r7, r5
 8005ffc:	42bb      	cmp	r3, r7
 8005ffe:	460d      	mov	r5, r1
 8006000:	d9f4      	bls.n	8005fec <_printf_i+0x114>
 8006002:	2b08      	cmp	r3, #8
 8006004:	d10b      	bne.n	800601e <_printf_i+0x146>
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	07df      	lsls	r7, r3, #31
 800600a:	d508      	bpl.n	800601e <_printf_i+0x146>
 800600c:	6923      	ldr	r3, [r4, #16]
 800600e:	6861      	ldr	r1, [r4, #4]
 8006010:	4299      	cmp	r1, r3
 8006012:	bfde      	ittt	le
 8006014:	2330      	movle	r3, #48	@ 0x30
 8006016:	f806 3c01 	strble.w	r3, [r6, #-1]
 800601a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800601e:	1b92      	subs	r2, r2, r6
 8006020:	6122      	str	r2, [r4, #16]
 8006022:	464b      	mov	r3, r9
 8006024:	4621      	mov	r1, r4
 8006026:	4640      	mov	r0, r8
 8006028:	f8cd a000 	str.w	sl, [sp]
 800602c:	aa03      	add	r2, sp, #12
 800602e:	f7ff fee1 	bl	8005df4 <_printf_common>
 8006032:	3001      	adds	r0, #1
 8006034:	d14a      	bne.n	80060cc <_printf_i+0x1f4>
 8006036:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800603a:	b004      	add	sp, #16
 800603c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	f043 0320 	orr.w	r3, r3, #32
 8006046:	6023      	str	r3, [r4, #0]
 8006048:	2778      	movs	r7, #120	@ 0x78
 800604a:	4832      	ldr	r0, [pc, #200]	@ (8006114 <_printf_i+0x23c>)
 800604c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	6831      	ldr	r1, [r6, #0]
 8006054:	061f      	lsls	r7, r3, #24
 8006056:	f851 5b04 	ldr.w	r5, [r1], #4
 800605a:	d402      	bmi.n	8006062 <_printf_i+0x18a>
 800605c:	065f      	lsls	r7, r3, #25
 800605e:	bf48      	it	mi
 8006060:	b2ad      	uxthmi	r5, r5
 8006062:	6031      	str	r1, [r6, #0]
 8006064:	07d9      	lsls	r1, r3, #31
 8006066:	bf44      	itt	mi
 8006068:	f043 0320 	orrmi.w	r3, r3, #32
 800606c:	6023      	strmi	r3, [r4, #0]
 800606e:	b11d      	cbz	r5, 8006078 <_printf_i+0x1a0>
 8006070:	2310      	movs	r3, #16
 8006072:	e7ab      	b.n	8005fcc <_printf_i+0xf4>
 8006074:	4826      	ldr	r0, [pc, #152]	@ (8006110 <_printf_i+0x238>)
 8006076:	e7e9      	b.n	800604c <_printf_i+0x174>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	f023 0320 	bic.w	r3, r3, #32
 800607e:	6023      	str	r3, [r4, #0]
 8006080:	e7f6      	b.n	8006070 <_printf_i+0x198>
 8006082:	4616      	mov	r6, r2
 8006084:	e7bd      	b.n	8006002 <_printf_i+0x12a>
 8006086:	6833      	ldr	r3, [r6, #0]
 8006088:	6825      	ldr	r5, [r4, #0]
 800608a:	1d18      	adds	r0, r3, #4
 800608c:	6961      	ldr	r1, [r4, #20]
 800608e:	6030      	str	r0, [r6, #0]
 8006090:	062e      	lsls	r6, r5, #24
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	d501      	bpl.n	800609a <_printf_i+0x1c2>
 8006096:	6019      	str	r1, [r3, #0]
 8006098:	e002      	b.n	80060a0 <_printf_i+0x1c8>
 800609a:	0668      	lsls	r0, r5, #25
 800609c:	d5fb      	bpl.n	8006096 <_printf_i+0x1be>
 800609e:	8019      	strh	r1, [r3, #0]
 80060a0:	2300      	movs	r3, #0
 80060a2:	4616      	mov	r6, r2
 80060a4:	6123      	str	r3, [r4, #16]
 80060a6:	e7bc      	b.n	8006022 <_printf_i+0x14a>
 80060a8:	6833      	ldr	r3, [r6, #0]
 80060aa:	2100      	movs	r1, #0
 80060ac:	1d1a      	adds	r2, r3, #4
 80060ae:	6032      	str	r2, [r6, #0]
 80060b0:	681e      	ldr	r6, [r3, #0]
 80060b2:	6862      	ldr	r2, [r4, #4]
 80060b4:	4630      	mov	r0, r6
 80060b6:	f000 f893 	bl	80061e0 <memchr>
 80060ba:	b108      	cbz	r0, 80060c0 <_printf_i+0x1e8>
 80060bc:	1b80      	subs	r0, r0, r6
 80060be:	6060      	str	r0, [r4, #4]
 80060c0:	6863      	ldr	r3, [r4, #4]
 80060c2:	6123      	str	r3, [r4, #16]
 80060c4:	2300      	movs	r3, #0
 80060c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ca:	e7aa      	b.n	8006022 <_printf_i+0x14a>
 80060cc:	4632      	mov	r2, r6
 80060ce:	4649      	mov	r1, r9
 80060d0:	4640      	mov	r0, r8
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	47d0      	blx	sl
 80060d6:	3001      	adds	r0, #1
 80060d8:	d0ad      	beq.n	8006036 <_printf_i+0x15e>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	079b      	lsls	r3, r3, #30
 80060de:	d413      	bmi.n	8006108 <_printf_i+0x230>
 80060e0:	68e0      	ldr	r0, [r4, #12]
 80060e2:	9b03      	ldr	r3, [sp, #12]
 80060e4:	4298      	cmp	r0, r3
 80060e6:	bfb8      	it	lt
 80060e8:	4618      	movlt	r0, r3
 80060ea:	e7a6      	b.n	800603a <_printf_i+0x162>
 80060ec:	2301      	movs	r3, #1
 80060ee:	4632      	mov	r2, r6
 80060f0:	4649      	mov	r1, r9
 80060f2:	4640      	mov	r0, r8
 80060f4:	47d0      	blx	sl
 80060f6:	3001      	adds	r0, #1
 80060f8:	d09d      	beq.n	8006036 <_printf_i+0x15e>
 80060fa:	3501      	adds	r5, #1
 80060fc:	68e3      	ldr	r3, [r4, #12]
 80060fe:	9903      	ldr	r1, [sp, #12]
 8006100:	1a5b      	subs	r3, r3, r1
 8006102:	42ab      	cmp	r3, r5
 8006104:	dcf2      	bgt.n	80060ec <_printf_i+0x214>
 8006106:	e7eb      	b.n	80060e0 <_printf_i+0x208>
 8006108:	2500      	movs	r5, #0
 800610a:	f104 0619 	add.w	r6, r4, #25
 800610e:	e7f5      	b.n	80060fc <_printf_i+0x224>
 8006110:	08006455 	.word	0x08006455
 8006114:	08006466 	.word	0x08006466

08006118 <__malloc_lock>:
 8006118:	4801      	ldr	r0, [pc, #4]	@ (8006120 <__malloc_lock+0x8>)
 800611a:	f7ff bc6f 	b.w	80059fc <__retarget_lock_acquire_recursive>
 800611e:	bf00      	nop
 8006120:	20004510 	.word	0x20004510

08006124 <__malloc_unlock>:
 8006124:	4801      	ldr	r0, [pc, #4]	@ (800612c <__malloc_unlock+0x8>)
 8006126:	f7ff bc6a 	b.w	80059fe <__retarget_lock_release_recursive>
 800612a:	bf00      	nop
 800612c:	20004510 	.word	0x20004510

08006130 <_realloc_r>:
 8006130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006134:	4680      	mov	r8, r0
 8006136:	4615      	mov	r5, r2
 8006138:	460c      	mov	r4, r1
 800613a:	b921      	cbnz	r1, 8006146 <_realloc_r+0x16>
 800613c:	4611      	mov	r1, r2
 800613e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006142:	f7ff bdd7 	b.w	8005cf4 <_malloc_r>
 8006146:	b92a      	cbnz	r2, 8006154 <_realloc_r+0x24>
 8006148:	f000 f866 	bl	8006218 <_free_r>
 800614c:	2400      	movs	r4, #0
 800614e:	4620      	mov	r0, r4
 8006150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006154:	f000 f8a8 	bl	80062a8 <_malloc_usable_size_r>
 8006158:	4285      	cmp	r5, r0
 800615a:	4606      	mov	r6, r0
 800615c:	d802      	bhi.n	8006164 <_realloc_r+0x34>
 800615e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006162:	d8f4      	bhi.n	800614e <_realloc_r+0x1e>
 8006164:	4629      	mov	r1, r5
 8006166:	4640      	mov	r0, r8
 8006168:	f7ff fdc4 	bl	8005cf4 <_malloc_r>
 800616c:	4607      	mov	r7, r0
 800616e:	2800      	cmp	r0, #0
 8006170:	d0ec      	beq.n	800614c <_realloc_r+0x1c>
 8006172:	42b5      	cmp	r5, r6
 8006174:	462a      	mov	r2, r5
 8006176:	4621      	mov	r1, r4
 8006178:	bf28      	it	cs
 800617a:	4632      	movcs	r2, r6
 800617c:	f000 f83e 	bl	80061fc <memcpy>
 8006180:	4621      	mov	r1, r4
 8006182:	4640      	mov	r0, r8
 8006184:	f000 f848 	bl	8006218 <_free_r>
 8006188:	463c      	mov	r4, r7
 800618a:	e7e0      	b.n	800614e <_realloc_r+0x1e>

0800618c <memmove>:
 800618c:	4288      	cmp	r0, r1
 800618e:	b510      	push	{r4, lr}
 8006190:	eb01 0402 	add.w	r4, r1, r2
 8006194:	d902      	bls.n	800619c <memmove+0x10>
 8006196:	4284      	cmp	r4, r0
 8006198:	4623      	mov	r3, r4
 800619a:	d807      	bhi.n	80061ac <memmove+0x20>
 800619c:	1e43      	subs	r3, r0, #1
 800619e:	42a1      	cmp	r1, r4
 80061a0:	d008      	beq.n	80061b4 <memmove+0x28>
 80061a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061aa:	e7f8      	b.n	800619e <memmove+0x12>
 80061ac:	4601      	mov	r1, r0
 80061ae:	4402      	add	r2, r0
 80061b0:	428a      	cmp	r2, r1
 80061b2:	d100      	bne.n	80061b6 <memmove+0x2a>
 80061b4:	bd10      	pop	{r4, pc}
 80061b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061be:	e7f7      	b.n	80061b0 <memmove+0x24>

080061c0 <_sbrk_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	2300      	movs	r3, #0
 80061c4:	4d05      	ldr	r5, [pc, #20]	@ (80061dc <_sbrk_r+0x1c>)
 80061c6:	4604      	mov	r4, r0
 80061c8:	4608      	mov	r0, r1
 80061ca:	602b      	str	r3, [r5, #0]
 80061cc:	f7fb fc20 	bl	8001a10 <_sbrk>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_sbrk_r+0x1a>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b103      	cbz	r3, 80061da <_sbrk_r+0x1a>
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	2000451c 	.word	0x2000451c

080061e0 <memchr>:
 80061e0:	4603      	mov	r3, r0
 80061e2:	b510      	push	{r4, lr}
 80061e4:	b2c9      	uxtb	r1, r1
 80061e6:	4402      	add	r2, r0
 80061e8:	4293      	cmp	r3, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	d101      	bne.n	80061f2 <memchr+0x12>
 80061ee:	2000      	movs	r0, #0
 80061f0:	e003      	b.n	80061fa <memchr+0x1a>
 80061f2:	7804      	ldrb	r4, [r0, #0]
 80061f4:	3301      	adds	r3, #1
 80061f6:	428c      	cmp	r4, r1
 80061f8:	d1f6      	bne.n	80061e8 <memchr+0x8>
 80061fa:	bd10      	pop	{r4, pc}

080061fc <memcpy>:
 80061fc:	440a      	add	r2, r1
 80061fe:	4291      	cmp	r1, r2
 8006200:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006204:	d100      	bne.n	8006208 <memcpy+0xc>
 8006206:	4770      	bx	lr
 8006208:	b510      	push	{r4, lr}
 800620a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800620e:	4291      	cmp	r1, r2
 8006210:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006214:	d1f9      	bne.n	800620a <memcpy+0xe>
 8006216:	bd10      	pop	{r4, pc}

08006218 <_free_r>:
 8006218:	b538      	push	{r3, r4, r5, lr}
 800621a:	4605      	mov	r5, r0
 800621c:	2900      	cmp	r1, #0
 800621e:	d040      	beq.n	80062a2 <_free_r+0x8a>
 8006220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006224:	1f0c      	subs	r4, r1, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	bfb8      	it	lt
 800622a:	18e4      	addlt	r4, r4, r3
 800622c:	f7ff ff74 	bl	8006118 <__malloc_lock>
 8006230:	4a1c      	ldr	r2, [pc, #112]	@ (80062a4 <_free_r+0x8c>)
 8006232:	6813      	ldr	r3, [r2, #0]
 8006234:	b933      	cbnz	r3, 8006244 <_free_r+0x2c>
 8006236:	6063      	str	r3, [r4, #4]
 8006238:	6014      	str	r4, [r2, #0]
 800623a:	4628      	mov	r0, r5
 800623c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006240:	f7ff bf70 	b.w	8006124 <__malloc_unlock>
 8006244:	42a3      	cmp	r3, r4
 8006246:	d908      	bls.n	800625a <_free_r+0x42>
 8006248:	6820      	ldr	r0, [r4, #0]
 800624a:	1821      	adds	r1, r4, r0
 800624c:	428b      	cmp	r3, r1
 800624e:	bf01      	itttt	eq
 8006250:	6819      	ldreq	r1, [r3, #0]
 8006252:	685b      	ldreq	r3, [r3, #4]
 8006254:	1809      	addeq	r1, r1, r0
 8006256:	6021      	streq	r1, [r4, #0]
 8006258:	e7ed      	b.n	8006236 <_free_r+0x1e>
 800625a:	461a      	mov	r2, r3
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	b10b      	cbz	r3, 8006264 <_free_r+0x4c>
 8006260:	42a3      	cmp	r3, r4
 8006262:	d9fa      	bls.n	800625a <_free_r+0x42>
 8006264:	6811      	ldr	r1, [r2, #0]
 8006266:	1850      	adds	r0, r2, r1
 8006268:	42a0      	cmp	r0, r4
 800626a:	d10b      	bne.n	8006284 <_free_r+0x6c>
 800626c:	6820      	ldr	r0, [r4, #0]
 800626e:	4401      	add	r1, r0
 8006270:	1850      	adds	r0, r2, r1
 8006272:	4283      	cmp	r3, r0
 8006274:	6011      	str	r1, [r2, #0]
 8006276:	d1e0      	bne.n	800623a <_free_r+0x22>
 8006278:	6818      	ldr	r0, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	4408      	add	r0, r1
 800627e:	6010      	str	r0, [r2, #0]
 8006280:	6053      	str	r3, [r2, #4]
 8006282:	e7da      	b.n	800623a <_free_r+0x22>
 8006284:	d902      	bls.n	800628c <_free_r+0x74>
 8006286:	230c      	movs	r3, #12
 8006288:	602b      	str	r3, [r5, #0]
 800628a:	e7d6      	b.n	800623a <_free_r+0x22>
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	1821      	adds	r1, r4, r0
 8006290:	428b      	cmp	r3, r1
 8006292:	bf01      	itttt	eq
 8006294:	6819      	ldreq	r1, [r3, #0]
 8006296:	685b      	ldreq	r3, [r3, #4]
 8006298:	1809      	addeq	r1, r1, r0
 800629a:	6021      	streq	r1, [r4, #0]
 800629c:	6063      	str	r3, [r4, #4]
 800629e:	6054      	str	r4, [r2, #4]
 80062a0:	e7cb      	b.n	800623a <_free_r+0x22>
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	20004518 	.word	0x20004518

080062a8 <_malloc_usable_size_r>:
 80062a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ac:	1f18      	subs	r0, r3, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	bfbc      	itt	lt
 80062b2:	580b      	ldrlt	r3, [r1, r0]
 80062b4:	18c0      	addlt	r0, r0, r3
 80062b6:	4770      	bx	lr

080062b8 <_init>:
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	bf00      	nop
 80062bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062be:	bc08      	pop	{r3}
 80062c0:	469e      	mov	lr, r3
 80062c2:	4770      	bx	lr

080062c4 <_fini>:
 80062c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c6:	bf00      	nop
 80062c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ca:	bc08      	pop	{r3}
 80062cc:	469e      	mov	lr, r3
 80062ce:	4770      	bx	lr
